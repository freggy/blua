[{"FQCN":"org.bukkit.configuration.MemorySectionTest","methods":[],"desc":""},{"FQCN":"org.bukkit.configuration.MemoryConfigurationTest","methods":[],"desc":""},{"FQCN":"org.bukkit.configuration.file.FileConfigurationTest","methods":[],"desc":""},{"FQCN":"org.bukkit.configuration.file.YamlConfigurationTest","methods":[],"desc":""},{"FQCN":"org.bukkit.configuration.ConfigurationTest","methods":[{"name":"testAddDefault","params":[],"desc":"Test of addDefault method, of class Configuration.","ret":""},{"name":"testAddDefaults_Map","params":[],"desc":"Test of addDefaults method, of class Configuration.","ret":""},{"name":"testAddDefaults_Configuration","params":[],"desc":"Test of addDefaults method, of class Configuration.","ret":""},{"name":"testAddDefaults_Configuration_WithExisting","params":[],"desc":"Test of addDefaults method, of class Configuration but with existing\ndefaults in a child section.","ret":""},{"name":"testSetDefaults","params":[],"desc":"Test of setDefaults method, of class Configuration.","ret":""},{"name":"testCreateSection","params":[],"desc":"Test creation of ConfigurationSection","ret":""},{"name":"testGetDefaults","params":[],"desc":"Test of getDefaults method, of class Configuration.","ret":""}],"desc":""},{"FQCN":"org.bukkit.configuration.ConfigurationSectionTest","methods":[],"desc":""},{"FQCN":"org.bukkit.materials.MaterialDataTest","methods":[],"desc":""},{"FQCN":"org.bukkit.AnnotationTest","methods":[{"name":"isAnonymous","params":[{"name":"clazz","type":"ClassNode","desc":"the class to check"}],"desc":"Checks if the class is anonymous.","ret":"true if given class is anonymous"}],"desc":""},{"FQCN":"org.bukkit.MaterialTest","methods":[],"desc":""},{"FQCN":"org.bukkit.util.io.BukkitObjectStreamTest","methods":[],"desc":""},{"FQCN":"org.bukkit.util.StringUtilStartsWithTest","methods":[],"desc":""},{"FQCN":"org.bukkit.util.StringUtilTest","methods":[],"desc":""},{"FQCN":"org.bukkit.util.VectorTest","methods":[{"name":"testRotationAroundX","params":[],"desc":"As west to east are the x axis in Minecraft, rotating around it from up\nshould lead to up -> south -> down -> north.","ret":""},{"name":"testRotationAroundY","params":[],"desc":"As up to down are the y axis in Minecraft, rotating around it from up\nshould lead to east (positive x) -> south -> west -> north.","ret":""},{"name":"testRotationAroundYUsingCustomAxis","params":[],"desc":"As up to down are the y axis in Minecraft, rotating around it from up\nshould lead to east (positive x) -> south -> west -> north.","ret":""},{"name":"testRotationAroundZ","params":[],"desc":"As south to north are the z axis in Minecraft, rotating around it from up\nshould lead to up (positive y) -> west -> down -> east.","ret":""},{"name":"testRotationAroundCustomAngle","params":[],"desc":"This will be a bit tricky to prove so we will try to simply see if the\nvectors have correct angle to each other This will work with any two\nvectors, as the rotation will keep the angle the same.","ret":""}],"desc":""},{"FQCN":"org.bukkit.util.BoundingBoxTest","methods":[],"desc":""},{"FQCN":"org.bukkit.LocationTest","methods":[],"desc":""},{"FQCN":"org.bukkit.entity.memory.MemoryKeyTest","methods":[],"desc":""},{"FQCN":"org.bukkit.DifficultyTest","methods":[],"desc":""},{"FQCN":"org.bukkit.plugin.TestPlugin","methods":[],"desc":""},{"FQCN":"org.bukkit.plugin.TimedRegisteredListenerTest","methods":[],"desc":""},{"FQCN":"org.bukkit.plugin.messaging.StandardMessengerTest","methods":[],"desc":""},{"FQCN":"org.bukkit.plugin.messaging.TestMessageListener","methods":[],"desc":""},{"FQCN":"org.bukkit.CoalTypeTest","methods":[],"desc":""},{"FQCN":"org.bukkit.BukkitMirrorTest","methods":[],"desc":""},{"FQCN":"org.bukkit.ArtTest","methods":[],"desc":""},{"FQCN":"org.bukkit.EffectTest","methods":[],"desc":""},{"FQCN":"org.bukkit.scoreboard.CriteriaTest","methods":[],"desc":""},{"FQCN":"org.bukkit.support.AbstractTestingBase","methods":[],"desc":" If you are getting: java.lang.ExceptionInInitializerError\n\n extend this class to solve it."},{"FQCN":"org.bukkit.support.MatcherAssert","methods":[],"desc":"Custom assertThat methods, where the reason is put at the end of the method call.\nTo better match with JUnit 5 argument order and also help with readability for longer reasons.\n<br>\n<pre>\nassertThat(String.format(\"\"\"\n        The block data created for the material %s is not an instance of the data class from that material.\n        \"\"\", material), blockData, is(instanceOf(expectedClass)));\n</pre>\nvs.\n<pre>\nassertThat(blockData, is(instanceOf(expectedClass)), String.format(\"\"\"\n        The block data created for the material %s is not an instance of the data class from that material.\n        \"\"\", material));\n</pre>"},{"FQCN":"org.bukkit.support.TestServer","methods":[],"desc":""},{"FQCN":"org.bukkit.NamespacedKeyTest","methods":[],"desc":""},{"FQCN":"org.bukkit.conversations.ConversationContextTest","methods":[],"desc":""},{"FQCN":"org.bukkit.conversations.ConversationTest","methods":[],"desc":""},{"FQCN":"org.bukkit.conversations.ValidatingPromptTest","methods":[],"desc":""},{"FQCN":"org.bukkit.conversations.FakeConversable","methods":[],"desc":""},{"FQCN":"org.bukkit.ChatPaginatorTest","methods":[],"desc":""},{"FQCN":"org.bukkit.TreeSpeciesTest","methods":[],"desc":""},{"FQCN":"org.bukkit.ColorTest","methods":[],"desc":""},{"FQCN":"org.bukkit.NoteTest","methods":[],"desc":""},{"FQCN":"org.bukkit.CropStateTest","methods":[],"desc":""},{"FQCN":"org.bukkit.LastChatColorTest","methods":[],"desc":""},{"FQCN":"org.bukkit.ChatColorTest","methods":[],"desc":""},{"FQCN":"org.bukkit.GrassSpeciesTest","methods":[],"desc":""},{"FQCN":"org.bukkit.event.PlayerChatTabCompleteEventTest","methods":[],"desc":""},{"FQCN":"org.bukkit.event.TestEvent","methods":[],"desc":""},{"FQCN":"org.bukkit.GameModeTest","methods":[],"desc":""},{"FQCN":"org.bukkit.metadata.MetadataConversionTest","methods":[],"desc":""},{"FQCN":"org.bukkit.metadata.FixedMetadataValueTest","methods":[],"desc":""},{"FQCN":"org.bukkit.metadata.MetadataValueAdapterTest","methods":[{"name":"testBooleanConversion","params":[],"desc":"Boolean conversion is non-trivial, we want to test it thoroughly.","ret":""},{"name":"testStringConversionNull","params":[],"desc":"Test String conversions return an empty string when given null.","ret":""},{"name":"simpleValue","params":[{"name":"value","type":"Object","desc":"the value to wrap"}],"desc":"Get a fixed value MetadataValue.","ret":"the fixed value"}],"desc":""},{"FQCN":"org.bukkit.metadata.MetadataStoreTest","methods":[],"desc":""},{"FQCN":"org.bukkit.metadata.LazyMetadataValueTest","methods":[],"desc":""},{"FQCN":"org.bukkit.DyeColorTest","methods":[],"desc":""},{"FQCN":"org.bukkit.InstrumentTest","methods":[],"desc":""},{"FQCN":"org.bukkit.WorldTypeTest","methods":[],"desc":""},{"FQCN":"io.papermc.paper.util.TickTest","methods":[],"desc":""},{"FQCN":"io.papermc.paper.EntityTagsTest","methods":[],"desc":""},{"FQCN":"io.papermc.paper.adventure.KeyTest","methods":[],"desc":""},{"FQCN":"io.papermc.paper.testing.EmptyTag","methods":[],"desc":""},{"FQCN":"com.destroystokyo.paper.MaterialTagsTest","methods":[],"desc":""},{"FQCN":"org.bukkit.UndefinedNullability","methods":[],"desc":"Annotation for types, whose nullability is not well defined, so\n{@link org.jetbrains.annotations.NotNull} nor\n{@link org.jetbrains.annotations.Nullable} is applicable. For example when\ninterface defines a method, whose nullability depends on the implementation."},{"FQCN":"org.bukkit.NetherWartsState","methods":[],"desc":""},{"FQCN":"org.bukkit.WeatherType","methods":[],"desc":"An enum of all current weather types"},{"FQCN":"org.bukkit.GrassSpecies","methods":[{"name":"getData","params":[],"desc":"Gets the associated data value representing this species","ret":"A byte containing the data value of this grass species"},{"name":"getByData","params":[{"name":"data","type":"byte","desc":"Data value to fetch"}],"desc":"Gets the GrassSpecies with the given data value","ret":"The {@link GrassSpecies} representing the given value, or null\n    if it doesn't exist"}],"desc":"Represents the different types of grass."},{"FQCN":"org.bukkit.WorldType","methods":[{"name":"getName","params":[],"desc":"Gets the name of this WorldType","ret":"Name of this type"},{"name":"getByName","params":[{"name":"name","type":"String","desc":"Name of the WorldType to get"}],"desc":"Gets a WorldType by its name","ret":"Requested WorldType, or null if not found"}],"desc":"Represents various types of worlds that may exist"},{"FQCN":"org.bukkit.configuration.InvalidConfigurationException","methods":[],"desc":"Exception thrown when attempting to load an invalid {@link Configuration}"},{"FQCN":"org.bukkit.configuration.file.YamlRepresenter","methods":[],"desc":""},{"FQCN":"org.bukkit.configuration.file.FileConfigurationOptions","methods":[{"name":"getHeader","params":[],"desc":"Gets the header that will be applied to the top of the saved output.\n<p>\nThis header will be commented out and applied directly at the top of\nthe generated output of the {@link FileConfiguration}. It is not\nrequired to include a newline at the end of the header as it will\nautomatically be applied, but you may include one if you wish for extra\nspacing.\n<p>\nIf no comments exist, an empty list will be returned. A null entry\nrepresents an empty line and an empty String represents an empty comment\nline.","ret":"Unmodifiable header, every entry represents one line."},{"name":"header","params":[],"desc":"","ret":"The string header."},{"name":"setHeader","params":[{"name":"value","type":"List<String>","desc":"New header, every entry represents one line."}],"desc":"Sets the header that will be applied to the top of the saved output.\n<p>\nThis header will be commented out and applied directly at the top of\nthe generated output of the {@link FileConfiguration}. It is not\nrequired to include a newline at the end of the header as it will\nautomatically be applied, but you may include one if you wish for extra\nspacing.\n<p>\nIf no comments exist, an empty list will be returned. A null entry\nrepresents an empty line and an empty String represents an empty comment\nline.","ret":"This object, for chaining"},{"name":"header","params":[{"name":"value","type":"String","desc":"The string header."}],"desc":"","ret":"This object, for chaining."},{"name":"getFooter","params":[],"desc":"Gets the footer that will be applied to the bottom of the saved output.\n<p>\nThis footer will be commented out and applied directly at the bottom of\nthe generated output of the {@link FileConfiguration}. It is not required\nto include a newline at the beginning of the footer as it will\nautomatically be applied, but you may include one if you wish for extra\nspacing.\n<p>\nIf no comments exist, an empty list will be returned. A null entry\nrepresents an empty line and an empty String represents an empty comment\nline.","ret":"Unmodifiable footer, every entry represents one line."},{"name":"setFooter","params":[{"name":"value","type":"List<String>","desc":"New footer, every entry represents one line."}],"desc":"Sets the footer that will be applied to the bottom of the saved output.\n<p>\nThis footer will be commented out and applied directly at the bottom of\nthe generated output of the {@link FileConfiguration}. It is not required\nto include a newline at the beginning of the footer as it will\nautomatically be applied, but you may include one if you wish for extra\nspacing.\n<p>\nIf no comments exist, an empty list will be returned. A null entry\nrepresents an empty line and an empty String represents an empty comment\nline.","ret":"This object, for chaining"},{"name":"parseComments","params":[],"desc":"Gets whether or not comments should be loaded and saved.\n<p>\nDefaults to true.","ret":"Whether or not comments are parsed."},{"name":"parseComments","params":[{"name":"value","type":"boolean","desc":"Whether or not comments are parsed."}],"desc":"Sets whether or not comments should be loaded and saved.\n<p>\nDefaults to true.","ret":"This object, for chaining"},{"name":"copyHeader","params":[],"desc":"","ret":"Whether or not comments are parsed."},{"name":"copyHeader","params":[{"name":"value","type":"boolean","desc":"Should comments be parsed."}],"desc":"","ret":"This object, for chaining"}],"desc":"Various settings for controlling the input and output of a {@link\nFileConfiguration}"},{"FQCN":"org.bukkit.configuration.file.YamlConstructor","methods":[],"desc":""},{"FQCN":"org.bukkit.configuration.file.YamlConfigurationOptions","methods":[{"name":"indent","params":[],"desc":"Gets how much spaces should be used to indent each line.\n<p>\nThe minimum value this may be is 2, and the maximum is 9.","ret":"How much to indent by"},{"name":"indent","params":[{"name":"value","type":"int","desc":"New indent"}],"desc":"Sets how much spaces should be used to indent each line.\n<p>\nThe minimum value this may be is 2, and the maximum is 9.","ret":"This object, for chaining"},{"name":"width","params":[],"desc":"Gets how long a line can be, before it gets split.","ret":"How the max line width"},{"name":"width","params":[{"name":"value","type":"int","desc":"New width"}],"desc":"Sets how long a line can be, before it gets split.","ret":"This object, for chaining"},{"name":"codePointLimit","params":[],"desc":"Gets the maximum code point limit, that being, the maximum length of the document\nin which the loader will read","ret":"The current value"},{"name":"codePointLimit","params":[{"name":"codePointLimit","type":"int","desc":"new codepoint limit"}],"desc":"Sets the maximum code point limit, that being, the maximum length of the document\nin which the loader will read","ret":"This object, for chaining"}],"desc":"Various settings for controlling the input and output of a {@link\nYamlConfiguration}"},{"FQCN":"org.bukkit.configuration.file.FileConfiguration","methods":[{"name":"save","params":[{"name":"file","type":"File","desc":"File to save to."}],"desc":"Saves this {@link FileConfiguration} to the specified location.\n<p>\nIf the file does not exist, it will be created. If already exists, it\nwill be overwritten. If it cannot be overwritten or created, an\nexception will be thrown.\n<p>\nThis method will save using the system default encoding, or possibly\nusing UTF8.","ret":""},{"name":"save","params":[{"name":"file","type":"String","desc":"File to save to."}],"desc":"Saves this {@link FileConfiguration} to the specified location.\n<p>\nIf the file does not exist, it will be created. If already exists, it\nwill be overwritten. If it cannot be overwritten or created, an\nexception will be thrown.\n<p>\nThis method will save using the system default encoding, or possibly\nusing UTF8.","ret":""},{"name":"saveToString","params":[],"desc":"Saves this {@link FileConfiguration} to a string, and returns it.","ret":"String containing this configuration."},{"name":"load","params":[{"name":"file","type":"File","desc":"File to load from."}],"desc":"Loads this {@link FileConfiguration} from the specified location.\n<p>\nAll the values contained within this configuration will be removed,\nleaving only settings and defaults, and the new values will be loaded\nfrom the given file.\n<p>\nIf the file cannot be loaded for any reason, an exception will be\nthrown.","ret":""},{"name":"load","params":[{"name":"reader","type":"Reader","desc":"the reader to load from"}],"desc":"Loads this {@link FileConfiguration} from the specified reader.\n<p>\nAll the values contained within this configuration will be removed,\nleaving only settings and defaults, and the new values will be loaded\nfrom the given stream.","ret":""},{"name":"load","params":[{"name":"file","type":"String","desc":"File to load from."}],"desc":"Loads this {@link FileConfiguration} from the specified location.\n<p>\nAll the values contained within this configuration will be removed,\nleaving only settings and defaults, and the new values will be loaded\nfrom the given file.\n<p>\nIf the file cannot be loaded for any reason, an exception will be\nthrown.","ret":""},{"name":"loadFromString","params":[{"name":"contents","type":"String","desc":"Contents of a Configuration to load."}],"desc":"Loads this {@link FileConfiguration} from the specified string, as\nopposed to from file.\n<p>\nAll the values contained within this configuration will be removed,\nleaving only settings and defaults, and the new values will be loaded\nfrom the given string.\n<p>\nIf the string is invalid in any way, an exception will be thrown.","ret":""},{"name":"buildHeader","params":[],"desc":"","ret":"empty string"}],"desc":"This is a base class for all File based implementations of {@link\nConfiguration}"},{"FQCN":"org.bukkit.configuration.file.YamlConfiguration","methods":[{"name":"adjustNodeComments","params":[{"name":"node","type":"MappingNode","desc":"The root node of the yaml object"}],"desc":"This method splits the header on the last empty line, and sets the\ncomments below this line as comments for the first key on the map object.","ret":""},{"name":"loadHeader","params":[{"name":"header","type":"List<String>","desc":"The list of heading comments"}],"desc":"Removes the empty line at the end of the header that separates the header\nfrom further comments. Also removes all empty header starts (backwards\ncompat).","ret":"The modified list"},{"name":"saveHeader","params":[{"name":"header","type":"List<String>","desc":"The list of heading comments"}],"desc":"Adds the empty line at the end of the header that separates the header\nfrom further comments.","ret":"The modified list"},{"name":"loadConfiguration","params":[{"name":"file","type":"File","desc":"Input file"}],"desc":"Creates a new {@link YamlConfiguration}, loading from the given file.\n<p>\nAny errors loading the Configuration will be logged and then ignored.\nIf the specified input is not a valid config, a blank config will be\nreturned.\n<p>\nThe encoding used may follow the system dependent default.","ret":"Resulting configuration"},{"name":"loadConfiguration","params":[{"name":"reader","type":"Reader","desc":"input"}],"desc":"Creates a new {@link YamlConfiguration}, loading from the given reader.\n<p>\nAny errors loading the Configuration will be logged and then ignored.\nIf the specified input is not a valid config, a blank config will be\nreturned.","ret":"resulting configuration"}],"desc":"An implementation of {@link Configuration} which saves all files in Yaml.\nNote that this implementation is not synchronized."},{"FQCN":"org.bukkit.configuration.MemoryConfigurationOptions","methods":[],"desc":"Various settings for controlling the input and output of a {@link\nMemoryConfiguration}"},{"FQCN":"org.bukkit.configuration.serialization.ConfigurationSerialization","methods":[{"name":"deserializeObject","params":[{"name":"args","type":"Map<String,?>","desc":"Arguments for deserialization"},{"name":"clazz","type":"Class<? extends ConfigurationSerializable>","desc":"Class to deserialize into"}],"desc":"Attempts to deserialize the given arguments into a new instance of the\ngiven class.\n<p>\nThe class must implement {@link ConfigurationSerializable}, including\nthe extra methods as specified in the javadoc of\nConfigurationSerializable.\n<p>\nIf a new instance could not be made, an example being the class not\nfully implementing the interface, null will be returned.","ret":"New instance of the specified class"},{"name":"deserializeObject","params":[{"name":"args","type":"Map<String,?>","desc":"Arguments for deserialization"}],"desc":"Attempts to deserialize the given arguments into a new instance of the\ngiven class.\n<p>\nThe class must implement {@link ConfigurationSerializable}, including\nthe extra methods as specified in the javadoc of\nConfigurationSerializable.\n<p>\nIf a new instance could not be made, an example being the class not\nfully implementing the interface, null will be returned.","ret":"New instance of the specified class"},{"name":"registerClass","params":[{"name":"clazz","type":"Class<? extends ConfigurationSerializable>","desc":"Class to register"}],"desc":"Registers the given {@link ConfigurationSerializable} class by its\nalias","ret":""},{"name":"registerClass","params":[{"name":"clazz","type":"Class<? extends ConfigurationSerializable>","desc":"Class to register"},{"name":"alias","type":"String","desc":"Alias to register as"}],"desc":"Registers the given alias to the specified {@link\nConfigurationSerializable} class","ret":""},{"name":"unregisterClass","params":[{"name":"alias","type":"String","desc":"Alias to unregister"}],"desc":"Unregisters the specified alias to a {@link ConfigurationSerializable}","ret":""},{"name":"unregisterClass","params":[{"name":"clazz","type":"Class<? extends ConfigurationSerializable>","desc":"Class to unregister"}],"desc":"Unregisters any aliases for the specified {@link\nConfigurationSerializable} class","ret":""},{"name":"getClassByAlias","params":[{"name":"alias","type":"String","desc":"Alias of the serializable"}],"desc":"Attempts to get a registered {@link ConfigurationSerializable} class by\nits alias","ret":"Registered class, or null if not found"},{"name":"getAlias","params":[{"name":"clazz","type":"Class<? extends ConfigurationSerializable>","desc":"Class to get alias for"}],"desc":"Gets the correct alias for the given {@link ConfigurationSerializable}\nclass","ret":"Alias to use for the class"}],"desc":"Utility class for storing and retrieving classes for {@link Configuration}."},{"FQCN":"org.bukkit.configuration.serialization.DelegateDeserialization","methods":[],"desc":"Applies to a {@link ConfigurationSerializable} that will delegate all\ndeserialization to another {@link ConfigurationSerializable}."},{"FQCN":"org.bukkit.configuration.serialization.ConfigurationSerializable","methods":[{"name":"serialize","params":[],"desc":"Creates a Map representation of this class.\n<p>\nThis class must provide a method to restore this class, as defined in\nthe {@link ConfigurationSerializable} interface javadocs.","ret":"Map containing the current state of this class"}],"desc":"Represents an object that may be serialized.\n<p>\nThese objects MUST implement one of the following, in addition to the\nmethods as defined by this interface:\n<ul>\n<li>A static method \"deserialize\" that accepts a single {@link Map}&lt;\n{@link String}, {@link Object}&gt; and returns the class.</li>\n<li>A static method \"valueOf\" that accepts a single {@link Map}&lt;{@link\nString}, {@link Object}&gt; and returns the class.</li>\n<li>A constructor that accepts a single {@link Map}&lt;{@link String},\n{@link Object}&gt;.</li>\n</ul>\nIn addition to implementing this interface, you must register the class\nwith {@link ConfigurationSerialization#registerClass(Class)}."},{"FQCN":"org.bukkit.configuration.serialization.SerializableAs","methods":[],"desc":"Represents an \"alias\" that a {@link ConfigurationSerializable} may be\nstored as.\nIf this is not present on a {@link ConfigurationSerializable} class, it\nwill use the fully qualified name of the class.\n<p>\nThis value will be stored in the configuration so that the configuration\ndeserialization can determine what type it is.\n<p>\nUsing this annotation on any other class than a {@link\nConfigurationSerializable} will have no effect."},{"FQCN":"org.bukkit.configuration.MemorySection","methods":[{"name":"createPath","params":[{"name":"section","type":"ConfigurationSection","desc":"Section to create a path for."},{"name":"key","type":"String","desc":"Name of the specified section."}],"desc":"Creates a full path to the given {@link ConfigurationSection} from its\nroot {@link Configuration}.\n<p>\nYou may use this method for any given {@link ConfigurationSection}, not\nonly {@link MemorySection}.","ret":"Full path of the section from its root."},{"name":"createPath","params":[{"name":"section","type":"ConfigurationSection","desc":"Section to create a path for."},{"name":"key","type":"String","desc":"Name of the specified section."},{"name":"relativeTo","type":"ConfigurationSection","desc":"Section to create the path relative to."}],"desc":"Creates a relative path to the given {@link ConfigurationSection} from\nthe given relative section.\n<p>\nYou may use this method for any given {@link ConfigurationSection}, not\nonly {@link MemorySection}.","ret":"Full path of the section from its root."}],"desc":"A type of {@link ConfigurationSection} that is stored in memory."},{"FQCN":"org.bukkit.configuration.MemoryConfiguration","methods":[],"desc":"This is a {@link Configuration} implementation that does not save or load\nfrom any source, and stores all values in memory only.\nThis is useful for temporary Configurations for providing defaults."},{"FQCN":"org.bukkit.configuration.Configuration","methods":[{"name":"addDefault","params":[{"name":"path","type":"String","desc":"Path of the value to set."},{"name":"value","type":"Object","desc":"Value to set the default to."}],"desc":"Sets the default value of the given path as provided.\n<p>\nIf no source {@link Configuration} was provided as a default\ncollection, then a new {@link MemoryConfiguration} will be created to\nhold the new default value.\n<p>\nIf value is null, the value will be removed from the default\nConfiguration source.","ret":""},{"name":"addDefaults","params":[{"name":"defaults","type":"Map<String,Object>","desc":"A map of Path{@literal ->}Values to add to defaults."}],"desc":"Sets the default values of the given paths as provided.\n<p>\nIf no source {@link Configuration} was provided as a default\ncollection, then a new {@link MemoryConfiguration} will be created to\nhold the new default values.","ret":""},{"name":"addDefaults","params":[{"name":"defaults","type":"Configuration","desc":"A configuration holding a list of defaults to copy."}],"desc":"Sets the default values of the given paths as provided.\n<p>\nIf no source {@link Configuration} was provided as a default\ncollection, then a new {@link MemoryConfiguration} will be created to\nhold the new default value.\n<p>\nThis method will not hold a reference to the specified Configuration,\nnor will it automatically update if that Configuration ever changes. If\nyou require this, you should set the default source with {@link\n#setDefaults(org.bukkit.configuration.Configuration)}.","ret":""},{"name":"setDefaults","params":[{"name":"defaults","type":"Configuration","desc":"New source of default values for this configuration."}],"desc":"Sets the source of all default values for this {@link Configuration}.\n<p>\nIf a previous source was set, or previous default values were defined,\nthen they will not be copied to the new source.","ret":""},{"name":"getDefaults","params":[],"desc":"Gets the source {@link Configuration} for this configuration.\n<p>\nIf no configuration source was set, but default values were added, then\na {@link MemoryConfiguration} will be returned. If no source was set\nand no defaults were set, then this method will return null.","ret":"Configuration source for default values, or null if none exist."},{"name":"options","params":[],"desc":"Gets the {@link ConfigurationOptions} for this {@link Configuration}.\n<p>\nAll setters through this method are chainable.","ret":"Options for this configuration"}],"desc":"Represents a source of configurable options and settings"},{"FQCN":"org.bukkit.configuration.ConfigurationOptions","methods":[{"name":"configuration","params":[],"desc":"Returns the {@link Configuration} that this object is responsible for.","ret":"Parent configuration"},{"name":"pathSeparator","params":[],"desc":"Gets the char that will be used to separate {@link\nConfigurationSection}s\n<p>\nThis value does not affect how the {@link Configuration} is stored,\nonly in how you access the data. The default value is '.'.","ret":"Path separator"},{"name":"pathSeparator","params":[{"name":"value","type":"char","desc":"Path separator"}],"desc":"Sets the char that will be used to separate {@link\nConfigurationSection}s\n<p>\nThis value does not affect how the {@link Configuration} is stored,\nonly in how you access the data. The default value is '.'.","ret":"This object, for chaining"},{"name":"copyDefaults","params":[],"desc":"Checks if the {@link Configuration} should copy values from its default\n{@link Configuration} directly.\n<p>\nIf this is true, all values in the default Configuration will be\ndirectly copied, making it impossible to distinguish between values\nthat were set and values that are provided by default. As a result,\n{@link ConfigurationSection#contains(java.lang.String)} will always\nreturn the same value as {@link\nConfigurationSection#isSet(java.lang.String)}. The default value is\nfalse.","ret":"Whether or not defaults are directly copied"},{"name":"copyDefaults","params":[{"name":"value","type":"boolean","desc":"Whether or not defaults are directly copied"}],"desc":"Sets if the {@link Configuration} should copy values from its default\n{@link Configuration} directly.\n<p>\nIf this is true, all values in the default Configuration will be\ndirectly copied, making it impossible to distinguish between values\nthat were set and values that are provided by default. As a result,\n{@link ConfigurationSection#contains(java.lang.String)} will always\nreturn the same value as {@link\nConfigurationSection#isSet(java.lang.String)}. The default value is\nfalse.","ret":"This object, for chaining"}],"desc":"Various settings for controlling the input and output of a {@link\nConfiguration}"},{"FQCN":"org.bukkit.configuration.SectionPathData","methods":[{"name":"getComments","params":[],"desc":"If no comments exist, an empty list will be returned. A null entry in the\nlist represents an empty line and an empty String represents an empty\ncomment line.","ret":"A unmodifiable list of the requested comments, every entry\nrepresents one line."},{"name":"setComments","params":[{"name":"comments","type":"List<String>","desc":"New comments to set every entry represents one line."}],"desc":"Represents the comments on a {@link ConfigurationSection} entry.\n\nA null entry in the List is an empty line and an empty String entry is an\nempty comment line. Any existing comments will be replaced, regardless of\nwhat the new comments are.","ret":""},{"name":"getInlineComments","params":[],"desc":"If no comments exist, an empty list will be returned. A null entry in the\nlist represents an empty line and an empty String represents an empty\ncomment line.","ret":"A unmodifiable list of the requested comments, every entry\nrepresents one line."},{"name":"setInlineComments","params":[{"name":"inlineComments","type":"List<String>","desc":"New comments to set every entry represents one\nline."}],"desc":"Represents the comments on a {@link ConfigurationSection} entry.\n\nA null entry in the List is an empty line and an empty String entry is an\nempty comment line. Any existing comments will be replaced, regardless of\nwhat the new comments are.","ret":""}],"desc":""},{"FQCN":"org.bukkit.configuration.ConfigurationSection","methods":[{"name":"getKeys","params":[{"name":"deep","type":"boolean","desc":"Whether or not to get a deep list, as opposed to a shallow\n    list."}],"desc":"Gets a set containing all keys in this section.\n<p>\nIf deep is set to true, then this will contain all the keys within any\nchild {@link ConfigurationSection}s (and their children, etc). These\nwill be in a valid path notation for you to use.\n<p>\nIf deep is set to false, then this will contain only the keys of any\ndirect children, and not their own children.","ret":"Set of keys contained within this ConfigurationSection."},{"name":"getValues","params":[{"name":"deep","type":"boolean","desc":"Whether or not to get a deep list, as opposed to a shallow\n    list."}],"desc":"Gets a Map containing all keys and their values for this section.\n<p>\nIf deep is set to true, then this will contain all the keys and values\nwithin any child {@link ConfigurationSection}s (and their children,\netc). These keys will be in a valid path notation for you to use.\n<p>\nIf deep is set to false, then this will contain only the keys and\nvalues of any direct children, and not their own children.","ret":"Map of keys and values of this section."},{"name":"contains","params":[{"name":"path","type":"String","desc":"Path to check for existence."}],"desc":"Checks if this {@link ConfigurationSection} contains the given path.\n<p>\nIf the value for the requested path does not exist but a default value\nhas been specified, this will return true.","ret":"True if this section contains the requested path, either via\n    default or being set."},{"name":"contains","params":[{"name":"path","type":"String","desc":"Path to check for existence."},{"name":"ignoreDefault","type":"boolean","desc":"Whether or not to ignore if a default value for the\nspecified path exists."}],"desc":"Checks if this {@link ConfigurationSection} contains the given path.\n<p>\nIf the value for the requested path does not exist, the boolean parameter\nof true has been specified, a default value for the path exists, this\nwill return true.\n<p>\nIf a boolean parameter of false has been specified, true will only be\nreturned if there is a set value for the specified path.","ret":"True if this section contains the requested path, or if a default\nvalue exist and the boolean parameter for this method is true."},{"name":"isSet","params":[{"name":"path","type":"String","desc":"Path to check for existence."}],"desc":"Checks if this {@link ConfigurationSection} has a value set for the\ngiven path.\n<p>\nIf the value for the requested path does not exist but a default value\nhas been specified, this will still return false.","ret":"True if this section contains the requested path, regardless of\n    having a default."},{"name":"getCurrentPath","params":[],"desc":"Gets the path of this {@link ConfigurationSection} from its root {@link\nConfiguration}\n<p>\nFor any {@link Configuration} themselves, this will return an empty\nstring.\n<p>\nIf the section is no longer contained within its root for any reason,\nsuch as being replaced with a different value, this may return null.\n<p>\nTo retrieve the single name of this section, that is, the final part of\nthe path returned by this method, you may use {@link #getName()}.","ret":"Path of this section relative to its root"},{"name":"getName","params":[],"desc":"Gets the name of this individual {@link ConfigurationSection}, in the\npath.\n<p>\nThis will always be the final part of {@link #getCurrentPath()}, unless\nthe section is orphaned.","ret":"Name of this section"},{"name":"getRoot","params":[],"desc":"Gets the root {@link Configuration} that contains this {@link\nConfigurationSection}\n<p>\nFor any {@link Configuration} themselves, this will return its own\nobject.\n<p>\nIf the section is no longer contained within its root for any reason,\nsuch as being replaced with a different value, this may return null.","ret":"Root configuration containing this section."},{"name":"getParent","params":[],"desc":"Gets the parent {@link ConfigurationSection} that directly contains\nthis {@link ConfigurationSection}.\n<p>\nFor any {@link Configuration} themselves, this will return null.\n<p>\nIf the section is no longer contained within its parent for any reason,\nsuch as being replaced with a different value, this may return null.","ret":"Parent section containing this section."},{"name":"get","params":[{"name":"path","type":"String","desc":"Path of the Object to get."}],"desc":"Gets the requested Object by path.\n<p>\nIf the Object does not exist but a default value has been specified,\nthis will return the default value. If the Object does not exist and no\ndefault value was specified, this will return null.","ret":"Requested Object."},{"name":"get","params":[{"name":"path","type":"String","desc":"Path of the Object to get."},{"name":"def","type":"Object","desc":"The default value to return if the path is not found."}],"desc":"Gets the requested Object by path, returning a default value if not\nfound.\n<p>\nIf the Object does not exist then the specified default value will\nreturned regardless of if a default has been identified in the root\n{@link Configuration}.","ret":"Requested Object."},{"name":"set","params":[{"name":"path","type":"String","desc":"Path of the object to set."},{"name":"value","type":"Object","desc":"New value to set the path to."}],"desc":"Sets the specified path to the given value.\n<p>\nIf value is null, the entry will be removed. Any existing entry will be\nreplaced, regardless of what the new value is.\n<p>\nSome implementations may have limitations on what you may store. See\ntheir individual javadocs for details. No implementations should allow\nyou to store {@link Configuration}s or {@link ConfigurationSection}s,\nplease use {@link #createSection(java.lang.String)} for that.","ret":""},{"name":"createSection","params":[{"name":"path","type":"String","desc":"Path to create the section at."}],"desc":"Creates an empty {@link ConfigurationSection} at the specified path.\n<p>\nAny value that was previously set at this path will be overwritten. If\nthe previous value was itself a {@link ConfigurationSection}, it will\nbe orphaned.","ret":"Newly created section"},{"name":"createSection","params":[{"name":"path","type":"String","desc":"Path to create the section at."},{"name":"map","type":"Map<?,?>","desc":"The values to used."}],"desc":"Creates a {@link ConfigurationSection} at the specified path, with\nspecified values.\n<p>\nAny value that was previously set at this path will be overwritten. If\nthe previous value was itself a {@link ConfigurationSection}, it will\nbe orphaned.","ret":"Newly created section"},{"name":"getString","params":[{"name":"path","type":"String","desc":"Path of the String to get."}],"desc":"Gets the requested String by path.\n<p>\nIf the String does not exist but a default value has been specified,\nthis will return the default value. If the String does not exist and no\ndefault value was specified, this will return null.","ret":"Requested String."},{"name":"getString","params":[{"name":"path","type":"String","desc":"Path of the String to get."},{"name":"def","type":"String","desc":"The default value to return if the path is not found or is\n    not a String."}],"desc":"Gets the requested String by path, returning a default value if not\nfound.\n<p>\nIf the String does not exist then the specified default value will\nreturned regardless of if a default has been identified in the root\n{@link Configuration}.","ret":"Requested String."},{"name":"isString","params":[{"name":"path","type":"String","desc":"Path of the String to check."}],"desc":"Checks if the specified path is a String.\n<p>\nIf the path exists but is not a String, this will return false. If the\npath does not exist, this will return false. If the path does not exist\nbut a default value has been specified, this will check if that default\nvalue is a String and return appropriately.","ret":"Whether or not the specified path is a String."},{"name":"getInt","params":[{"name":"path","type":"String","desc":"Path of the int to get."}],"desc":"Gets the requested int by path.\n<p>\nIf the int does not exist but a default value has been specified, this\nwill return the default value. If the int does not exist and no default\nvalue was specified, this will return 0.","ret":"Requested int."},{"name":"getInt","params":[{"name":"path","type":"String","desc":"Path of the int to get."},{"name":"def","type":"int","desc":"The default value to return if the path is not found or is\n    not an int."}],"desc":"Gets the requested int by path, returning a default value if not found.\n<p>\nIf the int does not exist then the specified default value will\nreturned regardless of if a default has been identified in the root\n{@link Configuration}.","ret":"Requested int."},{"name":"isInt","params":[{"name":"path","type":"String","desc":"Path of the int to check."}],"desc":"Checks if the specified path is an int.\n<p>\nIf the path exists but is not a int, this will return false. If the\npath does not exist, this will return false. If the path does not exist\nbut a default value has been specified, this will check if that default\nvalue is a int and return appropriately.","ret":"Whether or not the specified path is an int."},{"name":"getBoolean","params":[{"name":"path","type":"String","desc":"Path of the boolean to get."}],"desc":"Gets the requested boolean by path.\n<p>\nIf the boolean does not exist but a default value has been specified,\nthis will return the default value. If the boolean does not exist and\nno default value was specified, this will return false.","ret":"Requested boolean."},{"name":"getBoolean","params":[{"name":"path","type":"String","desc":"Path of the boolean to get."},{"name":"def","type":"boolean","desc":"The default value to return if the path is not found or is\n    not a boolean."}],"desc":"Gets the requested boolean by path, returning a default value if not\nfound.\n<p>\nIf the boolean does not exist then the specified default value will\nreturned regardless of if a default has been identified in the root\n{@link Configuration}.","ret":"Requested boolean."},{"name":"isBoolean","params":[{"name":"path","type":"String","desc":"Path of the boolean to check."}],"desc":"Checks if the specified path is a boolean.\n<p>\nIf the path exists but is not a boolean, this will return false. If the\npath does not exist, this will return false. If the path does not exist\nbut a default value has been specified, this will check if that default\nvalue is a boolean and return appropriately.","ret":"Whether or not the specified path is a boolean."},{"name":"getDouble","params":[{"name":"path","type":"String","desc":"Path of the double to get."}],"desc":"Gets the requested double by path.\n<p>\nIf the double does not exist but a default value has been specified,\nthis will return the default value. If the double does not exist and no\ndefault value was specified, this will return 0.","ret":"Requested double."},{"name":"getDouble","params":[{"name":"path","type":"String","desc":"Path of the double to get."},{"name":"def","type":"double","desc":"The default value to return if the path is not found or is\n    not a double."}],"desc":"Gets the requested double by path, returning a default value if not\nfound.\n<p>\nIf the double does not exist then the specified default value will\nreturned regardless of if a default has been identified in the root\n{@link Configuration}.","ret":"Requested double."},{"name":"isDouble","params":[{"name":"path","type":"String","desc":"Path of the double to check."}],"desc":"Checks if the specified path is a double.\n<p>\nIf the path exists but is not a double, this will return false. If the\npath does not exist, this will return false. If the path does not exist\nbut a default value has been specified, this will check if that default\nvalue is a double and return appropriately.","ret":"Whether or not the specified path is a double."},{"name":"getLong","params":[{"name":"path","type":"String","desc":"Path of the long to get."}],"desc":"Gets the requested long by path.\n<p>\nIf the long does not exist but a default value has been specified, this\nwill return the default value. If the long does not exist and no\ndefault value was specified, this will return 0.","ret":"Requested long."},{"name":"getLong","params":[{"name":"path","type":"String","desc":"Path of the long to get."},{"name":"def","type":"long","desc":"The default value to return if the path is not found or is\n    not a long."}],"desc":"Gets the requested long by path, returning a default value if not\nfound.\n<p>\nIf the long does not exist then the specified default value will\nreturned regardless of if a default has been identified in the root\n{@link Configuration}.","ret":"Requested long."},{"name":"isLong","params":[{"name":"path","type":"String","desc":"Path of the long to check."}],"desc":"Checks if the specified path is a long.\n<p>\nIf the path exists but is not a long, this will return false. If the\npath does not exist, this will return false. If the path does not exist\nbut a default value has been specified, this will check if that default\nvalue is a long and return appropriately.","ret":"Whether or not the specified path is a long."},{"name":"getList","params":[{"name":"path","type":"String","desc":"Path of the List to get."}],"desc":"Gets the requested List by path.\n<p>\nIf the List does not exist but a default value has been specified, this\nwill return the default value. If the List does not exist and no\ndefault value was specified, this will return null.","ret":"Requested List."},{"name":"getList","params":[{"name":"path","type":"String","desc":"Path of the List to get."},{"name":"def","type":"List<?>","desc":"The default value to return if the path is not found or is\n    not a List."}],"desc":"Gets the requested List by path, returning a default value if not\nfound.\n<p>\nIf the List does not exist then the specified default value will\nreturned regardless of if a default has been identified in the root\n{@link Configuration}.","ret":"Requested List."},{"name":"isList","params":[{"name":"path","type":"String","desc":"Path of the List to check."}],"desc":"Checks if the specified path is a List.\n<p>\nIf the path exists but is not a List, this will return false. If the\npath does not exist, this will return false. If the path does not exist\nbut a default value has been specified, this will check if that default\nvalue is a List and return appropriately.","ret":"Whether or not the specified path is a List."},{"name":"getStringList","params":[{"name":"path","type":"String","desc":"Path of the List to get."}],"desc":"Gets the requested List of String by path.\n<p>\nIf the List does not exist but a default value has been specified, this\nwill return the default value. If the List does not exist and no\ndefault value was specified, this will return an empty List.\n<p>\nThis method will attempt to cast any values into a String if possible,\nbut may miss any values out if they are not compatible.","ret":"Requested List of String."},{"name":"getIntegerList","params":[{"name":"path","type":"String","desc":"Path of the List to get."}],"desc":"Gets the requested List of Integer by path.\n<p>\nIf the List does not exist but a default value has been specified, this\nwill return the default value. If the List does not exist and no\ndefault value was specified, this will return an empty List.\n<p>\nThis method will attempt to cast any values into a Integer if possible,\nbut may miss any values out if they are not compatible.","ret":"Requested List of Integer."},{"name":"getBooleanList","params":[{"name":"path","type":"String","desc":"Path of the List to get."}],"desc":"Gets the requested List of Boolean by path.\n<p>\nIf the List does not exist but a default value has been specified, this\nwill return the default value. If the List does not exist and no\ndefault value was specified, this will return an empty List.\n<p>\nThis method will attempt to cast any values into a Boolean if possible,\nbut may miss any values out if they are not compatible.","ret":"Requested List of Boolean."},{"name":"getDoubleList","params":[{"name":"path","type":"String","desc":"Path of the List to get."}],"desc":"Gets the requested List of Double by path.\n<p>\nIf the List does not exist but a default value has been specified, this\nwill return the default value. If the List does not exist and no\ndefault value was specified, this will return an empty List.\n<p>\nThis method will attempt to cast any values into a Double if possible,\nbut may miss any values out if they are not compatible.","ret":"Requested List of Double."},{"name":"getFloatList","params":[{"name":"path","type":"String","desc":"Path of the List to get."}],"desc":"Gets the requested List of Float by path.\n<p>\nIf the List does not exist but a default value has been specified, this\nwill return the default value. If the List does not exist and no\ndefault value was specified, this will return an empty List.\n<p>\nThis method will attempt to cast any values into a Float if possible,\nbut may miss any values out if they are not compatible.","ret":"Requested List of Float."},{"name":"getLongList","params":[{"name":"path","type":"String","desc":"Path of the List to get."}],"desc":"Gets the requested List of Long by path.\n<p>\nIf the List does not exist but a default value has been specified, this\nwill return the default value. If the List does not exist and no\ndefault value was specified, this will return an empty List.\n<p>\nThis method will attempt to cast any values into a Long if possible,\nbut may miss any values out if they are not compatible.","ret":"Requested List of Long."},{"name":"getByteList","params":[{"name":"path","type":"String","desc":"Path of the List to get."}],"desc":"Gets the requested List of Byte by path.\n<p>\nIf the List does not exist but a default value has been specified, this\nwill return the default value. If the List does not exist and no\ndefault value was specified, this will return an empty List.\n<p>\nThis method will attempt to cast any values into a Byte if possible,\nbut may miss any values out if they are not compatible.","ret":"Requested List of Byte."},{"name":"getCharacterList","params":[{"name":"path","type":"String","desc":"Path of the List to get."}],"desc":"Gets the requested List of Character by path.\n<p>\nIf the List does not exist but a default value has been specified, this\nwill return the default value. If the List does not exist and no\ndefault value was specified, this will return an empty List.\n<p>\nThis method will attempt to cast any values into a Character if\npossible, but may miss any values out if they are not compatible.","ret":"Requested List of Character."},{"name":"getShortList","params":[{"name":"path","type":"String","desc":"Path of the List to get."}],"desc":"Gets the requested List of Short by path.\n<p>\nIf the List does not exist but a default value has been specified, this\nwill return the default value. If the List does not exist and no\ndefault value was specified, this will return an empty List.\n<p>\nThis method will attempt to cast any values into a Short if possible,\nbut may miss any values out if they are not compatible.","ret":"Requested List of Short."},{"name":"getMapList","params":[{"name":"path","type":"String","desc":"Path of the List to get."}],"desc":"Gets the requested List of Maps by path.\n<p>\nIf the List does not exist but a default value has been specified, this\nwill return the default value. If the List does not exist and no\ndefault value was specified, this will return an empty List.\n<p>\nThis method will attempt to cast any values into a Map if possible, but\nmay miss any values out if they are not compatible.","ret":"Requested List of Maps."},{"name":"getObject","params":[{"name":"path","type":"String","desc":"the path to the object."},{"name":"clazz","type":"Class<T>","desc":"the type of the requested object"}],"desc":"Gets the requested object at the given path.\n\nIf the Object does not exist but a default value has been specified, this\nwill return the default value. If the Object does not exist and no\ndefault value was specified, this will return null.\n\n<b>Note:</b> For example #getObject(path, String.class) is <b>not</b>\nequivalent to {@link #getString(String) #getString(path)} because\n{@link #getString(String) #getString(path)} converts internally all\nObjects to Strings. However, #getObject(path, Boolean.class) is\nequivalent to {@link #getBoolean(String) #getBoolean(path)} for example.","ret":"Requested object"},{"name":"getObject","params":[{"name":"path","type":"String","desc":"the path to the object."},{"name":"clazz","type":"Class<T>","desc":"the type of the requested object"},{"name":"def","type":"T","desc":"the default object to return if the object is not present at\nthe path"}],"desc":"Gets the requested object at the given path, returning a default value if\nnot found\n\nIf the Object does not exist then the specified default value will\nreturned regardless of if a default has been identified in the root\n{@link Configuration}.\n\n<b>Note:</b> For example #getObject(path, String.class, def) is\n<b>not</b> equivalent to\n{@link #getString(String, String) #getString(path, def)} because\n{@link #getString(String, String) #getString(path, def)} converts\ninternally all Objects to Strings. However, #getObject(path,\nBoolean.class, def) is equivalent to {@link #getBoolean(String, boolean) #getBoolean(path,\ndef)} for example.","ret":"Requested object"},{"name":"getSerializable","params":[{"name":"path","type":"String","desc":"the path to the object."},{"name":"clazz","type":"Class<T>","desc":"the type of {@link ConfigurationSerializable}"}],"desc":"Gets the requested {@link ConfigurationSerializable} object at the given\npath.\n\nIf the Object does not exist but a default value has been specified, this\nwill return the default value. If the Object does not exist and no\ndefault value was specified, this will return null.","ret":"Requested {@link ConfigurationSerializable} object"},{"name":"getSerializable","params":[{"name":"path","type":"String","desc":"the path to the object."},{"name":"clazz","type":"Class<T>","desc":"the type of {@link ConfigurationSerializable}"},{"name":"def","type":"T","desc":"the default object to return if the object is not present at\nthe path"}],"desc":"Gets the requested {@link ConfigurationSerializable} object at the given\npath, returning a default value if not found\n\nIf the Object does not exist then the specified default value will\nreturned regardless of if a default has been identified in the root\n{@link Configuration}.","ret":"Requested {@link ConfigurationSerializable} object"},{"name":"getVector","params":[{"name":"path","type":"String","desc":"Path of the Vector to get."}],"desc":"Gets the requested Vector by path.\n<p>\nIf the Vector does not exist but a default value has been specified,\nthis will return the default value. If the Vector does not exist and no\ndefault value was specified, this will return null.","ret":"Requested Vector."},{"name":"getVector","params":[{"name":"path","type":"String","desc":"Path of the Vector to get."},{"name":"def","type":"Vector","desc":"The default value to return if the path is not found or is\n    not a Vector."}],"desc":"Gets the requested {@link Vector} by path, returning a default value if\nnot found.\n<p>\nIf the Vector does not exist then the specified default value will\nreturned regardless of if a default has been identified in the root\n{@link Configuration}.","ret":"Requested Vector."},{"name":"isVector","params":[{"name":"path","type":"String","desc":"Path of the Vector to check."}],"desc":"Checks if the specified path is a Vector.\n<p>\nIf the path exists but is not a Vector, this will return false. If the\npath does not exist, this will return false. If the path does not exist\nbut a default value has been specified, this will check if that default\nvalue is a Vector and return appropriately.","ret":"Whether or not the specified path is a Vector."},{"name":"getOfflinePlayer","params":[{"name":"path","type":"String","desc":"Path of the OfflinePlayer to get."}],"desc":"Gets the requested OfflinePlayer by path.\n<p>\nIf the OfflinePlayer does not exist but a default value has been\nspecified, this will return the default value. If the OfflinePlayer\ndoes not exist and no default value was specified, this will return\nnull.","ret":"Requested OfflinePlayer."},{"name":"getOfflinePlayer","params":[{"name":"path","type":"String","desc":"Path of the OfflinePlayer to get."},{"name":"def","type":"OfflinePlayer","desc":"The default value to return if the path is not found or is\n    not an OfflinePlayer."}],"desc":"Gets the requested {@link OfflinePlayer} by path, returning a default\nvalue if not found.\n<p>\nIf the OfflinePlayer does not exist then the specified default value\nwill returned regardless of if a default has been identified in the\nroot {@link Configuration}.","ret":"Requested OfflinePlayer."},{"name":"isOfflinePlayer","params":[{"name":"path","type":"String","desc":"Path of the OfflinePlayer to check."}],"desc":"Checks if the specified path is an OfflinePlayer.\n<p>\nIf the path exists but is not a OfflinePlayer, this will return false.\nIf the path does not exist, this will return false. If the path does\nnot exist but a default value has been specified, this will check if\nthat default value is a OfflinePlayer and return appropriately.","ret":"Whether or not the specified path is an OfflinePlayer."},{"name":"getItemStack","params":[{"name":"path","type":"String","desc":"Path of the ItemStack to get."}],"desc":"Gets the requested ItemStack by path.\n<p>\nIf the ItemStack does not exist but a default value has been specified,\nthis will return the default value. If the ItemStack does not exist and\nno default value was specified, this will return null.","ret":"Requested ItemStack."},{"name":"getItemStack","params":[{"name":"path","type":"String","desc":"Path of the ItemStack to get."},{"name":"def","type":"ItemStack","desc":"The default value to return if the path is not found or is\n    not an ItemStack."}],"desc":"Gets the requested {@link ItemStack} by path, returning a default value\nif not found.\n<p>\nIf the ItemStack does not exist then the specified default value will\nreturned regardless of if a default has been identified in the root\n{@link Configuration}.","ret":"Requested ItemStack."},{"name":"isItemStack","params":[{"name":"path","type":"String","desc":"Path of the ItemStack to check."}],"desc":"Checks if the specified path is an ItemStack.\n<p>\nIf the path exists but is not a ItemStack, this will return false. If\nthe path does not exist, this will return false. If the path does not\nexist but a default value has been specified, this will check if that\ndefault value is a ItemStack and return appropriately.","ret":"Whether or not the specified path is an ItemStack."},{"name":"getColor","params":[{"name":"path","type":"String","desc":"Path of the Color to get."}],"desc":"Gets the requested Color by path.\n<p>\nIf the Color does not exist but a default value has been specified,\nthis will return the default value. If the Color does not exist and no\ndefault value was specified, this will return null.","ret":"Requested Color."},{"name":"getColor","params":[{"name":"path","type":"String","desc":"Path of the Color to get."},{"name":"def","type":"Color","desc":"The default value to return if the path is not found or is\n    not a Color."}],"desc":"Gets the requested {@link Color} by path, returning a default value if\nnot found.\n<p>\nIf the Color does not exist then the specified default value will\nreturned regardless of if a default has been identified in the root\n{@link Configuration}.","ret":"Requested Color."},{"name":"isColor","params":[{"name":"path","type":"String","desc":"Path of the Color to check."}],"desc":"Checks if the specified path is a Color.\n<p>\nIf the path exists but is not a Color, this will return false. If the\npath does not exist, this will return false. If the path does not exist\nbut a default value has been specified, this will check if that default\nvalue is a Color and return appropriately.","ret":"Whether or not the specified path is a Color."},{"name":"getLocation","params":[{"name":"path","type":"String","desc":"Path of the Location to get."}],"desc":"Gets the requested Location by path.\n<p>\nIf the Location does not exist but a default value has been specified,\nthis will return the default value. If the Location does not exist and no\ndefault value was specified, this will return null.","ret":"Requested Location."},{"name":"getLocation","params":[{"name":"path","type":"String","desc":"Path of the Location to get."},{"name":"def","type":"Location","desc":"The default value to return if the path is not found or is not\na Location."}],"desc":"Gets the requested {@link Location} by path, returning a default value if\nnot found.\n<p>\nIf the Location does not exist then the specified default value will\nreturned regardless of if a default has been identified in the root\n{@link Configuration}.","ret":"Requested Location."},{"name":"isLocation","params":[{"name":"path","type":"String","desc":"Path of the Location to check."}],"desc":"Checks if the specified path is a Location.\n<p>\nIf the path exists but is not a Location, this will return false. If the\npath does not exist, this will return false. If the path does not exist\nbut a default value has been specified, this will check if that default\nvalue is a Location and return appropriately.","ret":"Whether or not the specified path is a Location."},{"name":"getConfigurationSection","params":[{"name":"path","type":"String","desc":"Path of the ConfigurationSection to get."}],"desc":"Gets the requested ConfigurationSection by path.\n<p>\nIf the ConfigurationSection does not exist but a default value has been\nspecified, this will return the default value. If the\nConfigurationSection does not exist and no default value was specified,\nthis will return null.","ret":"Requested ConfigurationSection."},{"name":"isConfigurationSection","params":[{"name":"path","type":"String","desc":"Path of the ConfigurationSection to check."}],"desc":"Checks if the specified path is a ConfigurationSection.\n<p>\nIf the path exists but is not a ConfigurationSection, this will return\nfalse. If the path does not exist, this will return false. If the path\ndoes not exist but a default value has been specified, this will check\nif that default value is a ConfigurationSection and return\nappropriately.","ret":"Whether or not the specified path is a ConfigurationSection."},{"name":"getDefaultSection","params":[],"desc":"Gets the equivalent {@link ConfigurationSection} from the default\n{@link Configuration} defined in {@link #getRoot()}.\n<p>\nIf the root contains no defaults, or the defaults doesn't contain a\nvalue for this path, or the value at this path is not a {@link\nConfigurationSection} then this will return null.","ret":"Equivalent section in root configuration"},{"name":"addDefault","params":[{"name":"path","type":"String","desc":"Path of the value to set."},{"name":"value","type":"Object","desc":"Value to set the default to."}],"desc":"Sets the default value in the root at the given path as provided.\n<p>\nIf no source {@link Configuration} was provided as a default\ncollection, then a new {@link MemoryConfiguration} will be created to\nhold the new default value.\n<p>\nIf value is null, the value will be removed from the default\nConfiguration source.\n<p>\nIf the value as returned by {@link #getDefaultSection()} is null, then\nthis will create a new section at the path, replacing anything that may\nhave existed there previously.","ret":""},{"name":"getComments","params":[{"name":"path","type":"String","desc":"Path of the comments to get."}],"desc":"Gets the requested comment list by path.\n<p>\nIf no comments exist, an empty list will be returned. A null entry\nrepresents an empty line and an empty String represents an empty comment\nline.","ret":"A unmodifiable list of the requested comments, every entry\nrepresents one line."},{"name":"getInlineComments","params":[{"name":"path","type":"String","desc":"Path of the comments to get."}],"desc":"Gets the requested inline comment list by path.\n<p>\nIf no comments exist, an empty list will be returned. A null entry\nrepresents an empty line and an empty String represents an empty comment\nline.","ret":"A unmodifiable list of the requested comments, every entry\nrepresents one line."},{"name":"setComments","params":[{"name":"path","type":"String","desc":"Path of the comments to set."},{"name":"comments","type":"List<String>","desc":"New comments to set at the path, every entry represents\none line."}],"desc":"Sets the comment list at the specified path.\n<p>\nIf value is null, the comments will be removed. A null entry is an empty\nline and an empty String entry is an empty comment line. If the path does\nnot exist, no comments will be set. Any existing comments will be\nreplaced, regardless of what the new comments are.\n<p>\nSome implementations may have limitations on what persists. See their\nindividual javadocs for details.","ret":""},{"name":"setInlineComments","params":[{"name":"path","type":"String","desc":"Path of the comments to set."},{"name":"comments","type":"List<String>","desc":"New comments to set at the path, every entry represents\none line."}],"desc":"Sets the inline comment list at the specified path.\n<p>\nIf value is null, the comments will be removed. A null entry is an empty\nline and an empty String entry is an empty comment line. If the path does\nnot exist, no comment will be set. Any existing comments will be\nreplaced, regardless of what the new comments are.\n<p>\nSome implementations may have limitations on what persists. See their\nindividual javadocs for details.","ret":""},{"name":"getRichMessage","params":[{"name":"path","type":"String","desc":"Path of the Component to get."}],"desc":"Gets the requested MiniMessage formatted String as Component by path.\n<p>\nIf the Component does not exist but a default value has been specified,\nthis will return the default value. If the Component does not exist and no\ndefault value was specified, this will return null.","ret":"Requested Component."},{"name":"getRichMessage","params":[{"name":"path","type":"String","desc":"Path of the Component to get."},{"name":"fallback","type":"net.kyori.adventure.text.Component","desc":"component that will be used as fallback"}],"desc":"Gets the requested MiniMessage formatted String as Component by path.\n<p>\nIf the Component does not exist but a default value has been specified,\nthis will return the default value. If the Component does not exist and no\ndefault value was specified, this will return null.","ret":"Requested Component."},{"name":"setRichMessage","params":[{"name":"path","type":"String","desc":"Path of the object to set."},{"name":"value","type":"net.kyori.adventure.text.Component","desc":"New value to set the path to."}],"desc":"Sets the specified path to the given value.\n<p>\nIf value is null, the entry will be removed. Any existing entry will be\nreplaced, regardless of what the new value is.","ret":""},{"name":"getComponent","params":[{"name":"path","type":"String","desc":"Path of the Component to get."},{"name":"decoder","type":"net.kyori.adventure.text.serializer.ComponentDecoder<? super String,C>","desc":"ComponentDecoder instance used for deserialization"}],"desc":"Gets the requested formatted String as Component by path deserialized by the ComponentDecoder.\n<p>\nIf the Component does not exist but a default value has been specified,\nthis will return the default value. If the Component does not exist and no\ndefault value was specified, this will return null.","ret":"Requested Component."},{"name":"getComponent","params":[{"name":"path","type":"String","desc":"Path of the Component to get."},{"name":"decoder","type":"net.kyori.adventure.text.serializer.ComponentDecoder<? super String,C>","desc":"ComponentDecoder instance used for deserialization"},{"name":"fallback","type":"C","desc":"component that will be used as fallback"}],"desc":"Gets the requested formatted String as Component by path deserialized by the ComponentDecoder.\n<p>\nIf the Component does not exist but a default value has been specified,\nthis will return the default value. If the Component does not exist and no\ndefault value was specified, this will return null.","ret":"Requested Component."},{"name":"setComponent","params":[{"name":"path","type":"String","desc":"Path of the object to set."},{"name":"encoder","type":"net.kyori.adventure.text.serializer.ComponentEncoder<C,String>","desc":"the encoder used to transform the value"},{"name":"value","type":"C","desc":"New value to set the path to."}],"desc":"Sets the specified path to the given value.\n<p>\nIf value is null, the entry will be removed. Any existing entry will be\nreplaced, regardless of what the new value is.","ret":""}],"desc":"Represents a section of a {@link Configuration}"},{"FQCN":"org.bukkit.TreeSpecies","methods":[{"name":"getData","params":[],"desc":"Gets the associated data value representing this species","ret":"A byte containing the data value of this tree species"},{"name":"getByData","params":[{"name":"data","type":"byte","desc":"Data value to fetch"}],"desc":"Gets the TreeSpecies with the given data value","ret":"The {@link TreeSpecies} representing the given value, or null\n    if it doesn't exist"}],"desc":"Represents the different species of trees regardless of size."},{"FQCN":"org.bukkit.FluidCollisionMode","methods":[],"desc":"Determines the collision behavior when fluids get hit during ray tracing."},{"FQCN":"org.bukkit.ChunkSnapshot","methods":[{"name":"getX","params":[],"desc":"Gets the X-coordinate of this chunk","ret":"X-coordinate"},{"name":"getZ","params":[],"desc":"Gets the Z-coordinate of this chunk","ret":"Z-coordinate"},{"name":"getWorldName","params":[],"desc":"Gets name of the world containing this chunk","ret":"Parent World Name"},{"name":"getBlockType","params":[{"name":"x","type":"int","desc":"0-15"},{"name":"y","type":"int","desc":"world minHeight (inclusive) - world maxHeight (exclusive)"},{"name":"z","type":"int","desc":"0-15"}],"desc":"Get block type for block at corresponding coordinate in the chunk","ret":"block material type"},{"name":"getBlockData","params":[{"name":"x","type":"int","desc":"0-15"},{"name":"y","type":"int","desc":"world minHeight (inclusive) - world maxHeight (exclusive)"},{"name":"z","type":"int","desc":"0-15"}],"desc":"Get block data for block at corresponding coordinate in the chunk","ret":"block material type"},{"name":"getData","params":[{"name":"x","type":"int","desc":"0-15"},{"name":"y","type":"int","desc":"world minHeight (inclusive) - world maxHeight (exclusive)"},{"name":"z","type":"int","desc":"0-15"}],"desc":"Get block data for block at corresponding coordinate in the chunk","ret":"0-15"},{"name":"getBlockSkyLight","params":[{"name":"x","type":"int","desc":"0-15"},{"name":"y","type":"int","desc":"world minHeight (inclusive) - world maxHeight (exclusive)"},{"name":"z","type":"int","desc":"0-15"}],"desc":"Get sky light level for block at corresponding coordinate in the chunk","ret":"0-15"},{"name":"getBlockEmittedLight","params":[{"name":"x","type":"int","desc":"0-15"},{"name":"y","type":"int","desc":"world minHeight (inclusive) - world maxHeight (exclusive)"},{"name":"z","type":"int","desc":"0-15"}],"desc":"Get light level emitted by block at corresponding coordinate in the\nchunk","ret":"0-15"},{"name":"getHighestBlockYAt","params":[{"name":"x","type":"int","desc":"X-coordinate of the blocks (0-15)"},{"name":"z","type":"int","desc":"Z-coordinate of the blocks (0-15)"}],"desc":"Gets the highest non-air coordinate at the given coordinates","ret":"Y-coordinate of the highest non-air block"},{"name":"getBiome","params":[{"name":"x","type":"int","desc":"X-coordinate (0-15)"},{"name":"z","type":"int","desc":"Z-coordinate (0-15)"}],"desc":"Get biome at given coordinates","ret":"Biome at given coordinate"},{"name":"getBiome","params":[{"name":"x","type":"int","desc":"X-coordinate (0-15)"},{"name":"y","type":"int","desc":"Y-coordinate (world minHeight (inclusive) - world maxHeight (exclusive))"},{"name":"z","type":"int","desc":"Z-coordinate (0-15)"}],"desc":"Get biome at given coordinates","ret":"Biome at given coordinate"},{"name":"getRawBiomeTemperature","params":[{"name":"x","type":"int","desc":"X-coordinate (0-15)"},{"name":"z","type":"int","desc":"Z-coordinate (0-15)"}],"desc":"Get raw biome temperature at given coordinates","ret":"temperature at given coordinate"},{"name":"getRawBiomeTemperature","params":[{"name":"x","type":"int","desc":"X-coordinate (0-15)"},{"name":"y","type":"int","desc":"Y-coordinate (world minHeight (inclusive) - world maxHeight (exclusive))"},{"name":"z","type":"int","desc":"Z-coordinate (0-15)"}],"desc":"Get raw biome temperature at given coordinates","ret":"temperature at given coordinate"},{"name":"getCaptureFullTime","params":[],"desc":"Get world full time when chunk snapshot was captured","ret":"time in ticks"},{"name":"isSectionEmpty","params":[{"name":"sy","type":"int","desc":"- section Y coordinate (block Y / 16, world minHeight (inclusive) - world maxHeight (exclusive))"}],"desc":"Test if section is empty","ret":"true if empty, false if not"},{"name":"contains","params":[{"name":"block","type":"BlockData","desc":"block to test"}],"desc":"Tests if this snapshot contains the specified block.","ret":"if the block is contained within"},{"name":"contains","params":[{"name":"biome","type":"Biome","desc":"biome to test"}],"desc":"Tests if this chunk contains the specified biome.","ret":"if the biome is contained within"}],"desc":"Represents a static, thread-safe snapshot of chunk of blocks.\n<p>\nPurpose is to allow clean, efficient copy of a chunk data to be made, and\nthen handed off for processing in another thread (e.g. map rendering)"},{"FQCN":"org.bukkit.ChatColor","methods":[{"name":"getChar","params":[],"desc":"Gets the char value associated with this color","ret":"A char value of this color code"},{"name":"isFormat","params":[],"desc":"Checks if this code is a format code as opposed to a color code.","ret":"whether this ChatColor is a format code"},{"name":"isColor","params":[],"desc":"Checks if this code is a color code as opposed to a format code.","ret":"whether this ChatColor is a color code"},{"name":"getByChar","params":[{"name":"code","type":"char","desc":"Code to check"}],"desc":"Gets the color represented by the specified color code","ret":"Associative {@link org.bukkit.ChatColor} with the given code,\n    or null if it doesn't exist"},{"name":"getByChar","params":[{"name":"code","type":"String","desc":"Code to check"}],"desc":"Gets the color represented by the specified color code","ret":"Associative {@link org.bukkit.ChatColor} with the given code,\n    or null if it doesn't exist"},{"name":"stripColor","params":[{"name":"input","type":"String","desc":"String to strip of color"}],"desc":"Strips the given message of all color codes","ret":"A copy of the input string, without any coloring"},{"name":"translateAlternateColorCodes","params":[{"name":"altColorChar","type":"char","desc":"The alternate color code character to replace. Ex: {@literal &}"},{"name":"textToTranslate","type":"String","desc":"Text containing the alternate color code character."}],"desc":"Translates a string using an alternate color code character into a\nstring that uses the internal ChatColor.COLOR_CODE color code\ncharacter. The alternate color code character will only be replaced if\nit is immediately followed by 0-9, A-F, a-f, K-O, k-o, R or r.","ret":"Text containing the ChatColor.COLOR_CODE color code character."},{"name":"getLastColors","params":[{"name":"input","type":"String","desc":"Input string to retrieve the colors from."}],"desc":"Gets the ChatColors used at the end of the given input string.","ret":"Any remaining ChatColors to pass onto the next line."}],"desc":"All supported color values for chat"},{"FQCN":"org.bukkit.Bukkit","methods":[{"name":"getServer","params":[],"desc":"Gets the current {@link Server} singleton","ret":"Server instance being ran"},{"name":"getPluginsFolder","params":[],"desc":"Returns the de facto plugins directory, generally used for storing plugin jars to be loaded,\nas well as their {@link org.bukkit.plugin.Plugin#getDataFolder() data folders}.\n\n<p>Plugins should use {@link org.bukkit.plugin.Plugin#getDataFolder()} rather than traversing this\ndirectory manually when determining the location in which to store their data and configuration files.</p>","ret":"plugins directory"},{"name":"setServer","params":[{"name":"server","type":"Server","desc":"Server instance"}],"desc":"Attempts to set the {@link Server} singleton.\n<p>\nThis cannot be done if the Server is already set.","ret":""},{"name":"getVersionMessage","params":[],"desc":"Gets message describing the version server is running.","ret":"message describing the version server is running"},{"name":"getName","params":[],"desc":"Gets the name of this server implementation.","ret":"name of this server implementation"},{"name":"getVersion","params":[],"desc":"Gets the version string of this server implementation.","ret":"version of this server implementation"},{"name":"getBukkitVersion","params":[],"desc":"Gets the Bukkit version that this server is running.","ret":"version of Bukkit"},{"name":"getMinecraftVersion","params":[],"desc":"Gets the version of game this server implements","ret":"version of game"},{"name":"getOnlinePlayers","params":[],"desc":"Gets a view of all currently logged in players. This {@linkplain\nCollections#unmodifiableCollection(Collection) view} is a reused\nobject, making some operations like {@link Collection#size()}\nzero-allocation.\n<p>\nThe collection is a view backed by the internal representation, such\nthat, changes to the internal state of the server will be reflected\nimmediately. However, the reuse of the returned collection (identity)\nis not strictly guaranteed for future or all implementations. Casting\nthe collection, or relying on interface implementations (like {@link\nSerializable} or {@link List}), is deprecated.\n<p>\nIteration behavior is undefined outside of self-contained main-thread\nuses. Normal and immediate iterator use without consequences that\naffect the collection are fully supported. The effects following\n(non-exhaustive) {@link Entity#teleport(Location) teleportation},\n{@link Player#setHealth(double) death}, and {@link Player#kickPlayer(\nString) kicking} are undefined. Any use of this collection from\nasynchronous threads is unsafe.\n<p>\nFor safe consequential iteration or mimicking the old array behavior,\nusing {@link Collection#toArray(Object[])} is recommended. For making\nsnapshots, {@link ImmutableList#copyOf(Collection)} is recommended.","ret":"a view of currently online players."},{"name":"getMaxPlayers","params":[],"desc":"Get the maximum amount of players which can login to this server.","ret":"the amount of players this server allows"},{"name":"setMaxPlayers","params":[{"name":"maxPlayers","type":"int","desc":"The maximum amount of concurrent players"}],"desc":"Set the maximum amount of players allowed to be logged in at once.","ret":""},{"name":"getPort","params":[],"desc":"Get the game port that the server runs on.","ret":"the port number of this server"},{"name":"getViewDistance","params":[],"desc":"Get the view distance from this server.","ret":"the view distance from this server."},{"name":"getSimulationDistance","params":[],"desc":"Get the simulation distance from this server.","ret":"the simulation distance from this server."},{"name":"getIp","params":[],"desc":"Get the IP that this server is bound to, or empty string if not\nspecified.","ret":"the IP string that this server is bound to, otherwise empty\n    string"},{"name":"getWorldType","params":[],"desc":"Get world type (level-type setting) for default world.","ret":"the value of level-type (e.g. DEFAULT, FLAT, DEFAULT_1_1)"},{"name":"getGenerateStructures","params":[],"desc":"Get generate-structures setting.","ret":"true if structure generation is enabled, false otherwise"},{"name":"getMaxWorldSize","params":[],"desc":"Get max world size.","ret":"the maximum world size as specified for the server"},{"name":"getAllowEnd","params":[],"desc":"Gets whether this server allows the End or not.","ret":"whether this server allows the End or not"},{"name":"getAllowNether","params":[],"desc":"Gets whether this server allows the Nether or not.","ret":"whether this server allows the Nether or not"},{"name":"isLoggingIPs","params":[],"desc":"Gets whether the server is logging the IP addresses of players.","ret":"whether the server is logging the IP addresses of players"},{"name":"getDataPackManager","params":[],"desc":"Get the DataPack Manager.","ret":"the manager"},{"name":"getServerResourcePack","params":[],"desc":"Gets the resource pack configured to be sent to clients by the server.","ret":"the resource pack"},{"name":"getServerTickManager","params":[],"desc":"Get the ServerTick Manager.","ret":"the manager"},{"name":"getResourcePack","params":[],"desc":"Gets the server resource pack uri, or empty string if not specified.","ret":"the server resource pack uri, otherwise empty string"},{"name":"getResourcePackHash","params":[],"desc":"Gets the SHA-1 digest of the server resource pack, or empty string if\nnot specified.","ret":"the SHA-1 digest of the server resource pack, otherwise empty\n    string"},{"name":"getResourcePackPrompt","params":[],"desc":"Gets the custom prompt message to be shown when the server resource\npack is required, or empty string if not specified.","ret":"the custom prompt message to be shown when the server resource,\n    otherwise empty string"},{"name":"isResourcePackRequired","params":[],"desc":"Gets whether the server resource pack is enforced.","ret":"whether the server resource pack is enforced"},{"name":"hasWhitelist","params":[],"desc":"Gets whether this server has a whitelist or not.","ret":"whether this server has a whitelist or not"},{"name":"setWhitelist","params":[{"name":"value","type":"boolean","desc":"true for whitelist on, false for off"}],"desc":"Sets if the server is whitelisted.","ret":""},{"name":"isWhitelistEnforced","params":[],"desc":"Gets whether the server whitelist is enforced.\n\nIf the whitelist is enforced, non-whitelisted players will be\ndisconnected when the server whitelist is reloaded.","ret":"whether the server whitelist is enforced"},{"name":"setWhitelistEnforced","params":[{"name":"value","type":"boolean","desc":"true for enforced, false for not"}],"desc":"Sets if the server whitelist is enforced.\n\nIf the whitelist is enforced, non-whitelisted players will be\ndisconnected when the server whitelist is reloaded.","ret":""},{"name":"getWhitelistedPlayers","params":[],"desc":"Gets a list of whitelisted players.","ret":"a set containing all whitelisted players"},{"name":"reloadWhitelist","params":[],"desc":"Reloads the whitelist from disk.","ret":""},{"name":"broadcastMessage","params":[{"name":"message","type":"String","desc":"the message"}],"desc":"Broadcast a message to all players.\n<p>\nThis is the same as calling {@link #broadcast(java.lang.String,\njava.lang.String)} to {@link Server#BROADCAST_CHANNEL_USERS}","ret":"the number of players"},{"name":"broadcast","params":[{"name":"component","type":"net.md_5.bungee.api.chat.BaseComponent","desc":"the component to send"}],"desc":"Sends the component to all online players.","ret":""},{"name":"broadcast","params":[{"name":"components","type":"net.md_5.bungee.api.chat.BaseComponent","desc":"the components to send"}],"desc":"Sends an array of components as a single message to all online players.","ret":""},{"name":"getUpdateFolder","params":[],"desc":"Gets the name of the update folder. The update folder is used to safely\nupdate plugins at the right moment on a plugin load.\n<p>\nThe update folder name is relative to the plugins folder.","ret":"the name of the update folder"},{"name":"getUpdateFolderFile","params":[],"desc":"Gets the update folder. The update folder is used to safely update\nplugins at the right moment on a plugin load.","ret":"the update folder"},{"name":"getConnectionThrottle","params":[],"desc":"Gets the value of the connection throttle setting.","ret":"the value of the connection throttle setting"},{"name":"getTicksPerAnimalSpawns","params":[],"desc":"Gets default ticks per animal spawns value.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn monsters\n    every tick.\n<li>A value of 400 will mean the server will attempt to spawn monsters\n    every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b> If set to 0, animal spawning will be disabled. We\nrecommend using spawn-animals to control this instead.\n<p>\nMinecraft default: 400.","ret":"the default ticks per animal spawns value"},{"name":"getTicksPerMonsterSpawns","params":[],"desc":"Gets the default ticks per monster spawns value.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn monsters\n    every tick.\n<li>A value of 400 will mean the server will attempt to spawn monsters\n    every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b> If set to 0, monsters spawning will be disabled. We\nrecommend using spawn-monsters to control this instead.\n<p>\nMinecraft default: 1.","ret":"the default ticks per monsters spawn value"},{"name":"getTicksPerWaterSpawns","params":[],"desc":"Gets the default ticks per water mob spawns value.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn water mobs\n    every tick.\n<li>A value of 400 will mean the server will attempt to spawn water mobs\n    every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b> If set to 0, water mobs spawning will be disabled.\n<p>\nMinecraft default: 1.","ret":"the default ticks per water mobs spawn value"},{"name":"getTicksPerAmbientSpawns","params":[],"desc":"Gets the default ticks per ambient mob spawns value.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn ambient mobs\n    every tick.\n<li>A value of 400 will mean the server will attempt to spawn ambient mobs\n    every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b> If set to 0, ambient mobs spawning will be disabled.\n<p>\nMinecraft default: 1.","ret":"the default ticks per ambient mobs spawn value"},{"name":"getTicksPerWaterAmbientSpawns","params":[],"desc":"Gets the default ticks per water ambient mob spawns value.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn water ambient mobs\n    every tick.\n<li>A value of 400 will mean the server will attempt to spawn water ambient mobs\n    every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b> If set to 0, ambient mobs spawning will be disabled.\n<p>\nMinecraft default: 1.","ret":"the default ticks per water ambient mobs spawn value"},{"name":"getTicksPerWaterUndergroundCreatureSpawns","params":[],"desc":"Gets the default ticks per water underground creature spawns value.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn water underground creature\n    every tick.\n<li>A value of 400 will mean the server will attempt to spawn water underground creature\n    every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b> If set to 0, water underground creature spawning will be disabled.\n<p>\nMinecraft default: 1.","ret":"the default ticks per water underground creature spawn value"},{"name":"getTicksPerSpawns","params":[{"name":"spawnCategory","type":"SpawnCategory","desc":"the category of spawn"}],"desc":"Gets the default ticks per {@link SpawnCategory} spawns value.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn {@link SpawnCategory} mobs\n    every tick.\n<li>A value of 400 will mean the server will attempt to spawn {@link SpawnCategory} mobs\n    every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b> If set to 0, {@link SpawnCategory} mobs spawning will be disabled.\n<p>\nMinecraft default: 1.\n<br>\n<b>Note: </b> the {@link SpawnCategory#MISC} are not consider.","ret":"the default ticks per {@link SpawnCategory} mobs spawn value"},{"name":"getPlayer","params":[{"name":"name","type":"String","desc":"the name to look up"}],"desc":"Gets a player object by the given username.\n<p>\nThis method may not return objects for offline players.","ret":"a player if one was found, null otherwise"},{"name":"getPlayerExact","params":[{"name":"name","type":"String","desc":"Exact name of the player to retrieve"}],"desc":"Gets the player with the exact given name, case insensitive.","ret":"a player object if one was found, null otherwise"},{"name":"matchPlayer","params":[{"name":"name","type":"String","desc":"the (partial) name to match"}],"desc":"Attempts to match any players with the given name, and returns a list\nof all possibly matches.\n<p>\nThis list is not sorted in any particular order. If an exact match is\nfound, the returned list will only contain a single result.","ret":"list of all possible players"},{"name":"getPlayer","params":[{"name":"id","type":"UUID","desc":"UUID of the player to retrieve"}],"desc":"Gets the player with the given UUID.","ret":"a player object if one was found, null otherwise"},{"name":"getPlayerUniqueId","params":[{"name":"playerName","type":"String","desc":"the player name to look up the unique ID for"}],"desc":"Gets the unique ID of the player currently known as the specified player name\nIn Offline Mode, will return an Offline UUID","ret":"A UUID, or null if that player name is not registered with Minecraft and the server is in online mode"},{"name":"getPluginManager","params":[],"desc":"Gets the plugin manager for interfacing with plugins.","ret":"a plugin manager for this Server instance"},{"name":"getScheduler","params":[],"desc":"Gets the scheduler for managing scheduled events.","ret":"a scheduling service for this server"},{"name":"getServicesManager","params":[],"desc":"Gets a services manager.","ret":"s services manager"},{"name":"getWorlds","params":[],"desc":"Gets a list of all worlds on this server.","ret":"a list of worlds"},{"name":"isTickingWorlds","params":[],"desc":"Gets whether the worlds are being ticked right now.","ret":"true if the worlds are being ticked, false otherwise."},{"name":"createWorld","params":[{"name":"creator","type":"WorldCreator","desc":"the options to use when creating the world"}],"desc":"Creates or loads a world with the given name using the specified\noptions.\n<p>\nIf the world is already loaded, it will just return the equivalent of\ngetWorld(creator.name()).\n<p>\nDo note that un/loading worlds mid-tick may have potential side effects, we strongly recommend\nensuring that you're not un/loading worlds midtick by checking {@link Bukkit#isTickingWorlds()}","ret":"newly created or loaded world"},{"name":"unloadWorld","params":[{"name":"name","type":"String","desc":"Name of the world to unload"},{"name":"save","type":"boolean","desc":"whether to save the chunks before unloading"}],"desc":"Unloads a world with the given name.\n<p>\nDo note that un/loading worlds mid-tick may have potential side effects, we strongly recommend\nensuring that you're not un/loading worlds midtick by checking {@link Bukkit#isTickingWorlds()}","ret":"true if successful, false otherwise"},{"name":"unloadWorld","params":[{"name":"world","type":"World","desc":"the world to unload"},{"name":"save","type":"boolean","desc":"whether to save the chunks before unloading"}],"desc":"Unloads the given world.\n<p>\nDo note that un/loading worlds mid-tick may have potential side effects, we strongly recommend\nensuring that you're not un/loading worlds midtick by checking {@link Bukkit#isTickingWorlds()}","ret":"true if successful, false otherwise"},{"name":"getWorld","params":[{"name":"name","type":"String","desc":"the name of the world to retrieve"}],"desc":"Gets the world with the given name.","ret":"a world with the given name, or null if none exists"},{"name":"getWorld","params":[{"name":"uid","type":"UUID","desc":"a unique-id of the world to retrieve"}],"desc":"Gets the world from the given Unique ID.","ret":"a world with the given Unique ID, or null if none exists"},{"name":"getWorld","params":[{"name":"worldKey","type":"NamespacedKey","desc":"the NamespacedKey of the world to retrieve"}],"desc":"Gets the world from the given NamespacedKey","ret":"a world with the given NamespacedKey, or null if none exists"},{"name":"createWorldBorder","params":[],"desc":"Create a new virtual {@link WorldBorder}.","ret":"the created world border instance"},{"name":"createMap","params":[{"name":"world","type":"World","desc":"the world the map will belong to"}],"desc":"Create a new map with an automatically assigned ID.","ret":"a newly created map view"},{"name":"createExplorerMap","params":[{"name":"world","type":"World","desc":"the world the map will belong to"},{"name":"location","type":"Location","desc":"the origin location to find the nearest structure"},{"name":"structureType","type":"StructureType","desc":"the type of structure to find"}],"desc":"Create a new explorer map targeting the closest nearby structure of a\ngiven {@link StructureType}.","ret":"a newly created item stack"},{"name":"createExplorerMap","params":[{"name":"world","type":"World","desc":"the world the map will belong to"},{"name":"location","type":"Location","desc":"the origin location to find the nearest structure"},{"name":"structureType","type":"StructureType","desc":"the type of structure to find"},{"name":"radius","type":"int","desc":"radius to search, see World#locateNearestStructure for more\n              information"},{"name":"findUnexplored","type":"boolean","desc":"whether to find unexplored structures"}],"desc":"Create a new explorer map targeting the closest nearby structure of a\ngiven {@link StructureType}.\n<br>\nThis method uses implementation default values for radius and\nfindUnexplored (usually 100, true).","ret":"the newly created item stack"},{"name":"createExplorerMap","params":[{"name":"world","type":"World","desc":"the world the map will belong to"},{"name":"location","type":"Location","desc":"the origin location to find the nearest structure"},{"name":"structureType","type":"org.bukkit.generator.structure.StructureType","desc":"the type of structure to find"},{"name":"mapIcon","type":"org.bukkit.map.MapCursor.Type","desc":"the map icon to use on the map"}],"desc":"Create a new explorer map targeting the closest nearby structure of a\ngiven {@link org.bukkit.generator.structure.StructureType}.\n<br>\nThis method uses implementation default values for radius and\nfindUnexplored (usually 100, true).","ret":"a newly created item stack or null if it can't find a location"},{"name":"createExplorerMap","params":[{"name":"world","type":"World","desc":"the world the map will belong to"},{"name":"location","type":"Location","desc":"the origin location to find the nearest structure"},{"name":"structureType","type":"org.bukkit.generator.structure.StructureType","desc":"the type of structure to find"},{"name":"mapIcon","type":"org.bukkit.map.MapCursor.Type","desc":"the map icon to use on the map"},{"name":"radius","type":"int","desc":"radius to search, see World#locateNearestStructure for more\n              information"},{"name":"findUnexplored","type":"boolean","desc":"whether to find unexplored structures"}],"desc":"Create a new explorer map targeting the closest nearby structure of a\ngiven {@link org.bukkit.generator.structure.StructureType}.","ret":"the newly created item stack or null if it can't find a location"},{"name":"reload","params":[],"desc":"Reloads the server, refreshing settings and plugin information.","ret":""},{"name":"reloadData","params":[],"desc":"Reload only the Minecraft data for the server. This includes custom\nadvancements and loot tables.","ret":""},{"name":"updateResources","params":[],"desc":"Updates all advancement, tag, and recipe data for all connected clients.\nUseful for updating clients to new advancements/recipes/tags.","ret":""},{"name":"updateRecipes","params":[],"desc":"Updates recipe data and the recipe book for all connected clients. Useful for\nupdating clients to new recipes.","ret":""},{"name":"getLogger","params":[],"desc":"Returns the primary logger associated with this server instance.","ret":"Logger associated with this server"},{"name":"getPluginCommand","params":[{"name":"name","type":"String","desc":"the name of the command to retrieve"}],"desc":"Gets a {@link PluginCommand} with the given name or alias.","ret":"a plugin command if found, null otherwise"},{"name":"savePlayers","params":[],"desc":"Writes loaded players to disk.","ret":""},{"name":"dispatchCommand","params":[{"name":"sender","type":"CommandSender","desc":"the apparent sender of the command"},{"name":"commandLine","type":"String","desc":"the command + arguments. Example: <code>test abc\n    123</code>"}],"desc":"Dispatches a command on this server, and executes it if found.","ret":"returns false if no target is found"},{"name":"addRecipe","params":[{"name":"recipe","type":"Recipe","desc":"the recipe to add"}],"desc":"Adds a recipe to the crafting manager.","ret":"true if the recipe was added, false if it wasn't for some\n    reason"},{"name":"addRecipe","params":[{"name":"recipe","type":"Recipe","desc":"the recipe to add"},{"name":"resendRecipes","type":"boolean","desc":"true to update the client with the full set of recipes"}],"desc":"Adds a recipe to the crafting manager.","ret":"true if the recipe was added, false if it wasn't for some reason"},{"name":"getRecipesFor","params":[{"name":"result","type":"ItemStack","desc":"the item to match against recipe results"}],"desc":"Get a list of all recipes for a given item. The stack size is ignored\nin comparisons. If the durability is -1, it will match any data value.","ret":"a list of recipes with the given result"},{"name":"getRecipe","params":[{"name":"recipeKey","type":"NamespacedKey","desc":"the key of the recipe to return"}],"desc":"Get the {@link Recipe} for the given key.","ret":"the recipe for the given key or null."},{"name":"getCraftingRecipe","params":[{"name":"craftingMatrix","type":"ItemStack[]","desc":"list of items to be crafted from.\n                      Must not contain more than 9 items."},{"name":"world","type":"World","desc":"The world the crafting takes place in."}],"desc":"Get the {@link Recipe} for the list of ItemStacks provided.\n\n<p>The list is formatted as a crafting matrix where the index follow\nthe pattern below:</p>\n\n<pre>\n[ 0 1 2 ]\n[ 3 4 5 ]\n[ 6 7 8 ]\n</pre>\n\n<p>NOTE: This method will not modify the provided ItemStack array, for that, use\n{@link #craftItem(ItemStack[], World, Player)}.</p>","ret":"the {@link Recipe} resulting from the given crafting matrix."},{"name":"craftItemResult","params":[{"name":"craftingMatrix","type":"ItemStack[]","desc":"list of items to be crafted from.\n                      Must not contain more than 9 items."},{"name":"world","type":"World","desc":"The world the crafting takes place in."},{"name":"player","type":"Player","desc":"The player to imitate the crafting event on."}],"desc":"Get the crafted item using the list of {@link ItemStack} provided.\n\n<p>The list is formatted as a crafting matrix where the index follow\nthe pattern below:</p>\n\n<pre>\n[ 0 1 2 ]\n[ 3 4 5 ]\n[ 6 7 8 ]\n</pre>\n\n<p>The {@link World} and {@link Player} arguments are required to fulfill the Bukkit Crafting\nevents.</p>\n\n<p>Calls {@link org.bukkit.event.inventory.PrepareItemCraftEvent} to imitate the {@link Player}\ninitiating the crafting event.</p>","ret":"resulting {@link ItemCraftResult} containing the resulting item, matrix and any overflow items."},{"name":"craftItemResult","params":[{"name":"craftingMatrix","type":"ItemStack[]","desc":"list of items to be crafted from.\n                      Must not contain more than 9 items."},{"name":"world","type":"World","desc":"The world the crafting takes place in."}],"desc":"Get the crafted item using the list of {@link ItemStack} provided.\n\n<p>The list is formatted as a crafting matrix where the index follow\nthe pattern below:</p>\n\n<pre>\n[ 0 1 2 ]\n[ 3 4 5 ]\n[ 6 7 8 ]\n</pre>","ret":"resulting {@link ItemCraftResult} containing the resulting item, matrix and any overflow items."},{"name":"craftItem","params":[{"name":"craftingMatrix","type":"ItemStack[]","desc":"list of items to be crafted from.\n                      Must not contain more than 9 items."},{"name":"world","type":"World","desc":"The world the crafting takes place in."},{"name":"player","type":"Player","desc":"The player to imitate the crafting event on."}],"desc":"Get the crafted item using the list of {@link ItemStack} provided.\n\n<p>The list is formatted as a crafting matrix where the index follow\nthe pattern below:</p>\n\n<pre>\n[ 0 1 2 ]\n[ 3 4 5 ]\n[ 6 7 8 ]\n</pre>\n\n<p>The {@link World} and {@link Player} arguments are required to fulfill the Bukkit Crafting\nevents.</p>\n\n<p>Calls {@link org.bukkit.event.inventory.PrepareItemCraftEvent} to imitate the {@link Player}\ninitiating the crafting event.</p>","ret":"the {@link ItemStack} resulting from the given crafting matrix, if no recipe is found\nan ItemStack of {@link Material#AIR} is returned."},{"name":"craftItem","params":[{"name":"craftingMatrix","type":"ItemStack[]","desc":"list of items to be crafted from.\n                      Must not contain more than 9 items."},{"name":"world","type":"World","desc":"The world the crafting takes place in."}],"desc":"Get the crafted item using the list of {@link ItemStack} provided.\n\n<p>The list is formatted as a crafting matrix where the index follow\nthe pattern below:</p>\n\n<pre>\n[ 0 1 2 ]\n[ 3 4 5 ]\n[ 6 7 8 ]\n</pre>","ret":"the {@link ItemStack} resulting from the given crafting matrix, if no recipe is found\nan ItemStack of {@link Material#AIR} is returned."},{"name":"recipeIterator","params":[],"desc":"Get an iterator through the list of crafting recipes.","ret":"an iterator"},{"name":"clearRecipes","params":[],"desc":"Clears the list of crafting recipes.","ret":""},{"name":"resetRecipes","params":[],"desc":"Resets the list of crafting recipes to the default.","ret":""},{"name":"removeRecipe","params":[{"name":"key","type":"NamespacedKey","desc":"NamespacedKey of recipe to remove."}],"desc":"Remove a recipe from the server.\n\n<b>Note that removing a recipe may cause permanent loss of data\nassociated with that recipe (eg whether it has been discovered by\nplayers).</b>","ret":"True if recipe was removed"},{"name":"removeRecipe","params":[{"name":"key","type":"NamespacedKey","desc":"NamespacedKey of recipe to remove."},{"name":"resendRecipes","type":"boolean","desc":"true to update all clients on the new recipe list.\n                     Will only update if a recipe was actually removed"}],"desc":"Remove a recipe from the server.\n<p>\n<b>Note that removing a recipe may cause permanent loss of data\nassociated with that recipe (eg whether it has been discovered by\nplayers).</b>","ret":"True if recipe was removed"},{"name":"getCommandAliases","params":[],"desc":"Gets a list of command aliases defined in the server properties.","ret":"a map of aliases to command names"},{"name":"getSpawnRadius","params":[],"desc":"Gets the radius, in blocks, around each worlds spawn point to protect.","ret":"spawn radius, or 0 if none"},{"name":"setSpawnRadius","params":[{"name":"value","type":"int","desc":"new spawn radius, or 0 if none"}],"desc":"Sets the radius, in blocks, around each worlds spawn point to protect.","ret":""},{"name":"shouldSendChatPreviews","params":[],"desc":"Gets whether the server should send a preview of the player's chat\nmessage to the client when the player sends a message","ret":"true if the server should send a preview, false otherwise"},{"name":"isEnforcingSecureProfiles","params":[],"desc":"Gets whether the server only allow players with Mojang-signed public key\nto join","ret":"true if only Mojang-signed players can join, false otherwise"},{"name":"getHideOnlinePlayers","params":[],"desc":"Gets whether the Server hide online players in server status.","ret":"true if the server hide online players, false otherwise"},{"name":"getOnlineMode","params":[],"desc":"Gets whether the Server is in online mode or not.","ret":"true if the server authenticates clients, false otherwise"},{"name":"getAllowFlight","params":[],"desc":"Gets whether this server allows flying or not.","ret":"true if the server allows flight, false otherwise"},{"name":"isHardcore","params":[],"desc":"Gets whether the server is in hardcore mode or not.","ret":"true if the server mode is hardcore, false otherwise"},{"name":"shutdown","params":[],"desc":"Shutdowns the server, stopping everything.","ret":""},{"name":"broadcast","params":[{"name":"message","type":"net.kyori.adventure.text.Component","desc":"the message"}],"desc":"Broadcast a message to all players.\n<p>\nThis is the same as calling {@link #broadcast(net.kyori.adventure.text.Component,\njava.lang.String)} with the {@link Server#BROADCAST_CHANNEL_USERS} permission.","ret":"the number of players"},{"name":"broadcast","params":[{"name":"message","type":"net.kyori.adventure.text.Component","desc":"message to broadcast"},{"name":"permission","type":"String","desc":"the required permission {@link Permissible\n    permissibles} must have to receive the broadcast"}],"desc":"Broadcasts the specified message to every user with the given\npermission name.","ret":"number of message recipients"},{"name":"broadcast","params":[{"name":"message","type":"String","desc":"message to broadcast"},{"name":"permission","type":"String","desc":"the required permission {@link Permissible\n    permissibles} must have to receive the broadcast"}],"desc":"Broadcasts the specified message to every user with the given\npermission name.","ret":"number of message recipients"},{"name":"getOfflinePlayerIfCached","params":[{"name":"name","type":"String","desc":"the name of the player to retrieve"}],"desc":"Gets the player by the given name, regardless if they are offline or\nonline.\n<p>\nThis will not make a web request to get the UUID for the given name,\nthus this method will not block. However this method will return\n{@code null} if the player is not cached.\n</p>","ret":"an offline player if cached, {@code null} otherwise"},{"name":"getOfflinePlayer","params":[{"name":"id","type":"UUID","desc":"the UUID of the player to retrieve"}],"desc":"Gets the player by the given UUID, regardless if they are offline or\nonline.\n<p>\nThis will return an object even if the player does not exist. To this\nmethod, all players will exist.","ret":"an offline player"},{"name":"createPlayerProfile","params":[{"name":"uniqueId","type":"UUID","desc":"the unique id"},{"name":"name","type":"String","desc":"the name"}],"desc":"Creates a new {@link PlayerProfile}.","ret":"the new PlayerProfile"},{"name":"createPlayerProfile","params":[{"name":"uniqueId","type":"UUID","desc":"the unique id"}],"desc":"Creates a new {@link PlayerProfile}.","ret":"the new PlayerProfile"},{"name":"createPlayerProfile","params":[{"name":"name","type":"String","desc":"the name"}],"desc":"Creates a new {@link PlayerProfile}.","ret":"the new PlayerProfile"},{"name":"getIPBans","params":[],"desc":"Gets a set containing all current IPs that are banned.","ret":"a set containing banned IP addresses"},{"name":"banIP","params":[{"name":"address","type":"String","desc":"the IP address to ban"}],"desc":"Bans the specified address from the server.","ret":""},{"name":"unbanIP","params":[{"name":"address","type":"String","desc":"the IP address to unban"}],"desc":"Unbans the specified address from the server.","ret":""},{"name":"banIP","params":[{"name":"address","type":"InetAddress","desc":"the IP address to ban"}],"desc":"Bans the specified address from the server.","ret":""},{"name":"unbanIP","params":[{"name":"address","type":"InetAddress","desc":"the IP address to unban"}],"desc":"Unbans the specified address from the server.","ret":""},{"name":"getBannedPlayers","params":[],"desc":"Gets a set containing all banned players.","ret":"a set containing banned players"},{"name":"getBanList","params":[{"name":"type","type":"BanList.Type","desc":"the type of list to fetch, cannot be null"}],"desc":"Gets a ban list for the supplied type.","ret":"a ban list of the specified type"},{"name":"getBanList","params":[{"name":"type","type":"io.papermc.paper.ban.BanListType<B>","desc":"the type of list to fetch, cannot be null"}],"desc":"Gets a ban list for the supplied type.","ret":"a ban list of the specified type"},{"name":"getOperators","params":[],"desc":"Gets a set containing all player operators.","ret":"a set containing player operators"},{"name":"getDefaultGameMode","params":[],"desc":"Gets the default {@link GameMode} for new players.","ret":"the default game mode"},{"name":"setDefaultGameMode","params":[{"name":"mode","type":"GameMode","desc":"the new game mode"}],"desc":"Sets the default {@link GameMode} for new players.","ret":""},{"name":"getConsoleSender","params":[],"desc":"Gets a {@link ConsoleCommandSender} that may be used as an input source\nfor this server.","ret":"a console command sender"},{"name":"createCommandSender","params":[{"name":"feedback","type":"java.util.function.Consumer<? super net.kyori.adventure.text.Component>","desc":"feedback listener"}],"desc":"Creates a special {@link CommandSender} which redirects command feedback (in the form of chat messages) to the\nspecified listener. The returned sender will have the same effective permissions as {@link #getConsoleSender()}.","ret":"a command sender"},{"name":"getWorldContainer","params":[],"desc":"Gets the folder that contains all of the various {@link World}s.","ret":"folder that contains all worlds"},{"name":"getOfflinePlayers","params":[],"desc":"Gets every player that has ever played on this server.\n<p>\n<b>This method can be expensive as it loads all the player data files from the disk.</b>","ret":"an array containing all previous players"},{"name":"getMessenger","params":[],"desc":"Gets the {@link Messenger} responsible for this server.","ret":"messenger responsible for this server"},{"name":"getHelpMap","params":[],"desc":"Gets the {@link HelpMap} providing help topics for this server.","ret":"a help map for this server"},{"name":"createInventory","params":[{"name":"owner","type":"InventoryHolder","desc":"the holder of the inventory, or null to indicate no holder"},{"name":"type","type":"InventoryType","desc":"the type of inventory to create"}],"desc":"Creates an empty inventory with the specified type. If the type\nis {@link InventoryType#CHEST}, the new inventory has a size of 27;\notherwise the new inventory has the normal size for its type.\n<br>\n{@link InventoryType#WORKBENCH} will not process crafting recipes if\ncreated with this method. Use\n{@link Player#openWorkbench(Location, boolean)} instead.\n<br>\n{@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\nfor possible enchanting results. Use\n{@link Player#openEnchanting(Location, boolean)} instead.","ret":"a new inventory"},{"name":"createInventory","params":[{"name":"owner","type":"InventoryHolder","desc":"The holder of the inventory; can be null if there's no holder."},{"name":"type","type":"InventoryType","desc":"The type of inventory to create."},{"name":"title","type":"net.kyori.adventure.text.Component","desc":"The title of the inventory, to be displayed when it is viewed."}],"desc":"Creates an empty inventory with the specified type and title. If the type\nis {@link InventoryType#CHEST}, the new inventory has a size of 27;\notherwise the new inventory has the normal size for its type.<br>\nIt should be noted that some inventory types do not support titles and\nmay not render with said titles on the Minecraft client.\n<br>\n{@link InventoryType#WORKBENCH} will not process crafting recipes if\ncreated with this method. Use\n{@link Player#openWorkbench(Location, boolean)} instead.\n<br>\n{@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\nfor possible enchanting results. Use\n{@link Player#openEnchanting(Location, boolean)} instead.","ret":"The new inventory."},{"name":"createInventory","params":[{"name":"owner","type":"InventoryHolder","desc":"The holder of the inventory; can be null if there's no holder."},{"name":"type","type":"InventoryType","desc":"The type of inventory to create."},{"name":"title","type":"String","desc":"The title of the inventory, to be displayed when it is viewed."}],"desc":"Creates an empty inventory with the specified type and title. If the type\nis {@link InventoryType#CHEST}, the new inventory has a size of 27;\notherwise the new inventory has the normal size for its type.<br>\nIt should be noted that some inventory types do not support titles and\nmay not render with said titles on the Minecraft client.\n<br>\n{@link InventoryType#WORKBENCH} will not process crafting recipes if\ncreated with this method. Use\n{@link Player#openWorkbench(Location, boolean)} instead.\n<br>\n{@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\nfor possible enchanting results. Use\n{@link Player#openEnchanting(Location, boolean)} instead.","ret":"The new inventory."},{"name":"createInventory","params":[{"name":"owner","type":"InventoryHolder","desc":"the holder of the inventory, or null to indicate no holder"},{"name":"size","type":"int","desc":"a multiple of 9 as the size of inventory to create"}],"desc":"Creates an empty inventory of type {@link InventoryType#CHEST} with the\nspecified size.","ret":"a new inventory"},{"name":"createInventory","params":[{"name":"owner","type":"InventoryHolder","desc":"the holder of the inventory, or null to indicate no holder"},{"name":"size","type":"int","desc":"a multiple of 9 as the size of inventory to create"},{"name":"title","type":"net.kyori.adventure.text.Component","desc":"the title of the inventory, displayed when inventory is\n    viewed"}],"desc":"Creates an empty inventory of type {@link InventoryType#CHEST} with the\nspecified size and title.","ret":"a new inventory"},{"name":"createInventory","params":[{"name":"owner","type":"InventoryHolder","desc":"the holder of the inventory, or null to indicate no holder"},{"name":"size","type":"int","desc":"a multiple of 9 as the size of inventory to create"},{"name":"title","type":"String","desc":"the title of the inventory, displayed when inventory is\n    viewed"}],"desc":"Creates an empty inventory of type {@link InventoryType#CHEST} with the\nspecified size and title.","ret":"a new inventory"},{"name":"createMerchant","params":[{"name":"title","type":"net.kyori.adventure.text.Component","desc":"the title of the corresponding merchant inventory, displayed\nwhen the merchant inventory is viewed"}],"desc":"Creates an empty merchant.","ret":"a new merchant"},{"name":"createMerchant","params":[{"name":"title","type":"String","desc":"the title of the corresponding merchant inventory, displayed\nwhen the merchant inventory is viewed"}],"desc":"Creates an empty merchant.","ret":"a new merchant"},{"name":"getMaxChainedNeighborUpdates","params":[],"desc":"Gets the amount of consecutive neighbor updates before skipping\nadditional ones.","ret":"the amount of consecutive neighbor updates, if the value is\nnegative then the limit it's not used"},{"name":"getMonsterSpawnLimit","params":[],"desc":"Gets user-specified limit for number of monsters that can spawn in a\nchunk.","ret":"the monster spawn limit"},{"name":"getAnimalSpawnLimit","params":[],"desc":"Gets user-specified limit for number of animals that can spawn in a\nchunk.","ret":"the animal spawn limit"},{"name":"getWaterAnimalSpawnLimit","params":[],"desc":"Gets user-specified limit for number of water animals that can spawn in\na chunk.","ret":"the water animal spawn limit"},{"name":"getWaterAmbientSpawnLimit","params":[],"desc":"Gets user-specified limit for number of water ambient mobs that can spawn\nin a chunk.","ret":"the water ambient spawn limit"},{"name":"getWaterUndergroundCreatureSpawnLimit","params":[],"desc":"Get user-specified limit for number of water creature underground that can spawn\nin a chunk.","ret":"the water underground creature limit"},{"name":"getAmbientSpawnLimit","params":[],"desc":"Gets user-specified limit for number of ambient mobs that can spawn in\na chunk.","ret":"the ambient spawn limit"},{"name":"getSpawnLimit","params":[{"name":"spawnCategory","type":"SpawnCategory","desc":"the category spawn"}],"desc":"Gets user-specified limit for number of {@link SpawnCategory} mobs that can spawn in\na chunk.\n\n<b>Note: the {@link SpawnCategory#MISC} are not consider.</b>","ret":"the {@link SpawnCategory} spawn limit"},{"name":"isPrimaryThread","params":[],"desc":"Checks the current thread against the expected primary thread for the\nserver.\n<p>\n<b>Note:</b> this method should not be used to indicate the current\nsynchronized state of the runtime. A current thread matching the main\nthread indicates that it is synchronized, but a mismatch <b>does not\npreclude</b> the same assumption.","ret":"true if the current thread matches the expected primary thread,\n    false otherwise"},{"name":"motd","params":[],"desc":"Gets the message that is displayed on the server list.","ret":"the server's MOTD"},{"name":"motd","params":[{"name":"motd","type":"net.kyori.adventure.text.Component","desc":"The message to be displayed"}],"desc":"Set the message that is displayed on the server list.","ret":""},{"name":"shutdownMessage","params":[],"desc":"Gets the default message that is displayed when the server is stopped.","ret":"the shutdown message"},{"name":"getMotd","params":[],"desc":"Gets the message that is displayed on the server list.","ret":"the servers MOTD"},{"name":"setMotd","params":[{"name":"motd","type":"String","desc":"The message to be displayed"}],"desc":"Set the message that is displayed on the server list.","ret":""},{"name":"getShutdownMessage","params":[],"desc":"Gets the default message that is displayed when the server is stopped.","ret":"the shutdown message"},{"name":"getWarningState","params":[],"desc":"Gets the current warning state for the server.","ret":"the configured warning state"},{"name":"getItemFactory","params":[],"desc":"Gets the instance of the item factory (for {@link ItemMeta}).","ret":"the item factory"},{"name":"getScoreboardManager","params":[],"desc":"Gets the instance of the scoreboard manager.\n<p>\nThis will only exist after the first world has loaded.","ret":"the scoreboard manager or null if no worlds are loaded."},{"name":"getScoreboardCriteria","params":[{"name":"name","type":"String","desc":"the criteria name"}],"desc":"Get (or create) a new {@link Criteria} by its name.","ret":"the criteria"},{"name":"getServerIcon","params":[],"desc":"Gets an instance of the server's default server-icon.","ret":"the default server-icon; null values may be used by the\n    implementation to indicate no defined icon, but this behavior is\n    not guaranteed"},{"name":"loadServerIcon","params":[{"name":"file","type":"File","desc":"the file to load the from"}],"desc":"Loads an image from a file, and returns a cached image for the specific\nserver-icon.\n<p>\nSize and type are implementation defined. An incompatible file is\nguaranteed to throw an implementation-defined {@link Exception}.","ret":"a cached server-icon that can be used for a {@link\n    ServerListPingEvent#setServerIcon(CachedServerIcon)}"},{"name":"loadServerIcon","params":[{"name":"image","type":"BufferedImage","desc":"the image to use"}],"desc":"Creates a cached server-icon for the specific image.\n<p>\nSize and type are implementation defined. An incompatible file is\nguaranteed to throw an implementation-defined {@link Exception}.","ret":"a cached server-icon that can be used for a {@link\n    ServerListPingEvent#setServerIcon(CachedServerIcon)}"},{"name":"setIdleTimeout","params":[{"name":"threshold","type":"int","desc":"the idle timeout in minutes"}],"desc":"Set the idle kick timeout. Any players idle for the specified amount of\ntime will be automatically kicked.\n<p>\nA value of 0 will disable the idle kick timeout.","ret":""},{"name":"getIdleTimeout","params":[],"desc":"Gets the idle kick timeout.","ret":"the idle timeout in minutes"},{"name":"createChunkData","params":[{"name":"world","type":"World","desc":"the world to create the ChunkData for"}],"desc":"Create a ChunkData for use in a generator.\n\nSee {@link ChunkGenerator#generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)}","ret":"a new ChunkData for the world"},{"name":"createVanillaChunkData","params":[{"name":"world","type":"World","desc":"the world to create the ChunkData for"},{"name":"x","type":"int","desc":"the x coordinate of the chunk"},{"name":"z","type":"int","desc":"the z coordinate of the chunk"}],"desc":"Create a ChunkData for use in a generator, that is populated by the vanilla generator for that world","ret":"a new ChunkData for the world"},{"name":"createBossBar","params":[{"name":"title","type":"String","desc":"the title of the boss bar"},{"name":"color","type":"BarColor","desc":"the color of the boss bar"},{"name":"style","type":"BarStyle","desc":"the style of the boss bar"},{"name":"flags","type":"BarFlag","desc":"an optional list of flags to set on the boss bar"}],"desc":"Creates a boss bar instance to display to players. The progress\ndefaults to 1.0","ret":"the created boss bar"},{"name":"createBossBar","params":[{"name":"key","type":"NamespacedKey","desc":"the key of the boss bar that is used to access the boss bar"},{"name":"title","type":"String","desc":"the title of the boss bar"},{"name":"color","type":"BarColor","desc":"the color of the boss bar"},{"name":"style","type":"BarStyle","desc":"the style of the boss bar"},{"name":"flags","type":"BarFlag","desc":"an optional list of flags to set on the boss bar"}],"desc":"Creates a boss bar instance to display to players. The progress defaults\nto 1.0.\n<br>\nThis instance is added to the persistent storage of the server and will\nbe editable by commands and restored after restart.","ret":"the created boss bar"},{"name":"getBossBars","params":[],"desc":"Gets an unmodifiable iterator through all persistent bossbars.\n<ul>\n  <li><b>not</b> bound to a {@link org.bukkit.entity.Boss}</li>\n  <li>\n    <b>not</b> created using\n    {@link #createBossBar(String, BarColor, BarStyle, BarFlag...)}\n  </li>\n</ul>\n\ne.g. bossbars created using the bossbar command","ret":"a bossbar iterator"},{"name":"getBossBar","params":[{"name":"key","type":"NamespacedKey","desc":"unique bossbar key"}],"desc":"Gets the {@link KeyedBossBar} specified by this key.\n<ul>\n  <li><b>not</b> bound to a {@link org.bukkit.entity.Boss}</li>\n  <li>\n    <b>not</b> created using\n    {@link #createBossBar(String, BarColor, BarStyle, BarFlag...)}\n  </li>\n</ul>\n\ne.g. bossbars created using the bossbar command","ret":"bossbar or null if not exists"},{"name":"removeBossBar","params":[{"name":"key","type":"NamespacedKey","desc":"unique bossbar key"}],"desc":"Removes a {@link KeyedBossBar} specified by this key.\n<ul>\n  <li><b>not</b> bound to a {@link org.bukkit.entity.Boss}</li>\n  <li>\n    <b>not</b> created using\n    {@link #createBossBar(String, BarColor, BarStyle, BarFlag...)}\n  </li>\n</ul>\n\ne.g. bossbars created using the bossbar command","ret":"true if removal succeeded or false"},{"name":"getEntity","params":[{"name":"uuid","type":"UUID","desc":"the UUID of the entity"}],"desc":"Gets an entity on the server by its UUID","ret":"the entity with the given UUID, or null if it isn't found"},{"name":"getTPS","params":[],"desc":"Gets the current server TPS","ret":"current server TPS (1m, 5m, 15m in Paper-Server)"},{"name":"getTickTimes","params":[],"desc":"Get a sample of the servers last tick times (in nanos)","ret":"A sample of the servers last tick times (in nanos)"},{"name":"getAverageTickTime","params":[],"desc":"Get the average tick time (in millis)","ret":"Average tick time (in millis)"},{"name":"getAdvancement","params":[{"name":"key","type":"NamespacedKey","desc":"unique advancement key"}],"desc":"Get the advancement specified by this key.","ret":"advancement or null if not exists"},{"name":"advancementIterator","params":[],"desc":"Get an iterator through all advancements. Advancements cannot be removed\nfrom this iterator,","ret":"an advancement iterator"},{"name":"createBlockData","params":[{"name":"material","type":"Material","desc":"the material"}],"desc":"Creates a new {@link BlockData} instance for the specified Material, with\nall properties initialized to unspecified defaults.","ret":"new data instance"},{"name":"createBlockData","params":[{"name":"material","type":"Material","desc":"the material"},{"name":"consumer","type":"Consumer<? super BlockData>","desc":"consumer to run on new instance before returning"}],"desc":"Creates a new {@link BlockData} instance for the specified Material, with\nall properties initialized to unspecified defaults.","ret":"new data instance"},{"name":"createBlockData","params":[{"name":"data","type":"String","desc":"data string"}],"desc":"Creates a new {@link BlockData} instance with material and properties\nparsed from provided data.","ret":"new data instance"},{"name":"createBlockData","params":[{"name":"material","type":"Material","desc":"the material"},{"name":"data","type":"String","desc":"data string"}],"desc":"Creates a new {@link BlockData} instance for the specified Material, with\nall properties initialized to unspecified defaults, except for those\nprovided in data.","ret":"new data instance"},{"name":"getTag","params":[{"name":"registry","type":"String","desc":"the tag registry to look at"},{"name":"tag","type":"NamespacedKey","desc":"the name of the tag"},{"name":"clazz","type":"Class<T>","desc":"the class of the tag entries"}],"desc":"Gets a tag which has already been defined within the server. Plugins are\nsuggested to use the concrete tags in {@link Tag} rather than this method\nwhich makes no guarantees about which tags are available, and may also be\nless performant due to lack of caching.\n<br>\nTags will be searched for in an implementation specific manner, but a\npath consisting of namespace/tags/registry/key is expected.\n<br>\nServer implementations are allowed to handle only the registries\nindicated in {@link Tag}.","ret":"the tag or null"},{"name":"getTags","params":[{"name":"registry","type":"String","desc":"the tag registry to look at"},{"name":"clazz","type":"Class<T>","desc":"the class of the tag entries"}],"desc":"Gets a all tags which have been defined within the server.\n<br>\nServer implementations are allowed to handle only the registries\nindicated in {@link Tag}.\n<br>\nNo guarantees are made about the mutability of the returned iterator.","ret":"all defined tags"},{"name":"getLootTable","params":[{"name":"key","type":"NamespacedKey","desc":"the name of the LootTable"}],"desc":"Gets the specified {@link LootTable}.","ret":"the LootTable, or null if no LootTable is found with that name"},{"name":"selectEntities","params":[{"name":"sender","type":"CommandSender","desc":"the sender to execute as, must be provided"},{"name":"selector","type":"String","desc":"the selection string"}],"desc":"Selects entities using the given Vanilla selector.\n<br>\nNo guarantees are made about the selector format, other than they match\nthe Vanilla format for the active Minecraft version.\n<br>\nUsually a selector will start with '@', unless selecting a Player in\nwhich case it may simply be the Player's name or UUID.\n<br>\nNote that in Vanilla, elevated permissions are usually required to use\n'@' selectors, but this method should not check such permissions from the\nsender.","ret":"a list of the selected entities. The list will not be null, but\nno further guarantees are made."},{"name":"getStructureManager","params":[],"desc":"Gets the structure manager for loading and saving structures.","ret":"the structure manager"},{"name":"getRegistry","params":[{"name":"tClass","type":"Class<T>","desc":"of the registry to get"}],"desc":"Returns the registry for the given class.\n<br>\nIf no registry is present for the given class null will be returned.\n<br>\nDepending on the implementation not every registry present in\n{@link Registry} will be returned by this method.","ret":"the corresponding registry or null if not present"},{"name":"getUnsafe","params":[],"desc":"","ret":"the unsafe values instance"},{"name":"getCommandMap","params":[],"desc":"Gets the active {@link org.bukkit.command.CommandMap}","ret":"the active command map"},{"name":"reloadPermissions","params":[],"desc":"Reload the Permissions in permissions.yml","ret":""},{"name":"reloadCommandAliases","params":[],"desc":"Reload the Command Aliases in commands.yml","ret":"Whether the reload was successful"},{"name":"suggestPlayerNamesWhenNullTabCompletions","params":[],"desc":"Checks if player names should be suggested when a command returns {@code null} as\ntheir tab completion result.","ret":"true if player names should be suggested"},{"name":"getPermissionMessage","params":[],"desc":"Gets the default no permission message used on the server","ret":"the default message"},{"name":"permissionMessage","params":[],"desc":"Gets the default no permission message used on the server","ret":"the default message"},{"name":"createProfile","params":[{"name":"uuid","type":"UUID","desc":"UUID to create profile for"}],"desc":"Creates a PlayerProfile for the specified uuid, with name as null.\n\nIf a player with the passed uuid exists on the server at the time of creation, the returned player profile will\nbe populated with the properties of said player (including their uuid and name).","ret":"A PlayerProfile object"},{"name":"createProfile","params":[{"name":"name","type":"String","desc":"Name to create profile for"}],"desc":"Creates a PlayerProfile for the specified name, with UUID as null.\n\nIf a player with the passed name exists on the server at the time of creation, the returned player profile will\nbe populated with the properties of said player (including their uuid and name).\n<p>\nE.g. if the player 'jeb_' is currently playing on the server, calling {@code createProfile(\"JEB_\")} will\nyield a profile with the name 'jeb_', their uuid and their textures.\nTo bypass this pre-population on a case-insensitive name match, see {@link #createProfileExact(UUID, String)}.\n<p>","ret":"A PlayerProfile object"},{"name":"createProfile","params":[{"name":"uuid","type":"UUID","desc":"UUID to create profile for"},{"name":"name","type":"String","desc":"Name to create profile for"}],"desc":"Creates a PlayerProfile for the specified name/uuid\n\nBoth UUID and Name can not be null at same time. One must be supplied.\nIf a player with the passed uuid or name exists on the server at the time of creation, the returned player\nprofile will be populated with the properties of said player (including their uuid and name).\n<p>\nE.g. if the player 'jeb_' is currently playing on the server, calling {@code createProfile(null, \"JEB_\")} will\nyield a profile with the name 'jeb_', their uuid and their textures.\nTo bypass this pre-population on an case-insensitive name match, see {@link #createProfileExact(UUID, String)}.\n<p>\n\nThe name comparison will compare the {@link String#toLowerCase()} version of both the passed name parameter and\na players name to honour the case-insensitive nature of a mojang profile lookup.","ret":"A PlayerProfile object"},{"name":"createProfileExact","params":[{"name":"uuid","type":"UUID","desc":"UUID to create profile for"},{"name":"name","type":"String","desc":"Name to create profile for"}],"desc":"Creates an exact PlayerProfile for the specified name/uuid\n\nBoth UUID and Name can not be null at same time. One must be supplied.\nIf a player with the passed uuid or name exists on the server at the time of creation, the returned player\nprofile will be populated with the properties of said player.\n<p>\nCompared to {@link #createProfile(UUID, String)}, this method will never mutate the passed uuid or name.\nIf a player with either the same uuid or a matching name (case-insensitive) is found on the server, their\nproperties, such as textures, will be pre-populated in the profile, however the passed uuid and name stay intact.","ret":"A PlayerProfile object"},{"name":"isStopping","params":[],"desc":"Checks if the server is in the process of being shutdown.","ret":"true if server is in the process of being shutdown"},{"name":"getMobGoals","params":[],"desc":"Returns the {@link com.destroystokyo.paper.entity.ai.MobGoals} manager","ret":"the mob goals manager"},{"name":"getDatapackManager","params":[],"desc":"","ret":"the datapack manager"},{"name":"getPotionBrewer","params":[],"desc":"Gets the potion brewer.","ret":"the potion brewer"},{"name":"getRegionScheduler","params":[],"desc":"Returns the region task scheduler. The region task scheduler can be used to schedule\ntasks by location to be executed on the region which owns the location.\n<p>\n<b>Note</b>: It is entirely inappropriate to use the region scheduler to schedule tasks for entities.\nIf you wish to schedule tasks to perform actions on entities, you should be using {@link Entity#getScheduler()}\nas the entity scheduler will \"follow\" an entity if it is teleported, whereas the region task scheduler\nwill not.\n</p>\n<p><b>If you do not need/want to make your plugin run on Folia, use {@link #getScheduler()} instead.</b></p>","ret":"the region task scheduler"},{"name":"getAsyncScheduler","params":[],"desc":"Returns the async task scheduler. The async task scheduler can be used to schedule tasks\nthat execute asynchronously from the server tick process.","ret":"the async task scheduler"},{"name":"getGlobalRegionScheduler","params":[],"desc":"Returns the global region task scheduler. The global task scheduler can be used to schedule\ntasks to execute on the global region.\n<p>\nThe global region is responsible for maintaining world day time, world game time, weather cycle,\nsleep night skipping, executing commands for console, and other misc. tasks that do not belong to any specific region.\n</p>\n<p><b>If you do not need/want to make your plugin run on Folia, use {@link #getScheduler()} instead.</b></p>","ret":"the global region scheduler"},{"name":"isOwnedByCurrentRegion","params":[{"name":"world","type":"World","desc":"Specified world."},{"name":"position","type":"io.papermc.paper.math.Position","desc":"Specified block position."}],"desc":"Returns whether the current thread is ticking a region and that the region being ticked\nowns the chunk at the specified world and block position.","ret":""},{"name":"isOwnedByCurrentRegion","params":[{"name":"world","type":"World","desc":"Specified world."},{"name":"position","type":"io.papermc.paper.math.Position","desc":"Specified block position."},{"name":"squareRadiusChunks","type":"int","desc":"Specified square radius. Must be >= 0. Note that this parameter is <i>not</i> a <i>squared</i>\n                          radius, but rather a <i>Chebyshev Distance</i>."}],"desc":"Returns whether the current thread is ticking a region and that the region being ticked\nowns the chunks centered at the specified block position within the specified square radius.\nSpecifically, this function checks that every chunk with position x in [centerX - radius, centerX + radius] and\nposition z in [centerZ - radius, centerZ + radius] is owned by the current ticking region.","ret":""},{"name":"isOwnedByCurrentRegion","params":[{"name":"location","type":"Location","desc":"Specified location, must have a non-null world."}],"desc":"Returns whether the current thread is ticking a region and that the region being ticked\nowns the chunk at the specified world and block position as included in the specified location.","ret":""},{"name":"isOwnedByCurrentRegion","params":[{"name":"location","type":"Location","desc":"Specified location, must have a non-null world."},{"name":"squareRadiusChunks","type":"int","desc":"Specified square radius. Must be >= 0. Note that this parameter is <i>not</i> a <i>squared</i>\n                          radius, but rather a <i>Chebyshev Distance</i>."}],"desc":"Returns whether the current thread is ticking a region and that the region being ticked\nowns the chunks centered at the specified world and block position as included in the specified location\nwithin the specified square radius.\nSpecifically, this function checks that every chunk with position x in [centerX - radius, centerX + radius] and\nposition z in [centerZ - radius, centerZ + radius] is owned by the current ticking region.","ret":""},{"name":"isOwnedByCurrentRegion","params":[{"name":"block","type":"org.bukkit.block.Block","desc":"Specified block position."}],"desc":"Returns whether the current thread is ticking a region and that the region being ticked\nowns the chunk at the specified block position.","ret":""},{"name":"isOwnedByCurrentRegion","params":[{"name":"world","type":"World","desc":"Specified world."},{"name":"chunkX","type":"int","desc":"Specified x-coordinate of the chunk position."},{"name":"chunkZ","type":"int","desc":"Specified z-coordinate of the chunk position."}],"desc":"Returns whether the current thread is ticking a region and that the region being ticked\nowns the chunk at the specified world and chunk position.","ret":""},{"name":"isOwnedByCurrentRegion","params":[{"name":"world","type":"World","desc":"Specified world."},{"name":"chunkX","type":"int","desc":"Specified x-coordinate of the chunk position."},{"name":"chunkZ","type":"int","desc":"Specified z-coordinate of the chunk position."},{"name":"squareRadiusChunks","type":"int","desc":"Specified square radius. Must be >= 0. Note that this parameter is <i>not</i> a <i>squared</i>\n                          radius, but rather a <i>Chebyshev Distance</i>."}],"desc":"Returns whether the current thread is ticking a region and that the region being ticked\nowns the chunks centered at the specified world and chunk position within the specified\nsquare radius.\nSpecifically, this function checks that every chunk with position x in [centerX - radius, centerX + radius] and\nposition z in [centerZ - radius, centerZ + radius] is owned by the current ticking region.","ret":""},{"name":"isOwnedByCurrentRegion","params":[{"name":"entity","type":"Entity","desc":"Specified entity."}],"desc":"Returns whether the current thread is ticking a region and that the region being ticked\nowns the specified entity. Note that this function is the only appropriate method of checking\nfor ownership of an entity, as retrieving the entity's location is undefined unless the entity is owned\nby the current region.","ret":""}],"desc":"Represents the Bukkit core, for version and Server singleton handling"},{"FQCN":"org.bukkit.enchantments.EnchantmentOffer","methods":[{"name":"getEnchantment","params":[],"desc":"Get the type of the enchantment.","ret":"type of enchantment"},{"name":"setEnchantment","params":[{"name":"enchantment","type":"Enchantment","desc":"type of the enchantment"}],"desc":"Sets the type of the enchantment.","ret":""},{"name":"getEnchantmentLevel","params":[],"desc":"Gets the level of the enchantment.","ret":"level of the enchantment"},{"name":"setEnchantmentLevel","params":[{"name":"enchantmentLevel","type":"int","desc":"level of the enchantment"}],"desc":"Sets the level of the enchantment.","ret":""},{"name":"getCost","params":[],"desc":"Gets the cost (minimum level) which is displayed as a number on the right\nhand side of the enchantment offer.","ret":"cost for this enchantment"},{"name":"setCost","params":[{"name":"cost","type":"int","desc":"cost for this enchantment"}],"desc":"Sets the cost (minimum level) which is displayed as a number on the right\nhand side of the enchantment offer.","ret":""}],"desc":"A class for the available enchantment offers in the enchantment table."},{"FQCN":"org.bukkit.enchantments.Enchantment","methods":[{"name":"getName","params":[],"desc":"Gets the unique name of this enchantment","ret":"Unique name"},{"name":"getMaxLevel","params":[],"desc":"Gets the maximum level that this Enchantment may become.","ret":"Maximum level of the Enchantment"},{"name":"getStartLevel","params":[],"desc":"Gets the level that this Enchantment should start at","ret":"Starting level of the Enchantment"},{"name":"getItemTarget","params":[],"desc":"Gets the type of {@link ItemStack} that may fit this Enchantment.","ret":"Target type of the Enchantment"},{"name":"isTreasure","params":[],"desc":"Checks if this enchantment is a treasure enchantment.\n<br>\nTreasure enchantments can only be received via looting, trading, or\nfishing.","ret":"true if the enchantment is a treasure enchantment"},{"name":"isCursed","params":[],"desc":"Checks if this enchantment is a cursed enchantment\n<br>\nCursed enchantments are found the same way treasure enchantments are","ret":"true if the enchantment is cursed"},{"name":"conflictsWith","params":[{"name":"other","type":"Enchantment","desc":"The enchantment to check against"}],"desc":"Check if this enchantment conflicts with another enchantment.","ret":"True if there is a conflict."},{"name":"canEnchantItem","params":[{"name":"item","type":"ItemStack","desc":"Item to test"}],"desc":"Checks if this Enchantment may be applied to the given {@link\nItemStack}.\n<p>\nThis does not check if it conflicts with any enchantments already\napplied to the item.","ret":"True if the enchantment may be applied, otherwise False"},{"name":"displayName","params":[{"name":"level","type":"int","desc":"the level of the enchantment to show"}],"desc":"Get the name of the enchantment with its applied level.\n<p>\nIf the given {@code level} is either less than the {@link #getStartLevel()} or greater than the {@link #getMaxLevel()},\nthe level may not be shown in the numeral format one may otherwise expect.\n</p>","ret":"the name of the enchantment with {@code level} applied"},{"name":"isTradeable","params":[],"desc":"Checks if this enchantment can be found in villager trades.","ret":"true if the enchantment can be found in trades"},{"name":"isDiscoverable","params":[],"desc":"Checks if this enchantment can be found in an enchanting table\nor use to enchant items generated by loot tables.","ret":"true if the enchantment can be found in a table or by loot tables"},{"name":"getMinModifiedCost","params":[{"name":"level","type":"int","desc":"The level of the enchantment"}],"desc":"Gets the minimum modified cost of this enchantment at a specific level.\n<p>\nNote this is not the number of experience levels needed, and does not directly translate to the levels shown in an enchanting table.\nThis value is used in combination with factors such as tool enchantability to determine a final cost.\nSee <a href=\"https://minecraft.wiki/w/Enchanting/Levels\">https://minecraft.wiki/w/Enchanting/Levels</a> for more information.\n</p>","ret":"The modified cost of this enchantment"},{"name":"getMaxModifiedCost","params":[{"name":"level","type":"int","desc":"The level of the enchantment"}],"desc":"Gets the maximum modified cost of this enchantment at a specific level.\n<p>\nNote this is not the number of experience levels needed, and does not directly translate to the levels shown in an enchanting table.\nThis value is used in combination with factors such as tool enchantability to determine a final cost.\nSee <a href=\"https://minecraft.wiki/w/Enchanting/Levels\">https://minecraft.wiki/w/Enchanting/Levels</a> for more information.\n</p>","ret":"The modified cost of this enchantment"},{"name":"getRarity","params":[],"desc":"Gets the rarity of this enchantment.","ret":"the rarity"},{"name":"getDamageIncrease","params":[{"name":"level","type":"int","desc":"the level of enchantment"},{"name":"entityCategory","type":"org.bukkit.entity.EntityCategory","desc":"the category of entity"}],"desc":"Gets the damage increase as a result of the level and entity category specified","ret":"the damage increase"},{"name":"getActiveSlots","params":[],"desc":"Gets the equipment slots where this enchantment is considered \"active\".","ret":"the equipment slots"},{"name":"getByKey","params":[{"name":"key","type":"NamespacedKey","desc":"key to fetch"}],"desc":"Gets the Enchantment at the specified key","ret":"Resulting Enchantment, or null if not found"},{"name":"getByName","params":[{"name":"name","type":"String","desc":"Name to fetch"}],"desc":"Gets the Enchantment at the specified name","ret":"Resulting Enchantment, or null if not found"},{"name":"values","params":[],"desc":"Gets an array of all the registered {@link Enchantment}s","ret":"Array of enchantments"}],"desc":"The various type of enchantments that may be added to armour or weapons"},{"FQCN":"org.bukkit.enchantments.EnchantmentWrapper","methods":[{"name":"getEnchantment","params":[],"desc":"Gets the enchantment bound to this wrapper","ret":"Enchantment"}],"desc":"A simple wrapper for ease of selecting {@link Enchantment}s"},{"FQCN":"org.bukkit.enchantments.EnchantmentTarget","methods":[{"name":"includes","params":[{"name":"item","type":"Material","desc":"The item to check"}],"desc":"Check whether this target includes the specified item.","ret":"True if the target includes the item"},{"name":"includes","params":[{"name":"item","type":"ItemStack","desc":"The item to check"}],"desc":"Check whether this target includes the specified item.","ret":"True if the target includes the item"}],"desc":"Represents the applicable target for a {@link Enchantment}"},{"FQCN":"org.bukkit.Material","methods":[{"name":"isEmpty","params":[],"desc":"","ret":"If the type is either AIR, CAVE_AIR or VOID_AIR"},{"name":"getItemRarity","params":[],"desc":"Returns the item rarity for the item. The Material <b>MUST</b> be an Item not a block.\nUse {@link #isItem()} before this.","ret":"the item rarity"},{"name":"getItemAttributes","params":[{"name":"equipmentSlot","type":"EquipmentSlot","desc":"the slot to get the attributes for"}],"desc":"Returns an immutable multimap of attributes for the slot.\n{@link #isItem()} must be true for this material.","ret":"an immutable multimap of attributes"},{"name":"isCollidable","params":[],"desc":"Checks if this material is collidable.","ret":"true if collidable"},{"name":"getId","params":[],"desc":"Do not use for any reason.","ret":"ID of this material"},{"name":"getMaxStackSize","params":[],"desc":"Gets the maximum amount of this material that can be held in a stack","ret":"Maximum stack size for this material"},{"name":"getMaxDurability","params":[],"desc":"Gets the maximum durability of this material","ret":"Maximum durability for this material"},{"name":"createBlockData","params":[],"desc":"Creates a new {@link BlockData} instance for this Material, with all\nproperties initialized to unspecified defaults.","ret":"new data instance"},{"name":"createBlockData","params":[{"name":"consumer","type":"Consumer<? super BlockData>","desc":"consumer to run on new instance before returning"}],"desc":"Creates a new {@link BlockData} instance for this Material, with\nall properties initialized to unspecified defaults.","ret":"new data instance"},{"name":"createBlockData","params":[{"name":"data","type":"String","desc":"data string"}],"desc":"Creates a new {@link BlockData} instance for this Material, with all\nproperties initialized to unspecified defaults, except for those provided\nin data.","ret":"new data instance"},{"name":"getData","params":[],"desc":"Gets the MaterialData class associated with this Material","ret":"MaterialData associated with this Material"},{"name":"getNewData","params":[{"name":"raw","type":"byte","desc":"Initial data to construct the MaterialData with"}],"desc":"Constructs a new MaterialData relevant for this Material, with the\ngiven initial data","ret":"New MaterialData with the given data"},{"name":"isBlock","params":[],"desc":"Checks if this Material is a placable block","ret":"true if this material is a block"},{"name":"isEdible","params":[],"desc":"Checks if this Material is edible.","ret":"true if this Material is edible."},{"name":"getMaterial","params":[{"name":"name","type":"String","desc":"Name of the material to get"}],"desc":"Attempts to get the Material with the given name.\n<p>\nThis is a normal lookup, names must be the precise name they are given\nin the enum.","ret":"Material if found, or null"},{"name":"getMaterial","params":[{"name":"name","type":"String","desc":"Name of the material to get"},{"name":"legacyName","type":"boolean","desc":"whether this is a legacy name lookup"}],"desc":"Attempts to get the Material with the given name.\n<p>\nThis is a normal lookup, names must be the precise name they are given in\nthe enum (but optionally including the LEGACY_PREFIX if legacyName is\ntrue).\n<p>\nIf legacyName is true, then the lookup will be against legacy materials,\nbut the returned Material will be a modern material (ie this method is\nuseful for updating stored data).","ret":"Material if found, or null"},{"name":"matchMaterial","params":[{"name":"name","type":"String","desc":"Name of the material to get"}],"desc":"Attempts to match the Material with the given name.\n<p>\nThis is a match lookup; names will be stripped of the \"minecraft:\"\nnamespace, converted to uppercase, then stripped of special characters in\nan attempt to format it like the enum.","ret":"Material if found, or null"},{"name":"matchMaterial","params":[{"name":"name","type":"String","desc":"Name of the material to get"},{"name":"legacyName","type":"boolean","desc":"whether this is a legacy name (see\n{@link #getMaterial(java.lang.String, boolean)}"}],"desc":"Attempts to match the Material with the given name.\n<p>\nThis is a match lookup; names will be stripped of the \"minecraft:\"\nnamespace, converted to uppercase, then stripped of special characters in\nan attempt to format it like the enum.","ret":"Material if found, or null"},{"name":"isRecord","params":[],"desc":"","ret":"True if this material represents a playable music disk."},{"name":"isSolid","params":[],"desc":"Check if the material is a block and solid (can be built upon)","ret":"True if this material is a block and solid"},{"name":"isAir","params":[],"desc":"Check if the material is an air block.","ret":"True if this material is an air block."},{"name":"isTransparent","params":[],"desc":"Check if the material is a block and does not block any light","ret":"True if this material is a block and does not block any light"},{"name":"isFlammable","params":[],"desc":"Check if the material is a block and can catch fire","ret":"True if this material is a block and can catch fire"},{"name":"isBurnable","params":[],"desc":"Check if the material is a block and can burn away","ret":"True if this material is a block and can burn away"},{"name":"isFuel","params":[],"desc":"Checks if this Material can be used as fuel in a Furnace","ret":"true if this Material can be used as fuel."},{"name":"isOccluding","params":[],"desc":"Check if the material is a block and occludes light in the lighting engine.\n<p>\nGenerally speaking, most full blocks will occlude light. Non-full blocks are\nnot occluding (e.g. anvils, chests, tall grass, stairs, etc.), nor are specific\nfull blocks such as barriers or spawners which block light despite their texture.\n<p>\nAn occluding block will have the following effects:\n<ul>\n  <li>Chests cannot be opened if an occluding block is above it.\n  <li>Mobs cannot spawn inside of occluding blocks.\n  <li>Only occluding blocks can be \"powered\" ({@link Block#isBlockPowered()}).\n</ul>\nThis list may be inconclusive. For a full list of the side effects of an occluding\nblock, see the <a href=\"https://minecraft.wiki/w/Opacity\">Minecraft Wiki</a>.","ret":"True if this material is a block and occludes light"},{"name":"hasGravity","params":[],"desc":"","ret":"True if this material is affected by gravity."},{"name":"isItem","params":[],"desc":"Checks if this Material is an obtainable item.","ret":"true if this material is an item"},{"name":"isInteractable","params":[],"desc":"Checks if this Material can be interacted with.\n\nInteractable materials include those with functionality when they are\ninteracted with by a player such as chests, furnaces, etc.\n\nSome blocks such as piston heads and stairs are considered interactable\nthough may not perform any additional functionality.\n\nNote that the interactability of some materials may be dependant on their\nstate as well. This method will return true if there is at least one\nstate in which additional interact handling is performed for the\nmaterial.","ret":"true if this material can be interacted with."},{"name":"getHardness","params":[],"desc":"Obtains the block's hardness level (also known as \"strength\").\n<br>\nThis number is used to calculate the time required to break each block.\n<br>\nOnly available when {@link #isBlock()} is true.","ret":"the hardness of that material."},{"name":"getBlastResistance","params":[],"desc":"Obtains the blast resistance value (also known as block \"durability\").\n<br>\nThis value is used in explosions to calculate whether a block should be\nbroken or not.\n<br>\nOnly available when {@link #isBlock()} is true.","ret":"the blast resistance of that material."},{"name":"getSlipperiness","params":[],"desc":"Returns a value that represents how 'slippery' the block is.\n\nBlocks with higher slipperiness, like {@link Material#ICE} can be slid on\nfurther by the player and other entities.\n\nMost blocks have a default slipperiness of {@code 0.6f}.\n\nOnly available when {@link #isBlock()} is true.","ret":"the slipperiness of this block"},{"name":"getCraftingRemainingItem","params":[],"desc":"Determines the remaining item in a crafting grid after crafting with this\ningredient.\n<br>\nOnly available when {@link #isItem()} is true.","ret":"the item left behind when crafting, or null if nothing is."},{"name":"getEquipmentSlot","params":[],"desc":"Get the best suitable slot for this Material.\n\nFor most items this will be {@link EquipmentSlot#HAND}.","ret":"the best EquipmentSlot for this Material"},{"name":"getDefaultAttributeModifiers","params":[{"name":"slot","type":"EquipmentSlot","desc":"the {@link EquipmentSlot} to check"}],"desc":"Return an immutable copy of all default {@link Attribute}s and their\n{@link AttributeModifier}s for a given {@link EquipmentSlot}.\n\nDefault attributes are those that are always preset on some items, such\nas the attack damage on weapons or the armor value on armor.\n\nOnly available when {@link #isItem()} is true.","ret":"the immutable {@link Multimap} with the respective default\nAttributes and modifiers, or an empty map if no attributes are set."},{"name":"getCreativeCategory","params":[],"desc":"Get the {@link CreativeCategory} to which this material belongs.","ret":"the creative category. null if does not belong to a category"},{"name":"getTranslationKey","params":[],"desc":"Get the translation key of the item or block associated with this\nmaterial.\n\nIf this material has both an item and a block form, the item form is\nused.","ret":"the translation key of the item or block associated with this\nmaterial"},{"name":"getBlockTranslationKey","params":[],"desc":"Get the translation key of the block associated with this material, or\nnull if this material does not have an associated block.","ret":"the translation key of the block associated with this material,\nor null if this material does not have an associated block"},{"name":"getItemTranslationKey","params":[],"desc":"Get the translation key of the item associated with this material, or\nnull if this material does not have an associated item.","ret":"the translation key of the item associated with this material, or\nnull if this material does not have an associated item."},{"name":"isEnabledByFeature","params":[{"name":"world","type":"World","desc":"the world to check"}],"desc":"Gets if the Material is enabled by the features in a world.","ret":"true if this material can be used in this World."}],"desc":"An enum of all material IDs accepted by the official server and client"},{"FQCN":"org.bukkit.attribute.AttributeModifier","methods":[{"name":"getUniqueId","params":[],"desc":"Get the unique ID for this modifier.","ret":"unique id"},{"name":"getName","params":[],"desc":"Get the name of this modifier.","ret":"name"},{"name":"getAmount","params":[],"desc":"Get the amount by which this modifier will apply its {@link Operation}.","ret":"modification amount"},{"name":"getOperation","params":[],"desc":"Get the operation this modifier will apply.","ret":"operation"},{"name":"getSlot","params":[],"desc":"Get the {@link EquipmentSlot} this AttributeModifier is active on,\nor null if this modifier is applicable for any slot.","ret":"the slot"}],"desc":"Concrete implementation of an attribute modifier."},{"FQCN":"org.bukkit.attribute.AttributeInstance","methods":[{"name":"getAttribute","params":[],"desc":"The attribute pertaining to this instance.","ret":"the attribute"},{"name":"getBaseValue","params":[],"desc":"Base value of this instance before modifiers are applied.","ret":"base value"},{"name":"setBaseValue","params":[{"name":"value","type":"double","desc":"new base value"}],"desc":"Set the base value of this instance.","ret":""},{"name":"getModifiers","params":[],"desc":"Get all modifiers present on this instance.","ret":"a copied collection of all modifiers"},{"name":"getModifier","params":[{"name":"uuid","type":"java.util.UUID","desc":"the UUID of the modifier"}],"desc":"Gets the modifier with the corresponding UUID.","ret":"the modifier, if it exists"},{"name":"removeModifier","params":[{"name":"uuid","type":"java.util.UUID","desc":"the UUID of the modifier"}],"desc":"Remove a modifier with the corresponding UUID from this instance.","ret":""},{"name":"addModifier","params":[{"name":"modifier","type":"AttributeModifier","desc":"to add"}],"desc":"Add a modifier to this instance.","ret":""},{"name":"addTransientModifier","params":[{"name":"modifier","type":"AttributeModifier","desc":"to add"}],"desc":"Add a transient modifier to this instance.\nTransient modifiers are not persisted (saved with the NBT data)","ret":""},{"name":"removeModifier","params":[{"name":"modifier","type":"AttributeModifier","desc":"to remove"}],"desc":"Remove a modifier from this instance.","ret":""},{"name":"getValue","params":[],"desc":"Get the value of this instance after all associated modifiers have been\napplied.","ret":"the total attribute value"},{"name":"getDefaultValue","params":[],"desc":"Gets the default value of the Attribute attached to this instance.","ret":"server default value"}],"desc":"Represents a mutable instance of an attribute and its associated modifiers\nand values."},{"FQCN":"org.bukkit.attribute.Attribute","methods":[],"desc":"Types of attributes which may be present on an {@link Attributable}."},{"FQCN":"org.bukkit.attribute.Attributable","methods":[{"name":"getAttribute","params":[{"name":"attribute","type":"Attribute","desc":"the attribute to get"}],"desc":"Gets the specified attribute instance from the object. This instance will\nbe backed directly to the object and any changes will be visible at once.","ret":"the attribute instance or null if not applicable to this object"},{"name":"registerAttribute","params":[{"name":"attribute","type":"Attribute","desc":"the generic attribute to register"}],"desc":"Registers a generic attribute to that attributable instance.\nAllows it to add attributes not registered by default to that entity.","ret":""}],"desc":"Represents an object which may contain attributes."},{"FQCN":"org.bukkit.Warning","methods":[],"desc":"This designates the warning state for a specific item.\n<p>\nWhen the server settings dictate 'default' warnings, warnings are printed\nif the {@link #value()} is true."},{"FQCN":"org.bukkit.Sound","methods":[],"desc":"An Enum of Sounds the server is able to send to players.\n<p>\nWARNING: At any time, sounds may be added/removed from this Enum or even\nMineCraft itself! There is no guarantee the sounds will play. There is no\nguarantee values will not be removed from this Enum. As such, you should not\ndepend on the ordinal values of this class."},{"FQCN":"org.bukkit.util.EntityTransformer","methods":[{"name":"transform","params":[{"name":"region","type":"LimitedRegion","desc":"the accessible region"},{"name":"x","type":"int","desc":"the x position of the entity"},{"name":"y","type":"int","desc":"the y position of the entity"},{"name":"z","type":"int","desc":"the z position of the entity"},{"name":"entity","type":"Entity","desc":"the entity"},{"name":"allowedToSpawn","type":"boolean","desc":"if the entity is allowed to spawn"}],"desc":"Transforms a entity in a structure.","ret":"{@code true} if the entity should be spawned otherwise\n{@code false}"}],"desc":"A EntityTransformer is used to modify entities that are spawned by structure."},{"FQCN":"org.bukkit.util.RayTraceResult","methods":[{"name":"getHitPosition","params":[],"desc":"Gets the exact position of the hit.","ret":"a copy of the exact hit position"},{"name":"getHitBlock","params":[],"desc":"Gets the hit block.","ret":"the hit block, or <code>null</code> if not available"},{"name":"getHitBlockFace","params":[],"desc":"Gets the hit block face.","ret":"the hit block face, or <code>null</code> if not available"},{"name":"getHitEntity","params":[],"desc":"Gets the hit entity.","ret":"the hit entity, or <code>null</code> if not available"}],"desc":"The hit result of a ray trace.\n<p>\nOnly the hit position is guaranteed to always be available. The availability\nof the other attributes depends on what got hit and on the context in which\nthe ray trace was performed."},{"FQCN":"org.bukkit.util.Vector","methods":[{"name":"add","params":[{"name":"vec","type":"Vector","desc":"The other vector"}],"desc":"Adds a vector to this one","ret":"the same vector"},{"name":"subtract","params":[{"name":"vec","type":"Vector","desc":"The other vector"}],"desc":"Subtracts a vector from this one.","ret":"the same vector"},{"name":"multiply","params":[{"name":"vec","type":"Vector","desc":"The other vector"}],"desc":"Multiplies the vector by another.","ret":"the same vector"},{"name":"divide","params":[{"name":"vec","type":"Vector","desc":"The other vector"}],"desc":"Divides the vector by another.","ret":"the same vector"},{"name":"copy","params":[{"name":"vec","type":"Vector","desc":"The other vector"}],"desc":"Copies another vector","ret":"the same vector"},{"name":"length","params":[],"desc":"Gets the magnitude of the vector, defined as sqrt(x^2+y^2+z^2). The\nvalue of this method is not cached and uses a costly square-root\nfunction, so do not repeatedly call this method to get the vector's\nmagnitude. NaN will be returned if the inner result of the sqrt()\nfunction overflows, which will be caused if the length is too long.","ret":"the magnitude"},{"name":"lengthSquared","params":[],"desc":"Gets the magnitude of the vector squared.","ret":"the magnitude"},{"name":"distance","params":[{"name":"o","type":"Vector","desc":"The other vector"}],"desc":"Get the distance between this vector and another. The value of this\nmethod is not cached and uses a costly square-root function, so do not\nrepeatedly call this method to get the vector's magnitude. NaN will be\nreturned if the inner result of the sqrt() function overflows, which\nwill be caused if the distance is too long.","ret":"the distance"},{"name":"distanceSquared","params":[{"name":"o","type":"Vector","desc":"The other vector"}],"desc":"Get the squared distance between this vector and another.","ret":"the distance"},{"name":"angle","params":[{"name":"other","type":"Vector","desc":"The other vector"}],"desc":"Gets the angle between this vector and another in radians.","ret":"angle in radians"},{"name":"midpoint","params":[{"name":"other","type":"Vector","desc":"The other vector"}],"desc":"Sets this vector to the midpoint between this vector and another.","ret":"this same vector (now a midpoint)"},{"name":"getMidpoint","params":[{"name":"other","type":"Vector","desc":"The other vector"}],"desc":"Gets a new midpoint vector between this vector and another.","ret":"a new midpoint vector"},{"name":"multiply","params":[{"name":"m","type":"int","desc":"The factor"}],"desc":"Performs scalar multiplication, multiplying all components with a\nscalar.","ret":"the same vector"},{"name":"multiply","params":[{"name":"m","type":"double","desc":"The factor"}],"desc":"Performs scalar multiplication, multiplying all components with a\nscalar.","ret":"the same vector"},{"name":"multiply","params":[{"name":"m","type":"float","desc":"The factor"}],"desc":"Performs scalar multiplication, multiplying all components with a\nscalar.","ret":"the same vector"},{"name":"dot","params":[{"name":"other","type":"Vector","desc":"The other vector"}],"desc":"Calculates the dot product of this vector with another. The dot product\nis defined as x1*x2+y1*y2+z1*z2. The returned value is a scalar.","ret":"dot product"},{"name":"crossProduct","params":[{"name":"o","type":"Vector","desc":"The other vector"}],"desc":"Calculates the cross product of this vector with another. The cross\nproduct is defined as:\n<ul>\n<li>x = y1 * z2 - y2 * z1\n<li>y = z1 * x2 - z2 * x1\n<li>z = x1 * y2 - x2 * y1\n</ul>","ret":"the same vector"},{"name":"getCrossProduct","params":[{"name":"o","type":"Vector","desc":"The other vector"}],"desc":"Calculates the cross product of this vector with another without mutating\nthe original. The cross product is defined as:\n<ul>\n<li>x = y1 * z2 - y2 * z1\n<li>y = z1 * x2 - z2 * x1\n<li>z = x1 * y2 - x2 * y1\n</ul>","ret":"a new vector"},{"name":"normalize","params":[],"desc":"Converts this vector to a unit vector (a vector with length of 1).","ret":"the same vector"},{"name":"zero","params":[],"desc":"Zero this vector's components.","ret":"the same vector"},{"name":"isZero","params":[],"desc":"Check whether or not each component of this vector is equal to 0.","ret":"true if equal to zero, false if at least one component is non-zero"},{"name":"normalizeZeros","params":[],"desc":"Converts each component of value <code>-0.0</code> to <code>0.0</code>.","ret":"This vector."},{"name":"isInAABB","params":[{"name":"min","type":"Vector","desc":"Minimum vector"},{"name":"max","type":"Vector","desc":"Maximum vector"}],"desc":"Returns whether this vector is in an axis-aligned bounding box.\n<p>\nThe minimum and maximum vectors given must be truly the minimum and\nmaximum X, Y and Z components.","ret":"whether this vector is in the AABB"},{"name":"isInSphere","params":[{"name":"origin","type":"Vector","desc":"Sphere origin."},{"name":"radius","type":"double","desc":"Sphere radius"}],"desc":"Returns whether this vector is within a sphere.","ret":"whether this vector is in the sphere"},{"name":"isNormalized","params":[],"desc":"Returns if a vector is normalized","ret":"whether the vector is normalised"},{"name":"rotateAroundX","params":[{"name":"angle","type":"double","desc":"the angle to rotate the vector about. This angle is passed\nin radians"}],"desc":"Rotates the vector around the x axis.\n<p>\nThis piece of math is based on the standard rotation matrix for vectors\nin three dimensional space. This matrix can be found here:\n<a href=\"https://en.wikipedia.org/wiki/Rotation_matrix#Basic_rotations\">Rotation\nMatrix</a>.","ret":"the same vector"},{"name":"rotateAroundY","params":[{"name":"angle","type":"double","desc":"the angle to rotate the vector about. This angle is passed\nin radians"}],"desc":"Rotates the vector around the y axis.\n<p>\nThis piece of math is based on the standard rotation matrix for vectors\nin three dimensional space. This matrix can be found here:\n<a href=\"https://en.wikipedia.org/wiki/Rotation_matrix#Basic_rotations\">Rotation\nMatrix</a>.","ret":"the same vector"},{"name":"rotateAroundZ","params":[{"name":"angle","type":"double","desc":"the angle to rotate the vector about. This angle is passed\nin radians"}],"desc":"Rotates the vector around the z axis\n<p>\nThis piece of math is based on the standard rotation matrix for vectors\nin three dimensional space. This matrix can be found here:\n<a href=\"https://en.wikipedia.org/wiki/Rotation_matrix#Basic_rotations\">Rotation\nMatrix</a>.","ret":"the same vector"},{"name":"rotateAroundAxis","params":[{"name":"axis","type":"Vector","desc":"the axis to rotate the vector around. If the passed vector is\nnot of length 1, it gets copied and normalized before using it for the\nrotation. Please use {@link Vector#normalize()} on the instance before\npassing it to this method"},{"name":"angle","type":"double","desc":"the angle to rotate the vector around the axis"}],"desc":"Rotates the vector around a given arbitrary axis in 3 dimensional space.\n\n<p>\nRotation will follow the general Right-Hand-Rule, which means rotation\nwill be counterclockwise when the axis is pointing towards the observer.\n<p>\nThis method will always make sure the provided axis is a unit vector, to\nnot modify the length of the vector when rotating. If you are experienced\nwith the scaling of a non-unit axis vector, you can use\n{@link Vector#rotateAroundNonUnitAxis(Vector, double)}.","ret":"the same vector"},{"name":"rotateAroundNonUnitAxis","params":[{"name":"axis","type":"Vector","desc":"the axis to rotate the vector around."},{"name":"angle","type":"double","desc":"the angle to rotate the vector around the axis"}],"desc":"Rotates the vector around a given arbitrary axis in 3 dimensional space.\n\n<p>\nRotation will follow the general Right-Hand-Rule, which means rotation\nwill be counterclockwise when the axis is pointing towards the observer.\n<p>\nNote that the vector length will change accordingly to the axis vector\nlength. If the provided axis is not a unit vector, the rotated vector\nwill not have its previous length. The scaled length of the resulting\nvector will be related to the axis vector. If you are not perfectly sure\nabout the scaling of the vector, use\n{@link Vector#rotateAroundAxis(Vector, double)}","ret":"the same vector"},{"name":"getX","params":[],"desc":"Gets the X component.","ret":"The X component."},{"name":"getBlockX","params":[],"desc":"Gets the floored value of the X component, indicating the block that\nthis vector is contained with.","ret":"block X"},{"name":"getY","params":[],"desc":"Gets the Y component.","ret":"The Y component."},{"name":"getBlockY","params":[],"desc":"Gets the floored value of the Y component, indicating the block that\nthis vector is contained with.","ret":"block y"},{"name":"getZ","params":[],"desc":"Gets the Z component.","ret":"The Z component."},{"name":"getBlockZ","params":[],"desc":"Gets the floored value of the Z component, indicating the block that\nthis vector is contained with.","ret":"block z"},{"name":"setX","params":[{"name":"x","type":"int","desc":"The new X component."}],"desc":"Set the X component.","ret":"This vector."},{"name":"setX","params":[{"name":"x","type":"double","desc":"The new X component."}],"desc":"Set the X component.","ret":"This vector."},{"name":"setX","params":[{"name":"x","type":"float","desc":"The new X component."}],"desc":"Set the X component.","ret":"This vector."},{"name":"setY","params":[{"name":"y","type":"int","desc":"The new Y component."}],"desc":"Set the Y component.","ret":"This vector."},{"name":"setY","params":[{"name":"y","type":"double","desc":"The new Y component."}],"desc":"Set the Y component.","ret":"This vector."},{"name":"setY","params":[{"name":"y","type":"float","desc":"The new Y component."}],"desc":"Set the Y component.","ret":"This vector."},{"name":"setZ","params":[{"name":"z","type":"int","desc":"The new Z component."}],"desc":"Set the Z component.","ret":"This vector."},{"name":"setZ","params":[{"name":"z","type":"double","desc":"The new Z component."}],"desc":"Set the Z component.","ret":"This vector."},{"name":"setZ","params":[{"name":"z","type":"float","desc":"The new Z component."}],"desc":"Set the Z component.","ret":"This vector."},{"name":"equals","params":[{"name":"obj","type":"Object","desc":""}],"desc":"Checks to see if two objects are equal.\n<p>\nOnly two Vectors can ever return true. This method uses a fuzzy match\nto account for floating point errors. The epsilon can be retrieved\nwith epsilon.","ret":""},{"name":"hashCode","params":[],"desc":"Returns a hash code for this vector","ret":"hash code"},{"name":"clone","params":[],"desc":"Get a new vector.","ret":"vector"},{"name":"toString","params":[],"desc":"Returns this vector's components as x,y,z.","ret":""},{"name":"toLocation","params":[{"name":"world","type":"World","desc":"The world to link the location to."}],"desc":"Gets a Location version of this vector with yaw and pitch being 0.","ret":"the location"},{"name":"toLocation","params":[{"name":"world","type":"World","desc":"The world to link the location to."},{"name":"yaw","type":"float","desc":"The desired yaw."},{"name":"pitch","type":"float","desc":"The desired pitch."}],"desc":"Gets a Location version of this vector.","ret":"the location"},{"name":"toBlockVector","params":[],"desc":"Get the block vector of this vector.","ret":"A block vector."},{"name":"toVector3f","params":[],"desc":"Get this vector as a JOML {@link Vector3f}.","ret":"the JOML vector"},{"name":"toVector3d","params":[],"desc":"Get this vector as a JOML {@link Vector3d}.","ret":"the JOML vector"},{"name":"toVector3i","params":[{"name":"roundingMode","type":"int","desc":"the {@link RoundingMode} to use for this vector's components"}],"desc":"Get this vector as a JOML {@link Vector3i}.","ret":"the JOML vector"},{"name":"toVector3i","params":[],"desc":"Get this vector as a JOML {@link Vector3i} with its components floored.","ret":"the JOML vector"},{"name":"checkFinite","params":[],"desc":"Check if each component of this Vector is finite.","ret":""},{"name":"getEpsilon","params":[],"desc":"Get the threshold used for equals().","ret":"The epsilon."},{"name":"getMinimum","params":[{"name":"v1","type":"Vector","desc":"The first vector."},{"name":"v2","type":"Vector","desc":"The second vector."}],"desc":"Gets the minimum components of two vectors.","ret":"minimum"},{"name":"getMaximum","params":[{"name":"v1","type":"Vector","desc":"The first vector."},{"name":"v2","type":"Vector","desc":"The second vector."}],"desc":"Gets the maximum components of two vectors.","ret":"maximum"},{"name":"getRandom","params":[],"desc":"Gets a random vector with components having a random value between 0\nand 1.","ret":"A random vector."},{"name":"fromJOML","params":[{"name":"vector","type":"Vector3f","desc":"the vector to match"}],"desc":"Gets a vector with components that match the provided JOML {@link Vector3f}.","ret":"the new vector"},{"name":"fromJOML","params":[{"name":"vector","type":"Vector3d","desc":"the vector to match"}],"desc":"Gets a vector with components that match the provided JOML {@link Vector3d}.","ret":"the new vector"},{"name":"fromJOML","params":[{"name":"vector","type":"Vector3i","desc":"the vector to match"}],"desc":"Gets a vector with components that match the provided JOML {@link Vector3i}.","ret":"the new vector"},{"name":"fromJOML","params":[{"name":"vector","type":"Vector3fc","desc":"the vector to match"}],"desc":"Gets a vector with components that match the provided JOML {@link Vector3fc}.","ret":"the new vector"},{"name":"fromJOML","params":[{"name":"vector","type":"Vector3dc","desc":"the vector to match"}],"desc":"Gets a vector with components that match the provided JOML {@link Vector3dc}.","ret":"the new vector"},{"name":"fromJOML","params":[{"name":"vector","type":"Vector3ic","desc":"the vector to match"}],"desc":"Gets a vector with components that match the provided JOML {@link Vector3ic}.","ret":"the new vector"}],"desc":"Represents a mutable vector. Because the components of Vectors are mutable,\nstoring Vectors long term may be dangerous if passing code modifies the\nVector later. If you want to keep around a Vector, it may be wise to call\n<code>clone()</code> in order to get a copy."},{"FQCN":"org.bukkit.util.VoxelShape","methods":[{"name":"getBoundingBoxes","params":[],"desc":"Converts this shape into a collection of {@link BoundingBox} equivalent\nto the shape: a bounding box intersects with this block shape if it\nintersects with any of the shape's bounding boxes.","ret":"shape converted to bounding boxes"},{"name":"overlaps","params":[{"name":"other","type":"BoundingBox","desc":"bounding box to test"}],"desc":"Checks if the given bounding box intersects this block shape.","ret":"true if other overlaps this, false otherwise"}],"desc":"A shape made out of voxels.\n\nFor example, used to represent the detailed collision shape of blocks."},{"FQCN":"org.bukkit.util.EulerAngle","methods":[{"name":"getX","params":[],"desc":"Returns the angle on the x axis in radians","ret":"the angle in radians"},{"name":"getY","params":[],"desc":"Returns the angle on the y axis in radians","ret":"the angle in radians"},{"name":"getZ","params":[],"desc":"Returns the angle on the z axis in radians","ret":"the angle in radians"},{"name":"setX","params":[{"name":"x","type":"double","desc":"the angle in radians"}],"desc":"Return a EulerAngle which is the result of changing\nthe x axis to the passed angle","ret":"the resultant EulerAngle"},{"name":"setY","params":[{"name":"y","type":"double","desc":"the angle in radians"}],"desc":"Return a EulerAngle which is the result of changing\nthe y axis to the passed angle","ret":"the resultant EulerAngle"},{"name":"setZ","params":[{"name":"z","type":"double","desc":"the angle in radians"}],"desc":"Return a EulerAngle which is the result of changing\nthe z axis to the passed angle","ret":"the resultant EulerAngle"},{"name":"add","params":[{"name":"x","type":"double","desc":"the angle to add to the x axis in radians"},{"name":"y","type":"double","desc":"the angle to add to the y axis in radians"},{"name":"z","type":"double","desc":"the angle to add to the z axis in radians"}],"desc":"Creates a new EulerAngle which is the result of adding\nthe x, y, z components to this EulerAngle","ret":"the resultant EulerAngle"},{"name":"subtract","params":[{"name":"x","type":"double","desc":"the angle to subtract to the x axis in radians"},{"name":"y","type":"double","desc":"the angle to subtract to the y axis in radians"},{"name":"z","type":"double","desc":"the angle to subtract to the z axis in radians"}],"desc":"Creates a new EulerAngle which is the result of subtracting\nthe x, y, z components to this EulerAngle","ret":"the resultant EulerAngle"}],"desc":"EulerAngle is used to represent 3 angles, one for each\naxis (x, y, z). The angles are in radians"},{"FQCN":"org.bukkit.util.BoundingBox","methods":[{"name":"of","params":[{"name":"corner1","type":"Vector","desc":"the first corner"},{"name":"corner2","type":"Vector","desc":"the second corner"}],"desc":"Creates a new bounding box using the coordinates of the given vectors as\ncorners.","ret":"the bounding box"},{"name":"of","params":[{"name":"corner1","type":"Location","desc":"the first corner"},{"name":"corner2","type":"Location","desc":"the second corner"}],"desc":"Creates a new bounding box using the coordinates of the given locations\nas corners.","ret":"the bounding box"},{"name":"of","params":[{"name":"corner1","type":"Block","desc":"the first corner block"},{"name":"corner2","type":"Block","desc":"the second corner block"}],"desc":"Creates a new bounding box using the coordinates of the given blocks as\ncorners.\n<p>\nThe bounding box will be sized to fully contain both blocks.","ret":"the bounding box"},{"name":"of","params":[{"name":"block","type":"Block","desc":"the block"}],"desc":"Creates a new 1x1x1 sized bounding box containing the given block.","ret":"the bounding box"},{"name":"of","params":[{"name":"center","type":"Vector","desc":"the center"},{"name":"x","type":"double","desc":"1/2 the size of the bounding box along the x axis"},{"name":"y","type":"double","desc":"1/2 the size of the bounding box along the y axis"},{"name":"z","type":"double","desc":"1/2 the size of the bounding box along the z axis"}],"desc":"Creates a new bounding box using the given center and extents.","ret":"the bounding box"},{"name":"of","params":[{"name":"center","type":"Location","desc":"the center"},{"name":"x","type":"double","desc":"1/2 the size of the bounding box along the x axis"},{"name":"y","type":"double","desc":"1/2 the size of the bounding box along the y axis"},{"name":"z","type":"double","desc":"1/2 the size of the bounding box along the z axis"}],"desc":"Creates a new bounding box using the given center and extents.","ret":"the bounding box"},{"name":"resize","params":[{"name":"x1","type":"double","desc":"the first corner's x value"},{"name":"y1","type":"double","desc":"the first corner's y value"},{"name":"z1","type":"double","desc":"the first corner's z value"},{"name":"x2","type":"double","desc":"the second corner's x value"},{"name":"y2","type":"double","desc":"the second corner's y value"},{"name":"z2","type":"double","desc":"the second corner's z value"}],"desc":"Resizes this bounding box.","ret":"this bounding box (resized)"},{"name":"getMinX","params":[],"desc":"Gets the minimum x value.","ret":"the minimum x value"},{"name":"getMinY","params":[],"desc":"Gets the minimum y value.","ret":"the minimum y value"},{"name":"getMinZ","params":[],"desc":"Gets the minimum z value.","ret":"the minimum z value"},{"name":"getMin","params":[],"desc":"Gets the minimum corner as vector.","ret":"the minimum corner as vector"},{"name":"getMaxX","params":[],"desc":"Gets the maximum x value.","ret":"the maximum x value"},{"name":"getMaxY","params":[],"desc":"Gets the maximum y value.","ret":"the maximum y value"},{"name":"getMaxZ","params":[],"desc":"Gets the maximum z value.","ret":"the maximum z value"},{"name":"getMax","params":[],"desc":"Gets the maximum corner as vector.","ret":"the maximum corner vector"},{"name":"getWidthX","params":[],"desc":"Gets the width of the bounding box in the x direction.","ret":"the width in the x direction"},{"name":"getWidthZ","params":[],"desc":"Gets the width of the bounding box in the z direction.","ret":"the width in the z direction"},{"name":"getHeight","params":[],"desc":"Gets the height of the bounding box.","ret":"the height"},{"name":"getVolume","params":[],"desc":"Gets the volume of the bounding box.","ret":"the volume"},{"name":"getCenterX","params":[],"desc":"Gets the x coordinate of the center of the bounding box.","ret":"the center's x coordinate"},{"name":"getCenterY","params":[],"desc":"Gets the y coordinate of the center of the bounding box.","ret":"the center's y coordinate"},{"name":"getCenterZ","params":[],"desc":"Gets the z coordinate of the center of the bounding box.","ret":"the center's z coordinate"},{"name":"getCenter","params":[],"desc":"Gets the center of the bounding box.","ret":"the center"},{"name":"copy","params":[{"name":"other","type":"BoundingBox","desc":"the other bounding box"}],"desc":"Copies another bounding box.","ret":"this bounding box"},{"name":"expand","params":[{"name":"negativeX","type":"double","desc":"the amount of expansion in the negative x direction"},{"name":"negativeY","type":"double","desc":"the amount of expansion in the negative y direction"},{"name":"negativeZ","type":"double","desc":"the amount of expansion in the negative z direction"},{"name":"positiveX","type":"double","desc":"the amount of expansion in the positive x direction"},{"name":"positiveY","type":"double","desc":"the amount of expansion in the positive y direction"},{"name":"positiveZ","type":"double","desc":"the amount of expansion in the positive z direction"}],"desc":"Expands this bounding box by the given values in the corresponding\ndirections.\n<p>\nNegative values will shrink the bounding box in the corresponding\ndirection. Shrinking will be limited to the point where the affected\nopposite faces would meet if they shrank at uniform speeds.","ret":"this bounding box (now expanded)"},{"name":"expand","params":[{"name":"x","type":"double","desc":"the amount of expansion in both positive and negative x\ndirection"},{"name":"y","type":"double","desc":"the amount of expansion in both positive and negative y\ndirection"},{"name":"z","type":"double","desc":"the amount of expansion in both positive and negative z\ndirection"}],"desc":"Expands this bounding box uniformly by the given values in both positive\nand negative directions.\n<p>\nNegative values will shrink the bounding box. Shrinking will be limited\nto the bounding box's current size.","ret":"this bounding box (now expanded)"},{"name":"expand","params":[{"name":"expansion","type":"Vector","desc":"the expansion values"}],"desc":"Expands this bounding box uniformly by the given values in both positive\nand negative directions.\n<p>\nNegative values will shrink the bounding box. Shrinking will be limited\nto the bounding box's current size.","ret":"this bounding box (now expanded)"},{"name":"expand","params":[{"name":"expansion","type":"double","desc":"the amount of expansion"}],"desc":"Expands this bounding box uniformly by the given value in all directions.\n<p>\nA negative value will shrink the bounding box. Shrinking will be limited\nto the bounding box's current size.","ret":"this bounding box (now expanded)"},{"name":"expand","params":[{"name":"dirX","type":"double","desc":"the x direction component"},{"name":"dirY","type":"double","desc":"the y direction component"},{"name":"dirZ","type":"double","desc":"the z direction component"},{"name":"expansion","type":"double","desc":"the amount of expansion"}],"desc":"Expands this bounding box in the specified direction.\n<p>\nThe magnitude of the direction will scale the expansion. A negative\nexpansion value will shrink the bounding box in this direction. Shrinking\nwill be limited to the bounding box's current size.","ret":"this bounding box (now expanded)"},{"name":"expand","params":[{"name":"direction","type":"Vector","desc":"the direction"},{"name":"expansion","type":"double","desc":"the amount of expansion"}],"desc":"Expands this bounding box in the specified direction.\n<p>\nThe magnitude of the direction will scale the expansion. A negative\nexpansion value will shrink the bounding box in this direction. Shrinking\nwill be limited to the bounding box's current size.","ret":"this bounding box (now expanded)"},{"name":"expand","params":[{"name":"blockFace","type":"BlockFace","desc":"the block face"},{"name":"expansion","type":"double","desc":"the amount of expansion"}],"desc":"Expands this bounding box in the direction specified by the given block\nface.\n<p>\nA negative expansion value will shrink the bounding box in this\ndirection. Shrinking will be limited to the bounding box's current size.","ret":"this bounding box (now expanded)"},{"name":"expandDirectional","params":[{"name":"dirX","type":"double","desc":"the x direction component"},{"name":"dirY","type":"double","desc":"the y direction component"},{"name":"dirZ","type":"double","desc":"the z direction component"}],"desc":"Expands this bounding box in the specified direction.\n<p>\nNegative values will expand the bounding box in the negative direction,\npositive values will expand it in the positive direction. The magnitudes\nof the direction components determine the corresponding amounts of\nexpansion.","ret":"this bounding box (now expanded)"},{"name":"expandDirectional","params":[{"name":"direction","type":"Vector","desc":"the direction and magnitude of the expansion"}],"desc":"Expands this bounding box in the specified direction.\n<p>\nNegative values will expand the bounding box in the negative direction,\npositive values will expand it in the positive direction. The magnitude\nof the direction vector determines the amount of expansion.","ret":"this bounding box (now expanded)"},{"name":"union","params":[{"name":"posX","type":"double","desc":"the x position value"},{"name":"posY","type":"double","desc":"the y position value"},{"name":"posZ","type":"double","desc":"the z position value"}],"desc":"Expands this bounding box to contain (or border) the specified position.","ret":"this bounding box (now expanded)"},{"name":"union","params":[{"name":"position","type":"Vector","desc":"the position"}],"desc":"Expands this bounding box to contain (or border) the specified position.","ret":"this bounding box (now expanded)"},{"name":"union","params":[{"name":"position","type":"Location","desc":"the position"}],"desc":"Expands this bounding box to contain (or border) the specified position.","ret":"this bounding box (now expanded)"},{"name":"union","params":[{"name":"other","type":"BoundingBox","desc":"the other bounding box"}],"desc":"Expands this bounding box to contain both this and the given bounding\nbox.","ret":"this bounding box (now expanded)"},{"name":"intersection","params":[{"name":"other","type":"BoundingBox","desc":"the other bounding box"}],"desc":"Resizes this bounding box to represent the intersection of this and the\ngiven bounding box.","ret":"this bounding box (now representing the intersection)"},{"name":"shift","params":[{"name":"shiftX","type":"double","desc":"the shift in x direction"},{"name":"shiftY","type":"double","desc":"the shift in y direction"},{"name":"shiftZ","type":"double","desc":"the shift in z direction"}],"desc":"Shifts this bounding box by the given amounts.","ret":"this bounding box (now shifted)"},{"name":"shift","params":[{"name":"shift","type":"Vector","desc":"the shift"}],"desc":"Shifts this bounding box by the given amounts.","ret":"this bounding box (now shifted)"},{"name":"shift","params":[{"name":"shift","type":"Location","desc":"the shift"}],"desc":"Shifts this bounding box by the given amounts.","ret":"this bounding box (now shifted)"},{"name":"overlaps","params":[{"name":"other","type":"BoundingBox","desc":"the other bounding box"}],"desc":"Checks if this bounding box overlaps with the given bounding box.\n<p>\nBounding boxes that are only intersecting at the borders are not\nconsidered overlapping.","ret":"<code>true</code> if overlapping"},{"name":"overlaps","params":[{"name":"min","type":"Vector","desc":"the first corner"},{"name":"max","type":"Vector","desc":"the second corner"}],"desc":"Checks if this bounding box overlaps with the bounding box that is\ndefined by the given corners.\n<p>\nBounding boxes that are only intersecting at the borders are not\nconsidered overlapping.","ret":"<code>true</code> if overlapping"},{"name":"contains","params":[{"name":"x","type":"double","desc":"the position's x coordinates"},{"name":"y","type":"double","desc":"the position's y coordinates"},{"name":"z","type":"double","desc":"the position's z coordinates"}],"desc":"Checks if this bounding box contains the specified position.\n<p>\nPositions exactly on the minimum borders of the bounding box are\nconsidered to be inside the bounding box, while positions exactly on the\nmaximum borders are considered to be outside. This allows bounding boxes\nto reside directly next to each other with positions always only residing\nin exactly one of them.","ret":"<code>true</code> if the bounding box contains the position"},{"name":"contains","params":[{"name":"position","type":"Vector","desc":"the position"}],"desc":"Checks if this bounding box contains the specified position.\n<p>\nPositions exactly on the minimum borders of the bounding box are\nconsidered to be inside the bounding box, while positions exactly on the\nmaximum borders are considered to be outside. This allows bounding boxes\nto reside directly next to each other with positions always only residing\nin exactly one of them.","ret":"<code>true</code> if the bounding box contains the position"},{"name":"contains","params":[{"name":"other","type":"BoundingBox","desc":"the other bounding box"}],"desc":"Checks if this bounding box fully contains the given bounding box.","ret":"<code>true</code> if the bounding box contains the given bounding\nbox"},{"name":"contains","params":[{"name":"min","type":"Vector","desc":"the first corner"},{"name":"max","type":"Vector","desc":"the second corner"}],"desc":"Checks if this bounding box fully contains the bounding box that is\ndefined by the given corners.","ret":"<code>true</code> if the bounding box contains the specified\n    bounding box"},{"name":"rayTrace","params":[{"name":"start","type":"Vector","desc":"the start position"},{"name":"direction","type":"Vector","desc":"the ray direction"},{"name":"maxDistance","type":"double","desc":"the maximum distance"}],"desc":"Calculates the intersection of this bounding box with the specified line\nsegment.\n<p>\nIntersections at edges and corners yield one of the affected block faces\nas hit result, but it is not defined which of them.","ret":"the ray trace hit result, or <code>null</code> if there is no hit"},{"name":"clone","params":[],"desc":"Creates a copy of this bounding box.","ret":"the cloned bounding box"}],"desc":"A mutable axis aligned bounding box (AABB).\n<p>\nThis basically represents a rectangular box (specified by minimum and maximum\ncorners) that can for example be used to describe the position and extents of\nan object (such as an entity, block, or rectangular region) in 3D space. Its\nedges and faces are parallel to the axes of the cartesian coordinate system.\n<p>\nThe bounding box may be degenerate (one or more sides having the length 0).\n<p>\nBecause bounding boxes are mutable, storing them long term may be dangerous\nif they get modified later. If you want to keep around a bounding box, it may\nbe wise to call {@link #clone()} in order to get a copy."},{"FQCN":"org.bukkit.util.Transformation","methods":[{"name":"getTranslation","params":[],"desc":"Gets the translation component of this transformation.","ret":"translation component"},{"name":"getLeftRotation","params":[],"desc":"Gets the left rotation component of this transformation.","ret":"left rotation component"},{"name":"getScale","params":[],"desc":"Gets the scale component of this transformation.","ret":"scale component"},{"name":"getRightRotation","params":[],"desc":"Gets the right rotation component of this transformation.","ret":"right rotation component"}],"desc":"Represents an arbitrary affine transformation."},{"FQCN":"org.bukkit.util.BlockIterator","methods":[{"name":"next","params":[],"desc":"Returns the next Block in the trace","ret":"the next Block in the trace"}],"desc":"This class performs ray tracing and iterates along blocks on a line"},{"FQCN":"org.bukkit.util.StringUtil","methods":[{"name":"copyPartialMatches","params":[{"name":"token","type":"String","desc":"String to search for"},{"name":"originals","type":"Iterable<String>","desc":"An iterable collection of strings to filter."},{"name":"collection","type":"T","desc":"The collection to add matches to"}],"desc":"Copies all elements from the iterable collection of originals to the\ncollection provided.","ret":"the collection provided that would have the elements copied\n    into"},{"name":"startsWithIgnoreCase","params":[{"name":"string","type":"String","desc":"String to check"},{"name":"prefix","type":"String","desc":"Prefix of string to compare"}],"desc":"This method uses a region to check case-insensitive equality. This\nmeans the internal array does not need to be copied like a\ntoLowerCase() call would.","ret":"true if provided string starts with, ignoring case, the prefix\n    provided"}],"desc":""},{"FQCN":"org.bukkit.util.BlockTransformer","methods":[{"name":"transform","params":[{"name":"region","type":"LimitedRegion","desc":"the accessible region"},{"name":"x","type":"int","desc":"the x position of the block"},{"name":"y","type":"int","desc":"the y position of the block"},{"name":"z","type":"int","desc":"the z position of the block"},{"name":"current","type":"BlockState","desc":"the state of the block that should be placed"},{"name":"state","type":"TransformationState","desc":"the state of this transformation."}],"desc":"Transforms a block in a structure.\n\nNOTE: The usage of {@link BlockData#createBlockState()} can provide even\nmore flexibility to return the exact block state you might want to\nreturn.","ret":"the new block state"}],"desc":"A BlockTransformer is used to modify blocks that are placed by structure."},{"FQCN":"org.bukkit.util.io.Wrapper","methods":[],"desc":""},{"FQCN":"org.bukkit.util.io.BukkitObjectOutputStream","methods":[],"desc":"This class is designed to be used in conjunction with the {@link\nConfigurationSerializable} API. It translates objects to an internal\nimplementation for later deserialization using {@link\nBukkitObjectInputStream}.\n<p>\nBehavior of implementations extending this class is not guaranteed across\nfuture versions."},{"FQCN":"org.bukkit.util.io.BukkitObjectInputStream","methods":[],"desc":"This class is designed to be used in conjunction with the {@link\nConfigurationSerializable} API. It translates objects back to their\noriginal implementation after being serialized by {@link\nBukkitObjectInputStream}.\n<p>\nBehavior of implementations extending this class is not guaranteed across\nfuture versions."},{"FQCN":"org.bukkit.util.FileUtil","methods":[{"name":"copy","params":[{"name":"inFile","type":"File","desc":"the source filename"},{"name":"outFile","type":"File","desc":"the target filename"}],"desc":"This method copies one file to another location","ret":"true on success"}],"desc":"Class containing file utilities"},{"FQCN":"org.bukkit.util.permissions.DefaultPermissions","methods":[],"desc":""},{"FQCN":"org.bukkit.util.permissions.BroadcastPermissions","methods":[],"desc":""},{"FQCN":"org.bukkit.util.permissions.CommandPermissions","methods":[],"desc":""},{"FQCN":"org.bukkit.util.Consumer","methods":[{"name":"accept","params":[{"name":"t","type":"T","desc":"the input argument"}],"desc":"Performs this operation on the given argument.","ret":""}],"desc":""},{"FQCN":"org.bukkit.util.CachedServerIcon","methods":[],"desc":"This is a cached version of a server-icon. Its internal representation\nand implementation is undefined."},{"FQCN":"org.bukkit.util.noise.OctaveGenerator","methods":[{"name":"setScale","params":[{"name":"scale","type":"double","desc":"New value to scale each coordinate by"}],"desc":"Sets the scale used for all coordinates passed to this generator.\n<p>\nThis is the equivalent to setting each coordinate to the specified\nvalue.","ret":""},{"name":"getXScale","params":[],"desc":"Gets the scale used for each X-coordinates passed","ret":"X scale"},{"name":"setXScale","params":[{"name":"scale","type":"double","desc":"New X scale"}],"desc":"Sets the scale used for each X-coordinates passed","ret":""},{"name":"getYScale","params":[],"desc":"Gets the scale used for each Y-coordinates passed","ret":"Y scale"},{"name":"setYScale","params":[{"name":"scale","type":"double","desc":"New Y scale"}],"desc":"Sets the scale used for each Y-coordinates passed","ret":""},{"name":"getZScale","params":[],"desc":"Gets the scale used for each Z-coordinates passed","ret":"Z scale"},{"name":"setZScale","params":[{"name":"scale","type":"double","desc":"New Z scale"}],"desc":"Sets the scale used for each Z-coordinates passed","ret":""},{"name":"getOctaves","params":[],"desc":"Gets a clone of the individual octaves used within this generator","ret":"Clone of the individual octaves"},{"name":"noise","params":[{"name":"x","type":"double","desc":"X-coordinate"},{"name":"frequency","type":"double","desc":"How much to alter the frequency by each octave"},{"name":"amplitude","type":"double","desc":"How much to alter the amplitude by each octave"}],"desc":"Generates noise for the 1D coordinates using the specified number of\noctaves and parameters","ret":"Resulting noise"},{"name":"noise","params":[{"name":"x","type":"double","desc":"X-coordinate"},{"name":"frequency","type":"double","desc":"How much to alter the frequency by each octave"},{"name":"amplitude","type":"double","desc":"How much to alter the amplitude by each octave"},{"name":"normalized","type":"boolean","desc":"If true, normalize the value to [-1, 1]"}],"desc":"Generates noise for the 1D coordinates using the specified number of\noctaves and parameters","ret":"Resulting noise"},{"name":"noise","params":[{"name":"x","type":"double","desc":"X-coordinate"},{"name":"y","type":"double","desc":"Y-coordinate"},{"name":"frequency","type":"double","desc":"How much to alter the frequency by each octave"},{"name":"amplitude","type":"double","desc":"How much to alter the amplitude by each octave"}],"desc":"Generates noise for the 2D coordinates using the specified number of\noctaves and parameters","ret":"Resulting noise"},{"name":"noise","params":[{"name":"x","type":"double","desc":"X-coordinate"},{"name":"y","type":"double","desc":"Y-coordinate"},{"name":"frequency","type":"double","desc":"How much to alter the frequency by each octave"},{"name":"amplitude","type":"double","desc":"How much to alter the amplitude by each octave"},{"name":"normalized","type":"boolean","desc":"If true, normalize the value to [-1, 1]"}],"desc":"Generates noise for the 2D coordinates using the specified number of\noctaves and parameters","ret":"Resulting noise"},{"name":"noise","params":[{"name":"x","type":"double","desc":"X-coordinate"},{"name":"y","type":"double","desc":"Y-coordinate"},{"name":"z","type":"double","desc":"Z-coordinate"},{"name":"frequency","type":"double","desc":"How much to alter the frequency by each octave"},{"name":"amplitude","type":"double","desc":"How much to alter the amplitude by each octave"}],"desc":"Generates noise for the 3D coordinates using the specified number of\noctaves and parameters","ret":"Resulting noise"},{"name":"noise","params":[{"name":"x","type":"double","desc":"X-coordinate"},{"name":"y","type":"double","desc":"Y-coordinate"},{"name":"z","type":"double","desc":"Z-coordinate"},{"name":"frequency","type":"double","desc":"How much to alter the frequency by each octave"},{"name":"amplitude","type":"double","desc":"How much to alter the amplitude by each octave"},{"name":"normalized","type":"boolean","desc":"If true, normalize the value to [-1, 1]"}],"desc":"Generates noise for the 3D coordinates using the specified number of\noctaves and parameters","ret":"Resulting noise"}],"desc":"Creates noise using unbiased octaves"},{"FQCN":"org.bukkit.util.noise.PerlinNoiseGenerator","methods":[{"name":"getNoise","params":[{"name":"x","type":"double","desc":"X coordinate"}],"desc":"Computes and returns the 1D unseeded perlin noise for the given\ncoordinates in 1D space","ret":"Noise at given location, from range -1 to 1"},{"name":"getNoise","params":[{"name":"x","type":"double","desc":"X coordinate"},{"name":"y","type":"double","desc":"Y coordinate"}],"desc":"Computes and returns the 2D unseeded perlin noise for the given\ncoordinates in 2D space","ret":"Noise at given location, from range -1 to 1"},{"name":"getNoise","params":[{"name":"x","type":"double","desc":"X coordinate"},{"name":"y","type":"double","desc":"Y coordinate"},{"name":"z","type":"double","desc":"Z coordinate"}],"desc":"Computes and returns the 3D unseeded perlin noise for the given\ncoordinates in 3D space","ret":"Noise at given location, from range -1 to 1"},{"name":"getInstance","params":[],"desc":"Gets the singleton unseeded instance of this generator","ret":"Singleton"},{"name":"getNoise","params":[{"name":"x","type":"double","desc":"X-coordinate"},{"name":"octaves","type":"int","desc":"Number of octaves to use"},{"name":"frequency","type":"double","desc":"How much to alter the frequency by each octave"},{"name":"amplitude","type":"double","desc":"How much to alter the amplitude by each octave"}],"desc":"Generates noise for the 1D coordinates using the specified number of\noctaves and parameters","ret":"Resulting noise"},{"name":"getNoise","params":[{"name":"x","type":"double","desc":"X-coordinate"},{"name":"y","type":"double","desc":"Y-coordinate"},{"name":"octaves","type":"int","desc":"Number of octaves to use"},{"name":"frequency","type":"double","desc":"How much to alter the frequency by each octave"},{"name":"amplitude","type":"double","desc":"How much to alter the amplitude by each octave"}],"desc":"Generates noise for the 2D coordinates using the specified number of\noctaves and parameters","ret":"Resulting noise"},{"name":"getNoise","params":[{"name":"x","type":"double","desc":"X-coordinate"},{"name":"y","type":"double","desc":"Y-coordinate"},{"name":"z","type":"double","desc":"Z-coordinate"},{"name":"octaves","type":"int","desc":"Number of octaves to use"},{"name":"frequency","type":"double","desc":"How much to alter the frequency by each octave"},{"name":"amplitude","type":"double","desc":"How much to alter the amplitude by each octave"}],"desc":"Generates noise for the 3D coordinates using the specified number of\noctaves and parameters","ret":"Resulting noise"}],"desc":"Generates noise using the \"classic\" perlin generator"},{"FQCN":"org.bukkit.util.noise.PerlinOctaveGenerator","methods":[],"desc":"Creates perlin noise through unbiased octaves"},{"FQCN":"org.bukkit.util.noise.NoiseGenerator","methods":[{"name":"floor","params":[{"name":"x","type":"double","desc":"Value to floor"}],"desc":"Speedy floor, faster than (int)Math.floor(x)","ret":"Floored value"},{"name":"noise","params":[{"name":"x","type":"double","desc":"X coordinate"}],"desc":"Computes and returns the 1D noise for the given coordinate in 1D space","ret":"Noise at given location, from range -1 to 1"},{"name":"noise","params":[{"name":"x","type":"double","desc":"X coordinate"},{"name":"y","type":"double","desc":"Y coordinate"}],"desc":"Computes and returns the 2D noise for the given coordinates in 2D space","ret":"Noise at given location, from range -1 to 1"},{"name":"noise","params":[{"name":"x","type":"double","desc":"X coordinate"},{"name":"y","type":"double","desc":"Y coordinate"},{"name":"z","type":"double","desc":"Z coordinate"}],"desc":"Computes and returns the 3D noise for the given coordinates in 3D space","ret":"Noise at given location, from range -1 to 1"},{"name":"noise","params":[{"name":"x","type":"double","desc":"X-coordinate"},{"name":"octaves","type":"int","desc":"Number of octaves to use"},{"name":"frequency","type":"double","desc":"How much to alter the frequency by each octave"},{"name":"amplitude","type":"double","desc":"How much to alter the amplitude by each octave"}],"desc":"Generates noise for the 1D coordinates using the specified number of\noctaves and parameters","ret":"Resulting noise"},{"name":"noise","params":[{"name":"x","type":"double","desc":"X-coordinate"},{"name":"octaves","type":"int","desc":"Number of octaves to use"},{"name":"frequency","type":"double","desc":"How much to alter the frequency by each octave"},{"name":"amplitude","type":"double","desc":"How much to alter the amplitude by each octave"},{"name":"normalized","type":"boolean","desc":"If true, normalize the value to [-1, 1]"}],"desc":"Generates noise for the 1D coordinates using the specified number of\noctaves and parameters","ret":"Resulting noise"},{"name":"noise","params":[{"name":"x","type":"double","desc":"X-coordinate"},{"name":"y","type":"double","desc":"Y-coordinate"},{"name":"octaves","type":"int","desc":"Number of octaves to use"},{"name":"frequency","type":"double","desc":"How much to alter the frequency by each octave"},{"name":"amplitude","type":"double","desc":"How much to alter the amplitude by each octave"}],"desc":"Generates noise for the 2D coordinates using the specified number of\noctaves and parameters","ret":"Resulting noise"},{"name":"noise","params":[{"name":"x","type":"double","desc":"X-coordinate"},{"name":"y","type":"double","desc":"Y-coordinate"},{"name":"octaves","type":"int","desc":"Number of octaves to use"},{"name":"frequency","type":"double","desc":"How much to alter the frequency by each octave"},{"name":"amplitude","type":"double","desc":"How much to alter the amplitude by each octave"},{"name":"normalized","type":"boolean","desc":"If true, normalize the value to [-1, 1]"}],"desc":"Generates noise for the 2D coordinates using the specified number of\noctaves and parameters","ret":"Resulting noise"},{"name":"noise","params":[{"name":"x","type":"double","desc":"X-coordinate"},{"name":"y","type":"double","desc":"Y-coordinate"},{"name":"z","type":"double","desc":"Z-coordinate"},{"name":"octaves","type":"int","desc":"Number of octaves to use"},{"name":"frequency","type":"double","desc":"How much to alter the frequency by each octave"},{"name":"amplitude","type":"double","desc":"How much to alter the amplitude by each octave"}],"desc":"Generates noise for the 3D coordinates using the specified number of\noctaves and parameters","ret":"Resulting noise"},{"name":"noise","params":[{"name":"x","type":"double","desc":"X-coordinate"},{"name":"y","type":"double","desc":"Y-coordinate"},{"name":"z","type":"double","desc":"Z-coordinate"},{"name":"octaves","type":"int","desc":"Number of octaves to use"},{"name":"frequency","type":"double","desc":"How much to alter the frequency by each octave"},{"name":"amplitude","type":"double","desc":"How much to alter the amplitude by each octave"},{"name":"normalized","type":"boolean","desc":"If true, normalize the value to [-1, 1]"}],"desc":"Generates noise for the 3D coordinates using the specified number of\noctaves and parameters","ret":"Resulting noise"}],"desc":"Base class for all noise generators"},{"FQCN":"org.bukkit.util.noise.SimplexNoiseGenerator","methods":[{"name":"getNoise","params":[{"name":"xin","type":"double","desc":"X coordinate"}],"desc":"Computes and returns the 1D unseeded simplex noise for the given\ncoordinates in 1D space","ret":"Noise at given location, from range -1 to 1"},{"name":"getNoise","params":[{"name":"xin","type":"double","desc":"X coordinate"},{"name":"yin","type":"double","desc":"Y coordinate"}],"desc":"Computes and returns the 2D unseeded simplex noise for the given\ncoordinates in 2D space","ret":"Noise at given location, from range -1 to 1"},{"name":"getNoise","params":[{"name":"xin","type":"double","desc":"X coordinate"},{"name":"yin","type":"double","desc":"Y coordinate"},{"name":"zin","type":"double","desc":"Z coordinate"}],"desc":"Computes and returns the 3D unseeded simplex noise for the given\ncoordinates in 3D space","ret":"Noise at given location, from range -1 to 1"},{"name":"getNoise","params":[{"name":"x","type":"double","desc":"X coordinate"},{"name":"y","type":"double","desc":"Y coordinate"},{"name":"z","type":"double","desc":"Z coordinate"},{"name":"w","type":"double","desc":"W coordinate"}],"desc":"Computes and returns the 4D simplex noise for the given coordinates in\n4D space","ret":"Noise at given location, from range -1 to 1"},{"name":"noise","params":[{"name":"x","type":"double","desc":"X coordinate"},{"name":"y","type":"double","desc":"Y coordinate"},{"name":"z","type":"double","desc":"Z coordinate"},{"name":"w","type":"double","desc":"W coordinate"}],"desc":"Computes and returns the 4D simplex noise for the given coordinates in\n4D space","ret":"Noise at given location, from range -1 to 1"},{"name":"getInstance","params":[],"desc":"Gets the singleton unseeded instance of this generator","ret":"Singleton"}],"desc":"Generates simplex-based noise.\n<p>\nThis is a modified version of the freely published version in the paper by\nStefan Gustavson at\n<a href=\"http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\">\nhttp://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf</a>"},{"FQCN":"org.bukkit.util.noise.SimplexOctaveGenerator","methods":[{"name":"getWScale","params":[],"desc":"Gets the scale used for each W-coordinates passed","ret":"W scale"},{"name":"setWScale","params":[{"name":"scale","type":"double","desc":"New W scale"}],"desc":"Sets the scale used for each W-coordinates passed","ret":""},{"name":"noise","params":[{"name":"x","type":"double","desc":"X-coordinate"},{"name":"y","type":"double","desc":"Y-coordinate"},{"name":"z","type":"double","desc":"Z-coordinate"},{"name":"w","type":"double","desc":"W-coordinate"},{"name":"frequency","type":"double","desc":"How much to alter the frequency by each octave"},{"name":"amplitude","type":"double","desc":"How much to alter the amplitude by each octave"}],"desc":"Generates noise for the 3D coordinates using the specified number of\noctaves and parameters","ret":"Resulting noise"},{"name":"noise","params":[{"name":"x","type":"double","desc":"X-coordinate"},{"name":"y","type":"double","desc":"Y-coordinate"},{"name":"z","type":"double","desc":"Z-coordinate"},{"name":"w","type":"double","desc":"W-coordinate"},{"name":"frequency","type":"double","desc":"How much to alter the frequency by each octave"},{"name":"amplitude","type":"double","desc":"How much to alter the amplitude by each octave"},{"name":"normalized","type":"boolean","desc":"If true, normalize the value to [-1, 1]"}],"desc":"Generates noise for the 3D coordinates using the specified number of\noctaves and parameters","ret":"Resulting noise"}],"desc":"Creates simplex noise through unbiased octaves"},{"FQCN":"org.bukkit.util.StructureSearchResult","methods":[{"name":"getStructure","params":[],"desc":"Return the structure which was found.","ret":"the found structure."},{"name":"getLocation","params":[],"desc":"Return the location of the structure.","ret":"the location the structure was found."}],"desc":"Holds the result of searching for a structure."},{"FQCN":"org.bukkit.util.ChatPaginator","methods":[{"name":"paginate","params":[{"name":"unpaginatedString","type":"String","desc":"The raw string to break."},{"name":"pageNumber","type":"int","desc":"The page number to fetch."}],"desc":"Breaks a raw string up into pages using the default width and height.","ret":"A single chat page."},{"name":"paginate","params":[{"name":"unpaginatedString","type":"String","desc":"The raw string to break."},{"name":"pageNumber","type":"int","desc":"The page number to fetch."},{"name":"lineLength","type":"int","desc":"The desired width of a chat line."},{"name":"pageHeight","type":"int","desc":"The desired number of lines in a page."}],"desc":"Breaks a raw string up into pages using a provided width and height.","ret":"A single chat page."},{"name":"wordWrap","params":[{"name":"rawString","type":"String","desc":"The raw string to break."},{"name":"lineLength","type":"int","desc":"The length of a line of text."}],"desc":"Breaks a raw string up into a series of lines. Words are wrapped using\nspaces as decimeters and the newline character is respected.","ret":"An array of word-wrapped lines."}],"desc":"The ChatPaginator takes a raw string of arbitrary length and breaks it down\ninto an array of strings appropriate for displaying on the Minecraft player\nconsole."},{"FQCN":"org.bukkit.util.BiomeSearchResult","methods":[{"name":"getBiome","params":[],"desc":"Return the biome which was found.","ret":"the found biome."},{"name":"getLocation","params":[],"desc":"Return the location of the biome.","ret":"the location the biome was found."}],"desc":"Holds the result of searching for a biome."},{"FQCN":"org.bukkit.util.BlockVector","methods":[{"name":"equals","params":[{"name":"obj","type":"Object","desc":"The other object"}],"desc":"Checks if another object is equivalent.","ret":"whether the other object is equivalent"},{"name":"hashCode","params":[],"desc":"Returns a hash code for this vector.","ret":"hash code"},{"name":"clone","params":[],"desc":"Get a new block vector.","ret":"vector"}],"desc":"A vector with a hash function that floors the X, Y, Z components, a la\nBlockVector in WorldEdit. BlockVectors can be used in hash sets and\nhash maps. Be aware that BlockVectors are mutable, but it is important\nthat BlockVectors are never changed once put into a hash set or hash map."},{"FQCN":"org.bukkit.util.NumberConversions","methods":[],"desc":"Utils for casting number types to other number types"},{"FQCN":"org.bukkit.Effect","methods":[{"name":"getId","params":[],"desc":"Gets the ID for this effect.","ret":"ID of this effect"},{"name":"getType","params":[],"desc":"","ret":"The type of the effect."},{"name":"getData","params":[],"desc":"","ret":"The class which represents data for this effect, or null if\n    none"},{"name":"getById","params":[{"name":"id","type":"int","desc":"ID of the Effect to return"}],"desc":"Gets the Effect associated with the given ID.","ret":"Effect with the given ID"}],"desc":"A list of effects that the server is able to send to players."},{"FQCN":"org.bukkit.World","methods":[{"name":"getEntityCount","params":[],"desc":"","ret":"The amount of Entities in this world"},{"name":"getTileEntityCount","params":[],"desc":"","ret":"The amount of Tile Entities in this world"},{"name":"getTickableTileEntityCount","params":[],"desc":"","ret":"The amount of Tickable Tile Entities in this world"},{"name":"getChunkCount","params":[],"desc":"","ret":"The amount of Chunks in this world"},{"name":"getPlayerCount","params":[],"desc":"","ret":"The amount of Players in this world"},{"name":"hasStructureAt","params":[{"name":"position","type":"io.papermc.paper.math.Position","desc":"the position to check at"},{"name":"structure","type":"Structure","desc":"the structure to check for"}],"desc":"Check if the naturally-generated structure exists at the position.\n<p>\nNote that if the position is not loaded, this may cause chunk loads/generation\nto check if a structure is at that position. Use {@link #isPositionLoaded(io.papermc.paper.math.Position)}\nto check if a position is loaded","ret":"true if that structure exists at the position"},{"name":"isPositionLoaded","params":[{"name":"position","type":"io.papermc.paper.math.Position","desc":"position to check"}],"desc":"Checks if this position is loaded.","ret":"true if loaded"},{"name":"getBlockAt","params":[{"name":"x","type":"int","desc":"X-coordinate of the block"},{"name":"y","type":"int","desc":"Y-coordinate of the block"},{"name":"z","type":"int","desc":"Z-coordinate of the block"}],"desc":"Gets the {@link Block} at the given coordinates","ret":"Block at the given coordinates"},{"name":"getBlockAt","params":[{"name":"location","type":"Location","desc":"Location of the block"}],"desc":"Gets the {@link Block} at the given {@link Location}","ret":"Block at the given location"},{"name":"getBlockAtKey","params":[{"name":"key","type":"long","desc":"The block key. See {@link Block#getBlockKey()}"}],"desc":"Gets the {@link Block} at the given block key","ret":"Block at the key"},{"name":"getLocationAtKey","params":[{"name":"key","type":"long","desc":"The block key. See {@link Location#toBlockKey()}"}],"desc":"Gets the {@link Location} at the given block key","ret":"Location at the key"},{"name":"getHighestBlockAt","params":[{"name":"x","type":"int","desc":"X-coordinate of the block"},{"name":"z","type":"int","desc":"Z-coordinate of the block"}],"desc":"Gets the highest non-empty (impassable) block at the given coordinates.","ret":"Highest non-empty block"},{"name":"getHighestBlockAt","params":[{"name":"location","type":"Location","desc":"Coordinates to get the highest block"}],"desc":"Gets the highest non-empty (impassable) block at the given coordinates.","ret":"Highest non-empty block"},{"name":"getHighestBlockYAt","params":[{"name":"x","type":"int","desc":"The block's x-coordinate."},{"name":"z","type":"int","desc":"The block's z-coordinate."},{"name":"heightmap","type":"com.destroystokyo.paper.HeightmapType","desc":"The specified heightmap to use. See {@link com.destroystokyo.paper.HeightmapType}"}],"desc":"Returns the highest block's y-coordinate at the specified block coordinates that match the specified heightmap's conditions.\n<p>\n<b>implNote:</b> Implementations are recommended to use an iterative search as a fallback before resorting to\nthrowing an {@code UnsupportedOperationException}.\n</p>","ret":"The highest block's y-coordinate at (x, z) that matches the specified heightmap's conditions."},{"name":"getHighestBlockYAt","params":[{"name":"location","type":"Location","desc":"The specified block coordinates."},{"name":"heightmap","type":"com.destroystokyo.paper.HeightmapType","desc":"The specified heightmap to use. See {@link com.destroystokyo.paper.HeightmapType}"}],"desc":"Returns the highest block's y-coordinate at the specified block coordinates that match the specified heightmap's conditions.\nNote that the y-coordinate of the specified location is ignored.\n<p>\n<b>implNote:</b> Implementations are recommended to use an iterative search as a fallback before resorting to\nthrowing an {@code UnsupportedOperationException}.\n</p>","ret":"The highest block's y-coordinate at {@code location} that matches the specified heightmap's conditions."},{"name":"getHighestBlockAt","params":[{"name":"x","type":"int","desc":"The block's x-coordinate."},{"name":"z","type":"int","desc":"The block's z-coordinate."},{"name":"heightmap","type":"com.destroystokyo.paper.HeightmapType","desc":"The specified heightmap to use. See {@link com.destroystokyo.paper.HeightmapType}"}],"desc":"Returns the highest {@link Block} at the specified block coordinates that match the specified heightmap's conditions.\n<p>\n<b>implNote:</b> Implementations are recommended to use an iterative search as a fallback before resorting to\nthrowing an {@code UnsupportedOperationException}.\n</p>","ret":"The highest {@link Block} at (x, z) that matches the specified heightmap's conditions."},{"name":"getHighestBlockAt","params":[{"name":"location","type":"Location","desc":"The specified block coordinates."},{"name":"heightmap","type":"com.destroystokyo.paper.HeightmapType","desc":"The specified heightmap to use. See {@link com.destroystokyo.paper.HeightmapType}"}],"desc":"Returns the highest {@link Block} at the specified block coordinates that match the specified heightmap's conditions.\nNote that the y-coordinate of the specified location is ignored.\n<p>\n<b>implNote:</b> Implementations are recommended to use an iterative search as a fallback before resorting to\nthrowing an {@code UnsupportedOperationException}.\n</p>","ret":"The highest {@link Block} at {@code location} that matches the specified heightmap's conditions."},{"name":"getHighestBlockAt","params":[{"name":"x","type":"int","desc":"X-coordinate of the block"},{"name":"z","type":"int","desc":"Z-coordinate of the block"},{"name":"heightMap","type":"HeightMap","desc":"the heightMap that is used to determine the highest\npoint"}],"desc":"Gets the highest block corresponding to the {@link HeightMap} at the\ngiven coordinates.","ret":"Highest block corresponding to the {@link HeightMap}"},{"name":"getHighestBlockAt","params":[{"name":"location","type":"Location","desc":"Coordinates to get the highest block"},{"name":"heightMap","type":"HeightMap","desc":"the heightMap that is used to determine the highest\npoint"}],"desc":"Gets the highest block corresponding to the {@link HeightMap} at the\ngiven coordinates.","ret":"Highest block corresponding to the {@link HeightMap}"},{"name":"getChunkAt","params":[{"name":"x","type":"int","desc":"X-coordinate of the chunk"},{"name":"z","type":"int","desc":"Z-coordinate of the chunk"}],"desc":"Gets the {@link Chunk} at the given coordinates","ret":"Chunk at the given coordinates"},{"name":"getChunkAt","params":[{"name":"x","type":"int","desc":"X-coordinate of the chunk"},{"name":"z","type":"int","desc":"Z-coordinate of the chunk"},{"name":"generate","type":"boolean","desc":"Whether the chunk should be fully generated or not"}],"desc":"Gets the {@link Chunk} at the given coordinates","ret":"Chunk at the given coordinates"},{"name":"getChunkAt","params":[{"name":"location","type":"Location","desc":"Location of the chunk"}],"desc":"Gets the {@link Chunk} at the given {@link Location}","ret":"Chunk at the given location"},{"name":"getChunkAt","params":[{"name":"block","type":"Block","desc":"Block to get the containing chunk from"}],"desc":"Gets the {@link Chunk} that contains the given {@link Block}","ret":"The chunk that contains the given block"},{"name":"getChunkAt","params":[{"name":"chunkKey","type":"long","desc":"The Chunk Key to look up the chunk by"}],"desc":"Gets the chunk at the specified chunk key, which is the X and Z packed into a long.\n<p>\nSee {@link Chunk#getChunkKey()} for easy access to the key, or you may calculate it as:\nlong chunkKey = (long) chunkX &amp; 0xffffffffL | ((long) chunkZ &amp; 0xffffffffL) &gt;&gt; 32;","ret":"The chunk at the specified key"},{"name":"getChunkAt","params":[{"name":"chunkKey","type":"long","desc":"The Chunk Key to look up the chunk by"},{"name":"generate","type":"boolean","desc":"Whether the chunk should be fully generated or not"}],"desc":"Gets the chunk at the specified chunk key, which is the X and Z packed into a long.\n<p>\nSee {@link Chunk#getChunkKey()} for easy access to the key, or you may calculate it as:\nlong chunkKey = (long) chunkX &amp; 0xffffffffL | ((long) chunkZ &amp; 0xffffffffL) &gt;&gt; 32;","ret":"The chunk at the specified key"},{"name":"isChunkGenerated","params":[{"name":"chunkKey","type":"long","desc":"The Chunk Key to look up the chunk by"}],"desc":"Checks if a {@link Chunk} has been generated at the specified chunk key,\nwhich is the X and Z packed into a long.","ret":"true if the chunk has been generated, otherwise false"},{"name":"isChunkLoaded","params":[{"name":"chunk","type":"Chunk","desc":"The chunk to check"}],"desc":"Checks if the specified {@link Chunk} is loaded","ret":"true if the chunk is loaded, otherwise false"},{"name":"getLoadedChunks","params":[],"desc":"Gets an array of all loaded {@link Chunk}s","ret":"Chunk[] containing all loaded chunks"},{"name":"loadChunk","params":[{"name":"chunk","type":"Chunk","desc":"The chunk to load"}],"desc":"Loads the specified {@link Chunk}.\n<p>\n<b>This method will keep the specified chunk loaded until one of the\nunload methods is manually called. Callers are advised to instead use\ngetChunkAt which will only temporarily load the requested chunk.</b>","ret":""},{"name":"isChunkLoaded","params":[{"name":"x","type":"int","desc":"X-coordinate of the chunk"},{"name":"z","type":"int","desc":"Z-coordinate of the chunk"}],"desc":"Checks if the {@link Chunk} at the specified coordinates is loaded","ret":"true if the chunk is loaded, otherwise false"},{"name":"isChunkGenerated","params":[{"name":"x","type":"int","desc":"X-coordinate of the chunk"},{"name":"z","type":"int","desc":"Z-coordinate of the chunk"}],"desc":"Checks if the {@link Chunk} at the specified coordinates is generated","ret":"true if the chunk is generated, otherwise false"},{"name":"isChunkInUse","params":[{"name":"x","type":"int","desc":"X-coordinate of the chunk"},{"name":"z","type":"int","desc":"Z-coordinate of the chunk"}],"desc":"Checks if the {@link Chunk} at the specified coordinates is loaded and\nin use by one or more players","ret":"true if the chunk is loaded and in use by one or more players,\n    otherwise false"},{"name":"loadChunk","params":[{"name":"x","type":"int","desc":"X-coordinate of the chunk"},{"name":"z","type":"int","desc":"Z-coordinate of the chunk"}],"desc":"Loads the {@link Chunk} at the specified coordinates.\n<p>\n<b>This method will keep the specified chunk loaded until one of the\nunload methods is manually called. Callers are advised to instead use\ngetChunkAt which will only temporarily load the requested chunk.</b>\n<p>\nIf the chunk does not exist, it will be generated.\n<p>\nThis method is analogous to {@link #loadChunk(int, int, boolean)} where\ngenerate is true.","ret":""},{"name":"loadChunk","params":[{"name":"x","type":"int","desc":"X-coordinate of the chunk"},{"name":"z","type":"int","desc":"Z-coordinate of the chunk"},{"name":"generate","type":"boolean","desc":"Whether or not to generate a chunk if it doesn't\n    already exist"}],"desc":"Loads the {@link Chunk} at the specified coordinates.\n<p>\n<b>This method will keep the specified chunk loaded until one of the\nunload methods is manually called. Callers are advised to instead use\ngetChunkAt which will only temporarily load the requested chunk.</b>","ret":"true if the chunk has loaded successfully, otherwise false"},{"name":"unloadChunk","params":[{"name":"chunk","type":"Chunk","desc":"the chunk to unload"}],"desc":"Safely unloads and saves the {@link Chunk} at the specified coordinates\n<p>\nThis method is analogous to {@link #unloadChunk(int, int, boolean)}\nwhere save is true.","ret":"true if the chunk has unloaded successfully, otherwise false"},{"name":"unloadChunk","params":[{"name":"x","type":"int","desc":"X-coordinate of the chunk"},{"name":"z","type":"int","desc":"Z-coordinate of the chunk"}],"desc":"Safely unloads and saves the {@link Chunk} at the specified coordinates\n<p>\nThis method is analogous to {@link #unloadChunk(int, int, boolean)}\nwhere save is true.","ret":"true if the chunk has unloaded successfully, otherwise false"},{"name":"unloadChunk","params":[{"name":"x","type":"int","desc":"X-coordinate of the chunk"},{"name":"z","type":"int","desc":"Z-coordinate of the chunk"},{"name":"save","type":"boolean","desc":"Whether or not to save the chunk"}],"desc":"Safely unloads and optionally saves the {@link Chunk} at the specified\ncoordinates.","ret":"true if the chunk has unloaded successfully, otherwise false"},{"name":"unloadChunkRequest","params":[{"name":"x","type":"int","desc":"X-coordinate of the chunk"},{"name":"z","type":"int","desc":"Z-coordinate of the chunk"}],"desc":"Safely queues the {@link Chunk} at the specified coordinates for\nunloading.","ret":"true is the queue attempt was successful, otherwise false"},{"name":"regenerateChunk","params":[{"name":"x","type":"int","desc":"X-coordinate of the chunk"},{"name":"z","type":"int","desc":"Z-coordinate of the chunk"}],"desc":"Regenerates the {@link Chunk} at the specified coordinates","ret":"Whether the chunk was actually regenerated"},{"name":"isChunkForceLoaded","params":[{"name":"x","type":"int","desc":"X-coordinate of the chunk"},{"name":"z","type":"int","desc":"Z-coordinate of the chunk"}],"desc":"Gets whether the chunk at the specified chunk coordinates is force\nloaded.\n<p>\nA force loaded chunk will not be unloaded due to lack of player activity.","ret":"force load status"},{"name":"setChunkForceLoaded","params":[{"name":"x","type":"int","desc":"X-coordinate of the chunk"},{"name":"z","type":"int","desc":"Z-coordinate of the chunk"},{"name":"forced","type":"boolean","desc":"force load status"}],"desc":"Sets whether the chunk at the specified chunk coordinates is force\nloaded.\n<p>\nA force loaded chunk will not be unloaded due to lack of player activity.","ret":""},{"name":"getForceLoadedChunks","params":[],"desc":"Returns all force loaded chunks in this world.\n<p>\nA force loaded chunk will not be unloaded due to lack of player activity.","ret":"unmodifiable collection of force loaded chunks"},{"name":"addPluginChunkTicket","params":[{"name":"x","type":"int","desc":"X-coordinate of the chunk"},{"name":"z","type":"int","desc":"Z-coordinate of the chunk"},{"name":"plugin","type":"Plugin","desc":"Plugin which owns the ticket"}],"desc":"Adds a plugin ticket for the specified chunk, loading the chunk if it is\nnot already loaded.\n<p>\nA plugin ticket will prevent a chunk from unloading until it is\nexplicitly removed. A plugin instance may only have one ticket per chunk,\nbut each chunk can have multiple plugin tickets.\n</p>","ret":"{@code true} if a plugin ticket was added, {@code false} if the\nticket already exists for the plugin"},{"name":"removePluginChunkTicket","params":[{"name":"x","type":"int","desc":"X-coordinate of the chunk"},{"name":"z","type":"int","desc":"Z-coordinate of the chunk"},{"name":"plugin","type":"Plugin","desc":"Plugin which owns the ticket"}],"desc":"Removes the specified plugin's ticket for the specified chunk\n<p>\nA plugin ticket will prevent a chunk from unloading until it is\nexplicitly removed. A plugin instance may only have one ticket per chunk,\nbut each chunk can have multiple plugin tickets.\n</p>","ret":"{@code true} if the plugin ticket was removed, {@code false} if\nthere is no plugin ticket for the chunk"},{"name":"removePluginChunkTickets","params":[{"name":"plugin","type":"Plugin","desc":"Specified plugin"}],"desc":"Removes all plugin tickets for the specified plugin\n<p>\nA plugin ticket will prevent a chunk from unloading until it is\nexplicitly removed. A plugin instance may only have one ticket per chunk,\nbut each chunk can have multiple plugin tickets.\n</p>","ret":""},{"name":"getPluginChunkTickets","params":[{"name":"x","type":"int","desc":"X-coordinate of the chunk"},{"name":"z","type":"int","desc":"Z-coordinate of the chunk"}],"desc":"Retrieves a collection specifying which plugins have tickets for the\nspecified chunk. This collection is not updated when plugin tickets are\nadded or removed to the chunk.\n<p>\nA plugin ticket will prevent a chunk from unloading until it is\nexplicitly removed. A plugin instance may only have one ticket per chunk,\nbut each chunk can have multiple plugin tickets.\n</p>","ret":"unmodifiable collection containing which plugins have tickets for\nthe chunk"},{"name":"getPluginChunkTickets","params":[],"desc":"Returns a map of which plugins have tickets for what chunks. The returned\nmap is not updated when plugin tickets are added or removed to chunks. If\na plugin has no tickets, it will be absent from the map.\n<p>\nA plugin ticket will prevent a chunk from unloading until it is\nexplicitly removed. A plugin instance may only have one ticket per chunk,\nbut each chunk can have multiple plugin tickets.\n</p>","ret":"unmodifiable map containing which plugins have tickets for what\nchunks"},{"name":"dropItem","params":[{"name":"location","type":"Location","desc":"Location to drop the item"},{"name":"item","type":"ItemStack","desc":"ItemStack to drop"}],"desc":"Drops an item at the specified {@link Location}","ret":"ItemDrop entity created as a result of this method"},{"name":"dropItem","params":[{"name":"location","type":"Location","desc":"Location to drop the item"},{"name":"item","type":"ItemStack","desc":"ItemStack to drop"},{"name":"function","type":"Consumer<? super Item>","desc":"the function to be run before the entity is spawned."}],"desc":"Drops an item at the specified {@link Location}\nNote that functions will run before the entity is spawned","ret":"ItemDrop entity created as a result of this method"},{"name":"dropItemNaturally","params":[{"name":"location","type":"Location","desc":"Location to drop the item"},{"name":"item","type":"ItemStack","desc":"ItemStack to drop"}],"desc":"Drops an item at the specified {@link Location} with a random offset","ret":"ItemDrop entity created as a result of this method"},{"name":"dropItemNaturally","params":[{"name":"location","type":"Location","desc":"Location to drop the item"},{"name":"item","type":"ItemStack","desc":"ItemStack to drop"},{"name":"function","type":"Consumer<? super Item>","desc":"the function to be run before the entity is spawned."}],"desc":"Drops an item at the specified {@link Location} with a random offset\nNote that functions will run before the entity is spawned","ret":"ItemDrop entity created as a result of this method"},{"name":"spawnArrow","params":[{"name":"location","type":"Location","desc":"Location to spawn the arrow"},{"name":"direction","type":"Vector","desc":"Direction to shoot the arrow in"},{"name":"speed","type":"float","desc":"Speed of the arrow. A recommend speed is 0.6"},{"name":"spread","type":"float","desc":"Spread of the arrow. A recommend spread is 12"}],"desc":"Creates an {@link Arrow} entity at the given {@link Location}","ret":"Arrow entity spawned as a result of this method"},{"name":"spawnArrow","params":[{"name":"location","type":"Location","desc":"Location to spawn the arrow"},{"name":"direction","type":"Vector","desc":"Direction to shoot the arrow in"},{"name":"speed","type":"float","desc":"Speed of the arrow. A recommend speed is 0.6"},{"name":"spread","type":"float","desc":"Spread of the arrow. A recommend spread is 12"},{"name":"clazz","type":"Class<T>","desc":"the Entity class for the arrow\n{@link org.bukkit.entity.SpectralArrow},{@link org.bukkit.entity.Arrow},{@link org.bukkit.entity.TippedArrow}"}],"desc":"Creates an arrow entity of the given class at the given {@link Location}","ret":"Arrow entity spawned as a result of this method"},{"name":"generateTree","params":[{"name":"location","type":"Location","desc":"Location to spawn the tree"},{"name":"type","type":"TreeType","desc":"Type of the tree to create"}],"desc":"Creates a tree at the given {@link Location}","ret":"true if the tree was created successfully, otherwise false"},{"name":"generateTree","params":[{"name":"loc","type":"Location","desc":"Location to spawn the tree"},{"name":"type","type":"TreeType","desc":"Type of the tree to create"},{"name":"delegate","type":"BlockChangeDelegate","desc":"A class to call for each block changed as a result of\n    this method"}],"desc":"Creates a tree at the given {@link Location}","ret":"true if the tree was created successfully, otherwise false"},{"name":"strikeLightning","params":[{"name":"loc","type":"Location","desc":"The location to strike lightning"}],"desc":"Strikes lightning at the given {@link Location}","ret":"The lightning entity."},{"name":"strikeLightningEffect","params":[{"name":"loc","type":"Location","desc":"The location to strike lightning"}],"desc":"Strikes lightning at the given {@link Location} without doing damage","ret":"The lightning entity."},{"name":"findLightningRod","params":[{"name":"location","type":"Location","desc":"{@link Location} to search for Lightning Rod around"}],"desc":"Finds the location of the nearest unobstructed Lightning Rod in a 128-block\nradius around the given location. Returns {@code null} if no Lightning Rod is found.\n\n<p>Note: To activate a Lightning Rod, the position one block above it must be struck by lightning.</p>","ret":"{@link Location} of Lightning Rod or {@code null}"},{"name":"findLightningTarget","params":[{"name":"location","type":"Location","desc":"{@link Location} to search for target around"}],"desc":"Finds a target {@link Location} for lightning to strike.\n<p>It selects from (in the following order):</p>\n<ol>\n <li>the block above the nearest Lightning Rod, found using {@link World#findLightningRod(Location)}</li>\n <li>a random {@link LivingEntity} that can see the sky in a 6x6 cuboid\n     around input X/Z coordinates. Y ranges from <i>the highest motion-blocking\n     block at the input X/Z - 3</i> to <i>the height limit + 3</i></li>\n</ol>\n<p>Returns {@code null} if no target is found.</p>","ret":"lightning target or {@code null}"},{"name":"getEntities","params":[],"desc":"Get a list of all entities in this World","ret":"A List of all Entities currently residing in this world"},{"name":"getLivingEntities","params":[],"desc":"Get a list of all living entities in this World","ret":"A List of all LivingEntities currently residing in this world"},{"name":"getEntitiesByClass","params":[{"name":"classes","type":"Class<T>","desc":"The classes representing the types of entity to match"}],"desc":"Get a collection of all entities in this World matching the given\nclass/interface","ret":"A List of all Entities currently residing in this world that\n    match the given class/interface"},{"name":"getEntitiesByClass","params":[{"name":"cls","type":"Class<T>","desc":"The class representing the type of entity to match"}],"desc":"Get a collection of all entities in this World matching the given\nclass/interface","ret":"A List of all Entities currently residing in this world that\n    match the given class/interface"},{"name":"getEntitiesByClasses","params":[{"name":"classes","type":"Class<?>","desc":"The classes representing the types of entity to match"}],"desc":"Get a collection of all entities in this World matching any of the\ngiven classes/interfaces","ret":"A List of all Entities currently residing in this world that\n    match one or more of the given classes/interfaces"},{"name":"getNearbyLivingEntities","params":[{"name":"loc","type":"Location","desc":"Center location"},{"name":"radius","type":"double","desc":"Radius"}],"desc":"Gets nearby LivingEntities within the specified radius (bounding box)","ret":"the collection of entities near location. This will always be a non-null collection."},{"name":"getNearbyLivingEntities","params":[{"name":"loc","type":"Location","desc":"Center location"},{"name":"xzRadius","type":"double","desc":"X/Z Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"}],"desc":"Gets nearby LivingEntities within the specified radius (bounding box)","ret":"the collection of entities near location. This will always be a non-null collection."},{"name":"getNearbyLivingEntities","params":[{"name":"loc","type":"Location","desc":"Center location"},{"name":"xRadius","type":"double","desc":"X Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"},{"name":"zRadius","type":"double","desc":"Z radius"}],"desc":"Gets nearby LivingEntities within the specified radius (bounding box)","ret":"the collection of entities near location. This will always be a non-null collection."},{"name":"getNearbyLivingEntities","params":[{"name":"loc","type":"Location","desc":"Center location"},{"name":"radius","type":"double","desc":"X Radius"},{"name":"predicate","type":"Predicate<? super LivingEntity>","desc":"a predicate used to filter results"}],"desc":"Gets nearby LivingEntities within the specified radius (bounding box)","ret":"the collection of living entities near location. This will always be a non-null collection"},{"name":"getNearbyLivingEntities","params":[{"name":"loc","type":"Location","desc":"Center location"},{"name":"xzRadius","type":"double","desc":"X/Z Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"},{"name":"predicate","type":"Predicate<? super LivingEntity>","desc":"a predicate used to filter results"}],"desc":"Gets nearby LivingEntities within the specified radius (bounding box)","ret":"the collection of living entities near location. This will always be a non-null collection"},{"name":"getNearbyLivingEntities","params":[{"name":"loc","type":"Location","desc":"Center location"},{"name":"xRadius","type":"double","desc":"X Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"},{"name":"zRadius","type":"double","desc":"Z radius"},{"name":"predicate","type":"Predicate<? super LivingEntity>","desc":"a predicate used to filter results"}],"desc":"Gets nearby LivingEntities within the specified radius (bounding box)","ret":"the collection of living entities near location. This will always be a non-null collection."},{"name":"getNearbyPlayers","params":[{"name":"loc","type":"Location","desc":"Center location"},{"name":"radius","type":"double","desc":"X/Y/Z Radius"}],"desc":"Gets nearby players within the specified radius (bounding box)","ret":"the collection of living entities near location. This will always be a non-null collection."},{"name":"getNearbyPlayers","params":[{"name":"loc","type":"Location","desc":"Center location"},{"name":"xzRadius","type":"double","desc":"X/Z Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"}],"desc":"Gets nearby players within the specified radius (bounding box)","ret":"the collection of living entities near location. This will always be a non-null collection."},{"name":"getNearbyPlayers","params":[{"name":"loc","type":"Location","desc":"Center location"},{"name":"xRadius","type":"double","desc":"X Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"},{"name":"zRadius","type":"double","desc":"Z Radius"}],"desc":"Gets nearby players within the specified radius (bounding box)","ret":"the collection of players near location. This will always be a non-null collection."},{"name":"getNearbyPlayers","params":[{"name":"loc","type":"Location","desc":"Center location"},{"name":"radius","type":"double","desc":"X/Y/Z Radius"},{"name":"predicate","type":"Predicate<? super Player>","desc":"a predicate used to filter results"}],"desc":"Gets nearby players within the specified radius (bounding box)","ret":"the collection of players near location. This will always be a non-null collection."},{"name":"getNearbyPlayers","params":[{"name":"loc","type":"Location","desc":"Center location"},{"name":"xzRadius","type":"double","desc":"X/Z Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"},{"name":"predicate","type":"Predicate<? super Player>","desc":"a predicate used to filter results"}],"desc":"Gets nearby players within the specified radius (bounding box)","ret":"the collection of players near location. This will always be a non-null collection."},{"name":"getNearbyPlayers","params":[{"name":"loc","type":"Location","desc":"Center location"},{"name":"xRadius","type":"double","desc":"X Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"},{"name":"zRadius","type":"double","desc":"Z Radius"},{"name":"predicate","type":"Predicate<? super Player>","desc":"a predicate used to filter results"}],"desc":"Gets nearby players within the specified radius (bounding box)","ret":"the collection of players near location. This will always be a non-null collection."},{"name":"getNearbyEntitiesByType","params":[{"name":"clazz","type":"Class<? extends T>","desc":"Type to filter by"},{"name":"loc","type":"Location","desc":"Center location"},{"name":"radius","type":"double","desc":"X/Y/Z radius to search within"}],"desc":"Gets all nearby entities of the specified type, within the specified radius (bounding box)","ret":"the collection of entities near location. This will always be a non-null collection."},{"name":"getNearbyEntitiesByType","params":[{"name":"clazz","type":"Class<? extends T>","desc":"Type to filter by"},{"name":"loc","type":"Location","desc":"Center location"},{"name":"xzRadius","type":"double","desc":"X/Z radius to search within"},{"name":"yRadius","type":"double","desc":"Y radius to search within"}],"desc":"Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)","ret":"the collection of entities near location. This will always be a non-null collection."},{"name":"getNearbyEntitiesByType","params":[{"name":"clazz","type":"Class<? extends T>","desc":"Type to filter by"},{"name":"loc","type":"Location","desc":"Center location"},{"name":"xRadius","type":"double","desc":"X Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"},{"name":"zRadius","type":"double","desc":"Z Radius"}],"desc":"Gets all nearby entities of the specified type, within the specified radius (bounding box)","ret":"the collection of entities near location. This will always be a non-null collection."},{"name":"getNearbyEntitiesByType","params":[{"name":"clazz","type":"Class<? extends T>","desc":"Type to filter by"},{"name":"loc","type":"Location","desc":"Center location"},{"name":"radius","type":"double","desc":"X/Y/Z radius to search within"},{"name":"predicate","type":"Predicate<? super T>","desc":"a predicate used to filter results"}],"desc":"Gets all nearby entities of the specified type, within the specified radius (bounding box)","ret":"the collection of entities near location. This will always be a non-null collection."},{"name":"getNearbyEntitiesByType","params":[{"name":"clazz","type":"Class<? extends T>","desc":"Type to filter by"},{"name":"loc","type":"Location","desc":"Center location"},{"name":"xzRadius","type":"double","desc":"X/Z radius to search within"},{"name":"yRadius","type":"double","desc":"Y radius to search within"},{"name":"predicate","type":"Predicate<? super T>","desc":"a predicate used to filter results"}],"desc":"Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)","ret":"the collection of entities near location. This will always be a non-null collection."},{"name":"getNearbyEntitiesByType","params":[{"name":"clazz","type":"Class<? extends Entity>","desc":"Type to filter by"},{"name":"loc","type":"Location","desc":"Center location"},{"name":"xRadius","type":"double","desc":"X Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"},{"name":"zRadius","type":"double","desc":"Z Radius"},{"name":"predicate","type":"Predicate<? super T>","desc":"a predicate used to filter results"}],"desc":"Gets all nearby entities of the specified type, within the specified radius (bounding box)","ret":"the collection of entities near location. This will always be a non-null collection."},{"name":"getChunkAtAsync","params":[{"name":"x","type":"int","desc":"Chunk X-coordinate of the chunk - floor(world coordinate / 16)"},{"name":"z","type":"int","desc":"Chunk Z-coordinate of the chunk - floor(world coordinate / 16)"},{"name":"cb","type":"ChunkLoadCallback","desc":"Callback to receive the chunk when it is loaded.\n          will be executed synchronously"}],"desc":"Requests a {@link Chunk} to be loaded at the given coordinates\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe {@link ChunkLoadCallback} will always be executed synchronously\non the main Server Thread.","ret":""},{"name":"getChunkAtAsync","params":[{"name":"loc","type":"Location","desc":"Location of the chunk"},{"name":"cb","type":"ChunkLoadCallback","desc":"Callback to receive the chunk when it is loaded.\n          will be executed synchronously"}],"desc":"Requests a {@link Chunk} to be loaded at the given {@link Location}\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe {@link ChunkLoadCallback} will always be executed synchronously\non the main Server Thread.","ret":""},{"name":"getChunkAtAsync","params":[{"name":"block","type":"Block","desc":"Block to get the containing chunk from"},{"name":"cb","type":"ChunkLoadCallback","desc":"Callback to receive the chunk when it is loaded.\n          will be executed synchronously"}],"desc":"Requests {@link Chunk} to be loaded that contains the given {@link Block}\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe {@link ChunkLoadCallback} will always be executed synchronously\non the main Server Thread.","ret":""},{"name":"getChunkAtAsync","params":[{"name":"x","type":"int","desc":"Chunk X-coordinate of the chunk - floor(world coordinate / 16)"},{"name":"z","type":"int","desc":"Chunk Z-coordinate of the chunk - floor(world coordinate / 16)"},{"name":"cb","type":"Consumer<? super Chunk>","desc":"Callback to receive the chunk when it is loaded.\n          will be executed synchronously"}],"desc":"Requests a {@link Chunk} to be loaded at the given coordinates\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe {@link java.util.function.Consumer} will always be executed synchronously\non the main Server Thread.","ret":""},{"name":"getChunkAtAsync","params":[{"name":"x","type":"int","desc":"Chunk X-coordinate of the chunk - floor(world coordinate / 16)"},{"name":"z","type":"int","desc":"Chunk Z-coordinate of the chunk - floor(world coordinate / 16)"},{"name":"gen","type":"boolean","desc":"Should we generate a chunk if it doesn't exist or not"},{"name":"cb","type":"Consumer<? super Chunk>","desc":"Callback to receive the chunk when it is loaded.\n          will be executed synchronously"}],"desc":"Requests a {@link Chunk} to be loaded at the given coordinates\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe {@link java.util.function.Consumer} will always be executed synchronously\non the main Server Thread.","ret":""},{"name":"getChunkAtAsync","params":[{"name":"loc","type":"Location","desc":"Location of the chunk"},{"name":"cb","type":"Consumer<? super Chunk>","desc":"Callback to receive the chunk when it is loaded.\n          will be executed synchronously"}],"desc":"Requests a {@link Chunk} to be loaded at the given {@link Location}\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe {@link java.util.function.Consumer} will always be executed synchronously\non the main Server Thread.","ret":""},{"name":"getChunkAtAsync","params":[{"name":"loc","type":"Location","desc":"Location of the chunk"},{"name":"gen","type":"boolean","desc":"Should the chunk generate if it doesn't exist"},{"name":"cb","type":"Consumer<? super Chunk>","desc":"Callback to receive the chunk when it is loaded.\n          will be executed synchronously"}],"desc":"Requests a {@link Chunk} to be loaded at the given {@link Location}\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe {@link java.util.function.Consumer} will always be executed synchronously\non the main Server Thread.","ret":""},{"name":"getChunkAtAsync","params":[{"name":"block","type":"Block","desc":"Block to get the containing chunk from"},{"name":"cb","type":"Consumer<? super Chunk>","desc":"Callback to receive the chunk when it is loaded.\n          will be executed synchronously"}],"desc":"Requests {@link Chunk} to be loaded that contains the given {@link Block}\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe {@link java.util.function.Consumer} will always be executed synchronously\non the main Server Thread.","ret":""},{"name":"getChunkAtAsync","params":[{"name":"block","type":"Block","desc":"Block to get the containing chunk from"},{"name":"gen","type":"boolean","desc":"Should the chunk generate if it doesn't exist"},{"name":"cb","type":"Consumer<? super Chunk>","desc":"Callback to receive the chunk when it is loaded.\n          will be executed synchronously"}],"desc":"Requests {@link Chunk} to be loaded that contains the given {@link Block}\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe {@link java.util.function.Consumer} will always be executed synchronously\non the main Server Thread.","ret":""},{"name":"getChunkAtAsync","params":[{"name":"loc","type":"Location","desc":"Location to load the corresponding chunk from"}],"desc":"Requests a {@link Chunk} to be loaded at the given coordinates\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe future will always be executed synchronously\non the main Server Thread.","ret":"Future that will resolve when the chunk is loaded"},{"name":"getChunkAtAsync","params":[{"name":"loc","type":"Location","desc":"Location to load the corresponding chunk from"},{"name":"gen","type":"boolean","desc":"Should the chunk generate if it doesn't exist"}],"desc":"Requests a {@link Chunk} to be loaded at the given coordinates\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe future will always be executed synchronously\non the main Server Thread.","ret":"Future that will resolve when the chunk is loaded"},{"name":"getChunkAtAsync","params":[{"name":"block","type":"Block","desc":"Block to load the corresponding chunk from"}],"desc":"Requests a {@link Chunk} to be loaded at the given coordinates\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe future will always be executed synchronously\non the main Server Thread.","ret":"Future that will resolve when the chunk is loaded"},{"name":"getChunkAtAsync","params":[{"name":"block","type":"Block","desc":"Block to load the corresponding chunk from"},{"name":"gen","type":"boolean","desc":"Should the chunk generate if it doesn't exist"}],"desc":"Requests a {@link Chunk} to be loaded at the given coordinates\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe future will always be executed synchronously\non the main Server Thread.","ret":"Future that will resolve when the chunk is loaded"},{"name":"getChunkAtAsync","params":[{"name":"x","type":"int","desc":"Chunk X-coordinate of the chunk - floor(world coordinate / 16)"},{"name":"z","type":"int","desc":"Chunk Z-coordinate of the chunk - floor(world coordinate / 16)"}],"desc":"Requests a {@link Chunk} to be loaded at the given coordinates\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe future will always be executed synchronously\non the main Server Thread.","ret":"Future that will resolve when the chunk is loaded"},{"name":"getChunkAtAsync","params":[{"name":"x","type":"int","desc":"Chunk X-coordinate of the chunk - floor(world coordinate / 16)"},{"name":"z","type":"int","desc":"Chunk Z-coordinate of the chunk - floor(world coordinate / 16)"},{"name":"gen","type":"boolean","desc":"Should we generate a chunk if it doesn't exist or not"}],"desc":"Requests a {@link Chunk} to be loaded at the given coordinates\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe future will always be executed synchronously\non the main Server Thread.","ret":"Future that will resolve when the chunk is loaded"},{"name":"getChunkAtAsyncUrgently","params":[{"name":"loc","type":"Location","desc":"Location to load the corresponding chunk from"}],"desc":"Requests a {@link Chunk} to be loaded at the given coordinates\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe future will always be executed synchronously\non the main Server Thread.","ret":"Future that will resolve when the chunk is loaded"},{"name":"getChunkAtAsyncUrgently","params":[{"name":"loc","type":"Location","desc":"Location to load the corresponding chunk from"},{"name":"gen","type":"boolean","desc":"Should the chunk generate if it doesn't exist"}],"desc":"Requests a {@link Chunk} to be loaded at the given coordinates\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe future will always be executed synchronously\non the main Server Thread.","ret":"Future that will resolve when the chunk is loaded"},{"name":"getChunkAtAsyncUrgently","params":[{"name":"block","type":"Block","desc":"Block to load the corresponding chunk from"}],"desc":"Requests a {@link Chunk} to be loaded at the given coordinates\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe future will always be executed synchronously\non the main Server Thread.","ret":"Future that will resolve when the chunk is loaded"},{"name":"getChunkAtAsyncUrgently","params":[{"name":"block","type":"Block","desc":"Block to load the corresponding chunk from"},{"name":"gen","type":"boolean","desc":"Should the chunk generate if it doesn't exist"}],"desc":"Requests a {@link Chunk} to be loaded at the given coordinates\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe future will always be executed synchronously\non the main Server Thread.","ret":"Future that will resolve when the chunk is loaded"},{"name":"getChunkAtAsyncUrgently","params":[{"name":"x","type":"int","desc":"X Coord"},{"name":"z","type":"int","desc":"Z Coord"}],"desc":"Requests a {@link Chunk} to be loaded at the given coordinates\n\nThis method makes no guarantee on how fast the chunk will load,\nand will return the chunk to the callback at a later time.\n\nYou should use this method if you need a chunk but do not need it\nimmediately, and you wish to let the server control the speed\nof chunk loads, keeping performance in mind.\n\nThe future will always be executed synchronously\non the main Server Thread.","ret":"Future that will resolve when the chunk is loaded"},{"name":"getPlayers","params":[],"desc":"Get a list of all players in this World","ret":"A list of all Players currently residing in this world"},{"name":"getNearbyEntities","params":[{"name":"location","type":"Location","desc":"The center of the bounding box"},{"name":"x","type":"double","desc":"1/2 the size of the box along x axis"},{"name":"y","type":"double","desc":"1/2 the size of the box along y axis"},{"name":"z","type":"double","desc":"1/2 the size of the box along z axis"}],"desc":"Returns a list of entities within a bounding box centered around a\nLocation.\n<p>\nThis may not consider entities in currently unloaded chunks. Some\nimplementations may impose artificial restrictions on the size of the\nsearch bounding box.","ret":"the collection of entities near location. This will always be a\n     non-null collection."},{"name":"getEntity","params":[{"name":"uuid","type":"java.util.UUID","desc":"the UUID of the entity"}],"desc":"Gets an entity in this world by its UUID","ret":"the entity with the given UUID, or null if it isn't found"},{"name":"getNearbyEntities","params":[{"name":"location","type":"Location","desc":"The center of the bounding box"},{"name":"x","type":"double","desc":"1/2 the size of the box along x axis"},{"name":"y","type":"double","desc":"1/2 the size of the box along y axis"},{"name":"z","type":"double","desc":"1/2 the size of the box along z axis"},{"name":"filter","type":"Predicate<? super Entity>","desc":"only entities that fulfill this predicate are considered,\n    or <code>null</code> to consider all entities"}],"desc":"Returns a list of entities within a bounding box centered around a\nLocation.\n<p>\nThis may not consider entities in currently unloaded chunks. Some\nimplementations may impose artificial restrictions on the size of the\nsearch bounding box.","ret":"the collection of entities near location. This will always be a\n    non-null collection."},{"name":"getNearbyEntities","params":[{"name":"boundingBox","type":"BoundingBox","desc":"the bounding box"}],"desc":"Returns a list of entities within the given bounding box.\n<p>\nThis may not consider entities in currently unloaded chunks. Some\nimplementations may impose artificial restrictions on the size of the\nsearch bounding box.","ret":"the collection of entities within the bounding box, will always\n    be a non-null collection"},{"name":"getNearbyEntities","params":[{"name":"boundingBox","type":"BoundingBox","desc":"the bounding box"},{"name":"filter","type":"Predicate<? super Entity>","desc":"only entities that fulfill this predicate are considered,\n    or <code>null</code> to consider all entities"}],"desc":"Returns a list of entities within the given bounding box.\n<p>\nThis may not consider entities in currently unloaded chunks. Some\nimplementations may impose artificial restrictions on the size of the\nsearch bounding box.","ret":"the collection of entities within the bounding box, will always\n    be a non-null collection"},{"name":"rayTraceEntities","params":[{"name":"start","type":"Location","desc":"the start position"},{"name":"direction","type":"Vector","desc":"the ray direction"},{"name":"maxDistance","type":"double","desc":"the maximum distance"}],"desc":"Performs a ray trace that checks for entity collisions.\n<p>\nThis may not consider entities in currently unloaded chunks. Some\nimplementations may impose artificial restrictions on the maximum\ndistance.\n<p>\n<b>Note:</b> Due to display entities having a zero size hitbox, this method will not detect them.\nTo detect display entities use {@link #rayTraceEntities(Location, Vector, double, double)} with a positive raySize","ret":"the closest ray trace hit result, or <code>null</code> if there\n    is no hit"},{"name":"rayTraceEntities","params":[{"name":"start","type":"Location","desc":"the start position"},{"name":"direction","type":"Vector","desc":"the ray direction"},{"name":"maxDistance","type":"double","desc":"the maximum distance"},{"name":"raySize","type":"double","desc":"entity bounding boxes will be uniformly expanded (or\n    shrunk) by this value before doing collision checks"}],"desc":"Performs a ray trace that checks for entity collisions.\n<p>\nThis may not consider entities in currently unloaded chunks. Some\nimplementations may impose artificial restrictions on the maximum\ndistance.","ret":"the closest ray trace hit result, or <code>null</code> if there\n    is no hit"},{"name":"rayTraceEntities","params":[{"name":"start","type":"Location","desc":"the start position"},{"name":"direction","type":"Vector","desc":"the ray direction"},{"name":"maxDistance","type":"double","desc":"the maximum distance"},{"name":"filter","type":"Predicate<? super Entity>","desc":"only entities that fulfill this predicate are considered,\n    or <code>null</code> to consider all entities"}],"desc":"Performs a ray trace that checks for entity collisions.\n<p>\nThis may not consider entities in currently unloaded chunks. Some\nimplementations may impose artificial restrictions on the maximum\ndistance.\n<p>\n<b>Note:</b> Due to display entities having a zero size hitbox, this method will not detect them.\nTo detect display entities use {@link #rayTraceEntities(Location, Vector, double, double, Predicate)} with a positive raySize","ret":"the closest ray trace hit result, or <code>null</code> if there\n    is no hit"},{"name":"rayTraceEntities","params":[{"name":"start","type":"Location","desc":"the start position"},{"name":"direction","type":"Vector","desc":"the ray direction"},{"name":"maxDistance","type":"double","desc":"the maximum distance"},{"name":"raySize","type":"double","desc":"entity bounding boxes will be uniformly expanded (or\n    shrunk) by this value before doing collision checks"},{"name":"filter","type":"Predicate<? super Entity>","desc":"only entities that fulfill this predicate are considered,\n    or <code>null</code> to consider all entities"}],"desc":"Performs a ray trace that checks for entity collisions.\n<p>\nThis may not consider entities in currently unloaded chunks. Some\nimplementations may impose artificial restrictions on the maximum\ndistance.","ret":"the closest ray trace hit result, or <code>null</code> if there\n    is no hit"},{"name":"rayTraceEntities","params":[{"name":"start","type":"io.papermc.paper.math.Position","desc":"the start position"},{"name":"direction","type":"Vector","desc":"the ray direction"},{"name":"maxDistance","type":"double","desc":"the maximum distance"},{"name":"raySize","type":"double","desc":"entity bounding boxes will be uniformly expanded (or\n    shrinked) by this value before doing collision checks"},{"name":"filter","type":"Predicate<? super Entity>","desc":"only entities that fulfill this predicate are considered,\n    or <code>null</code> to consider all entities"}],"desc":"Performs a ray trace that checks for entity collisions.\n<p>\nThis may not consider entities in currently unloaded chunks. Some\nimplementations may impose artificial restrictions on the maximum\ndistance.","ret":"the closest ray trace hit result, or <code>null</code> if there\n    is no hit"},{"name":"rayTraceBlocks","params":[{"name":"start","type":"Location","desc":"the start location"},{"name":"direction","type":"Vector","desc":"the ray direction"},{"name":"maxDistance","type":"double","desc":"the maximum distance"}],"desc":"Performs a ray trace that checks for block collisions using the blocks'\nprecise collision shapes.\n<p>\nThis takes collisions with passable blocks into account, but ignores\nfluids.\n<p>\nThis may cause loading of chunks! Some implementations may impose\nartificial restrictions on the maximum distance.","ret":"the ray trace hit result, or <code>null</code> if there is no hit"},{"name":"rayTraceBlocks","params":[{"name":"start","type":"Location","desc":"the start location"},{"name":"direction","type":"Vector","desc":"the ray direction"},{"name":"maxDistance","type":"double","desc":"the maximum distance"},{"name":"fluidCollisionMode","type":"FluidCollisionMode","desc":"the fluid collision mode"}],"desc":"Performs a ray trace that checks for block collisions using the blocks'\nprecise collision shapes.\n<p>\nThis takes collisions with passable blocks into account.\n<p>\nThis may cause loading of chunks! Some implementations may impose\nartificial restrictions on the maximum distance.","ret":"the ray trace hit result, or <code>null</code> if there is no hit"},{"name":"rayTraceBlocks","params":[{"name":"start","type":"Location","desc":"the start location"},{"name":"direction","type":"Vector","desc":"the ray direction"},{"name":"maxDistance","type":"double","desc":"the maximum distance"},{"name":"fluidCollisionMode","type":"FluidCollisionMode","desc":"the fluid collision mode"},{"name":"ignorePassableBlocks","type":"boolean","desc":"whether to ignore passable but collidable\n    blocks (ex. tall grass, signs, fluids, ..)"}],"desc":"Performs a ray trace that checks for block collisions using the blocks'\nprecise collision shapes.\n<p>\nIf collisions with passable blocks are ignored, fluid collisions are\nignored as well regardless of the fluid collision mode.\n<p>\nPortal blocks are only considered passable if the ray starts within\nthem. Apart from that collisions with portal blocks will be considered\neven if collisions with passable blocks are otherwise ignored.\n<p>\nThis may cause loading of chunks! Some implementations may impose\nartificial restrictions on the maximum distance.","ret":"the ray trace hit result, or <code>null</code> if there is no hit"},{"name":"rayTraceBlocks","params":[{"name":"start","type":"io.papermc.paper.math.Position","desc":"the start position"},{"name":"direction","type":"Vector","desc":"the ray direction"},{"name":"maxDistance","type":"double","desc":"the maximum distance"},{"name":"fluidCollisionMode","type":"FluidCollisionMode","desc":"the fluid collision mode"},{"name":"ignorePassableBlocks","type":"boolean","desc":"whether to ignore passable but collidable\n    blocks (ex. tall grass, signs, fluids, ..)"},{"name":"canCollide","type":"Predicate<? super Block>","desc":"predicate for blocks the ray can potentially collide\n    with, or <code>null</code> to consider all blocks"}],"desc":"Performs a ray trace that checks for block collisions using the blocks'\nprecise collision shapes.\n<p>\nIf collisions with passable blocks are ignored, fluid collisions are\nignored as well regardless of the fluid collision mode.\n<p>\nPortal blocks are only considered passable if the ray starts within\nthem. Apart from that collisions with portal blocks will be considered\neven if collisions with passable blocks are otherwise ignored.\n<p>\nThis may cause loading of chunks! Some implementations may impose\nartificial restrictions on the maximum distance.","ret":"the ray trace hit result, or <code>null</code> if there is no hit"},{"name":"rayTrace","params":[{"name":"start","type":"Location","desc":"the start location"},{"name":"direction","type":"Vector","desc":"the ray direction"},{"name":"maxDistance","type":"double","desc":"the maximum distance"},{"name":"fluidCollisionMode","type":"FluidCollisionMode","desc":"the fluid collision mode"},{"name":"ignorePassableBlocks","type":"boolean","desc":"whether to ignore passable but collidable\n    blocks (ex. tall grass, signs, fluids, ..)"},{"name":"raySize","type":"double","desc":"entity bounding boxes will be uniformly expanded (or\n    shrunk) by this value before doing collision checks"},{"name":"filter","type":"Predicate<? super Entity>","desc":"only entities that fulfill this predicate are considered,\n    or <code>null</code> to consider all entities"}],"desc":"Performs a ray trace that checks for both block and entity collisions.\n<p>\nBlock collisions use the blocks' precise collision shapes. The\n<code>raySize</code> parameter is only taken into account for entity\ncollision checks.\n<p>\nIf collisions with passable blocks are ignored, fluid collisions are\nignored as well regardless of the fluid collision mode.\n<p>\nPortal blocks are only considered passable if the ray starts within them.\nApart from that collisions with portal blocks will be considered even if\ncollisions with passable blocks are otherwise ignored.\n<p>\nThis may cause loading of chunks! Some implementations may impose\nartificial restrictions on the maximum distance.","ret":"the closest ray trace hit result with either a block or an\n    entity, or <code>null</code> if there is no hit"},{"name":"rayTrace","params":[{"name":"start","type":"io.papermc.paper.math.Position","desc":"the start position"},{"name":"direction","type":"Vector","desc":"the ray direction"},{"name":"maxDistance","type":"double","desc":"the maximum distance"},{"name":"fluidCollisionMode","type":"FluidCollisionMode","desc":"the fluid collision mode"},{"name":"ignorePassableBlocks","type":"boolean","desc":"whether to ignore passable but collidable\n    blocks (ex. tall grass, signs, fluids, ..)"},{"name":"raySize","type":"double","desc":"entity bounding boxes will be uniformly expanded (or\n    shrinked) by this value before doing collision checks"},{"name":"filter","type":"Predicate<? super Entity>","desc":"only entities that fulfill this predicate are considered,\n    or <code>null</code> to consider all entities"},{"name":"canCollide","type":"Predicate<? super Block>","desc":"predicate for blocks the ray can potentially collide\n    with, or <code>null</code> to consider all blocks"}],"desc":"Performs a ray trace that checks for both block and entity collisions.\n<p>\nBlock collisions use the blocks' precise collision shapes. The\n<code>raySize</code> parameter is only taken into account for entity\ncollision checks.\n<p>\nIf collisions with passable blocks are ignored, fluid collisions are\nignored as well regardless of the fluid collision mode.\n<p>\nPortal blocks are only considered passable if the ray starts within them.\nApart from that collisions with portal blocks will be considered even if\ncollisions with passable blocks are otherwise ignored.\n<p>\nThis may cause loading of chunks! Some implementations may impose\nartificial restrictions on the maximum distance.","ret":"the closest ray trace hit result with either a block or an\n    entity, or <code>null</code> if there is no hit"},{"name":"getSpawnLocation","params":[],"desc":"Gets the default spawn {@link Location} of this world","ret":"The spawn location of this world"},{"name":"setSpawnLocation","params":[{"name":"location","type":"Location","desc":"The {@link Location} to set the spawn for this world at."}],"desc":"Sets the spawn location of the world.\n<br>\nThe location provided must be equal to this world.","ret":"True if it was successfully set."},{"name":"setSpawnLocation","params":[{"name":"x","type":"int","desc":"X coordinate"},{"name":"y","type":"int","desc":"Y coordinate"},{"name":"z","type":"int","desc":"Z coordinate"},{"name":"angle","type":"float","desc":"the angle"}],"desc":"Sets the spawn location of the world","ret":"True if it was successfully set."},{"name":"setSpawnLocation","params":[{"name":"x","type":"int","desc":"X coordinate"},{"name":"y","type":"int","desc":"Y coordinate"},{"name":"z","type":"int","desc":"Z coordinate"}],"desc":"Sets the spawn location of the world","ret":"True if it was successfully set."},{"name":"getTime","params":[],"desc":"Gets the relative in-game time of this world.\n<p>\nThe relative time is analogous to hours * 1000","ret":"The current relative time"},{"name":"setTime","params":[{"name":"time","type":"long","desc":"The new relative time to set the in-game time to (in\n    hours*1000)"}],"desc":"Sets the relative in-game time on the server.\n<p>\nThe relative time is analogous to hours * 1000\n<p>\nNote that setting the relative time below the current relative time\nwill actually move the clock forward a day. If you require to rewind\ntime, please see {@link #setFullTime(long)}","ret":""},{"name":"getFullTime","params":[],"desc":"Gets the full in-game time on this world","ret":"The current absolute time"},{"name":"setFullTime","params":[{"name":"time","type":"long","desc":"The new absolute time to set this world to"}],"desc":"Sets the in-game time on the server\n<p>\nNote that this sets the full time of the world, which may cause adverse\neffects such as breaking redstone clocks and any scheduled events","ret":""},{"name":"isDayTime","params":[],"desc":"Check if it is currently daytime in this world","ret":"True if it is daytime"},{"name":"getGameTime","params":[],"desc":"Gets the full in-game time on this world since the world generation","ret":"The current absolute time since the world generation"},{"name":"hasStorm","params":[],"desc":"Returns whether the world has an ongoing storm.","ret":"Whether there is an ongoing storm"},{"name":"setStorm","params":[{"name":"hasStorm","type":"boolean","desc":"Whether there is rain and snow"}],"desc":"Set whether there is a storm. A duration will be set for the new\ncurrent conditions.\n\nThis will implicitly call {@link #setClearWeatherDuration(int)} with 0\nticks to reset the world's clear weather.","ret":""},{"name":"getWeatherDuration","params":[],"desc":"Get the remaining time in ticks of the current conditions.","ret":"Time in ticks"},{"name":"setWeatherDuration","params":[{"name":"duration","type":"int","desc":"Time in ticks"}],"desc":"Set the remaining time in ticks of the current conditions.","ret":""},{"name":"isThundering","params":[],"desc":"Returns whether there is thunder.","ret":"Whether there is thunder"},{"name":"setThundering","params":[{"name":"thundering","type":"boolean","desc":"Whether it is thundering"}],"desc":"Set whether it is thundering.\n\nThis will implicitly call {@link #setClearWeatherDuration(int)} with 0\nticks to reset the world's clear weather.","ret":""},{"name":"getThunderDuration","params":[],"desc":"Get the thundering duration.","ret":"Duration in ticks"},{"name":"setThunderDuration","params":[{"name":"duration","type":"int","desc":"Duration in ticks"}],"desc":"Set the thundering duration.","ret":""},{"name":"isClearWeather","params":[],"desc":"Returns whether the world has clear weather.\n\nThis will be true such that {@link #isThundering()} and\n{@link #hasStorm()} are both false.","ret":"true if clear weather"},{"name":"setClearWeatherDuration","params":[{"name":"duration","type":"int","desc":"duration in ticks"}],"desc":"Set the clear weather duration.\n\nThe clear weather ticks determine whether or not the world will be\nallowed to rain or storm. If clear weather ticks are &gt; 0, the world will\nnot naturally do either until the duration has elapsed.\n\nThis method is equivalent to calling {@code /weather clear} with a set\namount of ticks.","ret":""},{"name":"getClearWeatherDuration","params":[],"desc":"Get the clear weather duration.","ret":"duration in ticks"},{"name":"createExplosion","params":[{"name":"x","type":"double","desc":"X coordinate"},{"name":"y","type":"double","desc":"Y coordinate"},{"name":"z","type":"double","desc":"Z coordinate"},{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"}],"desc":"Creates explosion at given coordinates with given power","ret":"false if explosion was canceled, otherwise true"},{"name":"createExplosion","params":[{"name":"x","type":"double","desc":"X coordinate"},{"name":"y","type":"double","desc":"Y coordinate"},{"name":"z","type":"double","desc":"Z coordinate"},{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"},{"name":"setFire","type":"boolean","desc":"Whether or not to set blocks on fire"}],"desc":"Creates explosion at given coordinates with given power and optionally\nsetting blocks on fire.","ret":"false if explosion was canceled, otherwise true"},{"name":"createExplosion","params":[{"name":"x","type":"double","desc":"X coordinate"},{"name":"y","type":"double","desc":"Y coordinate"},{"name":"z","type":"double","desc":"Z coordinate"},{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"},{"name":"setFire","type":"boolean","desc":"Whether or not to set blocks on fire"},{"name":"breakBlocks","type":"boolean","desc":"Whether or not to have blocks be destroyed"}],"desc":"Creates explosion at given coordinates with given power and optionally\nsetting blocks on fire or breaking blocks.","ret":"false if explosion was canceled, otherwise true"},{"name":"createExplosion","params":[{"name":"x","type":"double","desc":"X coordinate"},{"name":"y","type":"double","desc":"Y coordinate"},{"name":"z","type":"double","desc":"Z coordinate"},{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"},{"name":"setFire","type":"boolean","desc":"Whether or not to set blocks on fire"},{"name":"breakBlocks","type":"boolean","desc":"Whether or not to have blocks be destroyed"},{"name":"source","type":"Entity","desc":"the source entity, used for tracking damage"}],"desc":"Creates explosion at given coordinates with given power and optionally\nsetting blocks on fire or breaking blocks.","ret":"false if explosion was canceled, otherwise true"},{"name":"createExplosion","params":[{"name":"loc","type":"Location","desc":"Location to blow up"},{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"}],"desc":"Creates explosion at given coordinates with given power","ret":"false if explosion was canceled, otherwise true"},{"name":"createExplosion","params":[{"name":"loc","type":"Location","desc":"Location to blow up"},{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"},{"name":"setFire","type":"boolean","desc":"Whether or not to set blocks on fire"}],"desc":"Creates explosion at given coordinates with given power and optionally\nsetting blocks on fire.","ret":"false if explosion was canceled, otherwise true"},{"name":"createExplosion","params":[{"name":"source","type":"Entity","desc":"The source entity of the explosion"},{"name":"loc","type":"Location","desc":"Location to blow up"},{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"},{"name":"setFire","type":"boolean","desc":"Whether or not to set blocks on fire"},{"name":"breakBlocks","type":"boolean","desc":"Whether or not to have blocks be destroyed"}],"desc":"Creates explosion at given location with given power and optionally\nsetting blocks on fire, with the specified entity as the source.","ret":"false if explosion was canceled, otherwise true"},{"name":"createExplosion","params":[{"name":"source","type":"Entity","desc":"The source entity of the explosion"},{"name":"loc","type":"Location","desc":"Location to blow up"},{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"},{"name":"setFire","type":"boolean","desc":"Whether or not to set blocks on fire"}],"desc":"Creates explosion at given location with given power and optionally\nsetting blocks on fire, with the specified entity as the source.\n\nWill destroy other blocks","ret":"false if explosion was canceled, otherwise true"},{"name":"createExplosion","params":[{"name":"source","type":"Entity","desc":"The source entity of the explosion"},{"name":"loc","type":"Location","desc":"Location to blow up"},{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"}],"desc":"Creates explosion at given location with given power, with the specified entity as the source.\nWill set blocks on fire and destroy blocks.","ret":"false if explosion was canceled, otherwise true"},{"name":"createExplosion","params":[{"name":"source","type":"Entity","desc":"The source entity of the explosion"},{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"},{"name":"setFire","type":"boolean","desc":"Whether or not to set blocks on fire"},{"name":"breakBlocks","type":"boolean","desc":"Whether or not to have blocks be destroyed"}],"desc":"Creates explosion at given entities location with given power and optionally\nsetting blocks on fire, with the specified entity as the source.","ret":"false if explosion was canceled, otherwise true"},{"name":"createExplosion","params":[{"name":"source","type":"Entity","desc":"The source entity of the explosion"},{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"},{"name":"setFire","type":"boolean","desc":"Whether or not to set blocks on fire"}],"desc":"Creates explosion at given entities location with given power and optionally\nsetting blocks on fire, with the specified entity as the source.\n\nWill destroy blocks.","ret":"false if explosion was canceled, otherwise true"},{"name":"createExplosion","params":[{"name":"source","type":"Entity","desc":"The source entity of the explosion"},{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"}],"desc":"Creates explosion at given entities location with given power and optionally\nsetting blocks on fire, with the specified entity as the source.","ret":"false if explosion was canceled, otherwise true"},{"name":"createExplosion","params":[{"name":"loc","type":"Location","desc":"Location to blow up"},{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"},{"name":"setFire","type":"boolean","desc":"Whether or not to set blocks on fire"},{"name":"breakBlocks","type":"boolean","desc":"Whether or not to have blocks be destroyed"}],"desc":"Creates explosion at given coordinates with given power and optionally\nsetting blocks on fire or breaking blocks.","ret":"false if explosion was canceled, otherwise true"},{"name":"createExplosion","params":[{"name":"loc","type":"Location","desc":"Location to blow up"},{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"},{"name":"setFire","type":"boolean","desc":"Whether or not to set blocks on fire"},{"name":"breakBlocks","type":"boolean","desc":"Whether or not to have blocks be destroyed"},{"name":"source","type":"Entity","desc":"the source entity, used for tracking damage"}],"desc":"Creates explosion at given coordinates with given power and optionally\nsetting blocks on fire or breaking blocks.","ret":"false if explosion was canceled, otherwise true"},{"name":"getPVP","params":[],"desc":"Gets the current PVP setting for this world.","ret":"True if PVP is enabled"},{"name":"setPVP","params":[{"name":"pvp","type":"boolean","desc":"True/False whether PVP should be Enabled."}],"desc":"Sets the PVP setting for this world.","ret":""},{"name":"getGenerator","params":[],"desc":"Gets the chunk generator for this world","ret":"ChunkGenerator associated with this world"},{"name":"getBiomeProvider","params":[],"desc":"Gets the biome provider for this world","ret":"BiomeProvider associated with this world"},{"name":"save","params":[],"desc":"Saves world to disk","ret":""},{"name":"getPopulators","params":[],"desc":"Gets a list of all applied {@link BlockPopulator}s for this World","ret":"List containing any or none BlockPopulators"},{"name":"spawn","params":[{"name":"location","type":"Location","desc":"the location at which the entity will be spawned."},{"name":"clazz","type":"Class<T>","desc":"the class of the {@link LivingEntity} that is to be spawned."},{"name":"spawnReason","type":"CreatureSpawnEvent.SpawnReason","desc":"the reason provided during the {@link CreatureSpawnEvent} call."},{"name":"randomizeData","type":"boolean","desc":"whether or not the entity's data should be randomised\n                     before spawning. By default entities are randomised\n                     before spawning in regards to their equipment, age,\n                     attributes, etc.\n                     An example of this randomization would be the color of\n                     a sheep, random enchantments on the equipment of mobs\n                     or even a zombie becoming a chicken jockey.\n                     If set to false, the entity will not be randomised\n                     before spawning, meaning all their data will remain\n                     in their default state and not further modifications\n                     to the entity will be made.\n                     Notably only entities that extend the\n                     {@link org.bukkit.entity.Mob} interface provide\n                     randomisation logic for their spawn.\n                     This parameter is hence useless for any other type\n                     of entity."},{"name":"function","type":"Consumer<? super T>","desc":"the function to be run before the entity is spawned."}],"desc":"Creates a new entity at the given {@link Location} with the supplied\nfunction run before the entity is added to the world.\n<br>\nNote that when the function is run, the entity will not be actually in\nthe world. Any operation involving such as teleporting the entity is undefined\nuntil after this function returns.\nThe passed function however is run after the potential entity's spawn\nrandomization and hence already allows access to the values of the mob,\nwhether or not those were randomized, such as attributes or the entity\nequipment.","ret":"the spawned entity instance."},{"name":"spawnFallingBlock","params":[{"name":"location","type":"Location","desc":"The {@link Location} to spawn the FallingBlock"},{"name":"data","type":"MaterialData","desc":"The block data"}],"desc":"Spawn a {@link FallingBlock} entity at the given {@link Location} of\nthe specified {@link MaterialData}. The MaterialData dictates what is falling.\nWhen the FallingBlock hits the ground, it will place that block.\n<p>\nThe Material must be a block type, check with {@link Material#isBlock()\ndata.getItemType().isBlock()}. The Material may not be air.","ret":"The spawned {@link FallingBlock} instance"},{"name":"spawnFallingBlock","params":[{"name":"location","type":"Location","desc":"The {@link Location} to spawn the FallingBlock"},{"name":"data","type":"BlockData","desc":"The {@link BlockData} of the FallingBlock to spawn"}],"desc":"Spawn a {@link FallingBlock} entity at the given {@link Location} of\nthe specified {@link BlockData}. The BlockData dictates what is falling.\nWhen the FallingBlock hits the ground, it will place that block.","ret":"The spawned {@link FallingBlock} instance"},{"name":"spawnFallingBlock","params":[{"name":"location","type":"Location","desc":"The {@link Location} to spawn the FallingBlock"},{"name":"material","type":"Material","desc":"The block {@link Material} type"},{"name":"data","type":"byte","desc":"The block data"}],"desc":"Spawn a {@link FallingBlock} entity at the given {@link Location} of the\nspecified {@link Material}. The material dictates what is falling.\nWhen the FallingBlock hits the ground, it will place that block.\n<p>\nThe Material must be a block type, check with {@link Material#isBlock()\nmaterial.isBlock()}. The Material may not be air.","ret":"The spawned {@link FallingBlock} instance"},{"name":"playEffect","params":[{"name":"location","type":"Location","desc":"the {@link Location} around which players must be to\n    hear the sound"},{"name":"effect","type":"Effect","desc":"the {@link Effect}"},{"name":"data","type":"int","desc":"a data bit needed for some effects"}],"desc":"Plays an effect to all players within a default radius around a given\nlocation.","ret":""},{"name":"playEffect","params":[{"name":"location","type":"Location","desc":"the {@link Location} around which players must be to\n    hear the effect"},{"name":"effect","type":"Effect","desc":"the {@link Effect}"},{"name":"data","type":"int","desc":"a data bit needed for some effects"},{"name":"radius","type":"int","desc":"the radius around the location"}],"desc":"Plays an effect to all players within a given radius around a location.","ret":""},{"name":"playEffect","params":[{"name":"location","type":"Location","desc":"the {@link Location} around which players must be to\n    hear the sound"},{"name":"effect","type":"Effect","desc":"the {@link Effect}"},{"name":"data","type":"T","desc":"a data bit needed for some effects"}],"desc":"Plays an effect to all players within a default radius around a given\nlocation.","ret":""},{"name":"playEffect","params":[{"name":"location","type":"Location","desc":"the {@link Location} around which players must be to\n    hear the effect"},{"name":"effect","type":"Effect","desc":"the {@link Effect}"},{"name":"data","type":"T","desc":"a data bit needed for some effects"},{"name":"radius","type":"int","desc":"the radius around the location"}],"desc":"Plays an effect to all players within a given radius around a location.","ret":""},{"name":"getEmptyChunkSnapshot","params":[{"name":"x","type":"int","desc":"- chunk x coordinate"},{"name":"z","type":"int","desc":"- chunk z coordinate"},{"name":"includeBiome","type":"boolean","desc":"- if true, snapshot includes per-coordinate biome\n    type"},{"name":"includeBiomeTemp","type":"boolean","desc":"- if true, snapshot includes per-coordinate\n    raw biome temperature"}],"desc":"Get empty chunk snapshot (equivalent to all air blocks), optionally\nincluding valid biome data. Used for representing an ungenerated chunk,\nor for fetching only biome data without loading a chunk.","ret":"The empty snapshot."},{"name":"setSpawnFlags","params":[{"name":"allowMonsters","type":"boolean","desc":"- if true, monsters are allowed to spawn in this\n    world."},{"name":"allowAnimals","type":"boolean","desc":"- if true, animals are allowed to spawn in this\n    world."}],"desc":"Sets the spawn flags for this.","ret":""},{"name":"getAllowAnimals","params":[],"desc":"Gets whether animals can spawn in this world.","ret":"whether animals can spawn in this world."},{"name":"getAllowMonsters","params":[],"desc":"Gets whether monsters can spawn in this world.","ret":"whether monsters can spawn in this world."},{"name":"getBiome","params":[{"name":"x","type":"int","desc":"X coordinate of the block"},{"name":"z","type":"int","desc":"Z coordinate of the block"}],"desc":"Gets the biome for the given block coordinates.","ret":"Biome of the requested block"},{"name":"setBiome","params":[{"name":"x","type":"int","desc":"X coordinate of the block"},{"name":"z","type":"int","desc":"Z coordinate of the block"},{"name":"bio","type":"Biome","desc":"new Biome type for this block"}],"desc":"Sets the biome for the given block coordinates","ret":""},{"name":"getTemperature","params":[{"name":"x","type":"int","desc":"X coordinate of the block"},{"name":"z","type":"int","desc":"Z coordinate of the block"}],"desc":"Gets the temperature for the given block coordinates.\n<p>\nIt is safe to run this method when the block does not exist, it will\nnot create the block.\n<p>\nThis method will return the raw temperature without adjusting for block\nheight effects.","ret":"Temperature of the requested block"},{"name":"getTemperature","params":[{"name":"x","type":"int","desc":"X coordinate of the block"},{"name":"y","type":"int","desc":"Y coordinate of the block"},{"name":"z","type":"int","desc":"Z coordinate of the block"}],"desc":"Gets the temperature for the given block coordinates.\n<p>\nIt is safe to run this method when the block does not exist, it will\nnot create the block.\n<p>\nThis method will return the raw temperature without adjusting for block\nheight effects.","ret":"Temperature of the requested block"},{"name":"getHumidity","params":[{"name":"x","type":"int","desc":"X coordinate of the block"},{"name":"z","type":"int","desc":"Z coordinate of the block"}],"desc":"Gets the humidity for the given block coordinates.\n<p>\nIt is safe to run this method when the block does not exist, it will\nnot create the block.","ret":"Humidity of the requested block"},{"name":"getHumidity","params":[{"name":"x","type":"int","desc":"X coordinate of the block"},{"name":"y","type":"int","desc":"Y coordinate of the block"},{"name":"z","type":"int","desc":"Z coordinate of the block"}],"desc":"Gets the humidity for the given block coordinates.\n<p>\nIt is safe to run this method when the block does not exist, it will\nnot create the block.","ret":"Humidity of the requested block"},{"name":"getLogicalHeight","params":[],"desc":"Gets the maximum height to which chorus fruits and nether portals can\nbring players within this dimension.\n\nThis excludes portals that were already built above the limit as they\nstill connect normally. May not be greater than {@link #getMaxHeight()}.","ret":"maximum logical height for chorus fruits and nether portals"},{"name":"isNatural","params":[],"desc":"Gets if this world is natural.\n\nWhen false, compasses spin randomly, and using a bed to set the respawn\npoint or sleep, is disabled. When true, nether portals can spawn\nzombified piglins.","ret":"true if world is natural"},{"name":"isBedWorks","params":[],"desc":"Gets if beds work in this world.\n\nA non-working bed will blow up when trying to sleep. {@link #isNatural()}\ndefines if a bed can be used to set spawn point.","ret":"true if beds work in this world"},{"name":"hasSkyLight","params":[],"desc":"Gets if this world has skylight access.","ret":"true if this world has skylight access"},{"name":"hasCeiling","params":[],"desc":"Gets if this world has a ceiling.","ret":"true if this world has a bedrock ceiling"},{"name":"isPiglinSafe","params":[],"desc":"Gets if this world allow to piglins to survive without shaking and\ntransforming to zombified piglins.","ret":"true if piglins will not transform to zombified piglins"},{"name":"isRespawnAnchorWorks","params":[],"desc":"Gets if this world allows players to charge and use respawn anchors.","ret":"true if players can charge and use respawn anchors"},{"name":"hasRaids","params":[],"desc":"Gets if players with the bad omen effect in this world will trigger a\nraid.","ret":"true if raids will be triggered"},{"name":"isUltraWarm","params":[],"desc":"Gets if various water/lava mechanics will be triggered in this world, eg:\n<br>\n<ul>\n<li>Water is evaporated</li>\n<li>Sponges dry</li>\n<li>Lava spreads faster and further</li>\n</ul>","ret":"true if this world has the above mechanics"},{"name":"getSeaLevel","params":[],"desc":"Gets the sea level for this world.\n<p>\nThis is often half of {@link #getMaxHeight()}","ret":"Sea level"},{"name":"getKeepSpawnInMemory","params":[],"desc":"Gets whether the world's spawn area should be kept loaded into memory\nor not.","ret":"true if the world's spawn area will be kept loaded into memory."},{"name":"setKeepSpawnInMemory","params":[{"name":"keepLoaded","type":"boolean","desc":"if true then the world's spawn area will be kept\n    loaded into memory."}],"desc":"Sets whether the world's spawn area should be kept loaded into memory\nor not.","ret":""},{"name":"isAutoSave","params":[],"desc":"Gets whether or not the world will automatically save","ret":"true if the world will automatically save, otherwise false"},{"name":"setAutoSave","params":[{"name":"value","type":"boolean","desc":"true if the world should automatically save, otherwise\n    false"}],"desc":"Sets whether or not the world will automatically save","ret":""},{"name":"setDifficulty","params":[{"name":"difficulty","type":"Difficulty","desc":"the new difficulty you want to set the world to"}],"desc":"Sets the Difficulty of the world.","ret":""},{"name":"getDifficulty","params":[],"desc":"Gets the Difficulty of the world.","ret":"The difficulty of the world."},{"name":"getViewDistance","params":[],"desc":"Returns the view distance used for this world.","ret":"the view distance used for this world"},{"name":"getSimulationDistance","params":[],"desc":"Returns the simulation distance used for this world.","ret":"the simulation distance used for this world"},{"name":"getWorldFolder","params":[],"desc":"Gets the folder of this world on disk.","ret":"The folder of this world."},{"name":"getWorldType","params":[],"desc":"Gets the type of this world.","ret":"Type of this world."},{"name":"canGenerateStructures","params":[],"desc":"Gets whether or not structures are being generated.","ret":"True if structures are being generated."},{"name":"isHardcore","params":[],"desc":"Gets whether the world is hardcore or not.\n\nIn a hardcore world the difficulty is locked to hard.","ret":"hardcore status"},{"name":"setHardcore","params":[{"name":"hardcore","type":"boolean","desc":"Whether the world is hardcore"}],"desc":"Sets whether the world is hardcore or not.\n\nIn a hardcore world the difficulty is locked to hard.","ret":""},{"name":"getTicksPerAnimalSpawns","params":[],"desc":"Gets the world's ticks per animal spawns value\n<p>\nThis value determines how many ticks there are between attempts to\nspawn animals.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn animals in\n    this world every tick.\n<li>A value of 400 will mean the server will attempt to spawn animals\n    in this world every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b>\nIf set to 0, animal spawning will be disabled for this world. We\nrecommend using {@link #setSpawnFlags(boolean, boolean)} to control\nthis instead.\n<p>\nMinecraft default: 400.","ret":"The world's ticks per animal spawns value"},{"name":"setTicksPerAnimalSpawns","params":[{"name":"ticksPerAnimalSpawns","type":"int","desc":"the ticks per animal spawns value you want\n    to set the world to"}],"desc":"Sets the world's ticks per animal spawns value\n<p>\nThis value determines how many ticks there are between attempts to\nspawn animals.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn animals in\n    this world every tick.\n<li>A value of 400 will mean the server will attempt to spawn animals\n    in this world every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b>\nIf set to 0, animal spawning will be disabled for this world. We\nrecommend using {@link #setSpawnFlags(boolean, boolean)} to control\nthis instead.\n<p>\nMinecraft default: 400.","ret":""},{"name":"getTicksPerMonsterSpawns","params":[],"desc":"Gets the world's ticks per monster spawns value\n<p>\nThis value determines how many ticks there are between attempts to\nspawn monsters.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn monsters in\n    this world every tick.\n<li>A value of 400 will mean the server will attempt to spawn monsters\n    in this world every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b>\nIf set to 0, monsters spawning will be disabled for this world. We\nrecommend using {@link #setSpawnFlags(boolean, boolean)} to control\nthis instead.\n<p>\nMinecraft default: 1.","ret":"The world's ticks per monster spawns value"},{"name":"setTicksPerMonsterSpawns","params":[{"name":"ticksPerMonsterSpawns","type":"int","desc":"the ticks per monster spawns value you\n    want to set the world to"}],"desc":"Sets the world's ticks per monster spawns value\n<p>\nThis value determines how many ticks there are between attempts to\nspawn monsters.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn monsters in\n    this world on every tick.\n<li>A value of 400 will mean the server will attempt to spawn monsters\n    in this world every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b>\nIf set to 0, monsters spawning will be disabled for this world. We\nrecommend using {@link #setSpawnFlags(boolean, boolean)} to control\nthis instead.\n<p>\nMinecraft default: 1.","ret":""},{"name":"getTicksPerWaterSpawns","params":[],"desc":"Gets the world's ticks per water mob spawns value\n<p>\nThis value determines how many ticks there are between attempts to\nspawn water mobs.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn water mobs in\n    this world every tick.\n<li>A value of 400 will mean the server will attempt to spawn water mobs\n    in this world every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b>\nIf set to 0, water mobs spawning will be disabled for this world.\n<p>\nMinecraft default: 1.","ret":"The world's ticks per water mob spawns value"},{"name":"setTicksPerWaterSpawns","params":[{"name":"ticksPerWaterSpawns","type":"int","desc":"the ticks per water mob spawns value you\n    want to set the world to"}],"desc":"Sets the world's ticks per water mob spawns value\n<p>\nThis value determines how many ticks there are between attempts to\nspawn water mobs.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn water mobs in\n    this world on every tick.\n<li>A value of 400 will mean the server will attempt to spawn water mobs\n    in this world every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b>\nIf set to 0, water mobs spawning will be disabled for this world.\n<p>\nMinecraft default: 1.","ret":""},{"name":"getTicksPerWaterAmbientSpawns","params":[],"desc":"Gets the default ticks per water ambient mob spawns value.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn water ambient mobs\n    every tick.\n<li>A value of 400 will mean the server will attempt to spawn water ambient mobs\n    every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b> If set to 0, ambient mobs spawning will be disabled.\n<p>\nMinecraft default: 1.","ret":"the default ticks per water ambient mobs spawn value"},{"name":"setTicksPerWaterAmbientSpawns","params":[{"name":"ticksPerAmbientSpawns","type":"int","desc":"the ticks per water ambient mob spawns value you\n    want to set the world to"}],"desc":"Sets the world's ticks per water ambient mob spawns value\n<p>\nThis value determines how many ticks there are between attempts to\nspawn water ambient mobs.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn water ambient mobs in\n    this world on every tick.\n<li>A value of 400 will mean the server will attempt to spawn water ambient mobs\n    in this world every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b>\nIf set to 0, water ambient mobs spawning will be disabled for this world.\n<p>\nMinecraft default: 1.","ret":""},{"name":"getTicksPerWaterUndergroundCreatureSpawns","params":[],"desc":"Gets the default ticks per water underground creature spawns value.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn water underground creature\n    every tick.\n<li>A value of 400 will mean the server will attempt to spawn water underground creature\n    every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b> If set to 0, water underground creature spawning will be disabled.\n<p>\nMinecraft default: 1.","ret":"the default ticks per water underground creature spawn value"},{"name":"setTicksPerWaterUndergroundCreatureSpawns","params":[{"name":"ticksPerWaterUndergroundCreatureSpawns","type":"int","desc":"the ticks per water underground creature spawns value you\n    want to set the world to"}],"desc":"Sets the world's ticks per water underground creature spawns value\n<p>\nThis value determines how many ticks there are between attempts to\nspawn water underground creature.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn water underground creature in\n    this world on every tick.\n<li>A value of 400 will mean the server will attempt to spawn water underground creature\n    in this world every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b>\nIf set to 0, water underground creature spawning will be disabled for this world.\n<p>\nMinecraft default: 1.","ret":""},{"name":"getTicksPerAmbientSpawns","params":[],"desc":"Gets the world's ticks per ambient mob spawns value\n<p>\nThis value determines how many ticks there are between attempts to\nspawn ambient mobs.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn ambient mobs in\n    this world every tick.\n<li>A value of 400 will mean the server will attempt to spawn ambient mobs\n    in this world every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b>\nIf set to 0, ambient mobs spawning will be disabled for this world.\n<p>\nMinecraft default: 1.","ret":"the default ticks per ambient mobs spawn value"},{"name":"setTicksPerAmbientSpawns","params":[{"name":"ticksPerAmbientSpawns","type":"int","desc":"the ticks per ambient mob spawns value you\n    want to set the world to"}],"desc":"Sets the world's ticks per ambient mob spawns value\n<p>\nThis value determines how many ticks there are between attempts to\nspawn ambient mobs.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn ambient mobs in\n    this world on every tick.\n<li>A value of 400 will mean the server will attempt to spawn ambient mobs\n    in this world every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b>\nIf set to 0, ambient mobs spawning will be disabled for this world.\n<p>\nMinecraft default: 1.","ret":""},{"name":"getTicksPerSpawns","params":[{"name":"spawnCategory","type":"SpawnCategory","desc":"the category spawn"}],"desc":"Gets the world's ticks per {@link SpawnCategory} mob spawns value\n<p>\nThis value determines how many ticks there are between attempts to\nspawn {@link SpawnCategory} mobs.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn {@link SpawnCategory} mobs in\n    this world every tick.\n<li>A value of 400 will mean the server will attempt to spawn {@link SpawnCategory} mobs\n    in this world every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b>\nIf set to 0, {@link SpawnCategory} mobs spawning will be disabled for this world.\n<p>\nMinecraft default: 1.","ret":"The world's ticks per {@link SpawnCategory} mob spawns value"},{"name":"setTicksPerSpawns","params":[{"name":"spawnCategory","type":"SpawnCategory","desc":"the category spawn"},{"name":"ticksPerCategorySpawn","type":"int","desc":"the ticks per {@link SpawnCategory} mob spawns value you\n    want to set the world to"}],"desc":"Sets the world's ticks per {@link SpawnCategory} mob spawns value\n<p>\nThis value determines how many ticks there are between attempts to\nspawn {@link SpawnCategory} mobs.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn {@link SpawnCategory} mobs in\n    this world on every tick.\n<li>A value of 400 will mean the server will attempt to spawn {@link SpawnCategory} mobs\n    in this world every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b>\nIf set to 0, {@link SpawnCategory} mobs spawning will be disabled for this world.\n<p>\nMinecraft default: 1.","ret":""},{"name":"getMonsterSpawnLimit","params":[],"desc":"Gets limit for number of monsters that can spawn in a chunk in this\nworld","ret":"The monster spawn limit"},{"name":"setMonsterSpawnLimit","params":[{"name":"limit","type":"int","desc":"the new mob limit"}],"desc":"Sets the limit for number of monsters that can spawn in a chunk in this\nworld\n<p>\n<b>Note:</b> If set to a negative number the world will use the\nserver-wide spawn limit instead.","ret":""},{"name":"getAnimalSpawnLimit","params":[],"desc":"Gets the limit for number of animals that can spawn in a chunk in this\nworld","ret":"The animal spawn limit"},{"name":"setAnimalSpawnLimit","params":[{"name":"limit","type":"int","desc":"the new mob limit"}],"desc":"Sets the limit for number of animals that can spawn in a chunk in this\nworld\n<p>\n<b>Note:</b> If set to a negative number the world will use the\nserver-wide spawn limit instead.","ret":""},{"name":"getWaterAnimalSpawnLimit","params":[],"desc":"Gets the limit for number of water animals that can spawn in a chunk in\nthis world","ret":"The water animal spawn limit"},{"name":"setWaterAnimalSpawnLimit","params":[{"name":"limit","type":"int","desc":"the new mob limit"}],"desc":"Sets the limit for number of water animals that can spawn in a chunk in\nthis world\n<p>\n<b>Note:</b> If set to a negative number the world will use the\nserver-wide spawn limit instead.","ret":""},{"name":"getWaterUndergroundCreatureSpawnLimit","params":[],"desc":"Gets the limit for number of water underground creature that can spawn in a chunk in\nthis world","ret":"The water underground creature spawn limit"},{"name":"setWaterUndergroundCreatureSpawnLimit","params":[{"name":"limit","type":"int","desc":"the new mob limit"}],"desc":"Sets the limit for number of water underground creature that can spawn in a chunk in\nthis world\n<p>\n<b>Note:</b> If set to a negative number the world will use the\nserver-wide spawn limit instead.","ret":""},{"name":"getWaterAmbientSpawnLimit","params":[],"desc":"Gets user-specified limit for number of water ambient mobs that can spawn\nin a chunk.","ret":"the water ambient spawn limit"},{"name":"setWaterAmbientSpawnLimit","params":[{"name":"limit","type":"int","desc":"the new mob limit"}],"desc":"Sets the limit for number of water ambient mobs that can spawn in a chunk\nin this world\n<p>\n<b>Note:</b> If set to a negative number the world will use the\nserver-wide spawn limit instead.","ret":""},{"name":"getAmbientSpawnLimit","params":[],"desc":"Gets the limit for number of ambient mobs that can spawn in a chunk in\nthis world","ret":"The ambient spawn limit"},{"name":"setAmbientSpawnLimit","params":[{"name":"limit","type":"int","desc":"the new mob limit"}],"desc":"Sets the limit for number of ambient mobs that can spawn in a chunk in\nthis world\n<p>\n<b>Note:</b> If set to a negative number the world will use the\nserver-wide spawn limit instead.","ret":""},{"name":"getSpawnLimit","params":[{"name":"spawnCategory","type":"SpawnCategory","desc":"the entity category"}],"desc":"Gets the limit for number of {@link SpawnCategory} entities that can spawn in a chunk in\nthis world","ret":"The ambient spawn limit"},{"name":"setSpawnLimit","params":[{"name":"spawnCategory","type":"SpawnCategory","desc":"the entity category"},{"name":"limit","type":"int","desc":"the new mob limit"}],"desc":"Sets the limit for number of {@link SpawnCategory} entities that can spawn in a chunk in\nthis world\n<p>\n<b>Note:</b> If set to a negative number the world will use the\nserver-wide spawn limit instead.","ret":""},{"name":"playNote","params":[{"name":"loc","type":"Location","desc":"The location to play the note"},{"name":"instrument","type":"Instrument","desc":"The instrument"},{"name":"note","type":"Note","desc":"The note"}],"desc":"Play a note at the provided Location in the World. <br>\nThis <i>will</i> work with cake.\n<p>\nThis method will fail silently when called with {@link Instrument#CUSTOM_HEAD}.","ret":""},{"name":"playSound","params":[{"name":"location","type":"Location","desc":"The location to play the sound"},{"name":"sound","type":"Sound","desc":"The sound to play"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"}],"desc":"Play a Sound at the provided Location in the World.\n<p>\nThis function will fail silently if Location or Sound are null.","ret":""},{"name":"playSound","params":[{"name":"location","type":"Location","desc":"The location to play the sound"},{"name":"sound","type":"String","desc":"The internal sound name to play"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"}],"desc":"Play a Sound at the provided Location in the World.\n<p>\nThis function will fail silently if Location or Sound are null. No\nsound will be heard by the players if their clients do not have the\nrespective sound for the value passed.","ret":""},{"name":"playSound","params":[{"name":"location","type":"Location","desc":"The location to play the sound"},{"name":"sound","type":"Sound","desc":"The sound to play"},{"name":"category","type":"SoundCategory","desc":"the category of the sound"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"}],"desc":"Play a Sound at the provided Location in the World.\n<p>\nThis function will fail silently if Location or Sound are null.","ret":""},{"name":"playSound","params":[{"name":"location","type":"Location","desc":"The location to play the sound"},{"name":"sound","type":"String","desc":"The internal sound name to play"},{"name":"category","type":"SoundCategory","desc":"The category of the sound"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"}],"desc":"Play a Sound at the provided Location in the World.\n<p>\nThis function will fail silently if Location or Sound are null. No sound\nwill be heard by the players if their clients do not have the respective\nsound for the value passed.","ret":""},{"name":"playSound","params":[{"name":"location","type":"Location","desc":"The location to play the sound"},{"name":"sound","type":"Sound","desc":"The sound to play"},{"name":"category","type":"SoundCategory","desc":"the category of the sound"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"},{"name":"seed","type":"long","desc":"The seed for the sound"}],"desc":"Play a Sound at the provided Location in the World. For sounds with multiple\nvariations passing the same seed will always play the same variation.\n<p>\nThis function will fail silently if Location or Sound are null.","ret":""},{"name":"playSound","params":[{"name":"location","type":"Location","desc":"The location to play the sound"},{"name":"sound","type":"String","desc":"The internal sound name to play"},{"name":"category","type":"SoundCategory","desc":"the category of the sound"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"},{"name":"seed","type":"long","desc":"The seed for the sound"}],"desc":"Play a Sound at the provided Location in the World. For sounds with multiple\nvariations passing the same seed will always play the same variation.\n<p>\nThis function will fail silently if Location or Sound are null. No sound will\nbe heard by the players if their clients do not have the respective sound for\nthe value passed.","ret":""},{"name":"playSound","params":[{"name":"entity","type":"Entity","desc":"The entity to play the sound"},{"name":"sound","type":"Sound","desc":"The sound to play"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"}],"desc":"Play a Sound at the location of the provided entity in the World.\n<p>\nThis function will fail silently if Entity or Sound are null.","ret":""},{"name":"playSound","params":[{"name":"entity","type":"Entity","desc":"The entity to play the sound"},{"name":"sound","type":"String","desc":"The sound to play"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"}],"desc":"Play a Sound at the location of the provided entity in the World.\n<p>\nThis function will fail silently if Entity or Sound are null.","ret":""},{"name":"playSound","params":[{"name":"entity","type":"Entity","desc":"The entity to play the sound"},{"name":"sound","type":"Sound","desc":"The sound to play"},{"name":"category","type":"SoundCategory","desc":"The category of the sound"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"}],"desc":"Play a Sound at the location of the provided entity in the World.\n<p>\nThis function will fail silently if Entity or Sound are null.","ret":""},{"name":"playSound","params":[{"name":"entity","type":"Entity","desc":"The entity to play the sound"},{"name":"sound","type":"String","desc":"The sound to play"},{"name":"category","type":"SoundCategory","desc":"The category of the sound"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"}],"desc":"Play a Sound at the location of the provided entity in the World.\n<p>\nThis function will fail silently if Entity or Sound are null.","ret":""},{"name":"playSound","params":[{"name":"entity","type":"Entity","desc":"The entity to play the sound"},{"name":"sound","type":"Sound","desc":"The sound to play"},{"name":"category","type":"SoundCategory","desc":"The category of the sound"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"},{"name":"seed","type":"long","desc":"The seed for the sound"}],"desc":"Play a Sound at the location of the provided entity in the World. For sounds\nwith multiple variations passing the same seed will always play the same\nvariation.\n<p>\nThis function will fail silently if Entity or Sound are null.","ret":""},{"name":"playSound","params":[{"name":"entity","type":"Entity","desc":"The entity to play the sound"},{"name":"sound","type":"String","desc":"The sound to play"},{"name":"category","type":"SoundCategory","desc":"The category of the sound"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"},{"name":"seed","type":"long","desc":"The seed for the sound"}],"desc":"Play a Sound at the location of the provided entity in the World. For sounds\nwith multiple variations passing the same seed will always play the same\nvariation.\n<p>\nThis function will fail silently if Entity or Sound are null.","ret":""},{"name":"getGameRules","params":[],"desc":"Get an array containing the names of all the {@link GameRule}s.","ret":"An array of {@link GameRule} names."},{"name":"getGameRuleValue","params":[{"name":"rule","type":"String","desc":"Rule to look up value of"}],"desc":"Gets the current state of the specified rule\n<p>\nWill return null if rule passed is null","ret":"String value of rule"},{"name":"setGameRuleValue","params":[{"name":"rule","type":"String","desc":"Rule to set"},{"name":"value","type":"String","desc":"Value to set rule to"}],"desc":"Set the specified gamerule to specified value.\n<p>\nThe rule may attempt to validate the value passed, will return true if\nvalue was set.\n<p>\nIf rule is null, the function will return false.","ret":"True if rule was set"},{"name":"isGameRule","params":[{"name":"rule","type":"String","desc":"Rule to check"}],"desc":"Checks if string is a valid game rule","ret":"True if rule exists"},{"name":"getGameRuleValue","params":[{"name":"rule","type":"GameRule<T>","desc":"the GameRule to check"}],"desc":"Get the current value for a given {@link GameRule}.","ret":"the current value"},{"name":"getGameRuleDefault","params":[{"name":"rule","type":"GameRule<T>","desc":"the rule to return a default value for"}],"desc":"Get the default value for a given {@link GameRule}. This value is not\nguaranteed to match the current value.","ret":"the default value"},{"name":"setGameRule","params":[{"name":"rule","type":"GameRule<T>","desc":"the GameRule to update"},{"name":"newValue","type":"T","desc":"the new value"}],"desc":"Set the given {@link GameRule}'s new value.","ret":"true if the value was successfully set"},{"name":"getWorldBorder","params":[],"desc":"Gets the world border for this world.","ret":"The world border for this world."},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"location","type":"Location","desc":"the location to spawn at"},{"name":"count","type":"int","desc":"the number of particles"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"x","type":"double","desc":"the position on the x axis to spawn at"},{"name":"y","type":"double","desc":"the position on the y axis to spawn at"},{"name":"z","type":"double","desc":"the position on the z axis to spawn at"},{"name":"count","type":"int","desc":"the number of particles"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"location","type":"Location","desc":"the location to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"data","type":"T","desc":"the data to use for the particle or null,\n            the type of this depends on {@link Particle#getDataType()}"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"x","type":"double","desc":"the position on the x axis to spawn at"},{"name":"y","type":"double","desc":"the position on the y axis to spawn at"},{"name":"z","type":"double","desc":"the position on the z axis to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"data","type":"T","desc":"the data to use for the particle or null,\n            the type of this depends on {@link Particle#getDataType()}"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"location","type":"Location","desc":"the location to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"offsetX","type":"double","desc":"the maximum random offset on the X axis"},{"name":"offsetY","type":"double","desc":"the maximum random offset on the Y axis"},{"name":"offsetZ","type":"double","desc":"the maximum random offset on the Z axis"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"x","type":"double","desc":"the position on the x axis to spawn at"},{"name":"y","type":"double","desc":"the position on the y axis to spawn at"},{"name":"z","type":"double","desc":"the position on the z axis to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"offsetX","type":"double","desc":"the maximum random offset on the X axis"},{"name":"offsetY","type":"double","desc":"the maximum random offset on the Y axis"},{"name":"offsetZ","type":"double","desc":"the maximum random offset on the Z axis"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"location","type":"Location","desc":"the location to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"offsetX","type":"double","desc":"the maximum random offset on the X axis"},{"name":"offsetY","type":"double","desc":"the maximum random offset on the Y axis"},{"name":"offsetZ","type":"double","desc":"the maximum random offset on the Z axis"},{"name":"data","type":"T","desc":"the data to use for the particle or null,\n            the type of this depends on {@link Particle#getDataType()}"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"x","type":"double","desc":"the position on the x axis to spawn at"},{"name":"y","type":"double","desc":"the position on the y axis to spawn at"},{"name":"z","type":"double","desc":"the position on the z axis to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"offsetX","type":"double","desc":"the maximum random offset on the X axis"},{"name":"offsetY","type":"double","desc":"the maximum random offset on the Y axis"},{"name":"offsetZ","type":"double","desc":"the maximum random offset on the Z axis"},{"name":"data","type":"T","desc":"the data to use for the particle or null,\n            the type of this depends on {@link Particle#getDataType()}"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"location","type":"Location","desc":"the location to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"offsetX","type":"double","desc":"the maximum random offset on the X axis"},{"name":"offsetY","type":"double","desc":"the maximum random offset on the Y axis"},{"name":"offsetZ","type":"double","desc":"the maximum random offset on the Z axis"},{"name":"extra","type":"double","desc":"the extra data for this particle, depends on the\n             particle used (normally speed)"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"x","type":"double","desc":"the position on the x axis to spawn at"},{"name":"y","type":"double","desc":"the position on the y axis to spawn at"},{"name":"z","type":"double","desc":"the position on the z axis to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"offsetX","type":"double","desc":"the maximum random offset on the X axis"},{"name":"offsetY","type":"double","desc":"the maximum random offset on the Y axis"},{"name":"offsetZ","type":"double","desc":"the maximum random offset on the Z axis"},{"name":"extra","type":"double","desc":"the extra data for this particle, depends on the\n             particle used (normally speed)"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"location","type":"Location","desc":"the location to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"offsetX","type":"double","desc":"the maximum random offset on the X axis"},{"name":"offsetY","type":"double","desc":"the maximum random offset on the Y axis"},{"name":"offsetZ","type":"double","desc":"the maximum random offset on the Z axis"},{"name":"extra","type":"double","desc":"the extra data for this particle, depends on the\n             particle used (normally speed)"},{"name":"data","type":"T","desc":"the data to use for the particle or null,\n            the type of this depends on {@link Particle#getDataType()}"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"receivers","type":"List<Player>","desc":"List of players to receive the particles, or null for all in world"},{"name":"source","type":"Player","desc":"Source of the particles to be used in visibility checks, or null if no player source"},{"name":"x","type":"double","desc":"the position on the x axis to spawn at"},{"name":"y","type":"double","desc":"the position on the y axis to spawn at"},{"name":"z","type":"double","desc":"the position on the z axis to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"offsetX","type":"double","desc":"the maximum random offset on the X axis"},{"name":"offsetY","type":"double","desc":"the maximum random offset on the Y axis"},{"name":"offsetZ","type":"double","desc":"the maximum random offset on the Z axis"},{"name":"extra","type":"double","desc":"the extra data for this particle, depends on the\n             particle used (normally speed)"},{"name":"data","type":"T","desc":"the data to use for the particle or null,\n            the type of this depends on {@link Particle#getDataType()}"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"receivers","type":"List<Player>","desc":"List of players to receive the particles, or null for all in world"},{"name":"source","type":"Player","desc":"Source of the particles to be used in visibility checks, or null if no player source"},{"name":"x","type":"double","desc":"the position on the x axis to spawn at"},{"name":"y","type":"double","desc":"the position on the y axis to spawn at"},{"name":"z","type":"double","desc":"the position on the z axis to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"offsetX","type":"double","desc":"the maximum random offset on the X axis"},{"name":"offsetY","type":"double","desc":"the maximum random offset on the Y axis"},{"name":"offsetZ","type":"double","desc":"the maximum random offset on the Z axis"},{"name":"extra","type":"double","desc":"the extra data for this particle, depends on the\n             particle used (normally speed)"},{"name":"data","type":"T","desc":"the data to use for the particle or null,\n            the type of this depends on {@link Particle#getDataType()}"},{"name":"force","type":"boolean","desc":"allows the particle to be seen further away from the player\n             and shows to players using any vanilla client particle settings"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"location","type":"Location","desc":"the location to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"offsetX","type":"double","desc":"the maximum random offset on the X axis"},{"name":"offsetY","type":"double","desc":"the maximum random offset on the Y axis"},{"name":"offsetZ","type":"double","desc":"the maximum random offset on the Z axis"},{"name":"extra","type":"double","desc":"the extra data for this particle, depends on the\n             particle used (normally speed)"},{"name":"data","type":"T","desc":"the data to use for the particle or null,\n            the type of this depends on {@link Particle#getDataType()}"},{"name":"force","type":"boolean","desc":"whether to send the particle to players within an extended\n             range and encourage their client to render it regardless of\n             settings"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"x","type":"double","desc":"the position on the x axis to spawn at"},{"name":"y","type":"double","desc":"the position on the y axis to spawn at"},{"name":"z","type":"double","desc":"the position on the z axis to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"offsetX","type":"double","desc":"the maximum random offset on the X axis"},{"name":"offsetY","type":"double","desc":"the maximum random offset on the Y axis"},{"name":"offsetZ","type":"double","desc":"the maximum random offset on the Z axis"},{"name":"extra","type":"double","desc":"the extra data for this particle, depends on the\n             particle used (normally speed)"},{"name":"data","type":"T","desc":"the data to use for the particle or null,\n            the type of this depends on {@link Particle#getDataType()}"},{"name":"force","type":"boolean","desc":"whether to send the particle to players within an extended\n             range and encourage their client to render it regardless of\n             settings"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.","ret":""},{"name":"locateNearestStructure","params":[{"name":"origin","type":"Location","desc":"where to start looking for a structure"},{"name":"structureType","type":"org.bukkit.StructureType","desc":"the type of structure to find"},{"name":"radius","type":"int","desc":"the radius, in chunks, around which to search"},{"name":"findUnexplored","type":"boolean","desc":"true to only find unexplored structures"}],"desc":"Find the closest nearby structure of a given {@link StructureType}.\nFinding unexplored structures can, and will, block if the world is\nlooking in chunks that have not generated yet. This can lead to the world\ntemporarily freezing while locating an unexplored structure.\n<p>\nThe {@code radius} is not a rigid square radius. Each structure may alter\nhow many chunks to check for each iteration. Do not assume that only a\nradius x radius chunk area will be checked. For example,\n{@link StructureType#WOODLAND_MANSION} can potentially check up to 20,000\nblocks away (or more) regardless of the radius used.\n<p>\nThis will <i>not</i> load or generate chunks. This can also lead to\ninstances where the server can hang if you are only looking for\nunexplored structures. This is because it will keep looking further and\nfurther out in order to find the structure.","ret":"the closest {@link Location}, or null if no structure of the\nspecified type exists."},{"name":"locateNearestStructure","params":[{"name":"origin","type":"Location","desc":"where to start looking for a structure"},{"name":"structureType","type":"StructureType","desc":"the type of structure to find"},{"name":"radius","type":"int","desc":"the radius, in chunks, around which to search"},{"name":"findUnexplored","type":"boolean","desc":"true to only find unexplored structures"}],"desc":"Find the closest nearby structure of a given {@link StructureType}.\nFinding unexplored structures can, and will, block if the world is\nlooking in chunks that have not generated yet. This can lead to the world\ntemporarily freezing while locating an unexplored structure.\n<p>\nThe {@code radius} is not a rigid square radius. Each structure may alter\nhow many chunks to check for each iteration. Do not assume that only a\nradius x radius chunk area will be checked. For example,\n{@link StructureType#WOODLAND_MANSION} can potentially check up to 20,000\nblocks away (or more) regardless of the radius used.\n<p>\nThis will <i>not</i> load or generate chunks. This can also lead to\ninstances where the server can hang if you are only looking for\nunexplored structures. This is because it will keep looking further and\nfurther out in order to find the structure.\n<p>\nThe difference between searching for a {@link StructureType} and a\n{@link Structure} is, that a {@link StructureType} can refer to multiple\n{@link Structure Structures} while searching for a {@link Structure}\nwhile only search for the given {@link Structure}.","ret":"the closest {@link Location} and {@link Structure}, or null if no\nstructure of the specified type exists."},{"name":"locateNearestStructure","params":[{"name":"origin","type":"Location","desc":"where to start looking for a structure"},{"name":"structure","type":"Structure","desc":"the structure to find"},{"name":"radius","type":"int","desc":"the radius, in chunks, around which to search"},{"name":"findUnexplored","type":"boolean","desc":"true to only find unexplored structures"}],"desc":"Find the closest nearby structure of a given {@link Structure}. Finding\nunexplored structures can, and will, block if the world is looking in\nchunks that have not generated yet. This can lead to the world\ntemporarily freezing while locating an unexplored structure.\n<p>\nThe {@code radius} is not a rigid square radius. Each structure may alter\nhow many chunks to check for each iteration. Do not assume that only a\nradius x radius chunk area will be checked. For example,\n{@link Structure#MANSION} can potentially check up to 20,000 blocks away\n(or more) regardless of the radius used.\n<p>\nThis will <i>not</i> load or generate chunks. This can also lead to\ninstances where the server can hang if you are only looking for\nunexplored structures. This is because it will keep looking further and\nfurther out in order to find the structure.\n<p>\nThe difference between searching for a {@link StructureType} and a\n{@link Structure} is, that a {@link StructureType} can refer to multiple\n{@link Structure Structures} while searching for a {@link Structure}\nwhile only search for the given {@link Structure}.","ret":"the closest {@link Location} and {@link Structure}, or null if no\nstructure was found."},{"name":"locateNearestBiome","params":[{"name":"origin","type":"Location","desc":"Origin location"},{"name":"biome","type":"Biome","desc":"Biome to find"},{"name":"radius","type":"int","desc":"radius to search"}],"desc":"Locates the nearest biome based on an origin, biome type, and radius to search.\nStep defaults to {@code 8}.","ret":"Location of biome or null if not found in specified radius"},{"name":"locateNearestBiome","params":[{"name":"origin","type":"Location","desc":"Origin location"},{"name":"biome","type":"Biome","desc":"Biome to find"},{"name":"radius","type":"int","desc":"radius to search"},{"name":"step","type":"int","desc":"Search step 1 would mean checking every block, 8 would be every 8th block"}],"desc":"Locates the nearest biome based on an origin, biome type, and radius to search\nand step","ret":"Location of biome or null if not found in specified radius"},{"name":"isUltrawarm","params":[],"desc":"Checks if the world:\n<ul>\n    <li>evaporates water</li>\n    <li>dries sponges</li>\n    <li>has lava spread faster and further</li>\n</ul>","ret":"true if ultrawarm, false if not"},{"name":"getCoordinateScale","params":[],"desc":"Gets the coordinate scaling of this world.","ret":"the coordinate scale"},{"name":"hasSkylight","params":[],"desc":"Checks if the world has skylight access","ret":"whether there is skylight"},{"name":"hasBedrockCeiling","params":[],"desc":"Checks if the world has a bedrock ceiling","ret":"whether the world has a bedrock ceiling"},{"name":"doesBedWork","params":[],"desc":"Checks if beds work","ret":"whether beds work"},{"name":"doesRespawnAnchorWork","params":[],"desc":"Checks if respawn anchors work","ret":"whether respawn anchors work"},{"name":"isFixedTime","params":[],"desc":"Checks if this world has a fixed time","ret":"whether this world has fixed time"},{"name":"getInfiniburn","params":[],"desc":"Gets the collection of materials that burn infinitely in this world.","ret":"the materials that will forever stay lit by fire"},{"name":"sendGameEvent","params":[{"name":"sourceEntity","type":"Entity","desc":"optional source entity"},{"name":"gameEvent","type":"GameEvent","desc":"the game event to post"},{"name":"position","type":"Vector","desc":"the position in the world where to post the event to listeners"}],"desc":"Posts a specified game event at a location","ret":""},{"name":"spigot","params":[],"desc":"","ret":""},{"name":"locateNearestBiome","params":[{"name":"origin","type":"Location","desc":"where to start looking for a biome"},{"name":"radius","type":"int","desc":"the radius, in blocks, around which to search"},{"name":"biomes","type":"Biome","desc":"the biomes to search for"}],"desc":"Find the closest nearby location with a biome matching the provided\n{@link Biome}(s). Finding biomes can, and will, block if the world is looking\nin chunks that have not generated yet. This can lead to the world temporarily\nfreezing while locating a biome.\n<p>\n<b>Note:</b> This will <i>not</i> reflect changes made to the world after\ngeneration, this method only sees the biome at the time of world generation.\nThis will <i>not</i> load or generate chunks.\n<p>\nIf multiple biomes are provided {@link BiomeSearchResult#getBiome()} will\nindicate which one was located.\n<p>\nThis method will use a horizontal interval of 32 and a vertical interval of\n64, equal to the /locate command.","ret":"a BiomeSearchResult containing the closest {@link Location} and\n        {@link Biome}, or null if no biome was found."},{"name":"locateNearestBiome","params":[{"name":"origin","type":"Location","desc":"where to start looking for a biome"},{"name":"radius","type":"int","desc":"the radius, in blocks, around which to search"},{"name":"horizontalInterval","type":"int","desc":"the horizontal distance between each check"},{"name":"verticalInterval","type":"int","desc":"the vertical distance between each check"},{"name":"biomes","type":"Biome","desc":"the biomes to search for"}],"desc":"Find the closest nearby location with a biome matching the provided\n{@link Biome}(s). Finding biomes can, and will, block if the world is looking\nin chunks that have not generated yet. This can lead to the world temporarily\nfreezing while locating a biome.\n<p>\n<b>Note:</b> This will <i>not</i> reflect changes made to the world after\ngeneration, this method only sees the biome at the time of world generation.\nThis will <i>not</i> load or generate chunks.\n<p>\nIf multiple biomes are provided {@link BiomeSearchResult#getBiome()} will\nindicate which one was located. Higher values for {@code horizontalInterval}\nand {@code verticalInterval} will result in faster searches, but may lead to\nsmall biomes being missed.","ret":"a BiomeSearchResult containing the closest {@link Location} and\n        {@link Biome}, or null if no biome was found."},{"name":"locateNearestRaid","params":[{"name":"location","type":"Location","desc":"the origin location"},{"name":"radius","type":"int","desc":"the radius"}],"desc":"Finds the nearest raid close to the given location.","ret":"the closest {@link Raid}, or null if no raids were found"},{"name":"getRaids","params":[],"desc":"Gets all raids that are going on over this world.","ret":"the list of all active raids"},{"name":"getEnderDragonBattle","params":[],"desc":"Get the {@link DragonBattle} associated with this world.\n\nIf this world's environment is not {@link Environment#THE_END}, null will\nbe returned.\n<p>\nIf an end world, a dragon battle instance will be returned regardless of\nwhether or not a dragon is present in the world or a fight sequence has\nbeen activated. The dragon battle instance acts as a state holder.","ret":"the dragon battle instance"},{"name":"getFeatureFlags","params":[],"desc":"Get all {@link FeatureFlag} enabled in this world.","ret":"all enabled {@link FeatureFlag}"},{"name":"setViewDistance","params":[{"name":"viewDistance","type":"int","desc":"view distance in [2, 32]"}],"desc":"Sets the view distance for this world.","ret":""},{"name":"setSimulationDistance","params":[{"name":"simulationDistance","type":"int","desc":"simulation distance in [2, 32]"}],"desc":"Sets the simulation distance for this world.","ret":""},{"name":"getNoTickViewDistance","params":[],"desc":"Returns the no-tick view distance for this world.\n<p>\nNo-tick view distance is the view distance where chunks will load, however the chunks and their entities will not\nbe set to tick.\n</p>","ret":"The no-tick view distance for this world."},{"name":"setNoTickViewDistance","params":[{"name":"viewDistance","type":"int","desc":"view distance in [2, 32]"}],"desc":"Sets the no-tick view distance for this world.\n<p>\nNo-tick view distance is the view distance where chunks will load, however the chunks and their entities will not\nbe set to tick.\n</p>","ret":""},{"name":"getSendViewDistance","params":[],"desc":"Gets the sending view distance for this world.\n<p>\nSending view distance is the view distance where chunks will load in for players in this world.\n</p>","ret":"The sending view distance for this world."},{"name":"setSendViewDistance","params":[{"name":"viewDistance","type":"int","desc":"view distance in [2, 32] or -1"}],"desc":"Sets the sending view distance for this world.\n<p>\nSending view distance is the view distance where chunks will load in for players in this world.\n</p>","ret":""},{"name":"getStructures","params":[{"name":"x","type":"int","desc":"X-coordinate of the chunk"},{"name":"z","type":"int","desc":"Z-coordinate of the chunk"}],"desc":"Gets all generated structures that intersect the chunk at the given\ncoordinates. <br>\nIf no structures are present an empty collection will be returned.","ret":"a collection of placed structures in the chunk at the given\ncoordinates"},{"name":"getStructures","params":[{"name":"x","type":"int","desc":"X-coordinate of the chunk"},{"name":"z","type":"int","desc":"Z-coordinate of the chunk"},{"name":"structure","type":"Structure","desc":"the structure to find"}],"desc":"Gets all generated structures of a given {@link Structure} that intersect\nthe chunk at the given coordinates. <br>\nIf no structures are present an empty collection will be returned.","ret":"a collection of placed structures in the chunk at the given\ncoordinates"}],"desc":"Represents a world, which may contain entities, chunks and blocks"},{"FQCN":"org.bukkit.MusicInstrument","methods":[{"name":"getByKey","params":[{"name":"namespacedKey","type":"NamespacedKey","desc":"the key"}],"desc":"Returns a {@link MusicInstrument} by a {@link NamespacedKey}.","ret":"the event or null"},{"name":"values","params":[],"desc":"Returns all known MusicInstruments.","ret":"the memoryKeys"}],"desc":""},{"FQCN":"org.bukkit.CoalType","methods":[{"name":"getData","params":[],"desc":"Gets the associated data value representing this type of coal","ret":"A byte containing the data value of this coal type"},{"name":"getByData","params":[{"name":"data","type":"byte","desc":"Data value to fetch"}],"desc":"Gets the type of coal with the given data value","ret":"The {@link CoalType} representing the given value, or null if\n    it doesn't exist"}],"desc":"Represents the two types of coal"},{"FQCN":"org.bukkit.Fluid","methods":[],"desc":"Represents a fluid type."},{"FQCN":"org.bukkit.MinecraftExperimental","methods":[],"desc":"Indicates that the annotated element (class, method, field, etc.) is part of a\n<a href=\"https://minecraft.wiki/w/Experimental_Gameplay\">minecraft experimental feature</a>\nand is subject to changes by Mojang.\n<p>\n<b>Note:</b> Elements marked with this annotation require the use of a datapack or otherwise\nnon-standard feature to be enabled on the server."},{"FQCN":"org.bukkit.Tag","methods":[{"name":"isTagged","params":[{"name":"item","type":"T","desc":"to check"}],"desc":"Returns whether or not this tag has an entry for the specified item.","ret":"if it is tagged"},{"name":"getValues","params":[],"desc":"Gets an immutable set of all tagged items.","ret":"set of tagged items"}],"desc":"Represents a tag that may be defined by the server or a resource pack to\ngroup like things together.\n\nNote that whilst all tags defined within this interface must be present in\nimplementations, their existence is not guaranteed across future versions.\n\n<p>Custom tags defined by Paper are not present (as constants) in this class.\nTo access them please refer to {@link com.destroystokyo.paper.MaterialTags}\nand {@link io.papermc.paper.tag.EntityTags}.</p>"},{"FQCN":"org.bukkit.entity.Illager","methods":[],"desc":"Represents a type of \"Illager\"."},{"FQCN":"org.bukkit.entity.BlockDisplay","methods":[{"name":"getBlock","params":[],"desc":"Gets the displayed block.","ret":"the displayed block"},{"name":"setBlock","params":[{"name":"block","type":"BlockData","desc":"the new block"}],"desc":"Sets the displayed block.","ret":""}],"desc":"Represents a block display entity."},{"FQCN":"org.bukkit.entity.Vex","methods":[{"name":"isCharging","params":[],"desc":"Gets the charging state of this entity.\n\nWhen this entity is charging it will having a glowing red texture.","ret":"charging state"},{"name":"setCharging","params":[{"name":"charging","type":"boolean","desc":"new state"}],"desc":"Sets the charging state of this entity.\n\nWhen this entity is charging it will having a glowing red texture.","ret":""},{"name":"getBound","params":[],"desc":"Gets the bound of this entity.\n\nAn idle vex will navigate a 15x11x15 area centered around its bound\nlocation.\n\nWhen summoned by an Evoker, this location will be set to that of the\nsummoner.","ret":"{@link Location} of the bound or null if not set"},{"name":"setBound","params":[{"name":"location","type":"Location","desc":"{@link Location} of the bound or null to clear"}],"desc":"Sets the bound of this entity.\n\nAn idle vex will navigate a 15x11x15 area centered around its bound\nlocation.\n\nWhen summoned by an Evoker, this location will be set to that of the\nsummoner.","ret":""},{"name":"getLifeTicks","params":[],"desc":"Gets the remaining lifespan of this entity.","ret":"life in ticks"},{"name":"setLifeTicks","params":[{"name":"lifeTicks","type":"int","desc":"life in ticks, or negative for unlimited lifepan"}],"desc":"Sets the remaining lifespan of this entity.","ret":""},{"name":"hasLimitedLife","params":[],"desc":"Gets if the entity has a limited life.","ret":"true if the entity has limited life"},{"name":"getSummoner","params":[],"desc":"Get the Mob that summoned this vex","ret":"Mob that summoned this vex"},{"name":"setSummoner","params":[{"name":"summoner","type":"Mob","desc":"New summoner"}],"desc":"Set the summoner of this vex","ret":""},{"name":"hasLimitedLifetime","params":[],"desc":"Gets if this vex should start to take damage\nonce {@link Vex#getLimitedLifetimeTicks()} is less than or equal to 0.","ret":"will take damage"},{"name":"setLimitedLifetime","params":[{"name":"hasLimitedLifetime","type":"boolean","desc":"should take damage"}],"desc":"Sets if this vex should start to take damage\nonce {@link Vex#getLimitedLifetimeTicks()} is less than or equal to 0.","ret":""},{"name":"getLimitedLifetimeTicks","params":[],"desc":"Gets the number of ticks remaining until the vex will start\nto take damage.","ret":"ticks until the vex will start to take damage"},{"name":"setLimitedLifetimeTicks","params":[{"name":"ticks","type":"int","desc":"ticks remaining"}],"desc":"Sets the number of ticks remaining until the vex takes damage.\nThis number is ticked down only if {@link Vex#hasLimitedLifetime()} is true.","ret":""}],"desc":"Represents a Vex."},{"FQCN":"org.bukkit.entity.Illusioner","methods":[],"desc":"Represents an Illusioner \"Illager\"."},{"FQCN":"org.bukkit.entity.Damageable","methods":[{"name":"damage","params":[{"name":"amount","type":"double","desc":"Amount of damage to deal"}],"desc":"Deals the given amount of damage to this entity.","ret":""},{"name":"damage","params":[{"name":"amount","type":"double","desc":"amount of damage to deal"},{"name":"source","type":"Entity","desc":"entity to which the damage should be attributed"}],"desc":"Deals the given amount of damage to this entity from a specified\n{@link Entity}.","ret":""},{"name":"damage","params":[{"name":"amount","type":"double","desc":"amount of damage to deal"},{"name":"damageSource","type":"DamageSource","desc":"source to which the damage should be attributed"}],"desc":"Deals the given amount of damage to this entity from a specified\n{@link DamageSource}.","ret":""},{"name":"getHealth","params":[],"desc":"Gets the entity's health from 0 to {@link #getMaxHealth()}, where 0 is dead.","ret":"Health represented from 0 to max"},{"name":"setHealth","params":[{"name":"health","type":"double","desc":"New health represented from 0 to max"}],"desc":"Sets the entity's health from 0 to {@link #getMaxHealth()}, where 0 is\ndead.","ret":""},{"name":"getAbsorptionAmount","params":[],"desc":"Gets the entity's absorption amount.","ret":"absorption amount from 0"},{"name":"setAbsorptionAmount","params":[{"name":"amount","type":"double","desc":"new absorption amount from 0"}],"desc":"Sets the entity's absorption amount.\n<p>\nNote: The amount is capped to the value of\n{@link Attribute#GENERIC_MAX_ABSORPTION}. The effect of this method on\nthat attribute is currently unspecified and subject to change.","ret":""},{"name":"getMaxHealth","params":[],"desc":"Gets the maximum health this entity has.","ret":"Maximum health"},{"name":"setMaxHealth","params":[{"name":"health","type":"double","desc":"amount of health to set the maximum to"}],"desc":"Sets the maximum health this entity can have.\n<p>\nIf the health of the entity is above the value provided it will be set\nto that value.\n<p>\nNote: An entity with a health bar ({@link Player}, {@link EnderDragon},\n{@link Wither}, etc...} will have their bar scaled accordingly.","ret":""},{"name":"resetMaxHealth","params":[],"desc":"Resets the max health to the original amount.","ret":""}],"desc":"Represents an {@link Entity} that has health and can take damage."},{"FQCN":"org.bukkit.entity.Horse","methods":[{"name":"getColor","params":[],"desc":"Gets the horse's color.\n<p>\nColors only apply to horses, not to donkeys, mules, skeleton horses\nor undead horses.","ret":"a {@link Color} representing the horse's group"},{"name":"setColor","params":[{"name":"color","type":"Color","desc":"a {@link Color} for this horse"}],"desc":"Sets the horse's color.\n<p>\nAttempting to set a color for any donkey, mule, skeleton horse or\nundead horse will not result in a change.","ret":""},{"name":"getStyle","params":[],"desc":"Gets the horse's style.\nStyles determine what kind of markings or patterns a horse has.\n<p>\nStyles only apply to horses, not to donkeys, mules, skeleton horses\nor undead horses.","ret":"a {@link Style} representing the horse's style"},{"name":"setStyle","params":[{"name":"style","type":"Style","desc":"a {@link Style} for this horse"}],"desc":"Sets the style of this horse.\nStyles determine what kind of markings or patterns a horse has.\n<p>\nAttempting to set a style for any donkey, mule, skeleton horse or\nundead horse will not result in a change.","ret":""},{"name":"isCarryingChest","params":[],"desc":"","ret":"carrying chest status"},{"name":"setCarryingChest","params":[{"name":"chest","type":"boolean","desc":"chest"}],"desc":"","ret":""}],"desc":"Represents a Horse."},{"FQCN":"org.bukkit.entity.Ghast","methods":[{"name":"isCharging","params":[],"desc":"Gets whether the Ghast is charging","ret":"Whether the Ghast is charging"},{"name":"setCharging","params":[{"name":"flag","type":"boolean","desc":"Whether the Ghast is charging"}],"desc":"Sets whether the Ghast is charging","ret":""},{"name":"getExplosionPower","params":[],"desc":"Returns the explosion power of shot fireballs.","ret":"explosion power of shot fireballs"},{"name":"setExplosionPower","params":[{"name":"explosionPower","type":"int","desc":"explosion power of shot fireballs"}],"desc":"Sets the explosion power of shot fireballs.","ret":""}],"desc":"Represents a Ghast."},{"FQCN":"org.bukkit.entity.Rabbit","methods":[{"name":"getRabbitType","params":[],"desc":"","ret":"The type of rabbit."},{"name":"setRabbitType","params":[{"name":"type","type":"Type","desc":"Sets the type of rabbit for this entity."}],"desc":"","ret":""},{"name":"setMoreCarrotTicks","params":[{"name":"ticks","type":"int","desc":"ticks"}],"desc":"Sets how many ticks this rabbit will wait\nuntil trying to find more carrots.","ret":""},{"name":"getMoreCarrotTicks","params":[],"desc":"Returns how many ticks this rabbit\nwill wait until trying to find more carrots.","ret":"ticks"}],"desc":""},{"FQCN":"org.bukkit.entity.Piglin","methods":[{"name":"isAbleToHunt","params":[],"desc":"Get whether the piglin is able to hunt hoglins.","ret":"Whether the piglin is able to hunt hoglins"},{"name":"setIsAbleToHunt","params":[{"name":"flag","type":"boolean","desc":"Whether the piglin is able to hunt hoglins."}],"desc":"Sets whether the piglin is able to hunt hoglins.","ret":""},{"name":"addBarterMaterial","params":[{"name":"material","type":"Material","desc":"The material to add"}],"desc":"Adds a material to the allowed list of materials to barter with.","ret":"true if the item has been added successfully, false otherwise"},{"name":"removeBarterMaterial","params":[{"name":"material","type":"Material","desc":"The material to remove"}],"desc":"Removes a material from the allowed list of materials to barter with.\n\n<strong>Note:</strong> It's not possible to override the default\nbartering item gold_ingots as payment. To block gold_ingots see\n{@link org.bukkit.event.entity.PiglinBarterEvent}.","ret":"true if the item has been removed successfully, false otherwise"},{"name":"addMaterialOfInterest","params":[{"name":"material","type":"Material","desc":"The material you want the piglin to be interested in"}],"desc":"Adds a material the piglin will pickup and store in his inventory.","ret":"true if the item has been added successfully, false otherwise"},{"name":"removeMaterialOfInterest","params":[{"name":"material","type":"Material","desc":"The material you want removed from the interest list"}],"desc":"Removes a material from the list of materials the piglin will pickup.\n\n<strong>Note:</strong> It's not possible to override the default list of\nitem the piglin will pickup. To cancel pickup see\n{@link org.bukkit.event.entity.EntityPickupItemEvent}.","ret":"true if the item has been removed successfully, false otherwise"},{"name":"getInterestList","params":[],"desc":"Returns a immutable set of materials the piglins will pickup.\n<br>\n<strong>Note:</strong> This set will not include the items that are set\nby default. To interact with those items see\n{@link org.bukkit.event.entity.EntityPickupItemEvent}.","ret":"An immutable materials set"},{"name":"getBarterList","params":[],"desc":"Returns a immutable set of materials the piglins will barter with.\n\n<strong>Note:</strong> This set will not include the items that are set\nby default. To interact with those items see\n{@link org.bukkit.event.entity.PiglinBarterEvent}.","ret":"An immutable materials set"},{"name":"setChargingCrossbow","params":[{"name":"chargingCrossbow","type":"boolean","desc":"is charging"}],"desc":"Causes the piglin to appear as if they are charging\na crossbow.\n<p>\nThis works with any item currently held in the piglin's hand.","ret":""},{"name":"isChargingCrossbow","params":[],"desc":"Gets if the piglin is currently charging the\nitem in their hand.","ret":"is charging"},{"name":"setDancing","params":[{"name":"dancing","type":"boolean","desc":"is dancing"}],"desc":"Sets whether the Piglin is dancing or not","ret":""},{"name":"setDancing","params":[{"name":"duration","type":"long","desc":"duration of the dance in ticks"}],"desc":"Causes the piglin to dance for a\nspecified amount of time","ret":""},{"name":"isDancing","params":[],"desc":"Gets if the piglin is currently dancing","ret":"is dancing"}],"desc":"Represents a Piglin."},{"FQCN":"org.bukkit.entity.Boat","methods":[{"name":"getWoodType","params":[],"desc":"Gets the wood type of the boat.","ret":"the wood type"},{"name":"setWoodType","params":[{"name":"species","type":"TreeSpecies","desc":"the new wood type"}],"desc":"Sets the wood type of the boat.","ret":""},{"name":"getBoatType","params":[],"desc":"Gets the type of the boat.","ret":"the boat type"},{"name":"setBoatType","params":[{"name":"type","type":"Type","desc":"the new type"}],"desc":"Sets the type of the boat.","ret":""},{"name":"getMaxSpeed","params":[],"desc":"Gets the maximum speed of a boat. The speed is unrelated to the\nvelocity.","ret":"The max speed."},{"name":"setMaxSpeed","params":[{"name":"speed","type":"double","desc":"The max speed."}],"desc":"Sets the maximum speed of a boat. Must be nonnegative. Default is 0.4D.","ret":""},{"name":"getOccupiedDeceleration","params":[],"desc":"Gets the deceleration rate (newSpeed = curSpeed * rate) of occupied\nboats. The default is 0.2.","ret":"The rate of deceleration"},{"name":"setOccupiedDeceleration","params":[{"name":"rate","type":"double","desc":"deceleration rate"}],"desc":"Sets the deceleration rate (newSpeed = curSpeed * rate) of occupied\nboats. Setting this to a higher value allows for quicker acceleration.\nThe default is 0.2.","ret":""},{"name":"getUnoccupiedDeceleration","params":[],"desc":"Gets the deceleration rate (newSpeed = curSpeed * rate) of unoccupied\nboats. The default is -1. Values below 0 indicate that no additional\ndeceleration is imposed.","ret":"The rate of deceleration"},{"name":"setUnoccupiedDeceleration","params":[{"name":"rate","type":"double","desc":"deceleration rate"}],"desc":"Sets the deceleration rate (newSpeed = curSpeed * rate) of unoccupied\nboats. Setting this to a higher value allows for quicker deceleration\nof boats when a player disembarks. The default is -1. Values below 0\nindicate that no additional deceleration is imposed.","ret":""},{"name":"getWorkOnLand","params":[],"desc":"Get whether boats can work on land.","ret":"whether boats can work on land"},{"name":"setWorkOnLand","params":[{"name":"workOnLand","type":"boolean","desc":"whether boats can work on land"}],"desc":"Set whether boats can work on land.","ret":""},{"name":"getStatus","params":[],"desc":"Gets the status of the boat.","ret":"the status"},{"name":"getBoatMaterial","params":[],"desc":"Gets the {@link Material} that represents this Boat type.","ret":"the boat material."}],"desc":"Represents a boat entity."},{"FQCN":"org.bukkit.entity.LivingEntity","methods":[{"name":"getEyeHeight","params":[],"desc":"Gets the height of the living entity's eyes above its Location.","ret":"height of the living entity's eyes above its location"},{"name":"getEyeHeight","params":[{"name":"ignorePose","type":"boolean","desc":"if set to true, the effects of pose changes, eg\n    sneaking and gliding will be ignored"}],"desc":"Gets the height of the living entity's eyes above its Location.","ret":"height of the living entity's eyes above its location"},{"name":"getEyeLocation","params":[],"desc":"Get a Location detailing the current eye position of the living entity.","ret":"a location at the eyes of the living entity"},{"name":"getLineOfSight","params":[{"name":"transparent","type":"Set<Material>","desc":"Set containing all transparent block Materials (set to\n    null for only air)"},{"name":"maxDistance","type":"int","desc":"this is the maximum distance to scan (may be limited\n    by server by at least 100 blocks, no less)"}],"desc":"Gets all blocks along the living entity's line of sight.\n<p>\nThis list contains all blocks from the living entity's eye position to\ntarget inclusive. This method considers all blocks as 1x1x1 in size.","ret":"list containing all blocks along the living entity's line of\n    sight"},{"name":"getTargetBlock","params":[{"name":"transparent","type":"Set<Material>","desc":"Set containing all transparent block Materials (set to\n    null for only air)"},{"name":"maxDistance","type":"int","desc":"this is the maximum distance to scan (may be limited\n    by server by at least 100 blocks, no less)"}],"desc":"Gets the block that the living entity has targeted.\n<p>\nThis method considers all blocks as 1x1x1 in size. To take exact block\ncollision shapes into account, see {@link #getTargetBlockExact(int,\nFluidCollisionMode)}.","ret":"block that the living entity has targeted"},{"name":"getTargetBlock","params":[{"name":"maxDistance","type":"int","desc":"this is the maximum distance to scan"}],"desc":"Gets the block that the living entity has targeted, ignoring fluids","ret":"block that the living entity has targeted,\n    or null if no block is within maxDistance"},{"name":"getTargetBlock","params":[{"name":"maxDistance","type":"int","desc":"this is the maximum distance to scan"},{"name":"fluidMode","type":"com.destroystokyo.paper.block.TargetBlockInfo.FluidMode","desc":"whether to check fluids or not"}],"desc":"Gets the block that the living entity has targeted","ret":"block that the living entity has targeted,\n    or null if no block is within maxDistance"},{"name":"getTargetBlockFace","params":[{"name":"maxDistance","type":"int","desc":"this is the maximum distance to scan"}],"desc":"Gets the blockface of that block that the living entity has targeted, ignoring fluids","ret":"blockface of the block that the living entity has targeted,\n    or null if no block is targeted"},{"name":"getTargetBlockFace","params":[{"name":"maxDistance","type":"int","desc":"this is the maximum distance to scan"},{"name":"fluidMode","type":"com.destroystokyo.paper.block.TargetBlockInfo.FluidMode","desc":"whether to check fluids or not"}],"desc":"Gets the blockface of that block that the living entity has targeted","ret":"blockface of the block that the living entity has targeted,\n    or null if no block is targeted"},{"name":"getTargetBlockFace","params":[{"name":"maxDistance","type":"int","desc":"this is the maximum distance to scan"},{"name":"fluidMode","type":"FluidCollisionMode","desc":"whether to check fluids or not"}],"desc":"Gets the blockface of that block that the living entity has targeted","ret":"blockface of the block that the living entity has targeted,\n    or null if no block is targeted"},{"name":"getTargetBlockInfo","params":[{"name":"maxDistance","type":"int","desc":"this is the maximum distance to scan"}],"desc":"Gets information about the block the living entity has targeted, ignoring fluids","ret":"TargetBlockInfo about the block the living entity has targeted,\n    or null if no block is targeted"},{"name":"getTargetBlockInfo","params":[{"name":"maxDistance","type":"int","desc":"this is the maximum distance to scan"},{"name":"fluidMode","type":"com.destroystokyo.paper.block.TargetBlockInfo.FluidMode","desc":"whether to check fluids or not"}],"desc":"Gets information about the block the living entity has targeted","ret":"TargetBlockInfo about the block the living entity has targeted,\n    or null if no block is targeted"},{"name":"getTargetEntity","params":[{"name":"maxDistance","type":"int","desc":"this is the maximum distance to scan"}],"desc":"Gets information about the entity being targeted","ret":"entity being targeted, or null if no entity is targeted"},{"name":"getTargetEntity","params":[{"name":"maxDistance","type":"int","desc":"this is the maximum distance to scan"},{"name":"ignoreBlocks","type":"boolean","desc":"true to scan through blocks"}],"desc":"Gets information about the entity being targeted","ret":"entity being targeted, or null if no entity is targeted"},{"name":"getTargetEntityInfo","params":[{"name":"maxDistance","type":"int","desc":"this is the maximum distance to scan"}],"desc":"Gets information about the entity being targeted","ret":"TargetEntityInfo about the entity being targeted,\n    or null if no entity is targeted"},{"name":"rayTraceEntities","params":[{"name":"maxDistance","type":"int","desc":"this is the maximum distance to scan"}],"desc":"Gets information about the entity being targeted","ret":"RayTraceResult about the entity being targeted,\n    or null if no entity is targeted"},{"name":"getTargetEntityInfo","params":[{"name":"maxDistance","type":"int","desc":"this is the maximum distance to scan"},{"name":"ignoreBlocks","type":"boolean","desc":"true to scan through blocks"}],"desc":"Gets information about the entity being targeted","ret":"TargetEntityInfo about the entity being targeted,\n    or null if no entity is targeted"},{"name":"rayTraceEntities","params":[{"name":"maxDistance","type":"int","desc":"this is the maximum distance to scan"},{"name":"ignoreBlocks","type":"boolean","desc":"true to scan through blocks"}],"desc":"Gets information about the entity being targeted","ret":"RayTraceResult about the entity being targeted,\n    or null if no entity is targeted"},{"name":"getLastTwoTargetBlocks","params":[{"name":"transparent","type":"Set<Material>","desc":"Set containing all transparent block Materials (set to\n    null for only air)"},{"name":"maxDistance","type":"int","desc":"this is the maximum distance to scan. This may be\n    further limited by the server, but never to less than 100 blocks"}],"desc":"Gets the last two blocks along the living entity's line of sight.\n<p>\nThe target block will be the last block in the list. This method\nconsiders all blocks as 1x1x1 in size.","ret":"list containing the last 2 blocks along the living entity's\n    line of sight"},{"name":"getTargetBlockExact","params":[{"name":"maxDistance","type":"int","desc":"the maximum distance to scan"}],"desc":"Gets the block that the living entity has targeted.\n<p>\nThis takes the blocks' precise collision shapes into account. Fluids are\nignored.\n<p>\nThis may cause loading of chunks! Some implementations may impose\nartificial restrictions on the maximum distance.","ret":"block that the living entity has targeted"},{"name":"getTargetBlockExact","params":[{"name":"maxDistance","type":"int","desc":"the maximum distance to scan"},{"name":"fluidCollisionMode","type":"FluidCollisionMode","desc":"the fluid collision mode"}],"desc":"Gets the block that the living entity has targeted.\n<p>\nThis takes the blocks' precise collision shapes into account.\n<p>\nThis may cause loading of chunks! Some implementations may impose\nartificial restrictions on the maximum distance.","ret":"block that the living entity has targeted"},{"name":"rayTraceBlocks","params":[{"name":"maxDistance","type":"double","desc":"the maximum distance to scan"}],"desc":"Performs a ray trace that provides information on the targeted block.\n<p>\nThis takes the blocks' precise collision shapes into account. Fluids are\nignored.\n<p>\nThis may cause loading of chunks! Some implementations may impose\nartificial restrictions on the maximum distance.","ret":"information on the targeted block, or <code>null</code> if there\n    is no targeted block in range"},{"name":"rayTraceBlocks","params":[{"name":"maxDistance","type":"double","desc":"the maximum distance to scan"},{"name":"fluidCollisionMode","type":"FluidCollisionMode","desc":"the fluid collision mode"}],"desc":"Performs a ray trace that provides information on the targeted block.\n<p>\nThis takes the blocks' precise collision shapes into account.\n<p>\nThis may cause loading of chunks! Some implementations may impose\nartificial restrictions on the maximum distance.","ret":"information on the targeted block, or <code>null</code> if there\n    is no targeted block in range"},{"name":"getRemainingAir","params":[],"desc":"Returns the amount of air that the living entity has remaining, in\nticks.","ret":"amount of air remaining"},{"name":"setRemainingAir","params":[{"name":"ticks","type":"int","desc":"amount of air remaining"}],"desc":"Sets the amount of air that the living entity has remaining, in ticks.","ret":""},{"name":"getMaximumAir","params":[],"desc":"Returns the maximum amount of air the living entity can have, in ticks.","ret":"maximum amount of air"},{"name":"setMaximumAir","params":[{"name":"ticks","type":"int","desc":"maximum amount of air"}],"desc":"Sets the maximum amount of air the living entity can have, in ticks.","ret":""},{"name":"getArrowCooldown","params":[],"desc":"Gets the time in ticks until the next arrow leaves the entity's body.","ret":"ticks until arrow leaves"},{"name":"setArrowCooldown","params":[{"name":"ticks","type":"int","desc":"time until arrow leaves"}],"desc":"Sets the time in ticks until the next arrow leaves the entity's body.","ret":""},{"name":"getArrowsInBody","params":[],"desc":"Gets the amount of arrows in an entity's body.","ret":"amount of arrows in body"},{"name":"setArrowsInBody","params":[{"name":"count","type":"int","desc":"amount of arrows in entity's body"}],"desc":"Set the amount of arrows in the entity's body.\n<p>\nDoes not fire the {@link org.bukkit.event.entity.ArrowBodyCountChangeEvent}.","ret":""},{"name":"setNextArrowRemoval","params":[{"name":"ticks","type":"int","desc":"Amount of ticks"}],"desc":"Sets the amount of ticks before the next arrow gets removed from the entities body.\n<p>\nA value of 0 will cause the server to re-calculate the amount of ticks on the next tick.","ret":""},{"name":"getNextArrowRemoval","params":[],"desc":"Gets the amount of ticks before the next arrow gets removed from the entities body.","ret":"ticks Amount of ticks"},{"name":"getBeeStingerCooldown","params":[],"desc":"Gets the time in ticks until the next bee stinger leaves the entity's body.","ret":"ticks until bee stinger leaves"},{"name":"setBeeStingerCooldown","params":[{"name":"ticks","type":"int","desc":"time until bee stinger leaves"}],"desc":"Sets the time in ticks until the next stinger leaves the entity's body.","ret":""},{"name":"getBeeStingersInBody","params":[],"desc":"Gets the amount of bee stingers in an entity's body.","ret":"amount of bee stingers in body"},{"name":"setBeeStingersInBody","params":[{"name":"count","type":"int","desc":"amount of bee stingers in entity's body"}],"desc":"Set the amount of bee stingers in the entity's body.","ret":""},{"name":"setNextBeeStingerRemoval","params":[{"name":"ticks","type":"int","desc":"Amount of ticks"}],"desc":"Sets the amount of ticks before the next bee stinger gets removed from the entities body.\n<p>\nA value of 0 will cause the server to re-calculate the amount of ticks on the next tick.","ret":""},{"name":"getNextBeeStingerRemoval","params":[],"desc":"Gets the amount of ticks before the next bee stinger gets removed from the entities body.","ret":"ticks Amount of ticks"},{"name":"getMaximumNoDamageTicks","params":[],"desc":"Returns the living entity's current maximum no damage ticks.\n<p>\nThis is the maximum duration in which the living entity will not take\ndamage.","ret":"maximum no damage ticks"},{"name":"setMaximumNoDamageTicks","params":[{"name":"ticks","type":"int","desc":"maximum amount of no damage ticks"}],"desc":"Sets the living entity's current maximum no damage ticks.","ret":""},{"name":"getLastDamage","params":[],"desc":"Returns the living entity's last damage taken in the current no damage\nticks time.\n<p>\nOnly damage higher than this amount will further damage the living\nentity.","ret":"damage taken since the last no damage ticks time period"},{"name":"setLastDamage","params":[{"name":"damage","type":"double","desc":"amount of damage"}],"desc":"Sets the damage dealt within the current no damage ticks time period.","ret":""},{"name":"getNoDamageTicks","params":[],"desc":"Returns the living entity's current no damage ticks.","ret":"amount of no damage ticks"},{"name":"setNoDamageTicks","params":[{"name":"ticks","type":"int","desc":"amount of no damage ticks"}],"desc":"Sets the living entity's current no damage ticks.","ret":""},{"name":"getNoActionTicks","params":[],"desc":"Get the ticks that this entity has performed no action.\n<p>\nThe details of what \"no action ticks\" entails varies from entity to entity\nand cannot be specifically defined. Some examples include squid using this\nvalue to determine when to swim, raiders for when they are to be expelled\nfrom raids, or creatures (such as withers) as a requirement to be despawned.","ret":"amount of no action ticks"},{"name":"setNoActionTicks","params":[{"name":"ticks","type":"int","desc":"amount of no action ticks"}],"desc":"Set the ticks that this entity has performed no action.\n<p>\nThe details of what \"no action ticks\" entails varies from entity to entity\nand cannot be specifically defined. Some examples include squid using this\nvalue to determine when to swim, raiders for when they are to be expelled\nfrom raids, or creatures (such as withers) as a requirement to be despawned.","ret":""},{"name":"getKiller","params":[],"desc":"Gets the player identified as the killer of the living entity.\n<p>\nMay be null.","ret":"killer player, or null if none found"},{"name":"setKiller","params":[{"name":"killer","type":"Player","desc":"player"}],"desc":"Sets the player identified as the killer of the living entity.","ret":""},{"name":"addPotionEffect","params":[{"name":"effect","type":"PotionEffect","desc":"PotionEffect to be added"}],"desc":"Adds the given {@link PotionEffect} to the living entity.\n<p>\nNote: {@link PotionEffect#getHiddenPotionEffect()} is ignored when\nadding the effect to the entity.","ret":"whether the effect could be added"},{"name":"addPotionEffect","params":[{"name":"effect","type":"PotionEffect","desc":"PotionEffect to be added"},{"name":"force","type":"boolean","desc":"whether conflicting effects should be removed"}],"desc":"Adds the given {@link PotionEffect} to the living entity.\n<p>\nOnly one potion effect can be present for a given {@link\nPotionEffectType}.","ret":"whether the effect could be added"},{"name":"addPotionEffects","params":[{"name":"effects","type":"Collection<PotionEffect>","desc":"the effects to add"}],"desc":"Attempts to add all of the given {@link PotionEffect} to the living\nentity.\n<p>\nNote: {@link PotionEffect#getHiddenPotionEffect()} is ignored when\nadding the effect to the entity.","ret":"whether all of the effects could be added"},{"name":"hasPotionEffect","params":[{"name":"type","type":"PotionEffectType","desc":"the potion type to check"}],"desc":"Returns whether the living entity already has an existing effect of\nthe given {@link PotionEffectType} applied to it.","ret":"whether the living entity has this potion effect active on them"},{"name":"getPotionEffect","params":[{"name":"type","type":"PotionEffectType","desc":"the potion type to check"}],"desc":"Returns the active {@link PotionEffect} of the specified type.\n<p>\nIf the effect is not present on the entity then null will be returned.","ret":"the effect active on this entity, or null if not active."},{"name":"removePotionEffect","params":[{"name":"type","type":"PotionEffectType","desc":"the potion type to remove"}],"desc":"Removes any effects present of the given {@link PotionEffectType}.","ret":""},{"name":"getActivePotionEffects","params":[],"desc":"Returns all currently active {@link PotionEffect}s on the living\nentity.","ret":"a collection of {@link PotionEffect}s"},{"name":"clearActivePotionEffects","params":[],"desc":"Removes all active potion effects for this entity.","ret":"true if any were removed"},{"name":"hasLineOfSight","params":[{"name":"other","type":"Entity","desc":"the entity to determine line of sight to"}],"desc":"Checks whether the living entity has block line of sight to another.\n<p>\nThis uses the same algorithm that hostile mobs use to find the closest\nplayer.","ret":"true if there is a line of sight, false if not"},{"name":"hasLineOfSight","params":[{"name":"location","type":"Location","desc":"the location to determine line of sight to"}],"desc":"Checks whether the living entity has block line of sight to the given block.\n<p>\nThis uses the same algorithm that hostile mobs use to find the closest\nplayer.","ret":"true if there is a line of sight, false if not"},{"name":"getRemoveWhenFarAway","params":[],"desc":"Returns if the living entity despawns when away from players or not.\n<p>\nBy default, animals are not removed while other mobs are.","ret":"true if the living entity is removed when away from players"},{"name":"setRemoveWhenFarAway","params":[{"name":"remove","type":"boolean","desc":"the removal status"}],"desc":"Sets whether or not the living entity despawns when away from players\nor not.","ret":""},{"name":"getEquipment","params":[],"desc":"Gets the inventory with the equipment worn by the living entity.","ret":"the living entity's inventory"},{"name":"setCanPickupItems","params":[{"name":"pickup","type":"boolean","desc":"whether or not the living entity can pick up items"}],"desc":"Sets whether or not the living entity can pick up items.","ret":""},{"name":"getCanPickupItems","params":[],"desc":"Gets if the living entity can pick up items.","ret":"whether or not the living entity can pick up items"},{"name":"isLeashed","params":[],"desc":"Returns whether the entity is currently leashed.","ret":"whether the entity is leashed"},{"name":"getLeashHolder","params":[],"desc":"Gets the entity that is currently leading this entity.","ret":"the entity holding the leash"},{"name":"setLeashHolder","params":[{"name":"holder","type":"Entity","desc":"the entity to leash this entity to, or null to unleash"}],"desc":"Sets the leash on this entity to be held by the supplied entity.\n<p>\nThis method has no effect on EnderDragons, Withers, Players, or Bats.\nNon-living entities excluding leashes will not persist as leash\nholders.","ret":"whether the operation was successful"},{"name":"isGliding","params":[],"desc":"Checks to see if an entity is gliding, such as using an Elytra.","ret":"True if this entity is gliding."},{"name":"setGliding","params":[{"name":"gliding","type":"boolean","desc":"True if the entity is gliding."}],"desc":"Makes entity start or stop gliding. This will work even if an Elytra\nis not equipped, but will be reverted by the server immediately after\nunless an event-cancelling mechanism is put in place.","ret":""},{"name":"isSwimming","params":[],"desc":"Checks to see if an entity is swimming.","ret":"True if this entity is swimming."},{"name":"setSwimming","params":[{"name":"swimming","type":"boolean","desc":"True if the entity is swimming."}],"desc":"Makes entity start or stop swimming.\n\nThis may have unexpected results if the entity is not in water.","ret":""},{"name":"isRiptiding","params":[],"desc":"Checks to see if an entity is currently using the Riptide enchantment.","ret":"True if this entity is currently riptiding."},{"name":"isSleeping","params":[],"desc":"Returns whether this entity is slumbering.","ret":"slumber state"},{"name":"isClimbing","params":[],"desc":"Gets if the entity is climbing.","ret":"if the entity is climbing"},{"name":"setAI","params":[{"name":"ai","type":"boolean","desc":"whether the mob will have AI or not."}],"desc":"Sets whether an entity will have AI.\n\nThe entity will be completely unable to move if it has no AI.","ret":""},{"name":"hasAI","params":[],"desc":"Checks whether an entity has AI.\n\nThe entity will be completely unable to move if it has no AI.","ret":"true if the entity has AI, otherwise false."},{"name":"attack","params":[{"name":"target","type":"Entity","desc":"entity to attack."}],"desc":"Makes this entity attack the given entity with a melee attack.\n\nAttack damage is calculated by the server from the attributes and\nequipment of this mob, and knockback is applied to {@code target} as\nappropriate.","ret":""},{"name":"swingMainHand","params":[],"desc":"Makes this entity swing their main hand.\n\nThis method does nothing if this entity does not have an animation for\nswinging their main hand.","ret":""},{"name":"swingOffHand","params":[],"desc":"Makes this entity swing their off hand.\n\nThis method does nothing if this entity does not have an animation for\nswinging their off hand.","ret":""},{"name":"playHurtAnimation","params":[{"name":"yaw","type":"float","desc":"The direction the damage is coming from in relation to the\nentity, where 0 is in front of the player, 90 is to the right, 180 is\nbehind, and 270 is to the left"}],"desc":"Makes this entity flash red as if they were damaged.","ret":""},{"name":"setCollidable","params":[{"name":"collidable","type":"boolean","desc":"collision status"}],"desc":"Set if this entity will be subject to collisions with other entities.\n<p>\nExemptions to this rule can be managed with\n{@link #getCollidableExemptions()}\n<p>\nNote that the client may predict the collision between itself and another\nentity, resulting in this flag not working for player collisions. This\nmethod should therefore only be used to set the collision status of\nnon-player entities.\n<p>\nTo control player collisions, use {@link Team.Option#COLLISION_RULE} in\ncombination with a {@link Scoreboard} and a {@link Team}.","ret":""},{"name":"isCollidable","params":[],"desc":"Gets if this entity is subject to collisions with other entities.\n<p>\nSome entities might be exempted from the collidable rule of this entity.\nUse {@link #getCollidableExemptions()} to get these.\n<p>\nPlease note that this method returns only the custom collidable state,\nnot whether the entity is non-collidable for other reasons such as being\ndead.\n<p>\nNote that the client may predict the collision between itself and another\nentity, resulting in this flag not being accurate for player collisions.\nThis method should therefore only be used to check the collision status\nof non-player entities.\n<p>\nTo check the collision behavior for a player, use\n{@link Team.Option#COLLISION_RULE} in combination with a\n{@link Scoreboard} and a {@link Team}.","ret":"collision status"},{"name":"getCollidableExemptions","params":[],"desc":"Gets a mutable set of UUIDs of the entities which are exempt from the\nentity's collidable rule and which's collision with this entity will\nbehave the opposite of it.\n<p>\nThis set can be modified to add or remove exemptions.\n<p>\nFor example if collidable is true and an entity is in the exemptions set\nthen it will not collide with it. Similarly if collidable is false and an\nentity is in this set then it will still collide with it.\n<p>\nNote these exemptions are not (currently) persistent.\n<p>\nNote that the client may predict the collision between itself and another\nentity, resulting in those exemptions not being accurate for player\ncollisions. This method should therefore only be used to exempt\nnon-player entities.\n<p>\nTo exempt collisions for a player, use {@link Team.Option#COLLISION_RULE}\nin combination with a {@link Scoreboard} and a {@link Team}.","ret":"the collidable exemption set"},{"name":"getMemory","params":[{"name":"memoryKey","type":"MemoryKey<T>","desc":"memory to access"}],"desc":"Returns the value of the memory specified.\n<p>\nNote that the value is null when the specific entity does not have that\nvalue by default.","ret":"a instance of the memory section value or null if not present"},{"name":"setMemory","params":[{"name":"memoryKey","type":"MemoryKey<T>","desc":"the memory to access"},{"name":"memoryValue","type":"T","desc":"a typed memory value"}],"desc":"Sets the value of the memory specified.\n<p>\nNote that the value will not be persisted when the specific entity does\nnot have that value by default.","ret":""},{"name":"getHurtSound","params":[],"desc":"Get the {@link Sound} this entity will make when damaged.","ret":"the hurt sound, or null if the entity does not make any sound"},{"name":"getDeathSound","params":[],"desc":"Get the {@link Sound} this entity will make on death.","ret":"the death sound, or null if the entity does not make any sound"},{"name":"getFallDamageSound","params":[{"name":"fallHeight","type":"int","desc":"the fall height in blocks"}],"desc":"Get the {@link Sound} this entity will make when falling from the given\nheight (in blocks). The sound will often differ between either a small\nor a big fall damage sound if the height exceeds 4 blocks.","ret":"the fall damage sound"},{"name":"getFallDamageSoundSmall","params":[],"desc":"Get the {@link Sound} this entity will make when falling from a small\nheight.","ret":"the fall damage sound"},{"name":"getFallDamageSoundBig","params":[],"desc":"Get the {@link Sound} this entity will make when falling from a large\nheight.","ret":"the fall damage sound"},{"name":"getDrinkingSound","params":[{"name":"itemStack","type":"ItemStack","desc":"the item stack being drank"}],"desc":"Get the {@link Sound} this entity will make when drinking the given\n{@link ItemStack}.","ret":"the drinking sound"},{"name":"getEatingSound","params":[{"name":"itemStack","type":"ItemStack","desc":"the item stack being eaten"}],"desc":"Get the {@link Sound} this entity will make when eating the given\n{@link ItemStack}.","ret":"the eating sound"},{"name":"canBreatheUnderwater","params":[],"desc":"Returns true if this entity can breathe underwater and will not take\nsuffocation damage when its air supply reaches zero.","ret":"<code>true</code> if the entity can breathe underwater"},{"name":"getCategory","params":[],"desc":"Get the category to which this entity belongs.\n\nCategories may subject this entity to additional effects, benefits or\ndebuffs.","ret":"the entity category"},{"name":"setInvisible","params":[{"name":"invisible","type":"boolean","desc":"If the entity is invisible"}],"desc":"Sets whether the entity is invisible or not.","ret":""},{"name":"isInvisible","params":[],"desc":"Gets whether the entity is invisible or not.","ret":"Whether the entity is invisible"},{"name":"getArrowsStuck","params":[],"desc":"Get the number of arrows stuck in this entity","ret":"Number of arrows stuck"},{"name":"setArrowsStuck","params":[{"name":"arrows","type":"int","desc":"Number of arrows to stick in this entity"}],"desc":"Set the number of arrows stuck in this entity","ret":""},{"name":"getShieldBlockingDelay","params":[],"desc":"Get the delay (in ticks) before blocking is effective for this entity","ret":"Delay in ticks"},{"name":"setShieldBlockingDelay","params":[{"name":"delay","type":"int","desc":"Delay in ticks"}],"desc":"Set the delay (in ticks) before blocking is effective for this entity","ret":""},{"name":"getActiveItem","params":[],"desc":"Get's the item being actively \"used\" or consumed.","ret":"The item"},{"name":"clearActiveItem","params":[],"desc":"Interrupts any ongoing active \"usage\" or consumption or an item.","ret":""},{"name":"getSidewaysMovement","params":[],"desc":"Retrieves the sideways movement direction of the entity.\n<p>\nThe returned value ranges from -1 to 1, where:\n- Positive 1 represents movement to the left.\n- Negative 1 represents movement to the right.\n<p>\nPlease note that for entities of type {@link Player}, this value is updated only when riding another entity.\n<p>\nThis method specifically provides information about the entity's sideways movement, whereas {@link #getVelocity()} returns\na vector representing the entity's overall current momentum.","ret":"Sideways movement direction, ranging from -1 (right) to 1 (left)."},{"name":"getUpwardsMovement","params":[],"desc":"Retrieves the upwards movement direction of the entity.\n<p>\nThe returned value ranges from -1 to 1, where:\n- Positive 1 represents upward movement.\n- Negative 1 represents downward movement.\n<p>\nPlease note that for entities of type {@link Player}, this value is never updated.\n<p>\nThis method specifically provides information about the entity's vertical movement,\nwhereas {@link #getVelocity()} returns a vector representing the entity's overall\ncurrent momentum.","ret":"Upwards movement direction, ranging from -1 (downward) to 1 (upward)."},{"name":"getForwardsMovement","params":[],"desc":"Retrieves the forwards movement direction of the entity.\n<p>\nThe returned value ranges from -1 to 1, where:\n- Positive 1 represents movement forwards.\n- Negative 1 represents movement backwards.\n<p>\nPlease note that for entities of type {@link Player}, this value is updated only when riding another entity.\n<p>\nThis method specifically provides information about the entity's forward and backward movement,\nwhereas {@link #getVelocity()} returns a vector representing the entity's overall current momentum.","ret":"Forwards movement direction, ranging from -1 (backward) to 1 (forward)."},{"name":"getItemUseRemainingTime","params":[],"desc":"Get's remaining time a player needs to keep hands raised with an item to finish using it.","ret":"Remaining ticks to use the item"},{"name":"getHandRaisedTime","params":[],"desc":"Get how long the players hands have been raised (Charging Bow attack, using a potion, etc)","ret":"Get how long the players hands have been raised (Charging Bow attack, using a potion, etc)"},{"name":"isHandRaised","params":[],"desc":"Whether or not this entity is using or charging an attack (Bow pulled back, drinking potion, eating food)","ret":"Whether or not this entity is using or charging an attack (Bow pulled back, drinking potion, eating food)"},{"name":"getHandRaised","params":[],"desc":"Gets the hand raised by this living entity. Will be either\n{@link org.bukkit.inventory.EquipmentSlot#HAND} or\n{@link org.bukkit.inventory.EquipmentSlot#OFF_HAND}.","ret":"the hand raised"},{"name":"isJumping","params":[],"desc":"Get entity jump state.\n<p>\nJump state will be true when the entity has been marked to jump.","ret":"entity jump state."},{"name":"setJumping","params":[{"name":"jumping","type":"boolean","desc":"entity jump state"}],"desc":"Set entity jump state\n<p>\nSetting to true will mark the entity to jump.\n<p>\nSetting to false will unmark the entity to jump but will not stop a jump already in-progress.","ret":""},{"name":"playPickupItemAnimation","params":[{"name":"item","type":"Item","desc":"item to pickup"}],"desc":"Plays pickup item animation towards this entity.\n<p>\n<b>This will remove the item on the client.</b>\n<p>\nQuantity is inferred to be that of the {@link Item}.","ret":""},{"name":"playPickupItemAnimation","params":[{"name":"item","type":"Item","desc":"item to pickup"},{"name":"quantity","type":"int","desc":"quantity of item"}],"desc":"Plays pickup item animation towards this entity.\n<p>\n<b>This will remove the item on the client.</b>","ret":""},{"name":"getHurtDirection","params":[],"desc":"Gets player hurt direction","ret":"hurt direction"},{"name":"setHurtDirection","params":[{"name":"hurtDirection","type":"float","desc":"hurt direction"}],"desc":"Sets player hurt direction","ret":""},{"name":"swingHand","params":[{"name":"hand","type":"org.bukkit.inventory.EquipmentSlot","desc":"hand to be swung, either {@link org.bukkit.inventory.EquipmentSlot#HAND} or {@link org.bukkit.inventory.EquipmentSlot#OFF_HAND}"}],"desc":"Makes this entity swing their hand.\n\n<p>This method does nothing if this entity does not\nhave an animation for swinging their hand.","ret":""},{"name":"knockback","params":[{"name":"strength","type":"double","desc":"The strength of the knockback. Must be greater than 0."},{"name":"directionX","type":"double","desc":"The relative x position of the knockback source direction"},{"name":"directionZ","type":"double","desc":"The relative z position of the knockback source direction"}],"desc":"Knocks back this entity from a specific direction with a specified strength. Mechanics such\nas knockback resistance will be factored in.\n\nThe direction specified in this method will be the direction of the source of the knockback,\nso the entity will be pushed in the opposite direction.","ret":""},{"name":"broadcastSlotBreak","params":[{"name":"slot","type":"org.bukkit.inventory.EquipmentSlot","desc":"the slot"}],"desc":"Notifies all clients tracking this entity that the item in\nthe slot of this entity broke.\n<p>\nNOTE: this does not mutate any entity state","ret":""},{"name":"broadcastSlotBreak","params":[{"name":"slot","type":"org.bukkit.inventory.EquipmentSlot","desc":"the slot"},{"name":"players","type":"Collection<Player>","desc":"the players to notify"}],"desc":"Notifies specified players that the item in the slot\nof this entity broke.\n<p>\nNOTE: this does not mutate any entity state","ret":""},{"name":"damageItemStack","params":[{"name":"stack","type":"ItemStack","desc":"the itemstack to damage"},{"name":"amount","type":"int","desc":"the amount of damage to do"}],"desc":"Damages the itemstack in this slot by the specified amount.\n<p>\nThis runs all logic associated with damaging an itemstack like\ngamemode and enchantment checks, events, stat changes, and advancement\ntriggers.","ret":"the damaged itemstack, or an empty stack if it broke. There are no\nguarantees the returned itemstack is the same instance"},{"name":"damageItemStack","params":[{"name":"slot","type":"org.bukkit.inventory.EquipmentSlot","desc":"the slot of the stack to damage"},{"name":"amount","type":"int","desc":"the amount of damage to do"}],"desc":"Damages the itemstack in this slot by the specified amount.\n<p>\nThis runs all logic associated with damaging an itemstack like\ngamemode and enchantment checks, events, stat changes, advancement\ntriggers, and notifying clients to play break animations.","ret":""},{"name":"getBodyYaw","params":[],"desc":"Gets entity body yaw","ret":"entity body yaw"},{"name":"setBodyYaw","params":[{"name":"bodyYaw","type":"float","desc":"new entity body yaw"}],"desc":"Sets entity body yaw","ret":""}],"desc":"Represents a living entity, such as a monster or player"},{"FQCN":"org.bukkit.entity.Trident","methods":[{"name":"hasGlint","params":[],"desc":"Returns whether the trident has an enchanted glow.\nThis can be separate from the underlying item having any enchantments.","ret":"whether the trident has an enchanted glow"},{"name":"setGlint","params":[{"name":"glint","type":"boolean","desc":"whether the trident should have an enchanted glow"}],"desc":"Sets whether the trident has an enchanted glow.\nThis is separate from the underlying item having any enchantments.","ret":""},{"name":"getLoyaltyLevel","params":[],"desc":"Returns the loyalty level of the trident.\nThis can be separate from the underlying item's enchantments.","ret":"loyalty level of the trident"},{"name":"setLoyaltyLevel","params":[{"name":"loyaltyLevel","type":"int","desc":"loyalty level"}],"desc":"Sets the loyalty level of the trident.\nThis is separate from the underlying item's enchantments.","ret":""},{"name":"hasDealtDamage","params":[],"desc":"Gets if this trident has dealt damage to an\nentity yet or has hit the floor.\n\nIf neither of these events have occurred yet, this will\nreturn false.","ret":"has dealt damage"},{"name":"setHasDealtDamage","params":[{"name":"hasDealtDamage","type":"boolean","desc":"has dealt damage or hit the floor"}],"desc":"Sets if this trident has dealt damage to an entity\nyet or has hit the floor.","ret":""},{"name":"setDamage","params":[{"name":"damage","type":"double","desc":"new damage amount"}],"desc":"Sets the base amount of damage this trident will do.","ret":""},{"name":"getDamage","params":[],"desc":"Gets the base amount of damage this trident will do.\n\nDefaults to 8.0 for a normal trident with\n<code>0.5 * (1 + power level)</code> added for trident fired from\ndamage enchanted bows.","ret":"base damage amount"}],"desc":""},{"FQCN":"org.bukkit.entity.Zoglin","methods":[{"name":"isBaby","params":[],"desc":"Gets whether the zoglin is a baby","ret":"Whether the zoglin is a baby"},{"name":"setBaby","params":[{"name":"flag","type":"boolean","desc":"Whether the zoglin is a baby"}],"desc":"Sets whether the zoglin is a baby","ret":""}],"desc":"Represents a Zoglin."},{"FQCN":"org.bukkit.entity.Creature","methods":[],"desc":"Represents a Creature. Creatures are non-intelligent monsters or animals\nwhich have very simple abilities."},{"FQCN":"org.bukkit.entity.SizedFireball","methods":[{"name":"getDisplayItem","params":[],"desc":"Gets the display {@link ItemStack}.","ret":"display ItemStack"},{"name":"setDisplayItem","params":[{"name":"item","type":"ItemStack","desc":"the ItemStack to display"}],"desc":"Sets the display {@link ItemStack} for the fireball.","ret":""}],"desc":"Represents a sized fireball."},{"FQCN":"org.bukkit.entity.Giant","methods":[],"desc":"Represents a Giant."},{"FQCN":"org.bukkit.entity.SkeletonHorse","methods":[{"name":"isTrapped","params":[],"desc":"Returns whether this skeleton horse is trapped.\n<p>\nWhen a horse is trapped and a player comes within 10 blocks of a trapped\nhorse, lightning will strike the horse. When struck, the skeleton trap\nwill activate, turning the horse into a skeleton horseman as well as\nspawning three additional horsemen nearby.","ret":"true if trapped"},{"name":"setTrapped","params":[{"name":"trapped","type":"boolean","desc":"new trapped state"}],"desc":"Sets if this skeleton horse is trapped.","ret":""},{"name":"getTrapTime","params":[],"desc":"Returns the horse's current trap time in ticks.\n\nTrap time is incremented every tick when {@link #isTrapped()} is true.\nThe horse automatically despawns when it reaches 18000 ticks.","ret":"current trap time"},{"name":"setTrapTime","params":[{"name":"trapTime","type":"int","desc":"new trap time"}],"desc":"Sets the trap time for the horse.\n\nValues greater than 18000 will cause the horse to despawn on the next\ntick.","ret":""},{"name":"isTrap","params":[],"desc":"","ret":""},{"name":"setTrap","params":[{"name":"trap","type":"boolean","desc":""}],"desc":"","ret":""}],"desc":"Represents a SkeletonHorse - variant of {@link AbstractHorse}."},{"FQCN":"org.bukkit.entity.TraderLlama","methods":[],"desc":"Represents a trader Llama."},{"FQCN":"org.bukkit.entity.FallingBlock","methods":[{"name":"getMaterial","params":[],"desc":"Get the Material of the falling block","ret":"Material of the block"},{"name":"getBlockData","params":[],"desc":"Get the data for the falling block","ret":"data of the block"},{"name":"setBlockData","params":[{"name":"blockData","type":"BlockData","desc":"the data to use as the block"}],"desc":"Sets the data for the falling block.\n<br>\nAny potential additional data currently stored in the falling blocks {@link #getBlockState()} will be\npurged by calling this setter.","ret":""},{"name":"getBlockState","params":[],"desc":"Get the data of the falling block represented as a {@link org.bukkit.block.BlockState BlockState}\nwhich includes potential NBT data that gets applied when the block gets placed on landing.","ret":"the BlockState representing this block"},{"name":"setBlockState","params":[{"name":"blockState","type":"org.bukkit.block.BlockState","desc":"the BlockState to use"}],"desc":"Sets the {@link BlockData} and possibly present tile entity data for the falling block.","ret":""},{"name":"getDropItem","params":[],"desc":"Get if the falling block will break into an item if it cannot be placed.\n<p>\nNote that if {@link #getCancelDrop()} is {@code true}, the falling block\nwill not drop an item regardless of whether or not the returned value is\n{@code true}.","ret":"true if the block will break into an item when obstructed"},{"name":"setDropItem","params":[{"name":"drop","type":"boolean","desc":"true to break into an item when obstructed"}],"desc":"Set if the falling block will break into an item if it cannot be placed.\n<p>\nNote that if {@link #getCancelDrop()} is {@code true}, the falling block\nwill not drop an item regardless of whether or not the value is set to\n{@code true}.","ret":""},{"name":"getCancelDrop","params":[],"desc":"Get if the falling block will not become a block upon landing and not drop\nan item.\n<p>\nUnlike {@link #getDropItem()}, this property will prevent the block from\nforming into a block when it lands, causing it to disappear. If this property\nis true and {@link #getDropItem()} is true, an item will <strong>NOT</strong>\nbe dropped.","ret":"true if the block will disappear"},{"name":"setCancelDrop","params":[{"name":"cancelDrop","type":"boolean","desc":"true to make the block disappear when landing"}],"desc":"Get if the falling block will not become a block upon landing and not drop\nan item.\n<p>\nUnlike {@link #setDropItem(boolean)}, this property will prevent the block\nfrom forming into a block when it lands, causing it to disappear. If this\nproperty is true and {@link #getDropItem()} is true, an item will\n<strong>NOT</strong> be dropped.","ret":""},{"name":"canHurtEntities","params":[],"desc":"Get the HurtEntities state of this block.","ret":"whether entities will be damaged by this block."},{"name":"setHurtEntities","params":[{"name":"hurtEntities","type":"boolean","desc":"whether entities will be damaged by this block."}],"desc":"Set the HurtEntities state of this block.","ret":""},{"name":"getDamagePerBlock","params":[],"desc":"Get the amount of damage inflicted upon entities multiplied by the distance\nthat the block had fallen when this falling block lands on them.","ret":"the damage per block"},{"name":"setDamagePerBlock","params":[{"name":"damage","type":"float","desc":"the damage per block to set. Must be >= 0.0"}],"desc":"Set the amount of damage inflicted upon entities multiplied by the distance\nthat the block had fallen when this falling block lands on them.\n<p>\nIf {@code damage} is non-zero, this method will automatically call\n{@link #setHurtEntities(boolean) setHurtEntities(true)}.","ret":""},{"name":"getMaxDamage","params":[],"desc":"Get the maximum amount of damage that can be inflicted upon entities when\nthis falling block lands on them.","ret":"the max damage"},{"name":"setMaxDamage","params":[{"name":"damage","type":"int","desc":"the max damage to set. Must be >= 0"}],"desc":"Set the maximum amount of damage that can be inflicted upon entities when\nthis falling block lands on them.\n<p>\nIf {@code damage} is non-zero, this method will automatically call\n{@link #setHurtEntities(boolean) setHurtEntities(true)}.","ret":""},{"name":"getSourceLoc","params":[],"desc":"Gets the source block location of the FallingBlock","ret":"the source block location the FallingBlock was spawned from"},{"name":"doesAutoExpire","params":[],"desc":"Sets if this falling block should expire after:\n- 30 seconds\n- 5 seconds and is outside of the world","ret":"if this behavior occurs"},{"name":"shouldAutoExpire","params":[{"name":"autoExpires","type":"boolean","desc":"if this behavior should occur"}],"desc":"Sets if this falling block should expire after:\n- 30 seconds\n- 5 seconds and is outside of the world","ret":""}],"desc":"Represents a falling block"},{"FQCN":"org.bukkit.entity.ZombieHorse","methods":[],"desc":"Represents a ZombieHorse - variant of {@link AbstractHorse}."},{"FQCN":"org.bukkit.entity.Ageable","methods":[{"name":"getAge","params":[],"desc":"Gets the age of this mob.","ret":"Age"},{"name":"setAge","params":[{"name":"age","type":"int","desc":"New age"}],"desc":"Sets the age of this mob.","ret":""},{"name":"setAgeLock","params":[{"name":"lock","type":"boolean","desc":"new lock"}],"desc":"Lock the age of the animal, setting this will prevent the animal from\nmaturing or getting ready for mating.","ret":""},{"name":"getAgeLock","params":[],"desc":"Gets the current agelock.","ret":"the current agelock"},{"name":"setBaby","params":[],"desc":"Sets the age of the mob to a baby","ret":""},{"name":"setAdult","params":[],"desc":"Sets the age of the mob to an adult","ret":""},{"name":"isAdult","params":[],"desc":"Returns true if the mob is an adult.","ret":"return true if the mob is an adult"},{"name":"canBreed","params":[],"desc":"Return the ability to breed of the animal.","ret":"the ability to breed of the animal"},{"name":"setBreed","params":[{"name":"breed","type":"boolean","desc":"breedability of the animal"}],"desc":"Set breedability of the animal, if the animal is a baby and set to\nbreed it will instantly grow up.","ret":""}],"desc":"Represents an entity that can age."},{"FQCN":"org.bukkit.entity.Hanging","methods":[{"name":"setFacingDirection","params":[{"name":"face","type":"BlockFace","desc":"The new direction."},{"name":"force","type":"boolean","desc":"Whether to force it."}],"desc":"Sets the direction of the hanging entity, potentially overriding rules\nof placement. Note that if the result is not valid the object would\nnormally drop as an item.","ret":"False if force was false and there was no block for it to\n    attach to in order to face the given direction."}],"desc":"Represents a Hanging entity"},{"FQCN":"org.bukkit.entity.Zombie","methods":[{"name":"isBaby","params":[],"desc":"Gets whether the zombie is a baby","ret":"Whether the zombie is a baby"},{"name":"setBaby","params":[{"name":"flag","type":"boolean","desc":"Whether the zombie is a baby"}],"desc":"Sets whether the zombie is a baby","ret":""},{"name":"isVillager","params":[],"desc":"Gets whether the zombie is a villager","ret":"Whether the zombie is a villager"},{"name":"setVillager","params":[{"name":"flag","type":"boolean","desc":"flag"}],"desc":"","ret":""},{"name":"setVillagerProfession","params":[{"name":"profession","type":"Villager.Profession","desc":"profession"}],"desc":"","ret":""},{"name":"getVillagerProfession","params":[],"desc":"","ret":"profession"},{"name":"isConverting","params":[],"desc":"Get if this entity is in the process of converting to a Drowned as a\nresult of being underwater.","ret":"conversion status"},{"name":"getConversionTime","params":[],"desc":"Gets the amount of ticks until this entity will be converted to a Drowned\nas a result of being underwater.\n\nWhen this reaches 0, the entity will be converted.","ret":"conversion time"},{"name":"setConversionTime","params":[{"name":"time","type":"int","desc":"new conversion time"}],"desc":"Sets the amount of ticks until this entity will be converted to a Drowned\nas a result of being underwater.\n\nWhen this reaches 0, the entity will be converted. A value of less than 0\nwill stop the current conversion process without converting the current\nentity.","ret":""},{"name":"canBreakDoors","params":[],"desc":"Gets whether this zombie can break doors","ret":"Whether this zombie can break doors"},{"name":"setCanBreakDoors","params":[{"name":"flag","type":"boolean","desc":"Whether this zombie can break doors"}],"desc":"Sets whether this zombie can break doors\n<p>\nCheck {@link #supportsBreakingDoors()} to see\nif this zombie type will even be affected by using\nthis method. Will also stop the action if\nthe entity is currently breaking a door.","ret":""},{"name":"isDrowning","params":[],"desc":"Check if zombie is drowning","ret":"True if zombie conversion process has begun"},{"name":"startDrowning","params":[{"name":"drownedConversionTime","type":"int","desc":"Amount of time until zombie converts from drowning"}],"desc":"Make zombie start drowning","ret":""},{"name":"stopDrowning","params":[],"desc":"Stop a zombie from starting the drowning conversion process","ret":""},{"name":"setArmsRaised","params":[{"name":"raised","type":"boolean","desc":"True to raise arms"}],"desc":"Set if zombie has its arms raised","ret":""},{"name":"isArmsRaised","params":[],"desc":"Check if zombie has arms raised","ret":"True if arms are raised"},{"name":"shouldBurnInDay","params":[],"desc":"Check if this zombie will burn in the sunlight","ret":"True if zombie will burn in sunlight"},{"name":"setShouldBurnInDay","params":[{"name":"shouldBurnInDay","type":"boolean","desc":"True to burn in sunlight"}],"desc":"Set if this zombie should burn in the sunlight","ret":""},{"name":"supportsBreakingDoors","params":[],"desc":"Checks if this zombie type supports breaking doors.\n{@link Drowned} do not have support for breaking doors\nso using {@link #setCanBreakDoors(boolean)} on them has\nno effect.","ret":"true if entity supports breaking doors"}],"desc":"Represents a Zombie."},{"FQCN":"org.bukkit.entity.AbstractSkeleton","methods":[{"name":"getSkeletonType","params":[],"desc":"Gets the current type of this skeleton.","ret":"Current type"},{"name":"setSkeletonType","params":[{"name":"type","type":"Skeleton.SkeletonType","desc":"type"}],"desc":"","ret":""},{"name":"shouldBurnInDay","params":[],"desc":"Check if this skeleton will burn in the sunlight. This\ndoes not take into account an entity's natural fire\nimmunity.","ret":"True if skeleton will burn in sunlight"},{"name":"setShouldBurnInDay","params":[{"name":"shouldBurnInDay","type":"boolean","desc":"True to burn in sunlight"}],"desc":"Set if this skeleton should burn in the sunlight. This\nwill not override an entity's natural fire\nimmunity.","ret":""}],"desc":"This interface defines or represents the abstract concept of skeleton-like\nentities on the server. The interface is hence not a direct representation\nof an entity but rather serves as a parent to interfaces/entity types like\n{@link Skeleton}, {@link WitherSkeleton} or {@link Stray}.\n\nTo compute what specific type of skeleton is present in a variable/field\nof this type, instanceOf checks against the specific subtypes listed prior\nare recommended."},{"FQCN":"org.bukkit.entity.Blaze","methods":[],"desc":"Represents a Blaze monster"},{"FQCN":"org.bukkit.entity.PigZombie","methods":[{"name":"getAnger","params":[],"desc":"Get the pig zombie's current anger level.","ret":"The anger level."},{"name":"setAnger","params":[{"name":"level","type":"int","desc":"The anger level. Higher levels of anger take longer to\n    wear off."}],"desc":"Set the pig zombie's current anger level.","ret":""},{"name":"setAngry","params":[{"name":"angry","type":"boolean","desc":"Whether the zombie should be angry."}],"desc":"Shorthand; sets to either 0 or the default level.","ret":""},{"name":"isAngry","params":[],"desc":"Shorthand; gets whether the zombie is angry.","ret":"True if the zombie is angry, otherwise false."},{"name":"isConverting","params":[],"desc":"<b>Not applicable to this entity</b>","ret":"false"},{"name":"getConversionTime","params":[],"desc":"<b>Not applicable to this entity</b>","ret":""},{"name":"setConversionTime","params":[{"name":"time","type":"int","desc":"unused"}],"desc":"<b>Not applicable to this entity</b>","ret":""}],"desc":"Represents a Pig Zombie."},{"FQCN":"org.bukkit.entity.Bat","methods":[{"name":"isAwake","params":[],"desc":"Checks the current waking state of this bat.\n<p>\nThis does not imply any persistence of state past the method call.","ret":"true if the bat is awake or false if it is currently hanging\n    from a block"},{"name":"setAwake","params":[{"name":"state","type":"boolean","desc":"the new state"}],"desc":"This method modifies the current waking state of this bat.\n<p>\nThis does not prevent a bat from spontaneously awaking itself, or from\nreattaching itself to a block.","ret":""},{"name":"getTargetLocation","params":[],"desc":"Gets the location that this bat is currently trying to move towards.","ret":"target location, or null if it's going to find a new location"},{"name":"setTargetLocation","params":[{"name":"location","type":"org.bukkit.Location","desc":"location to move towards (world is ignored, will always use the entity's world)"}],"desc":"Sets the location that this bat is currently trying to move towards.\n<p>\nThis can be set to null to cause the bat to recalculate its target location","ret":""}],"desc":"Represents a Bat"},{"FQCN":"org.bukkit.entity.WindCharge","methods":[{"name":"explode","params":[],"desc":"Immediately explode this WindCharge.","ret":""}],"desc":"Represents a Wind Charge."},{"FQCN":"org.bukkit.entity.ThrowableProjectile","methods":[{"name":"getItem","params":[],"desc":"Gets the ItemStack the thrown projectile will display.","ret":"The thrown item display ItemStack"},{"name":"setItem","params":[{"name":"item","type":"ItemStack","desc":"ItemStack set to be displayed"}],"desc":"Sets the display ItemStack for the thrown projectile.","ret":""}],"desc":""},{"FQCN":"org.bukkit.entity.Steerable","methods":[{"name":"hasSaddle","params":[],"desc":"Check if the pig has a saddle.","ret":"if the pig has been saddled."},{"name":"setSaddle","params":[{"name":"saddled","type":"boolean","desc":"set if the pig has a saddle or not."}],"desc":"Sets if the pig has a saddle or not","ret":""},{"name":"getBoostTicks","params":[],"desc":"Get the time in ticks this entity's movement is being increased.\n\nMovement speed is often increased as a result of using the\n{@link #getSteerMaterial()}.","ret":"the current boost ticks"},{"name":"setBoostTicks","params":[{"name":"ticks","type":"int","desc":"the boost time"}],"desc":"Set the time in ticks this entity's movement will be increased.\n\nThis will reset the current boost ticks to 0\n({@link #getCurrentBoostTicks()}).","ret":""},{"name":"getCurrentBoostTicks","params":[],"desc":"Get the time in ticks this entity's movement has been increased as of the\nmost recent boost.\n\nCurrent boost ticks will never be {@literal >} {@link #getBoostTicks()}.","ret":"the current boost ticks"},{"name":"setCurrentBoostTicks","params":[{"name":"ticks","type":"int","desc":"the current boost ticks. Must be {@literal >=} 0 and {@literal <=}\n{@link #getBoostTicks()}"}],"desc":"Set the time in ticks this entity's movement has been increased relative\nto the most recent boost.","ret":""},{"name":"getSteerMaterial","params":[],"desc":"Get the material used to steer this entity when ridden by a player.","ret":"the lure material"}],"desc":"Represents an entity which may be saddled, ridden and steered using an item."},{"FQCN":"org.bukkit.entity.Guardian","methods":[{"name":"setLaser","params":[{"name":"activated","type":"boolean","desc":"whether the laser is active"}],"desc":"Sets whether the guardian laser should show or not.\n\nA target must be present. If no target is present the laser will not show\nand the method will return false.","ret":"true if the laser was activated otherwise false"},{"name":"hasLaser","params":[],"desc":"Gets whether the guardian laser is active or not.","ret":"true if the laser is active otherwise false"},{"name":"getLaserDuration","params":[],"desc":"Get the duration (in ticks) that a laser attack takes.","ret":"the laser duration in ticks"},{"name":"setLaserTicks","params":[{"name":"ticks","type":"int","desc":"the ticks to set. Must be at least -10"}],"desc":"Set the amount of ticks that have elapsed since this guardian has initiated\na laser attack. If set to {@link #getLaserDuration()} or greater, the guardian\nwill inflict damage upon its target and the laser attack will complete.\n<p>\nFor this value to have any effect, the guardian must have an active target\n(see {@link #setTarget(LivingEntity)}) and be charging a laser attack (where\n{@link #hasLaser()} is true). The client may display a different animation of\nthe guardian laser than the set ticks.","ret":""},{"name":"getLaserTicks","params":[],"desc":"Get the amount of ticks that have elapsed since this guardian has initiated\na laser attack.\n<p>\nThis value may or may not be significant depending on whether or not the guardian\nhas an active target ({@link #getTarget()}) and is charging a laser attack\n({@link #hasLaser()}). This value is not reset after a successful attack nor used\nin the next and will be reset to the minimum value when the guardian initiates a\nnew one.","ret":"the laser ticks ranging from -10 to {@link #getLaserDuration()}"},{"name":"isElder","params":[],"desc":"Check if the Guardian is an elder Guardian","ret":"true if the Guardian is an Elder Guardian, false if not"},{"name":"setElder","params":[{"name":"shouldBeElder","type":"boolean","desc":"shouldBeElder"}],"desc":"","ret":""},{"name":"isMoving","params":[],"desc":"Check whether or not this guardian is moving.\n<p>\nWhile moving, the guardian's spikes are retracted and will not inflict thorns\ndamage upon entities that attack it. Additionally, a moving guardian cannot\nattack another entity. If stationary (i.e. this method returns {@code false}),\nthorns damage is guaranteed and the guardian may initiate laser attacks.","ret":"true if moving, false if stationary"}],"desc":""},{"FQCN":"org.bukkit.entity.memory.MemoryKey","methods":[{"name":"getMemoryClass","params":[],"desc":"Gets the class of values associated with this memory.","ret":"the class of value objects"},{"name":"getByKey","params":[{"name":"namespacedKey","type":"NamespacedKey","desc":"the {@link NamespacedKey} referencing a\n{@link MemoryKey}"}],"desc":"Returns a {@link MemoryKey} by a {@link NamespacedKey}.","ret":"the {@link MemoryKey} or null when no {@link MemoryKey} is\navailable under that key"},{"name":"values","params":[],"desc":"Returns the set of all MemoryKeys.","ret":"the memoryKeys"}],"desc":"Represents a key used for accessing memory values of a\n{@link org.bukkit.entity.LivingEntity}."},{"FQCN":"org.bukkit.entity.Snowman","methods":[{"name":"isDerp","params":[],"desc":"Gets whether this snowman is in \"derp mode\", meaning it is not wearing a\npumpkin.","ret":"True if the snowman is bald, false if it is wearing a pumpkin"},{"name":"setDerp","params":[{"name":"derpMode","type":"boolean","desc":"True to remove the pumpkin, false to add a pumpkin"}],"desc":"Sets whether this snowman is in \"derp mode\", meaning it is not wearing a\npumpkin. NOTE: This value is not persisted to disk and will therefore\nreset when the chunk is reloaded.","ret":""}],"desc":"Represents a snowman entity"},{"FQCN":"org.bukkit.entity.EntitySnapshot","methods":[{"name":"createEntity","params":[{"name":"world","type":"World","desc":"the world to create the entity in"}],"desc":"Creates an entity using this template. Does not spawn the copy in the world.\n<br>","ret":"a copy of this entity."},{"name":"createEntity","params":[{"name":"to","type":"Location","desc":"the location to copy to"}],"desc":"Creates an entity using this template and spawns it at the provided location.","ret":"the new entity."},{"name":"getEntityType","params":[],"desc":"Gets the type of entity this template holds.","ret":"the type"}],"desc":"Represents an immutable copy of an entity's state. Can be used at any time to\ncreate an instance of the stored entity."},{"FQCN":"org.bukkit.entity.Squid","methods":[],"desc":"Represents a Squid."},{"FQCN":"org.bukkit.entity.Silverfish","methods":[],"desc":"Represents a Silverfish."},{"FQCN":"org.bukkit.entity.Parrot","methods":[{"name":"getVariant","params":[],"desc":"Get the variant of this parrot.","ret":"parrot variant"},{"name":"setVariant","params":[{"name":"variant","type":"Variant","desc":"parrot variant"}],"desc":"Set the variant of this parrot.","ret":""},{"name":"isDancing","params":[],"desc":"Gets whether a parrot is dancing","ret":"Whether the parrot is dancing"}],"desc":"Represents a Parrot."},{"FQCN":"org.bukkit.entity.Sittable","methods":[{"name":"isSitting","params":[],"desc":"Checks if this animal is sitting","ret":"true if sitting"},{"name":"setSitting","params":[{"name":"sitting","type":"boolean","desc":"true if sitting"}],"desc":"Sets if this animal is sitting. Will remove any path that the animal\nwas following beforehand.","ret":""}],"desc":"An animal that can sit still."},{"FQCN":"org.bukkit.entity.Strider","methods":[{"name":"isShivering","params":[],"desc":"Check whether or not this strider is out of warm blocks and shivering.","ret":"true if shivering, false otherwise"},{"name":"setShivering","params":[{"name":"shivering","type":"boolean","desc":"its new shivering state"}],"desc":"Set whether or not this strider is shivering.\n\nNote that the shivering state is updated frequently on the server,\ntherefore this method may not affect the entity for long enough to have a\nnoticeable difference.","ret":""}],"desc":"Represents a Strider."},{"FQCN":"org.bukkit.entity.SplashPotion","methods":[],"desc":"Represents a thrown splash potion bottle"},{"FQCN":"org.bukkit.entity.Enemy","methods":[],"desc":"Represents an Enemy"},{"FQCN":"org.bukkit.entity.Spider","methods":[],"desc":"Represents a Spider."},{"FQCN":"org.bukkit.entity.ThrownExpBottle","methods":[],"desc":"Represents a thrown Experience bottle."},{"FQCN":"org.bukkit.entity.Turtle","methods":[{"name":"hasEgg","params":[],"desc":"Gets whether the turtle has an egg","ret":"Whether the turtle has an egg"},{"name":"isLayingEgg","params":[],"desc":"Gets whether the turtle is laying an egg","ret":"Whether the turtle is laying an egg"},{"name":"getHome","params":[],"desc":"Get the turtle's home location","ret":"Home location"},{"name":"setHome","params":[{"name":"location","type":"Location","desc":"Home location"}],"desc":"Set the turtle's home location","ret":""},{"name":"isGoingHome","params":[],"desc":"Check if turtle is currently pathfinding to it's home","ret":"True if going home"},{"name":"isDigging","params":[],"desc":"Get if turtle is digging to lay eggs","ret":"True if digging"},{"name":"setHasEgg","params":[{"name":"hasEgg","type":"boolean","desc":"True if carrying egg"}],"desc":"Set if turtle is carrying egg","ret":""}],"desc":"Represents a turtle."},{"FQCN":"org.bukkit.entity.NPC","methods":[],"desc":"Represents a non-player character"},{"FQCN":"org.bukkit.entity.PufferFish","methods":[{"name":"getPuffState","params":[],"desc":"Returns the current puff state of this fish (i.e. how inflated it is).","ret":"current puff state"},{"name":"setPuffState","params":[{"name":"state","type":"int","desc":"new puff state"}],"desc":"Sets the current puff state of this fish (i.e. how inflated it is).","ret":""}],"desc":"Represents a puffer fish."},{"FQCN":"org.bukkit.entity.Phantom","methods":[{"name":"getSize","params":[],"desc":"","ret":"The size of the phantom"},{"name":"setSize","params":[{"name":"sz","type":"int","desc":"The new size of the phantom."}],"desc":"","ret":""},{"name":"getSpawningEntity","params":[],"desc":"Get the UUID of the entity that caused this phantom to spawn","ret":"UUID"},{"name":"shouldBurnInDay","params":[],"desc":"Check if this phantom will burn in the sunlight","ret":"True if phantom will burn in sunlight"},{"name":"setShouldBurnInDay","params":[{"name":"shouldBurnInDay","type":"boolean","desc":"True to burn in sunlight"}],"desc":"Set if this phantom should burn in the sunlight","ret":""},{"name":"getAnchorLocation","params":[],"desc":"Gets the location that this phantom circles around when not attacking a player\nThis will be changed after attacking a player.","ret":"circling location"},{"name":"setAnchorLocation","params":[{"name":"location","type":"org.bukkit.Location","desc":"circling location (world is ignored, will always use the entity's world)"}],"desc":"Sets the location that this phantom circles around when not attacking a player","ret":""}],"desc":"Represents a phantom."},{"FQCN":"org.bukkit.entity.Tameable","methods":[{"name":"isTamed","params":[],"desc":"Check if this is tamed\n<p>\nIf something is tamed then a player can not tame it through normal\nmethods, even if it does not belong to anyone in particular.","ret":"true if this has been tamed"},{"name":"setTamed","params":[{"name":"tame","type":"boolean","desc":"true if tame"}],"desc":"Sets if this has been tamed. Not necessary if the method setOwner has\nbeen used, as it tames automatically.\n<p>\nIf something is tamed then a player can not tame it through normal\nmethods, even if it does not belong to anyone in particular.","ret":""},{"name":"getOwnerUniqueId","params":[],"desc":"Gets the owners UUID","ret":"the owners UUID, or null if not owned"},{"name":"getOwner","params":[],"desc":"Gets the current owning AnimalTamer","ret":"the owning AnimalTamer, or null if not owned"},{"name":"setOwner","params":[{"name":"tamer","type":"AnimalTamer","desc":"the AnimalTamer who should own this"}],"desc":"Set this to be owned by given AnimalTamer.\n<p>\nIf the owner is not null, this will be tamed and will have any current\npath it is following removed. If the owner is set to null, this will be\nuntamed, and the current owner removed.","ret":""}],"desc":""},{"FQCN":"org.bukkit.entity.WaterMob","methods":[],"desc":"Represents a Water Mob"},{"FQCN":"org.bukkit.entity.DragonFireball","methods":[],"desc":""},{"FQCN":"org.bukkit.entity.ArmorStand","methods":[{"name":"getItemInHand","params":[],"desc":"Returns the item the armor stand is currently holding.","ret":"the held item"},{"name":"setItemInHand","params":[{"name":"item","type":"ItemStack","desc":"the item to hold"}],"desc":"Sets the item the armor stand is currently holding.","ret":""},{"name":"getBoots","params":[],"desc":"Returns the item currently being worn by the armor stand on its feet.","ret":"the worn item"},{"name":"setBoots","params":[{"name":"item","type":"ItemStack","desc":"the item to wear"}],"desc":"Sets the item currently being worn by the armor stand on its feet.","ret":""},{"name":"getLeggings","params":[],"desc":"Returns the item currently being worn by the armor stand on its legs.","ret":"the worn item"},{"name":"setLeggings","params":[{"name":"item","type":"ItemStack","desc":"the item to wear"}],"desc":"Sets the item currently being worn by the armor stand on its legs.","ret":""},{"name":"getChestplate","params":[],"desc":"Returns the item currently being worn by the armor stand on its chest.","ret":"the worn item"},{"name":"setChestplate","params":[{"name":"item","type":"ItemStack","desc":"the item to wear"}],"desc":"Sets the item currently being worn by the armor stand on its chest.","ret":""},{"name":"getHelmet","params":[],"desc":"Returns the item currently being worn by the armor stand on its head.","ret":"the worn item"},{"name":"setHelmet","params":[{"name":"item","type":"ItemStack","desc":"the item to wear"}],"desc":"Sets the item currently being worn by the armor stand on its head.","ret":""},{"name":"getBodyPose","params":[],"desc":"Returns the armor stand's body's current pose as a\n{@link org.bukkit.util.EulerAngle}.","ret":"the current pose"},{"name":"setBodyPose","params":[{"name":"pose","type":"EulerAngle","desc":"the current pose"}],"desc":"Sets the armor stand's body's current pose as a\n{@link org.bukkit.util.EulerAngle}.","ret":""},{"name":"getLeftArmPose","params":[],"desc":"Returns the armor stand's left arm's current pose as a\n{@link org.bukkit.util.EulerAngle}.","ret":"the current pose"},{"name":"setLeftArmPose","params":[{"name":"pose","type":"EulerAngle","desc":"the current pose"}],"desc":"Sets the armor stand's left arm's current pose as a\n{@link org.bukkit.util.EulerAngle}.","ret":""},{"name":"getRightArmPose","params":[],"desc":"Returns the armor stand's right arm's current pose as a\n{@link org.bukkit.util.EulerAngle}.","ret":"the current pose"},{"name":"setRightArmPose","params":[{"name":"pose","type":"EulerAngle","desc":"the current pose"}],"desc":"Sets the armor stand's right arm's current pose as a\n{@link org.bukkit.util.EulerAngle}.","ret":""},{"name":"getLeftLegPose","params":[],"desc":"Returns the armor stand's left leg's current pose as a\n{@link org.bukkit.util.EulerAngle}.","ret":"the current pose"},{"name":"setLeftLegPose","params":[{"name":"pose","type":"EulerAngle","desc":"the current pose"}],"desc":"Sets the armor stand's left leg's current pose as a\n{@link org.bukkit.util.EulerAngle}.","ret":""},{"name":"getRightLegPose","params":[],"desc":"Returns the armor stand's right leg's current pose as a\n{@link org.bukkit.util.EulerAngle}.","ret":"the current pose"},{"name":"setRightLegPose","params":[{"name":"pose","type":"EulerAngle","desc":"the current pose"}],"desc":"Sets the armor stand's right leg's current pose as a\n{@link org.bukkit.util.EulerAngle}.","ret":""},{"name":"getHeadPose","params":[],"desc":"Returns the armor stand's head's current pose as a\n{@link org.bukkit.util.EulerAngle}.","ret":"the current pose"},{"name":"setHeadPose","params":[{"name":"pose","type":"EulerAngle","desc":"the current pose"}],"desc":"Sets the armor stand's head's current pose as a\n{@link org.bukkit.util.EulerAngle}.","ret":""},{"name":"hasBasePlate","params":[],"desc":"Returns whether the armor stand has a base plate.","ret":"whether it has a base plate"},{"name":"setBasePlate","params":[{"name":"basePlate","type":"boolean","desc":"whether is has a base plate"}],"desc":"Sets whether the armor stand has a base plate.","ret":""},{"name":"isVisible","params":[],"desc":"Returns whether the armor stand should be visible or not.","ret":"whether the stand is visible or not"},{"name":"setVisible","params":[{"name":"visible","type":"boolean","desc":"whether the stand is visible or not"}],"desc":"Sets whether the armor stand should be visible or not.","ret":""},{"name":"hasArms","params":[],"desc":"Returns whether this armor stand has arms.","ret":"whether this has arms or not"},{"name":"setArms","params":[{"name":"arms","type":"boolean","desc":"whether this has arms or not"}],"desc":"Sets whether this armor stand has arms.","ret":""},{"name":"isSmall","params":[],"desc":"Returns whether this armor stand is scaled down.","ret":"whether this is scaled down"},{"name":"setSmall","params":[{"name":"small","type":"boolean","desc":"whether this is scaled down"}],"desc":"Sets whether this armor stand is scaled down.","ret":""},{"name":"isMarker","params":[],"desc":"Returns whether this armor stand is a marker, meaning it has a very small\ncollision box.","ret":"whether this is a marker"},{"name":"setMarker","params":[{"name":"marker","type":"boolean","desc":"whether this is a marker"}],"desc":"Sets whether this armor stand is a marker, meaning it has a very small\ncollision box.","ret":""},{"name":"addEquipmentLock","params":[{"name":"slot","type":"EquipmentSlot","desc":"the equipment slot to lock"},{"name":"lockType","type":"LockType","desc":"the LockType to lock the equipment slot with"}],"desc":"Locks the equipment slot with the specified\n{@link LockType locking mechanism}.","ret":""},{"name":"removeEquipmentLock","params":[{"name":"slot","type":"EquipmentSlot","desc":"the equipment slot to change"},{"name":"lockType","type":"LockType","desc":"the LockType to remove"}],"desc":"Remove a {@link LockType locking mechanism}.","ret":""},{"name":"hasEquipmentLock","params":[{"name":"slot","type":"EquipmentSlot","desc":"the EquipmentSlot to test"},{"name":"lockType","type":"LockType","desc":"the LockType to test"}],"desc":"Returns if the ArmorStand has the specified\n{@link LockType locking mechanism}.","ret":"if the ArmorStand has been locked with the parameters specified"},{"name":"canMove","params":[],"desc":"Tests if this armor stand can move.\n\n<p>The default value is {@code true}.</p>","ret":"{@code true} if this armour stand can move, {@code false} otherwise"},{"name":"setCanMove","params":[{"name":"move","type":"boolean","desc":"{@code true} if this armour stand can move, {@code false} otherwise"}],"desc":"Sets if this armor stand can move.","ret":""},{"name":"canTick","params":[],"desc":"Tests if this armor stand can tick.\n\n<p>The default value is defined in {@code paper.yml}.</p>","ret":"{@code true} if this armour stand can tick, {@code false} otherwise"},{"name":"setCanTick","params":[{"name":"tick","type":"boolean","desc":"{@code true} if this armour stand can tick, {@code false} otherwise"}],"desc":"Sets if this armor stand can tick.","ret":""},{"name":"getItem","params":[{"name":"slot","type":"org.bukkit.inventory.EquipmentSlot","desc":"the equipment slot to get"}],"desc":"Returns the item the armor stand has\nequip in the given equipment slot","ret":"the ItemStack in the equipment slot"},{"name":"setItem","params":[{"name":"slot","type":"org.bukkit.inventory.EquipmentSlot","desc":"the equipment slot to set"},{"name":"item","type":"ItemStack","desc":"the item to hold"}],"desc":"Sets the item the armor stand has\nequip in the given equipment slot","ret":""},{"name":"getDisabledSlots","params":[],"desc":"Get the list of disabled slots","ret":"list of disabled slots"},{"name":"setDisabledSlots","params":[{"name":"slots","type":"org.bukkit.inventory.EquipmentSlot","desc":"var-arg array of slots to lock"}],"desc":"Set the disabled slots\n\nThis makes it so a player is unable to interact with the Armor Stand to place, remove, or replace an item in the given slot(s)\nNote: Once a slot is disabled, the only way to get an item back it to break the armor stand.","ret":""},{"name":"addDisabledSlots","params":[{"name":"slots","type":"org.bukkit.inventory.EquipmentSlot","desc":"var-arg array of slots to lock"}],"desc":"Disable specific slots, adding them\nto the currently disabled slots\n\nThis makes it so a player is unable to interact with the Armor Stand to place, remove, or replace an item in the given slot(s)\nNote: Once a slot is disabled, the only way to get an item back it to break the armor stand.","ret":""},{"name":"removeDisabledSlots","params":[{"name":"slots","type":"org.bukkit.inventory.EquipmentSlot","desc":"var-arg array of slots to unlock"}],"desc":"Remove the given slots from the disabled\nslots list, enabling them.\n\nThis makes it so a player is able to interact with the Armor Stand to place, remove, or replace an item in the given slot(s)","ret":""},{"name":"isSlotDisabled","params":[{"name":"slot","type":"org.bukkit.inventory.EquipmentSlot","desc":"The slot to check"}],"desc":"Check if a specific slot is disabled","ret":"{@code true} if the slot is disabled, else {@code false}."},{"name":"getBodyRotations","params":[],"desc":"Returns the ArmorStand's body rotations as\n{@link io.papermc.paper.math.Rotations}.","ret":"the current rotations"},{"name":"setBodyRotations","params":[{"name":"rotations","type":"io.papermc.paper.math.Rotations","desc":"the current rotations"}],"desc":"Sets the ArmorStand's body rotations as\n{@link io.papermc.paper.math.Rotations}.","ret":""},{"name":"getLeftArmRotations","params":[],"desc":"Returns the ArmorStand's left arm rotations as\n{@link io.papermc.paper.math.Rotations}.","ret":"the current rotations"},{"name":"setLeftArmRotations","params":[{"name":"rotations","type":"io.papermc.paper.math.Rotations","desc":"the current rotations"}],"desc":"Sets the ArmorStand's left arm rotations as\n{@link io.papermc.paper.math.Rotations}.","ret":""},{"name":"getRightArmRotations","params":[],"desc":"Returns the ArmorStand's right arm rotations as\n{@link io.papermc.paper.math.Rotations}.","ret":"the current rotations"},{"name":"setRightArmRotations","params":[{"name":"rotations","type":"io.papermc.paper.math.Rotations","desc":"the current rotations"}],"desc":"Sets the ArmorStand's right arm rotations as\n{@link io.papermc.paper.math.Rotations}.","ret":""},{"name":"getLeftLegRotations","params":[],"desc":"Returns the ArmorStand's left leg rotations as\n{@link io.papermc.paper.math.Rotations}.","ret":"the current rotations"},{"name":"setLeftLegRotations","params":[{"name":"rotations","type":"io.papermc.paper.math.Rotations","desc":"the current rotations"}],"desc":"Sets the ArmorStand's left leg rotations as\n{@link io.papermc.paper.math.Rotations}.","ret":""},{"name":"getRightLegRotations","params":[],"desc":"Returns the ArmorStand's right leg rotations as\n{@link io.papermc.paper.math.Rotations}.","ret":"the current rotations"},{"name":"setRightLegRotations","params":[{"name":"rotations","type":"io.papermc.paper.math.Rotations","desc":"the current rotations"}],"desc":"Sets the ArmorStand's right leg rotations as\n{@link io.papermc.paper.math.Rotations}.","ret":""},{"name":"getHeadRotations","params":[],"desc":"Returns the ArmorStand's head rotations as\n{@link io.papermc.paper.math.Rotations}.","ret":"the current rotations"},{"name":"setHeadRotations","params":[{"name":"rotations","type":"io.papermc.paper.math.Rotations","desc":"the current rotations"}],"desc":"Sets the ArmorStand's head rotations as\n{@link io.papermc.paper.math.Rotations}.","ret":""}],"desc":""},{"FQCN":"org.bukkit.entity.IronGolem","methods":[{"name":"isPlayerCreated","params":[],"desc":"Gets whether this iron golem was built by a player.","ret":"Whether this iron golem was built by a player"},{"name":"setPlayerCreated","params":[{"name":"playerCreated","type":"boolean","desc":"true if you want to set the iron golem as being\n    player created, false if you want it to be a natural village golem."}],"desc":"Sets whether this iron golem was built by a player or not.","ret":""}],"desc":"An iron Golem that protects Villages."},{"FQCN":"org.bukkit.entity.Skeleton","methods":[{"name":"isConverting","params":[],"desc":"Computes whether or not this skeleton is currently in the process of\nconverting to a {@link Stray} due to it being frozen by powdered snow.","ret":"whether or not the skeleton is converting to a stray."},{"name":"getConversionTime","params":[],"desc":"Gets the amount of ticks until this entity will be converted to a stray\nas a result of being frozen by a powdered snow block.\n<p>\nWhen this reaches 0, the entity will be converted.","ret":"the conversion time left represented in ticks."},{"name":"setConversionTime","params":[{"name":"time","type":"int","desc":"the new conversion time left before the conversion in ticks."}],"desc":"Sets the amount of ticks until this entity will be converted to a stray\nas a result of being frozen by a powdered snow block.\n<p>\nWhen this reaches 0, the entity will be converted. A value of less than 0\nwill stop the current conversion process without converting the current\nentity.","ret":""},{"name":"inPowderedSnowTime","params":[],"desc":"Gets the time the skeleton\nhas been inside powdered snow.","ret":"time in ticks"}],"desc":"Represents a Skeleton.\n<p>\nThis interface only represents the normal skeleton type on the server.\nOther skeleton-like entities, such as the {@link WitherSkeleton} or the\n{@link Stray} are not related to this type."},{"FQCN":"org.bukkit.entity.Stray","methods":[],"desc":"Represents a Stray - variant of {@link AbstractSkeleton}."},{"FQCN":"org.bukkit.entity.Camel","methods":[{"name":"isDashing","params":[],"desc":"Gets whether this camel is dashing (sprinting).","ret":"dashing status"},{"name":"setDashing","params":[{"name":"dashing","type":"boolean","desc":"new dashing status"}],"desc":"Sets whether this camel is dashing (sprinting).","ret":""}],"desc":"Represents a Camel."},{"FQCN":"org.bukkit.entity.ShulkerBullet","methods":[{"name":"getTarget","params":[],"desc":"Retrieve the target of this bullet.","ret":"the targeted entity"},{"name":"setTarget","params":[{"name":"target","type":"Entity","desc":"the entity to target"}],"desc":"Sets the target of this bullet","ret":""},{"name":"getTargetDelta","params":[],"desc":"Gets the relative offset that this shulker bullet should move towards,\nnote that this will change each tick as the skulker bullet approaches the target.","ret":"target delta offset"},{"name":"setTargetDelta","params":[{"name":"vector","type":"org.bukkit.util.Vector","desc":"target"}],"desc":"Sets the relative offset that this shulker bullet should move towards,\nnote that this will change each tick as the skulker bullet approaches the target.\nThis is usually relative towards their target.","ret":""},{"name":"getCurrentMovementDirection","params":[],"desc":"Gets the current movement direction.\nThis is used to determine the next movement direction to ensure\nthat the bullet does not move in the same direction.","ret":"null or their current direction"},{"name":"setCurrentMovementDirection","params":[{"name":"movementDirection","type":"org.bukkit.block.BlockFace","desc":"null or a direction"}],"desc":"Set the current movement direction.\nThis is used to determine the next movement direction to ensure\nthat the bullet does not move in the same direction.\n\nSet to null to simply pick a random direction.","ret":""},{"name":"getFlightSteps","params":[],"desc":"Gets how many ticks this shulker bullet\nwill attempt to move in its current direction.","ret":"number of steps"},{"name":"setFlightSteps","params":[{"name":"steps","type":"int","desc":"number of steps"}],"desc":"Sets how many ticks this shulker bullet\nwill attempt to move in its current direction.","ret":""}],"desc":""},{"FQCN":"org.bukkit.entity.ItemFrame","methods":[{"name":"getItem","params":[],"desc":"Get the item in this frame","ret":"a defensive copy the item in this item frame"},{"name":"setItem","params":[{"name":"item","type":"ItemStack","desc":"the new item"}],"desc":"Set the item in this frame","ret":""},{"name":"setItem","params":[{"name":"item","type":"ItemStack","desc":"the new item"},{"name":"playSound","type":"boolean","desc":"whether or not to play the item placement sound"}],"desc":"Set the item in this frame","ret":""},{"name":"getItemDropChance","params":[],"desc":"Gets the chance of the item being dropped upon this frame's destruction.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of 1.0F will always drop\n</ul>","ret":"chance of the off hand item being dropped"},{"name":"setItemDropChance","params":[{"name":"chance","type":"float","desc":"the chance of off hand item being dropped"}],"desc":"Sets the chance of the off hand item being dropped upon this frame's\ndestruction.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of 1.0F will always drop\n</ul>","ret":""},{"name":"getRotation","params":[],"desc":"Get the rotation of the frame's item","ret":"the direction"},{"name":"setRotation","params":[{"name":"rotation","type":"Rotation","desc":"the new rotation"}],"desc":"Set the rotation of the frame's item","ret":""},{"name":"isVisible","params":[],"desc":"Returns whether the item frame is visible or not.","ret":"whether the item frame is visible or not"},{"name":"setVisible","params":[{"name":"visible","type":"boolean","desc":"whether the item frame is visible or not"}],"desc":"Sets whether the item frame should be visible or not.","ret":""},{"name":"isFixed","params":[],"desc":"Returns whether the item frame is \"fixed\" or not.\n\nWhen true it's not possible to destroy/move the frame (e.g. by damage,\ninteraction, pistons, or missing supporting blocks), rotate the item or\nplace/remove items.","ret":"whether the item frame is fixed or not"},{"name":"setFixed","params":[{"name":"fixed","type":"boolean","desc":"whether the item frame is fixed or not"}],"desc":"Sets whether the item frame should be fixed or not.\n\nWhen set to true it's not possible to destroy/move the frame (e.g. by\ndamage, interaction, pistons, or missing supporting blocks), rotate the\nitem or place/remove items.","ret":""}],"desc":"Represents an Item Frame"},{"FQCN":"org.bukkit.entity.Warden","methods":[{"name":"getAnger","params":[],"desc":"Gets the anger level of this warden.\n\nAnger is an integer from 0 to 150. Once a Warden reaches 80 anger at a\ntarget it will actively pursue it.","ret":"anger level"},{"name":"getAnger","params":[{"name":"entity","type":"Entity","desc":"target entity"}],"desc":"Gets the anger level of this warden.\n\nAnger is an integer from 0 to 150. Once a Warden reaches 80 anger at a\ntarget it will actively pursue it.","ret":"anger level"},{"name":"getHighestAnger","params":[],"desc":"Gets the highest anger level of this warden.\n<p>\nAnger is an integer from 0 to 150. Once a Warden reaches 80 anger at a\ntarget it will actively pursue it.","ret":"highest anger level"},{"name":"increaseAnger","params":[{"name":"entity","type":"Entity","desc":"target entity"},{"name":"increase","type":"int","desc":"number to increase by"}],"desc":"Increases the anger level of this warden.\n\nAnger is an integer from 0 to 150. Once a Warden reaches 80 anger at a\ntarget it will actively pursue it.","ret":""},{"name":"setAnger","params":[{"name":"entity","type":"Entity","desc":"target entity"},{"name":"anger","type":"int","desc":"new anger level"}],"desc":"Sets the anger level of this warden.\n\nAnger is an integer from 0 to 150. Once a Warden reaches 80 anger at a\ntarget it will actively pursue it.","ret":""},{"name":"clearAnger","params":[{"name":"entity","type":"Entity","desc":"target entity"}],"desc":"Clears the anger level of this warden.","ret":""},{"name":"getEntityAngryAt","params":[],"desc":"Gets the {@link LivingEntity} at which this warden is most angry.","ret":"The target {@link LivingEntity} or null"},{"name":"setDisturbanceLocation","params":[{"name":"location","type":"Location","desc":"location of the disturbance"}],"desc":"Make the warden sense a disturbance in the force at the location given.","ret":""},{"name":"getAngerLevel","params":[],"desc":"Get the level of anger of this warden.","ret":"The level of anger"}],"desc":"A Warden."},{"FQCN":"org.bukkit.entity.LightningStrike","methods":[{"name":"isEffect","params":[],"desc":"Returns whether the strike is an effect that does no damage.","ret":"whether the strike is an effect"},{"name":"getFlashes","params":[],"desc":"Get the amount of flashes that will occur before the lightning is\nremoved. By default this value is between 1 and 3.","ret":"the flashes"},{"name":"setFlashes","params":[{"name":"flashes","type":"int","desc":"the flashes"}],"desc":"Set the amount of flashes that will occur before the lightning is\nremoved. One flash will occur after this lightning strike's life\nhas reduced below 0.","ret":""},{"name":"getLifeTicks","params":[],"desc":"Get the amount of ticks this lightning strike will inflict damage\nupon its hit entities.\n<p>\nWhen life ticks are negative, there is a random chance that another\nflash will be initiated and life ticks reset to 1.","ret":"the life ticks"},{"name":"setLifeTicks","params":[{"name":"ticks","type":"int","desc":"the life ticks"}],"desc":"Get the amount of ticks this lightning strike will inflict damage\nupon its hit entities.\n<p>\nWhen life ticks are negative, there is a random chance that another\nflash will be initiated and life ticks reset to 1. Additionally, if\nlife ticks are set to 2 (the default value when a lightning strike\nhas been spawned), a list of events will occur:\n<ul>\n  <li>Impact sound effects will be played\n  <li>Fire will be spawned (dependent on difficulty)\n  <li>Lightning rods will be powered (if hit)\n  <li>Copper will be stripped (if hit)\n  <li>{@link GameEvent#LIGHTNING_STRIKE} will be dispatched\n</ul>","ret":""},{"name":"getCausingPlayer","params":[],"desc":"Get the {@link Player} that caused this lightning to strike. This\nwill occur naturally if a trident enchanted with\n{@link Enchantment#CHANNELING Channeling} were thrown at an entity\nduring a storm.","ret":"the player"},{"name":"setCausingPlayer","params":[{"name":"player","type":"Player","desc":"the player"}],"desc":"Set the {@link Player} that caused this lightning to strike.","ret":""},{"name":"spigot","params":[],"desc":"","ret":""},{"name":"getFlashCount","params":[],"desc":"Returns the amount of flash iterations that will be done before the lightning dies.","ret":"amount of flashes that will be shown before the lightning dies"},{"name":"setFlashCount","params":[{"name":"flashes","type":"int","desc":"amount of iterations that will be done before the lightning dies, must to be a positive number"}],"desc":"Sets the amount of life iterations that will be done before the lightning dies.\nDefault number of flashes on creation is between 1-3.","ret":""},{"name":"getCausingEntity","params":[],"desc":"Returns the potential entity that caused this lightning strike to spawn in the world.\n<p>\nAs of implementing this method, only {@link Player}s are capable of causing a lightning strike, however as this\nmight change in future minecraft releases, this method does not guarantee a player as the cause of a lightning.\nConsumers of this method should hence validate whether or not the entity is a player if they want to use player\nspecific methods through an {@code instanceOf} check.\n</p>\n<p>\nA player is, as of implementing this method, responsible for a lightning, and will hence be returned here as\na cause, if they channeled a {@link Trident} to summon it or were explicitly defined as the cause of this\nlightning through {@link #setCausingPlayer(Player)}.\n</p>","ret":"the entity that caused this lightning or null if the lightning was not caused by a entity (e.g. normal\nweather)"}],"desc":"Represents an instance of a lightning strike. May or may not do damage."},{"FQCN":"org.bukkit.entity.Flying","methods":[],"desc":"Represents a Flying Entity."},{"FQCN":"org.bukkit.entity.Explosive","methods":[{"name":"setYield","params":[{"name":"yield","type":"float","desc":"The explosive yield"}],"desc":"Set the radius affected by this explosive's explosion","ret":""},{"name":"getYield","params":[],"desc":"Return the radius or yield of this explosive's explosion","ret":"the radius of blocks affected"},{"name":"setIsIncendiary","params":[{"name":"isIncendiary","type":"boolean","desc":"Whether it should cause fire"}],"desc":"Set whether or not this explosive's explosion causes fire","ret":""},{"name":"isIncendiary","params":[],"desc":"Return whether or not this explosive creates a fire when exploding","ret":"true if the explosive creates fire, false otherwise"}],"desc":"A representation of an explosive entity"},{"FQCN":"org.bukkit.entity.Breedable","methods":[{"name":"setAgeLock","params":[{"name":"lock","type":"boolean","desc":"new lock"}],"desc":"Lock the age of the animal, setting this will prevent the animal from\nmaturing or getting ready for mating.","ret":""},{"name":"getAgeLock","params":[],"desc":"Gets the current agelock.","ret":"the current agelock"},{"name":"canBreed","params":[],"desc":"Return the ability to breed of the animal.","ret":"the ability to breed of the animal"},{"name":"setBreed","params":[{"name":"breed","type":"boolean","desc":"breedability of the animal"}],"desc":"Set breedability of the animal, if the animal is a baby and set to\nbreed it will instantly grow up.","ret":""}],"desc":"Represents an entity that can age and breed."},{"FQCN":"org.bukkit.entity.EnderCrystal","methods":[{"name":"isShowingBottom","params":[],"desc":"Return whether or not this end crystal is showing the\nbedrock slate underneath it.","ret":"true if the bottom is being shown"},{"name":"setShowingBottom","params":[{"name":"showing","type":"boolean","desc":"whether the bedrock slate should be shown"}],"desc":"Sets whether or not this end crystal is showing the\nbedrock slate underneath it.","ret":""},{"name":"getBeamTarget","params":[],"desc":"Gets the location that this end crystal is pointing its beam to.","ret":"the location that the beam is pointed to, or null if the beam is not shown"},{"name":"setBeamTarget","params":[{"name":"location","type":"Location","desc":"the location to point the beam to"}],"desc":"Sets the location that this end crystal is pointing to. Passing a null\nvalue will remove the current beam.","ret":""}],"desc":"A crystal that heals nearby EnderDragons"},{"FQCN":"org.bukkit.entity.Animals","methods":[{"name":"getBreedCause","params":[],"desc":"Get the UUID of the entity that caused this entity to enter the\n{@link #canBreed()} state.","ret":"uuid if set, or null"},{"name":"setBreedCause","params":[{"name":"uuid","type":"UUID","desc":"new uuid, or null"}],"desc":"Set the UUID of the entity that caused this entity to enter the\n{@link #canBreed()} state.","ret":""},{"name":"isLoveMode","params":[],"desc":"Get whether or not this entity is in love mode and will produce\noffspring with another entity in love mode. Will return true if\nand only if {@link #getLoveModeTicks()} is greater than 0.","ret":"true if in love mode, false otherwise"},{"name":"getLoveModeTicks","params":[],"desc":"Get the amount of ticks remaining for this entity in love mode.\nIf the entity is not in love mode, 0 will be returned.","ret":"the remaining love mode ticks"},{"name":"setLoveModeTicks","params":[{"name":"ticks","type":"int","desc":"the love mode ticks. Must be positive"}],"desc":"Set the amount of ticks for which this entity should be in love mode.\nSetting the love mode ticks to 600 is the equivalent of a player\nfeeding the entity their breeding item of choice.","ret":""},{"name":"isBreedItem","params":[{"name":"stack","type":"ItemStack","desc":"ItemStack to check."}],"desc":"Check if the provided ItemStack is the correct item used for breeding\nthis entity.","ret":"if the provided ItemStack is the correct food item for this\nentity."},{"name":"isBreedItem","params":[{"name":"material","type":"Material","desc":"Material to check."}],"desc":"Check if the provided ItemStack is the correct item used for breeding\nthis entity..","ret":"if the provided ItemStack is the correct food item for this\nentity."}],"desc":"Represents an Animal."},{"FQCN":"org.bukkit.entity.CaveSpider","methods":[],"desc":"Represents a Spider."},{"FQCN":"org.bukkit.entity.Snowball","methods":[],"desc":"Represents a snowball."},{"FQCN":"org.bukkit.entity.Witch","methods":[{"name":"isDrinkingPotion","params":[],"desc":"Gets whether the witch is drinking a potion","ret":"whether the witch is drinking a potion"},{"name":"getPotionUseTimeLeft","params":[],"desc":"Get time remaining (in ticks) the Witch is drinking a potion","ret":"Time remaining (in ticks)"},{"name":"setPotionUseTimeLeft","params":[{"name":"ticks","type":"int","desc":"Time in ticks remaining"}],"desc":"Set time remaining (in ticks) that the Witch is drinking a potion.\n<p>\nThis only has an effect while the Witch is drinking a potion.","ret":""},{"name":"getDrinkingPotion","params":[],"desc":"Get the potion the Witch is drinking","ret":"The potion the witch is drinking"},{"name":"setDrinkingPotion","params":[{"name":"potion","type":"ItemStack","desc":"Potion to drink"}],"desc":"Set the potion the Witch should drink","ret":""}],"desc":"Represents a Witch"},{"FQCN":"org.bukkit.entity.Painting","methods":[{"name":"getArt","params":[],"desc":"Get the art on this painting","ret":"The art"},{"name":"setArt","params":[{"name":"art","type":"Art","desc":"The new art"}],"desc":"Set the art on this painting","ret":"False if the new art won't fit at the painting's current\n    location"},{"name":"setArt","params":[{"name":"art","type":"Art","desc":"The new art"},{"name":"force","type":"boolean","desc":"If true, force the new art regardless of whether it fits\n    at the current location. Note that forcing it where it can't fit\n    normally causes it to drop as an item unless you override this by\n    catching the {@link HangingBreakEvent}."}],"desc":"Set the art on this painting","ret":"False if force was false and the new art won't fit at the\n    painting's current location"}],"desc":"Represents a Painting."},{"FQCN":"org.bukkit.entity.EnderPearl","methods":[],"desc":"Represents a thrown Ender Pearl entity"},{"FQCN":"org.bukkit.entity.EntityType","methods":[{"name":"getName","params":[],"desc":"Gets the entity type name.","ret":"the entity type's name"},{"name":"getTypeId","params":[],"desc":"Gets the entity type id.","ret":"the raw type id"},{"name":"fromName","params":[{"name":"name","type":"String","desc":"the entity type's name"}],"desc":"Gets an entity type from its name.","ret":"the matching entity type or null"},{"name":"fromId","params":[{"name":"id","type":"int","desc":"the raw type id"}],"desc":"Gets an entity from its id.","ret":"the matching entity type or null"},{"name":"isSpawnable","params":[],"desc":"Some entities cannot be spawned using {@link\nWorld#spawnEntity(Location, EntityType)} or {@link\nWorld#spawn(Location, Class)}, usually because they require additional\ninformation in order to spawn.","ret":"False if the entity type cannot be spawned"},{"name":"translationKey","params":[],"desc":"","ret":""},{"name":"hasDefaultAttributes","params":[],"desc":"Checks if the entity has default attributes.","ret":"true if it has default attributes"},{"name":"getDefaultAttributes","params":[],"desc":"Gets the default attributes for the entity.","ret":"an unmodifiable instance of Attributable for reading default attributes."},{"name":"isEnabledByFeature","params":[{"name":"world","type":"World","desc":"the world to check"}],"desc":"Gets if this EntityType is enabled by feature in a world.","ret":"true if this EntityType can be used to spawn an Entity for this World."}],"desc":""},{"FQCN":"org.bukkit.entity.Ambient","methods":[],"desc":"Represents an ambient mob"},{"FQCN":"org.bukkit.entity.TNTPrimed","methods":[{"name":"setFuseTicks","params":[{"name":"fuseTicks","type":"int","desc":"The fuse ticks"}],"desc":"Set the number of ticks until the TNT blows up after being primed.","ret":""},{"name":"getFuseTicks","params":[],"desc":"Retrieve the number of ticks until the explosion of this TNTPrimed\nentity","ret":"the number of ticks until this TNTPrimed explodes"},{"name":"getSource","params":[],"desc":"Gets the source of this primed TNT. The source is the entity\nresponsible for the creation of this primed TNT. (I.E. player ignites\nTNT with flint and steel.) Take note that this can be null if there is\nno suitable source. (created by the {@link\norg.bukkit.World#spawn(Location, Class)} method, for example.)\n<p>\nThe source will become null if the chunk this primed TNT is in is\nunloaded then reloaded. The source entity may be invalid if for example\nit has since died or been unloaded. Callers should check\n{@link Entity#isValid()}.","ret":"the source of this primed TNT"},{"name":"setSource","params":[{"name":"source","type":"Entity","desc":"the source of this primed TNT"}],"desc":"Sets the source of this primed TNT.\n\nThe source is the entity responsible for the creation of this primed TNT.\n<p>\nMust be instance of {@link org.bukkit.entity.LivingEntity} otherwise will\nbe set to null. The parameter is typed {@link\norg.bukkit.entity.Entity} to be consistent with {@link\norg.bukkit.entity.TNTPrimed#getSource()} method.","ret":""},{"name":"getSourceLoc","params":[],"desc":"Gets the source block location of the TNTPrimed","ret":"the source block location the TNTPrimed was spawned from"},{"name":"setBlockData","params":[{"name":"data","type":"org.bukkit.block.data.BlockData","desc":"the visual block data"}],"desc":"Sets the visual block data of this\nprimed tnt.\n<br>\nThe explosion of the tnt stays the\nsame and is not affected by this change.","ret":""},{"name":"getBlockData","params":[],"desc":"Gets the visual block data of this\nprimed tnt.","ret":"the visual block data"}],"desc":"Represents a Primed TNT."},{"FQCN":"org.bukkit.entity.Endermite","methods":[{"name":"isPlayerSpawned","params":[],"desc":"Gets whether this Endermite was spawned by a player.\n\nAn Endermite spawned by a player will be attacked by nearby Enderman.","ret":"player spawned status"},{"name":"setPlayerSpawned","params":[{"name":"playerSpawned","type":"boolean","desc":"player spawned status"}],"desc":"Sets whether this Endermite was spawned by a player.\n\nAn Endermite spawned by a player will be attacked by nearby Enderman.","ret":""},{"name":"setLifetimeTicks","params":[{"name":"ticks","type":"int","desc":"lifetime ticks"}],"desc":"Sets how many ticks this endermite has been living for.\nIf this value is greater than 2400, this endermite will despawn.","ret":""},{"name":"getLifetimeTicks","params":[],"desc":"Gets how long this endermite has been living for.\nThis value will tick up while {@link LivingEntity#getRemoveWhenFarAway()} is false.\nIf this value is greater than 2400, this endermite will despawn.","ret":"lifetime ticks"}],"desc":""},{"FQCN":"org.bukkit.entity.Sheep","methods":[{"name":"isSheared","params":[],"desc":"","ret":"Whether the sheep is sheared."},{"name":"setSheared","params":[{"name":"flag","type":"boolean","desc":"Whether to shear the sheep"}],"desc":"","ret":""}],"desc":"Represents a Sheep."},{"FQCN":"org.bukkit.entity.AbstractArrow","methods":[{"name":"getKnockbackStrength","params":[],"desc":"Gets the knockback strength for an arrow, which is the\n{@link org.bukkit.enchantments.Enchantment#KNOCKBACK KnockBack} level\nof the bow that shot it.","ret":"the knockback strength value"},{"name":"setKnockbackStrength","params":[{"name":"knockbackStrength","type":"int","desc":"the knockback strength value"}],"desc":"Sets the knockback strength for an arrow.","ret":""},{"name":"getDamage","params":[],"desc":"Gets the base amount of damage this arrow will do.\n\nDefaults to 2.0 for a normal arrow with\n<code>0.5 * (1 + power level)</code> added for arrows fired from\nenchanted bows.","ret":"base damage amount"},{"name":"setDamage","params":[{"name":"damage","type":"double","desc":"new damage amount"}],"desc":"Sets the base amount of damage this arrow will do.","ret":""},{"name":"getPierceLevel","params":[],"desc":"Gets the number of times this arrow can pierce through an entity.","ret":"pierce level"},{"name":"setPierceLevel","params":[{"name":"pierceLevel","type":"int","desc":"new pierce level"}],"desc":"Sets the number of times this arrow can pierce through an entity.\n\nMust be between 0 and 127 times.","ret":""},{"name":"isCritical","params":[],"desc":"Gets whether this arrow is critical.\n<p>\nCritical arrows have increased damage and cause particle effects.\n<p>\nCritical arrows generally occur when a player fully draws a bow before\nfiring.","ret":"true if it is critical"},{"name":"setCritical","params":[{"name":"critical","type":"boolean","desc":"whether or not it should be critical"}],"desc":"Sets whether or not this arrow should be critical.","ret":""},{"name":"isInBlock","params":[],"desc":"Gets whether this arrow is in a block or not.\n<p>\nArrows in a block are motionless and may be picked up by players.","ret":"true if in a block"},{"name":"getAttachedBlock","params":[],"desc":"Gets the block to which this arrow is attached.","ret":"the attached block or null if not attached"},{"name":"getPickupStatus","params":[],"desc":"Gets the current pickup status of this arrow.","ret":"the pickup status of this arrow."},{"name":"setPickupStatus","params":[{"name":"status","type":"PickupStatus","desc":"new pickup status of this arrow."}],"desc":"Sets the current pickup status of this arrow.","ret":""},{"name":"isShotFromCrossbow","params":[],"desc":"Gets if this arrow was shot from a crossbow.","ret":"if shot from a crossbow"},{"name":"setShotFromCrossbow","params":[{"name":"shotFromCrossbow","type":"boolean","desc":"if shot from a crossbow"}],"desc":"Sets if this arrow was shot from a crossbow.","ret":""},{"name":"getPickupRule","params":[],"desc":"Gets the {@link PickupRule} for this arrow.\n\n<p>This is generally {@link PickupRule#ALLOWED} only if the arrow was\n<b>not</b> fired from a bow with the infinity enchantment.</p>","ret":"The pickup rule"},{"name":"setPickupRule","params":[{"name":"rule","type":"PickupRule","desc":"The pickup rule"}],"desc":"Set the rule for which players can pickup this arrow as an item.","ret":""},{"name":"getItemStack","params":[],"desc":"Gets the ItemStack for this arrow.","ret":"The ItemStack, as if a player picked up the arrow"},{"name":"setLifetimeTicks","params":[{"name":"ticks","type":"int","desc":"lifetime ticks"}],"desc":"Sets the amount of ticks this arrow has been alive in the world\nThis is used to determine when the arrow should be automatically despawned.","ret":""},{"name":"getLifetimeTicks","params":[],"desc":"Gets how many ticks this arrow has been in the world for.","ret":"ticks this arrow has been in the world"},{"name":"getHitSound","params":[],"desc":"Gets the sound that is played when this arrow hits an entity.","ret":"sound that plays"},{"name":"setHitSound","params":[{"name":"sound","type":"org.bukkit.Sound","desc":"sound that is played"}],"desc":"Sets the sound that is played when this arrow hits an entity.","ret":""}],"desc":"Represents an arrow."},{"FQCN":"org.bukkit.entity.Hoglin","methods":[{"name":"isImmuneToZombification","params":[],"desc":"Gets whether the hoglin is immune to zombification.","ret":"Whether the hoglin is immune to zombification"},{"name":"setImmuneToZombification","params":[{"name":"flag","type":"boolean","desc":"Whether the hoglin is immune to zombification"}],"desc":"Sets whether the hoglin is immune to zombification.","ret":""},{"name":"isAbleToBeHunted","params":[],"desc":"Get whether the hoglin is able to be hunted by piglins.","ret":"Whether the hoglin is able to be hunted by piglins"},{"name":"setIsAbleToBeHunted","params":[{"name":"flag","type":"boolean","desc":"Whether the hoglin is able to be hunted by piglins."}],"desc":"Sets whether the hoglin is able to be hunted by piglins.","ret":""},{"name":"getConversionTime","params":[],"desc":"Gets the amount of ticks until this entity will be converted to a Zoglin.\n\nWhen this reaches 300, the entity will be converted.","ret":"conversion time"},{"name":"setConversionTime","params":[{"name":"time","type":"int","desc":"new conversion counter"}],"desc":"Sets the conversion counter value. The counter is incremented\nevery tick the method {@link #isConverting()} returns true. Setting\nthis value will not start the conversion if the {@link Hoglin} is\nnot in a valid environment ({@link org.bukkit.World#isPiglinSafe})\nto convert, is immune to zombification ({@link #isImmuneToZombification()})\nor has no AI ({@link #hasAI}).\n\nWhen this reaches 300, the entity will be converted. To stop the\nconversion use {@link #setImmuneToZombification(boolean)}.","ret":""},{"name":"isConverting","params":[],"desc":"Get if this entity is in the process of converting to a Zoglin.","ret":"conversion status"}],"desc":"Represents a Hoglin."},{"FQCN":"org.bukkit.entity.Interaction","methods":[{"name":"getInteractionWidth","params":[],"desc":"Gets the width of this interaction entity.","ret":"width"},{"name":"setInteractionWidth","params":[{"name":"width","type":"float","desc":"new width"}],"desc":"Sets the width of this interaction entity.","ret":""},{"name":"getInteractionHeight","params":[],"desc":"Gets the height of this interaction entity.","ret":"height"},{"name":"setInteractionHeight","params":[{"name":"height","type":"float","desc":"new height"}],"desc":"Sets the height of this interaction entity.","ret":""},{"name":"isResponsive","params":[],"desc":"Gets if this interaction entity should trigger a response when interacted\nwith.","ret":"response setting"},{"name":"setResponsive","params":[{"name":"response","type":"boolean","desc":"new setting"}],"desc":"Sets if this interaction entity should trigger a response when interacted\nwith.","ret":""},{"name":"getLastAttack","params":[],"desc":"Gets the last attack on this interaction entity.","ret":"last attack data, if present"},{"name":"getLastInteraction","params":[],"desc":"Gets the last interaction on this entity.","ret":"last interaction data, if present"}],"desc":"Represents an entity designed to only record interactions."},{"FQCN":"org.bukkit.entity.Slime","methods":[{"name":"getSize","params":[],"desc":"","ret":"The size of the slime"},{"name":"setSize","params":[{"name":"sz","type":"int","desc":"The new size of the slime."}],"desc":"Setting the size of the slime (regardless of previous size)\nwill set the following attributes:\n<ul>\n    <li>{@link org.bukkit.attribute.Attribute#GENERIC_MAX_HEALTH}</li>\n    <li>{@link org.bukkit.attribute.Attribute#GENERIC_MOVEMENT_SPEED}</li>\n    <li>{@link org.bukkit.attribute.Attribute#GENERIC_ATTACK_DAMAGE}</li>\n</ul>\nto their per-size defaults and heal the\nslime to its max health (assuming it's alive).","ret":""},{"name":"canWander","params":[],"desc":"Get whether this slime can randomly wander/jump around on its own","ret":"true if can wander"},{"name":"setWander","params":[{"name":"canWander","type":"boolean","desc":"true if can wander"}],"desc":"Set whether this slime can randomly wander/jump around on its own","ret":""}],"desc":"Represents a Slime."},{"FQCN":"org.bukkit.entity.Frog","methods":[{"name":"getTongueTarget","params":[],"desc":"Gets the tongue target of this frog.","ret":"tongue target or null if not set"},{"name":"setTongueTarget","params":[{"name":"target","type":"Entity","desc":"tongue target or null to clear"}],"desc":"Sets the tongue target of this frog.","ret":""},{"name":"getVariant","params":[],"desc":"Get the variant of this frog.","ret":"frog variant"},{"name":"setVariant","params":[{"name":"variant","type":"Variant","desc":"frog variant"}],"desc":"Set the variant of this frog.","ret":""}],"desc":"A Frog."},{"FQCN":"org.bukkit.entity.Raider","methods":[{"name":"setRaid","params":[{"name":"raid","type":"Raid","desc":"the raid to set"}],"desc":"Set the {@link Raid} that this raider is participating in.","ret":""},{"name":"getRaid","params":[],"desc":"Get the {@link Raid} that this raider is participating in, if any.","ret":"the raid, or null if not participating in a raid"},{"name":"getWave","params":[],"desc":"Get the raid wave that this raider spawned as part of.","ret":"the raid wave, or 0 if not participating in a raid"},{"name":"setWave","params":[{"name":"wave","type":"int","desc":"the raid wave to set. Must be >= 0"}],"desc":"Set the raid wave that this raider was spawned as part of.","ret":""},{"name":"getPatrolTarget","params":[],"desc":"Gets the block the raider is targeting to patrol.","ret":"target block or null"},{"name":"setPatrolTarget","params":[{"name":"block","type":"Block","desc":"target block or null. Must be in same world as the entity"}],"desc":"Sets the block the raider is targeting to patrol.","ret":""},{"name":"isPatrolLeader","params":[],"desc":"Gets whether this entity is a patrol leader.","ret":"patrol leader status"},{"name":"setPatrolLeader","params":[{"name":"leader","type":"boolean","desc":"patrol leader status"}],"desc":"Sets whether this entity is a patrol leader.","ret":""},{"name":"isCanJoinRaid","params":[],"desc":"Gets whether this mob can join an active raid.","ret":"CanJoinRaid status"},{"name":"setCanJoinRaid","params":[{"name":"join","type":"boolean","desc":"CanJoinRaid status"}],"desc":"Sets whether this mob can join an active raid.","ret":""},{"name":"getTicksOutsideRaid","params":[],"desc":"Get the amount of ticks that this mob has exited the bounds of a village\nas a raid participant.\n<p>\nThis value is increased only when the mob has had no action for 2,400 ticks\n(according to {@link #getNoActionTicks()}). Once both the no action ticks have\nreached that value and the ticks outside a raid exceeds 30, the mob will be\nexpelled from the raid.","ret":"the ticks outside of a raid"},{"name":"setTicksOutsideRaid","params":[{"name":"ticks","type":"int","desc":"the ticks outside of a raid"}],"desc":"Set the amount of ticks that this mob has exited the bounds of a village\nas a raid participant.\n<p>\nThis value is considered only when the mob has had no action for 2,400 ticks\n(according to {@link #getNoActionTicks()}). Once both the no action ticks have\nreached that value and the ticks outside a raid exceeds 30, the mob will be\nexpelled from the raid.","ret":""},{"name":"isCelebrating","params":[],"desc":"Check whether or not this raider is celebrating a raid victory.","ret":"true if celebrating, false otherwise"},{"name":"setCelebrating","params":[{"name":"celebrating","type":"boolean","desc":"whether or not to celebrate"}],"desc":"Set whether or not this mob is celebrating a raid victory.","ret":""},{"name":"getCelebrationSound","params":[],"desc":"Get the {@link Sound} this entity will play when celebrating.","ret":"the celebration sound"}],"desc":""},{"FQCN":"org.bukkit.entity.EnderDragon","methods":[{"name":"getPhase","params":[],"desc":"Gets the current phase that the dragon is performing.","ret":"the current phase"},{"name":"setPhase","params":[{"name":"phase","type":"Phase","desc":"the next phase"}],"desc":"Sets the next phase for the dragon to perform.","ret":""},{"name":"getDragonBattle","params":[],"desc":"Get the {@link DragonBattle} associated with this EnderDragon.\n<br>\nThis will return null for the following reasons:\n<ul>\n    <li>The EnderDragon is not in the End dimension</li>\n    <li>The EnderDragon was summoned by command/API</li>\n</ul>","ret":"the dragon battle"},{"name":"getDeathAnimationTicks","params":[],"desc":"Get the current time in ticks relative to the start of this dragon's\ndeath animation.\n\nIf this dragon is alive, 0 will be returned. This value will never exceed\n200 (the length of the animation).","ret":"this dragon's death animation ticks"},{"name":"getPodium","params":[],"desc":"Get the podium location used by the ender dragon.","ret":"the podium location of the dragon"},{"name":"setPodium","params":[{"name":"location","type":"org.bukkit.Location","desc":"the location of the podium or null to use the default podium location (exit portal of the end)"}],"desc":"Sets the location of the podium for the ender dragon.","ret":""}],"desc":"Represents an Ender Dragon"},{"FQCN":"org.bukkit.entity.ChestBoat","methods":[],"desc":"A {@link Boat} with a chest."},{"FQCN":"org.bukkit.entity.Display","methods":[{"name":"getTransformation","params":[],"desc":"Gets the transformation applied to this display.","ret":"the transformation"},{"name":"setTransformation","params":[{"name":"transformation","type":"Transformation","desc":"the new transformation"}],"desc":"Sets the transformation applied to this display","ret":""},{"name":"setTransformationMatrix","params":[{"name":"transformationMatrix","type":"Matrix4f","desc":"the transformation matrix"}],"desc":"Sets the raw transformation matrix applied to this display","ret":""},{"name":"getInterpolationDuration","params":[],"desc":"Gets the interpolation duration of this display.","ret":"interpolation duration"},{"name":"setInterpolationDuration","params":[{"name":"duration","type":"int","desc":"new duration"}],"desc":"Sets the interpolation duration of this display.","ret":""},{"name":"getTeleportDuration","params":[],"desc":"Gets the teleport duration of this display.\n<ul>\n    <li>0 means that updates are applied immediately.</li>\n    <li>1 means that the display entity will move from current position to the updated one over one tick.</li>\n    <li>Higher values spread the movement over multiple ticks.</li>\n</ul>","ret":"teleport duration"},{"name":"setTeleportDuration","params":[{"name":"duration","type":"int","desc":"new duration"}],"desc":"Sets the teleport duration of this display.","ret":""},{"name":"getViewRange","params":[],"desc":"Gets the view distance/range of this display.","ret":"view range"},{"name":"setViewRange","params":[{"name":"range","type":"float","desc":"new range"}],"desc":"Sets the view distance/range of this display.","ret":""},{"name":"getShadowRadius","params":[],"desc":"Gets the shadow radius of this display.","ret":"radius"},{"name":"setShadowRadius","params":[{"name":"radius","type":"float","desc":"new radius"}],"desc":"Sets the shadow radius of this display.","ret":""},{"name":"getShadowStrength","params":[],"desc":"Gets the shadow strength of this display.","ret":"shadow strength"},{"name":"setShadowStrength","params":[{"name":"strength","type":"float","desc":"new strength"}],"desc":"Sets the shadow strength of this display.","ret":""},{"name":"getDisplayWidth","params":[],"desc":"Gets the width of this display.","ret":"width"},{"name":"setDisplayWidth","params":[{"name":"width","type":"float","desc":"new width"}],"desc":"Sets the width of this display.","ret":""},{"name":"getDisplayHeight","params":[],"desc":"Gets the height of this display.","ret":"height"},{"name":"setDisplayHeight","params":[{"name":"height","type":"float","desc":"new height"}],"desc":"Sets the height if this display.","ret":""},{"name":"getInterpolationDelay","params":[],"desc":"Gets the amount of ticks before client-side interpolation will commence.","ret":"interpolation delay ticks"},{"name":"setInterpolationDelay","params":[{"name":"ticks","type":"int","desc":"interpolation delay ticks"}],"desc":"Sets the amount of ticks before client-side interpolation will commence.","ret":""},{"name":"getBillboard","params":[],"desc":"Gets the billboard setting of this entity.\n\nThe billboard setting controls the automatic rotation of the entity to\nface the player.","ret":"billboard setting"},{"name":"setBillboard","params":[{"name":"billboard","type":"Billboard","desc":"new setting"}],"desc":"Sets the billboard setting of this entity.\n\nThe billboard setting controls the automatic rotation of the entity to\nface the player.","ret":""},{"name":"getGlowColorOverride","params":[],"desc":"Gets the scoreboard team overridden glow color of this display.","ret":"glow color"},{"name":"setGlowColorOverride","params":[{"name":"color","type":"Color","desc":"new color"}],"desc":"Sets the scoreboard team overridden glow color of this display.","ret":""},{"name":"getBrightness","params":[],"desc":"Gets the brightness override of the entity.","ret":"brightness override, if set"},{"name":"setBrightness","params":[{"name":"brightness","type":"Brightness","desc":"new brightness override"}],"desc":"Sets the brightness override of the entity.","ret":""}],"desc":"Represents a display entity which is designed to only have a visual function."},{"FQCN":"org.bukkit.entity.ComplexLivingEntity","methods":[{"name":"getParts","params":[],"desc":"Gets a list of parts that belong to this complex entity","ret":"List of parts"}],"desc":"Represents a complex living entity - one that is made up of various smaller\nparts"},{"FQCN":"org.bukkit.entity.GlowItemFrame","methods":[],"desc":"A Glow Item Frame."},{"FQCN":"org.bukkit.entity.SpawnCategory","methods":[],"desc":"Represents groups of entities with shared spawn behaviors and mob caps."},{"FQCN":"org.bukkit.entity.Bee","methods":[{"name":"getHive","params":[],"desc":"Get the bee's hive location.","ret":"hive location or null"},{"name":"setHive","params":[{"name":"location","type":"Location","desc":"or null"}],"desc":"Set the bee's hive location.","ret":""},{"name":"getFlower","params":[],"desc":"Get the bee's flower location.","ret":"flower location or null"},{"name":"setFlower","params":[{"name":"location","type":"Location","desc":"or null"}],"desc":"Set the bee's flower location.","ret":""},{"name":"hasNectar","params":[],"desc":"Get if the bee has nectar.","ret":"nectar"},{"name":"setHasNectar","params":[{"name":"nectar","type":"boolean","desc":"whether the entity has nectar"}],"desc":"Set if the bee has nectar.","ret":""},{"name":"hasStung","params":[],"desc":"Get if the bee has stung.","ret":"has stung"},{"name":"setHasStung","params":[{"name":"stung","type":"boolean","desc":"has stung"}],"desc":"Set if the bee has stung.","ret":""},{"name":"getAnger","params":[],"desc":"Get the bee's anger level.","ret":"anger level"},{"name":"setAnger","params":[{"name":"anger","type":"int","desc":"new anger"}],"desc":"Set the bee's new anger level.","ret":""},{"name":"getCannotEnterHiveTicks","params":[],"desc":"Get the amount of ticks the bee cannot enter the hive for.","ret":"Ticks the bee cannot enter a hive for"},{"name":"setCannotEnterHiveTicks","params":[{"name":"ticks","type":"int","desc":"Ticks the bee cannot enter a hive for"}],"desc":"Set the amount of ticks the bee cannot enter a hive for.","ret":""},{"name":"setRollingOverride","params":[{"name":"rolling","type":"net.kyori.adventure.util.TriState","desc":"is rolling, or unset for vanilla behavior"}],"desc":"Sets the override for if the bee is currently rolling.","ret":""},{"name":"getRollingOverride","params":[],"desc":"Gets the plugin set override for if the bee is currently rolling.","ret":"plugin set rolling override"},{"name":"isRolling","params":[],"desc":"Gets if the bee is currently rolling.","ret":"is rolling"},{"name":"setCropsGrownSincePollination","params":[{"name":"crops","type":"int","desc":"number of crops"}],"desc":"Sets how many crops this bee has grown since it last\npollinated.","ret":""},{"name":"getCropsGrownSincePollination","params":[],"desc":"Gets how many crops this bee has grown since it last\npollinated.","ret":"number of crops"},{"name":"setTicksSincePollination","params":[{"name":"ticks","type":"int","desc":"number of ticks"}],"desc":"Sets how many ticks this bee has gone without pollinating.","ret":""},{"name":"getTicksSincePollination","params":[],"desc":"Gets how many ticks this bee has gone without pollinating","ret":"number of ticks"}],"desc":"Represents a Bee."},{"FQCN":"org.bukkit.entity.Allay","methods":[{"name":"canDuplicate","params":[],"desc":"Gets if the allay can duplicate.\n<br>\n<b>Note:</b> Duplication is based when the\n{@link #getDuplicationCooldown} its lower than zero.","ret":"if the allay can duplicate itself."},{"name":"setCanDuplicate","params":[{"name":"canDuplicate","type":"boolean","desc":"if the allay can duplicate itself"}],"desc":"Sets if the allay can duplicate.\n<br>\n<b>Note:</b> this value can be overridden later by\n{@link #getDuplicationCooldown} if is lower than zero. You can also use\n{@link #setDuplicationCooldown} to allow the allay to duplicate","ret":""},{"name":"getDuplicationCooldown","params":[],"desc":"Gets the cooldown for duplicating the allay.","ret":"the time in ticks when allay can duplicate"},{"name":"setDuplicationCooldown","params":[{"name":"cooldown","type":"long","desc":"the cooldown, use a negative number to deny allay to\nduplicate again."}],"desc":"Sets the cooldown before the allay can duplicate again.","ret":""},{"name":"resetDuplicationCooldown","params":[],"desc":"Reset the cooldown for duplication.\n\nThis will set the cooldown ticks to the same value as is set after an\nAllay has duplicated.","ret":""},{"name":"isDancing","params":[],"desc":"Gets if the allay is dancing.","ret":"{@code True} if it is dancing, false otherwise."},{"name":"startDancing","params":[{"name":"location","type":"Location","desc":"the location of the jukebox"}],"desc":"Causes the allay to start dancing because of the provided jukebox\nlocation.","ret":""},{"name":"startDancing","params":[],"desc":"Force sets the dancing status of the allay.\n<br>\n<b>Note:</b> This method forces the allay to dance, ignoring any nearby\njukebox being required.","ret":""},{"name":"stopDancing","params":[],"desc":"Makes the allay stop dancing.","ret":""},{"name":"duplicateAllay","params":[],"desc":"This make the current allay duplicate itself without dance or item\nnecessary.\n<b>Note:</b> this will fire a {@link CreatureSpawnEvent}","ret":"the new entity {@link Allay} or null if the spawn was cancelled"},{"name":"getJukebox","params":[],"desc":"Gets the jukebox the allay is set to dance to.","ret":"the location of the jukebox to dance if it exists"}],"desc":"An Allay."},{"FQCN":"org.bukkit.entity.WanderingTrader","methods":[{"name":"getDespawnDelay","params":[],"desc":"Gets the despawn delay before this {@link WanderingTrader} is forcibly\ndespawned.\n\nIf this is less than or equal to 0, then the trader will not be\ndespawned.","ret":"The despawn delay before this {@link WanderingTrader} is forcibly\ndespawned"},{"name":"setDespawnDelay","params":[{"name":"despawnDelay","type":"int","desc":"The new despawn delay before this\n{@link WanderingTrader} is forcibly despawned"}],"desc":"Sets the despawn delay before this {@link WanderingTrader} is forcibly\ndespawned.\n\nIf this is less than or equal to 0, then the trader will not be\ndespawned.","ret":""},{"name":"setCanDrinkPotion","params":[{"name":"bool","type":"boolean","desc":"whether the mob will drink"}],"desc":"Set if the Wandering Trader can and will drink an invisibility potion.","ret":""},{"name":"canDrinkPotion","params":[],"desc":"Get if the Wandering Trader can and will drink an invisibility potion.","ret":"whether the mob will drink"},{"name":"setCanDrinkMilk","params":[{"name":"bool","type":"boolean","desc":"whether the mob will drink"}],"desc":"Set if the Wandering Trader can and will drink milk.","ret":""},{"name":"canDrinkMilk","params":[],"desc":"Get if the Wandering Trader can and will drink milk.","ret":"whether the mob will drink"},{"name":"getWanderingTowards","params":[],"desc":"Gets the location that this wandering trader is currently\nwandering towards.\n<p>\nThis will return null if the wandering trader has finished\nwandering towards the given location.","ret":"the location currently wandering towards, or null if not wandering"},{"name":"setWanderingTowards","params":[{"name":"location","type":"org.bukkit.Location","desc":"location to wander towards (world is ignored, will always use the entity's world)"}],"desc":"Sets the location that this wandering trader is currently wandering towards.\n<p>\nThis can be set to null to prevent the wandering trader from wandering further.","ret":""}],"desc":"Represents a wandering trader NPC"},{"FQCN":"org.bukkit.entity.GlowSquid","methods":[{"name":"getDarkTicksRemaining","params":[],"desc":"Get the number of dark ticks remaining for this squid.\n\nBravo Six will go dark for 100 ticks (5 seconds) if damaged.","ret":"dark ticks remaining"},{"name":"setDarkTicksRemaining","params":[{"name":"darkTicksRemaining","type":"int","desc":"dark ticks remaining"}],"desc":"Sets the number of dark ticks remaining for this squid.\n\nBravo Six will go dark for 100 ticks (5 seconds) if damaged.","ret":""}],"desc":"A Glow Squid."},{"FQCN":"org.bukkit.entity.Creeper","methods":[{"name":"isPowered","params":[],"desc":"Checks if this Creeper is powered (Electrocuted)","ret":"true if this creeper is powered"},{"name":"setPowered","params":[{"name":"value","type":"boolean","desc":"New Powered status"}],"desc":"Sets the Powered status of this Creeper","ret":""},{"name":"setMaxFuseTicks","params":[{"name":"ticks","type":"int","desc":"the new maximum fuse ticks"}],"desc":"Set the maximum fuse ticks for this Creeper, where the maximum ticks\nis the amount of time in which a creeper is allowed to be in the\nprimed state before exploding.","ret":""},{"name":"getMaxFuseTicks","params":[],"desc":"Get the maximum fuse ticks for this Creeper, where the maximum ticks\nis the amount of time in which a creeper is allowed to be in the\nprimed state before exploding.","ret":"the maximum fuse ticks"},{"name":"setFuseTicks","params":[{"name":"ticks","type":"int","desc":"the new fuse ticks"}],"desc":"Set the fuse ticks for this Creeper, where the ticks is the amount of\ntime in which a creeper has been in the primed state.","ret":""},{"name":"getFuseTicks","params":[],"desc":"Get the maximum fuse ticks for this Creeper, where the ticks is the\namount of time in which a creeper has been in the primed state.","ret":"the fuse ticks"},{"name":"setExplosionRadius","params":[{"name":"radius","type":"int","desc":"the new explosion radius"}],"desc":"Set the explosion radius in which this Creeper's explosion will affect.","ret":""},{"name":"getExplosionRadius","params":[],"desc":"Get the explosion radius in which this Creeper's explosion will affect.","ret":"the explosion radius"},{"name":"explode","params":[],"desc":"Makes this Creeper explode instantly.\n\nThe resulting explosion can be cancelled by an\n{@link org.bukkit.event.entity.ExplosionPrimeEvent} and obeys the mob\ngriefing gamerule.","ret":""},{"name":"ignite","params":[],"desc":"Ignites this Creeper, beginning its fuse.\n\nThe amount of time the Creeper takes to explode will depend on what\n{@link #setMaxFuseTicks} is set as.\n\nThe resulting explosion can be cancelled by an\n{@link org.bukkit.event.entity.ExplosionPrimeEvent} and obeys the mob\ngriefing gamerule.","ret":""},{"name":"setIgnited","params":[{"name":"ignited","type":"boolean","desc":"New ignited state"}],"desc":"Set whether creeper is ignited or not (armed to explode)","ret":""},{"name":"isIgnited","params":[],"desc":"Check if creeper is ignited or not (armed to explode)","ret":"Ignited state"}],"desc":"Represents a Creeper"},{"FQCN":"org.bukkit.entity.Projectile","methods":[{"name":"getShooter","params":[],"desc":"Retrieve the shooter of this projectile.","ret":"the {@link ProjectileSource} that shot this projectile"},{"name":"setShooter","params":[{"name":"source","type":"ProjectileSource","desc":"the {@link ProjectileSource} that shot this projectile"}],"desc":"Set the shooter of this projectile.","ret":""},{"name":"doesBounce","params":[],"desc":"Determine if this projectile should bounce or not when it hits.","ret":"true if it should bounce."},{"name":"setBounce","params":[{"name":"doesBounce","type":"boolean","desc":"whether or not it should bounce."}],"desc":"Set whether or not this projectile should bounce or not when it hits\nsomething.","ret":""},{"name":"hasLeftShooter","params":[],"desc":"Gets whether the projectile has left the\nhitbox of their shooter and can now hit entities.","ret":"has left shooter's hitbox"},{"name":"setHasLeftShooter","params":[{"name":"leftShooter","type":"boolean","desc":"has left shooter's hitbox"}],"desc":"Sets whether the projectile has left the\nhitbox of their shooter and can now hit entities.\n\nThis is recalculated each tick if the projectile has a shooter.","ret":""},{"name":"hasBeenShot","params":[],"desc":"Gets whether the projectile has been\nshot into the world and has sent a projectile\nshot game event.","ret":"has been shot into the world"},{"name":"setHasBeenShot","params":[{"name":"beenShot","type":"boolean","desc":"has been in shot into the world"}],"desc":"Sets whether the projectile has been\nshot into the world and has sent a projectile\nshot game event in the next tick.\n\nSetting this to false will cause a game event\nto fire and the value to be set back to true.","ret":""},{"name":"canHitEntity","params":[{"name":"entity","type":"Entity","desc":"the entity to check if this projectile can hit"}],"desc":"Gets whether this projectile can hit an entity.\n<p>\nThis method returns true under the following conditions:\n<p>\n- The shooter can see the entity ({@link Player#canSee(Entity)}) <p>\n- The entity is alive and not a spectator <p>\n- The projectile has left the hitbox of the shooter ({@link #hasLeftShooter()})<p>\n- If this is an arrow with piercing, it has not pierced the entity already","ret":"true if this projectile can damage the entity, false otherwise"},{"name":"hitEntity","params":[{"name":"entity","type":"Entity","desc":"the entity to hit"}],"desc":"Makes this projectile hit a specific entity.\nThis uses the current position of the projectile for the hit point.\nUsing this method will result in {@link org.bukkit.event.entity.ProjectileHitEvent} being called.","ret":""},{"name":"hitEntity","params":[{"name":"entity","type":"Entity","desc":"the entity to hit"},{"name":"vector","type":"org.bukkit.util.Vector","desc":"the direction to hit from"}],"desc":"Makes this projectile hit a specific entity from a specific point.\nUsing this method will result in {@link org.bukkit.event.entity.ProjectileHitEvent} being called.","ret":""},{"name":"getOwnerUniqueId","params":[],"desc":"Gets the owner's UUID","ret":"the owner's UUID, or null if not owned"}],"desc":"Represents a shootable entity."},{"FQCN":"org.bukkit.entity.Enderman","methods":[{"name":"getCarriedMaterial","params":[],"desc":"Gets the id and data of the block that the Enderman is carrying.","ret":"MaterialData containing the id and data of the block"},{"name":"setCarriedMaterial","params":[{"name":"material","type":"MaterialData","desc":"data to set the carried block to"}],"desc":"Sets the id and data of the block that the Enderman is carrying.","ret":""},{"name":"getCarriedBlock","params":[],"desc":"Gets the data of the block that the Enderman is carrying.","ret":"BlockData containing the carried block, or null if none"},{"name":"setCarriedBlock","params":[{"name":"blockData","type":"BlockData","desc":"data to set the carried block to, or null to remove"}],"desc":"Sets the data of the block that the Enderman is carrying.","ret":""},{"name":"teleport","params":[],"desc":"Randomly teleports the Enderman in a 64x64x64 block cuboid region.\n<p>\nIf the randomly selected point is in the ground, the point is moved 1 block\ndown until air is found or until it goes under\n{@link org.bukkit.World#getMinHeight()}.\n<p>\nThis method will return false if this Enderman is not alive, or if the\nteleport location was obstructed, or if the teleport location is in water.","ret":"true if the teleport succeeded."},{"name":"teleportTowards","params":[{"name":"entity","type":"Entity","desc":"The entity to teleport towards."}],"desc":"Randomly teleports the Enderman towards the given <code>entity</code>.\n<p>\nThe point is selected by drawing a vector between this enderman and the\ngiven <code>entity</code>. That vector's length is set to 16 blocks.\nThat point is then moved within a 8x8x8 cuboid region. If the randomly\nselected point is in the ground, the point is moved 1 block down until\nair is found or until it goes under\n{@link org.bukkit.World#getMinHeight()}.\n<p>\nThis method will return false if this Enderman is not alive, or if the\nteleport location was obstructed, or if the teleport location is in water.","ret":"true if the teleport succeeded."},{"name":"isScreaming","params":[],"desc":"Returns whether the enderman is screaming/angry.","ret":"whether the enderman is screaming"},{"name":"setScreaming","params":[{"name":"screaming","type":"boolean","desc":"whether the enderman is screaming"}],"desc":"Sets whether the enderman is screaming/angry.","ret":""},{"name":"hasBeenStaredAt","params":[],"desc":"Returns whether the enderman has been stared at.\nIf set to true, players will hear an ambient sound.","ret":"whether the enderman has been stared at"},{"name":"setHasBeenStaredAt","params":[{"name":"hasBeenStaredAt","type":"boolean","desc":"whether the enderman has been stared at"}],"desc":"Sets whether the enderman has been stared at.\nIf set to true, players will hear an ambient sound.","ret":""}],"desc":"Represents an Enderman."},{"FQCN":"org.bukkit.entity.Arrow","methods":[{"name":"setBasePotionData","params":[{"name":"data","type":"PotionData","desc":"PotionData to set the base potion state to"}],"desc":"Sets the underlying potion data","ret":""},{"name":"getBasePotionData","params":[],"desc":"Returns the potion data about the base potion","ret":"a PotionData object"},{"name":"setBasePotionType","params":[{"name":"type","type":"PotionType","desc":"PotionType to set the base potion state to"}],"desc":"Sets the underlying potion type","ret":""},{"name":"getBasePotionType","params":[],"desc":"Returns the potion type about the base potion","ret":"a PotionType object"},{"name":"getColor","params":[],"desc":"Gets the color of this arrow.","ret":"arrow {@link Color} or null if not color is set"},{"name":"setColor","params":[{"name":"color","type":"Color","desc":"arrow color, null to clear the color"}],"desc":"Sets the color of this arrow. Will be applied as a tint to its particles.","ret":""},{"name":"hasCustomEffects","params":[],"desc":"Checks for the presence of custom potion effects.","ret":"true if custom potion effects are applied"},{"name":"getCustomEffects","params":[],"desc":"Gets an immutable list containing all custom potion effects applied to\nthis arrow.\n<p>\nPlugins should check that hasCustomEffects() returns true before calling\nthis method.","ret":"the immutable list of custom potion effects"},{"name":"addCustomEffect","params":[{"name":"effect","type":"PotionEffect","desc":"the potion effect to add"},{"name":"overwrite","type":"boolean","desc":"true if any existing effect of the same type should be\noverwritten"}],"desc":"Adds a custom potion effect to this arrow.","ret":"true if the effect was added as a result of this call"},{"name":"removeCustomEffect","params":[{"name":"type","type":"PotionEffectType","desc":"the potion effect type to remove"}],"desc":"Removes a custom potion effect from this arrow.","ret":"true if the effect was removed as a result of this call"},{"name":"hasCustomEffect","params":[{"name":"type","type":"PotionEffectType","desc":"the potion effect type to check for"}],"desc":"Checks for a specific custom potion effect type on this arrow.","ret":"true if the potion has this effect"},{"name":"clearCustomEffects","params":[],"desc":"Removes all custom potion effects from this arrow.","ret":""}],"desc":""},{"FQCN":"org.bukkit.entity.PiglinBrute","methods":[],"desc":"Represents a Piglin Brute."},{"FQCN":"org.bukkit.entity.Pose","methods":[],"desc":"Represents an entity body pose."},{"FQCN":"org.bukkit.entity.WitherSkeleton","methods":[],"desc":"Represents a WitherSkeleton - variant of {@link AbstractSkeleton}."},{"FQCN":"org.bukkit.entity.Mob","methods":[{"name":"getPathfinder","params":[],"desc":"Enables access to control the pathing of an Entity","ret":"Pathfinding Manager for this entity"},{"name":"isInDaylight","params":[],"desc":"Check if this mob is exposed to daylight","ret":"True if mob is exposed to daylight"},{"name":"lookAt","params":[{"name":"location","type":"org.bukkit.Location","desc":"location to look at"}],"desc":"Instruct this Mob to look at a specific Location\n<p>\nUseful when implementing custom mob goals","ret":""},{"name":"lookAt","params":[{"name":"location","type":"org.bukkit.Location","desc":"location to look at"},{"name":"headRotationSpeed","type":"float","desc":"head rotation speed"},{"name":"maxHeadPitch","type":"float","desc":"max head pitch rotation"}],"desc":"Instruct this Mob to look at a specific Location\n<p>\nUseful when implementing custom mob goals","ret":""},{"name":"lookAt","params":[{"name":"entity","type":"Entity","desc":"entity to look at"}],"desc":"Instruct this Mob to look at a specific Entity\n<p>\nIf a LivingEntity, look at eye location\n<p>\nUseful when implementing custom mob goals","ret":""},{"name":"lookAt","params":[{"name":"entity","type":"Entity","desc":"entity to look at"},{"name":"headRotationSpeed","type":"float","desc":"head rotation speed"},{"name":"maxHeadPitch","type":"float","desc":"max head pitch rotation"}],"desc":"Instruct this Mob to look at a specific Entity\n<p>\nIf a LivingEntity, look at eye location\n<p>\nUseful when implementing custom mob goals","ret":""},{"name":"lookAt","params":[{"name":"x","type":"double","desc":"x coordinate"},{"name":"y","type":"double","desc":"y coordinate"},{"name":"z","type":"double","desc":"z coordinate"}],"desc":"Instruct this Mob to look at a specific position\n<p>\nUseful when implementing custom mob goals","ret":""},{"name":"lookAt","params":[{"name":"x","type":"double","desc":"x coordinate"},{"name":"y","type":"double","desc":"y coordinate"},{"name":"z","type":"double","desc":"z coordinate"},{"name":"headRotationSpeed","type":"float","desc":"head rotation speed"},{"name":"maxHeadPitch","type":"float","desc":"max head pitch rotation"}],"desc":"Instruct this Mob to look at a specific position\n<p>\nUseful when implementing custom mob goals","ret":""},{"name":"getHeadRotationSpeed","params":[],"desc":"Gets the head rotation speed","ret":"the head rotation speed"},{"name":"getMaxHeadPitch","params":[],"desc":"Gets the max head pitch rotation","ret":"the max head pitch rotation"},{"name":"setTarget","params":[{"name":"target","type":"LivingEntity","desc":"New LivingEntity to target, or null to clear the target"}],"desc":"Instructs this Mob to set the specified LivingEntity as its target.\n<p>\nHostile creatures may attack their target, and friendly creatures may\nfollow their target.","ret":""},{"name":"getTarget","params":[],"desc":"Gets the current target of this Mob","ret":"Current target of this creature, or null if none exists"},{"name":"setAware","params":[{"name":"aware","type":"boolean","desc":"whether the mob is aware"}],"desc":"Sets whether this mob is aware of its surroundings.\n\nUnaware mobs will still move if pushed, attacked, etc. but will not move\nor perform any actions on their own. Unaware mobs may also have other\nunspecified behaviours disabled, such as drowning.","ret":""},{"name":"isAware","params":[],"desc":"Gets whether this mob is aware of its surroundings.\n\nUnaware mobs will still move if pushed, attacked, etc. but will not move\nor perform any actions on their own. Unaware mobs may also have other\nunspecified behaviours disabled, such as drowning.","ret":"whether the mob is aware"},{"name":"getAmbientSound","params":[],"desc":"Get the {@link Sound} this mob makes while ambiently existing. This sound\nmay change depending on the current state of the entity, and may also\nreturn null under specific conditions. This sound is not constant.\nFor instance, villagers will make different passive noises depending\non whether or not they are actively trading with a player, or make no\nambient noise while sleeping.","ret":"the ambient sound, or null if this entity is ambiently quiet"},{"name":"isAggressive","params":[],"desc":"Some mobs will raise their arm(s) when aggressive:\n<ul>\n    <li>{@link Drowned}</li>\n    <li>{@link Piglin}</li>\n    <li>{@link Skeleton}</li>\n    <li>{@link Zombie}</li>\n    <li>{@link ZombieVillager}</li>\n    <li>{@link Illusioner}</li>\n    <li>{@link Vindicator}</li>\n    <li>{@link Panda}</li>\n    <li>{@link Pillager}</li>\n    <li>{@link PiglinBrute}</li>\n</ul>\n<p>\nNote: This doesn't always show the actual aggressive state as\nset by {@link #setAggressive(boolean)}. {@link Panda}'s are always\naggressive if their combined {@link Panda.Gene} is {@link Panda.Gene#AGGRESSIVE}.","ret":"wether the mob is aggressive or not"},{"name":"setAggressive","params":[{"name":"aggressive","type":"boolean","desc":"wether the mob should be aggressive or not"}],"desc":"Some mobs will raise their arm(s) when aggressive,\nsee {@link #isAggressive()} for full list.","ret":""},{"name":"isLeftHanded","params":[],"desc":"Check if Mob is left-handed","ret":"True if left-handed"},{"name":"setLeftHanded","params":[{"name":"leftHanded","type":"boolean","desc":"True if left-handed"}],"desc":"Set if Mob is left-handed","ret":""},{"name":"getPossibleExperienceReward","params":[],"desc":"Gets the amount of experience the mob will possibly drop. This value is randomized and it can give different results","ret":"the amount of experience the mob will possibly drop"}],"desc":"Represents a Mob. Mobs are living entities with simple AI."},{"FQCN":"org.bukkit.entity.Evoker","methods":[{"name":"getCurrentSpell","params":[],"desc":"Gets the {@link Spell} the Evoker is currently using.","ret":"the current spell"},{"name":"setCurrentSpell","params":[{"name":"spell","type":"Spell","desc":"the spell the evoker should be using"}],"desc":"Sets the {@link Spell} the Evoker is currently using.","ret":""},{"name":"getWololoTarget","params":[],"desc":"","ret":"the sheep being targeted by the {@link Spell#WOLOLO wololo spell}, or {@code null} if none"},{"name":"setWololoTarget","params":[{"name":"sheep","type":"Sheep","desc":"new wololo target"}],"desc":"Set the sheep to be the target of the {@link Spell#WOLOLO wololo spell}, or {@code null} to clear.","ret":""}],"desc":"Represents an Evoker \"Illager\"."},{"FQCN":"org.bukkit.entity.Egg","methods":[],"desc":"Represents a thrown egg."},{"FQCN":"org.bukkit.entity.EnderSignal","methods":[{"name":"getTargetLocation","params":[],"desc":"Get the location this EnderSignal is moving towards.","ret":"the {@link Location} this EnderSignal is moving towards."},{"name":"setTargetLocation","params":[{"name":"location","type":"Location","desc":"the new target location"}],"desc":"Set the {@link Location} this EnderSignal is moving towards.\n<br>\nWhen setting a new target location, the {@link #getDropItem()} resets to\na random value and the despawn timer gets set back to 0.","ret":""},{"name":"setTargetLocation","params":[{"name":"location","type":"Location","desc":"the new target location"},{"name":"update","type":"boolean","desc":"true to reset the {@link #getDropItem()}\n              to a random value and {@link #getDespawnTimer()} to 0"}],"desc":"Set the {@link Location} this EnderSignal is moving towards.","ret":""},{"name":"getDropItem","params":[],"desc":"Gets if the EnderSignal should drop an item on death.<br>\nIf {@code true}, it will drop an item. If {@code false}, it will shatter.","ret":"true if the EnderSignal will drop an item on death, or false if\nit will shatter"},{"name":"setDropItem","params":[{"name":"drop","type":"boolean","desc":"true if the EnderSignal should drop an item on death, or\nfalse if it should shatter."}],"desc":"Sets if the EnderSignal should drop an item on death; or if it should\nshatter.","ret":""},{"name":"getItem","params":[],"desc":"Get the {@link ItemStack} to be displayed while in the air and to be\ndropped on death.","ret":"the item stack"},{"name":"setItem","params":[{"name":"item","type":"ItemStack","desc":"the item to set. If null, resets to the default eye of ender"}],"desc":"Set the {@link ItemStack} to be displayed while in the air and to be\ndropped on death.","ret":""},{"name":"getDespawnTimer","params":[],"desc":"Gets the amount of time this entity has been alive (in ticks).\n<br>\nWhen this number is greater than 80, it will despawn on the next tick.","ret":"the number of ticks this EnderSignal has been alive."},{"name":"setDespawnTimer","params":[{"name":"timer","type":"int","desc":"how long (in ticks) this EnderSignal has been alive."}],"desc":"Set how long this entity has been alive (in ticks).\n<br>\nWhen this number is greater than 80, it will despawn on the next tick.","ret":""}],"desc":"Represents an EnderSignal, which is created upon throwing an ender eye."},{"FQCN":"org.bukkit.entity.LeashHitch","methods":[],"desc":"Represents a Leash Hitch on a fence"},{"FQCN":"org.bukkit.entity.Player","methods":[{"name":"activeBossBars","params":[],"desc":"Gets an unmodifiable view of all known currently active bossbars.\n<p>\n<b>This currently only returns bossbars shown to the player via\n{@link #showBossBar(net.kyori.adventure.bossbar.BossBar)} and does not contain bukkit\n{@link org.bukkit.boss.BossBar} instances shown to the player.</b>","ret":"an unmodifiable view of all known currently active bossbars"},{"name":"displayName","params":[],"desc":"Gets the \"friendly\" name to display of this player.","ret":"the display name"},{"name":"displayName","params":[{"name":"displayName","type":"net.kyori.adventure.text.Component","desc":"the display name to set"}],"desc":"Sets the \"friendly\" name to display of this player.","ret":""},{"name":"getName","params":[],"desc":"{@inheritDoc}","ret":""},{"name":"getDisplayName","params":[],"desc":"Gets the \"friendly\" name to display of this player. This may include\ncolor.\n<p>\nNote that this name will not be displayed in game, only in chat and\nplaces defined by plugins.","ret":"the friendly name"},{"name":"setDisplayName","params":[{"name":"name","type":"String","desc":"The new display name."}],"desc":"Sets the \"friendly\" name to display of this player. This may include\ncolor.\n<p>\nNote that this name will not be displayed in game, only in chat and\nplaces defined by plugins.","ret":""},{"name":"playerListName","params":[{"name":"name","type":"net.kyori.adventure.text.Component","desc":"new player list name"}],"desc":"Sets the name that is shown on the in-game player list.\n<p>\nIf the value is null, the name will be identical to {@link #getName()}.","ret":""},{"name":"playerListName","params":[],"desc":"Gets the name that is shown on the in-game player list.","ret":"the player list name"},{"name":"playerListHeader","params":[],"desc":"Gets the currently displayed player list header for this player.","ret":"player list header or null"},{"name":"playerListFooter","params":[],"desc":"Gets the currently displayed player list footer for this player.","ret":"player list footer or null"},{"name":"getPlayerListName","params":[],"desc":"Gets the name that is shown on the player list.","ret":"the player list name"},{"name":"setPlayerListName","params":[{"name":"name","type":"String","desc":"new player list name"}],"desc":"Sets the name that is shown on the in-game player list.\n<p>\nIf the value is null, the name will be identical to {@link #getName()}.","ret":""},{"name":"getPlayerListHeader","params":[],"desc":"Gets the currently displayed player list header for this player.","ret":"player list header or null"},{"name":"getPlayerListFooter","params":[],"desc":"Gets the currently displayed player list footer for this player.","ret":"player list header or null"},{"name":"setPlayerListHeader","params":[{"name":"header","type":"String","desc":"player list header, null for empty"}],"desc":"Sets the currently displayed player list header for this player.","ret":""},{"name":"setPlayerListFooter","params":[{"name":"footer","type":"String","desc":"player list footer, null for empty"}],"desc":"Sets the currently displayed player list footer for this player.","ret":""},{"name":"setPlayerListHeaderFooter","params":[{"name":"header","type":"String","desc":"player list header, null for empty"},{"name":"footer","type":"String","desc":"player list footer, null for empty"}],"desc":"Sets the currently displayed player list header and footer for this\nplayer.","ret":""},{"name":"setCompassTarget","params":[{"name":"loc","type":"Location","desc":"Location to point to"}],"desc":"Set the target of the player's compass.","ret":""},{"name":"getCompassTarget","params":[],"desc":"Get the previously set compass target.","ret":"location of the target"},{"name":"getAddress","params":[],"desc":"Gets the socket address of this player","ret":"the player's address"},{"name":"sendRawMessage","params":[{"name":"message","type":"String","desc":"Message to be displayed"}],"desc":"Sends this sender a message raw","ret":""},{"name":"kickPlayer","params":[{"name":"message","type":"String","desc":"kick message"}],"desc":"Kicks player with custom kick message.","ret":""},{"name":"kick","params":[],"desc":"Kicks the player with the default kick message.","ret":""},{"name":"kick","params":[{"name":"message","type":"net.kyori.adventure.text.Component","desc":"kick message"}],"desc":"Kicks player with custom kick message.","ret":""},{"name":"kick","params":[{"name":"message","type":"net.kyori.adventure.text.Component","desc":"kick message"},{"name":"cause","type":"org.bukkit.event.player.PlayerKickEvent.Cause","desc":"kick cause"}],"desc":"Kicks player with custom kick message and cause.","ret":""},{"name":"ban","params":[{"name":"reason","type":"String","desc":"reason for the ban, null indicates implementation default"},{"name":"expires","type":"Date","desc":"date for the ban's expiration (unban), or null to imply\n    forever"},{"name":"source","type":"String","desc":"source of the ban, null indicates implementation default"},{"name":"kickPlayer","type":"boolean","desc":"if the player need to be kick"}],"desc":"Adds this user to the {@link ProfileBanList}. If a previous ban exists, this will\nupdate the entry.","ret":"the entry for the newly created ban, or the entry for the\n    (updated) previous ban"},{"name":"ban","params":[{"name":"reason","type":"String","desc":"reason for the ban, null indicates implementation default"},{"name":"expires","type":"Instant","desc":"date for the ban's expiration (unban), or null to imply\n    forever"},{"name":"source","type":"String","desc":"source of the ban, null indicates implementation default"},{"name":"kickPlayer","type":"boolean","desc":"if the player need to be kick"}],"desc":"Adds this user to the {@link ProfileBanList}. If a previous ban exists, this will\nupdate the entry.","ret":"the entry for the newly created ban, or the entry for the\n    (updated) previous ban"},{"name":"ban","params":[{"name":"reason","type":"String","desc":"reason for the ban, null indicates implementation default"},{"name":"duration","type":"Duration","desc":"the duration how long the ban lasts, or null to imply\n    forever"},{"name":"source","type":"String","desc":"source of the ban, null indicates implementation default"},{"name":"kickPlayer","type":"boolean","desc":"if the player need to be kick"}],"desc":"Adds this user to the {@link ProfileBanList}. If a previous ban exists, this will\nupdate the entry.","ret":"the entry for the newly created ban, or the entry for the\n    (updated) previous ban"},{"name":"banIp","params":[{"name":"reason","type":"String","desc":"reason for the ban, null indicates implementation default"},{"name":"expires","type":"Date","desc":"date for the ban's expiration (unban), or null to imply\n    forever"},{"name":"source","type":"String","desc":"source of the ban, null indicates implementation default"},{"name":"kickPlayer","type":"boolean","desc":"if the player need to be kick"}],"desc":"Adds this user's current IP address to the {@link IpBanList}. If a previous ban exists, this will\nupdate the entry. If {@link #getAddress()} is null this method will throw an exception.","ret":"the entry for the newly created ban, or the entry for the\n    (updated) previous ban"},{"name":"banIp","params":[{"name":"reason","type":"String","desc":"reason for the ban, null indicates implementation default"},{"name":"expires","type":"Instant","desc":"date for the ban's expiration (unban), or null to imply\n    forever"},{"name":"source","type":"String","desc":"source of the ban, null indicates implementation default"},{"name":"kickPlayer","type":"boolean","desc":"if the player need to be kick"}],"desc":"Adds this user's current IP address to the {@link IpBanList}. If a previous ban exists, this will\nupdate the entry. If {@link #getAddress()} is null this method will throw an exception.","ret":"the entry for the newly created ban, or the entry for the\n    (updated) previous ban"},{"name":"banIp","params":[{"name":"reason","type":"String","desc":"reason for the ban, null indicates implementation default"},{"name":"duration","type":"Duration","desc":"the duration how long the ban lasts, or null to imply\n    forever"},{"name":"source","type":"String","desc":"source of the ban, null indicates implementation default"},{"name":"kickPlayer","type":"boolean","desc":"if the player need to be kick"}],"desc":"Adds this user's current IP address to the {@link IpBanList}. If a previous ban exists, this will\nupdate the entry. If {@link #getAddress()} is null this method will throw an exception.","ret":"the entry for the newly created ban, or the entry for the\n    (updated) previous ban"},{"name":"chat","params":[{"name":"msg","type":"String","desc":"message to print"}],"desc":"Says a message (or runs a command).","ret":""},{"name":"performCommand","params":[{"name":"command","type":"String","desc":"Command to perform"}],"desc":"Makes the player perform the given command","ret":"true if the command was successful, otherwise false"},{"name":"isOnGround","params":[],"desc":"Returns true if the entity is supported by a block.\n\nThis value is a state updated by the client after each movement.","ret":"True if entity is on ground."},{"name":"isSneaking","params":[],"desc":"Returns if the player is in sneak mode","ret":"true if player is in sneak mode"},{"name":"setSneaking","params":[{"name":"sneak","type":"boolean","desc":"true if player should appear sneaking"}],"desc":"Sets the sneak mode the player","ret":""},{"name":"isSprinting","params":[],"desc":"Gets whether the player is sprinting or not.","ret":"true if player is sprinting."},{"name":"setSprinting","params":[{"name":"sprinting","type":"boolean","desc":"true if the player should be sprinting"}],"desc":"Sets whether the player is sprinting or not.","ret":""},{"name":"saveData","params":[],"desc":"Saves the players current location, health, inventory, motion, and\nother information into the &lt;uuid&gt;.dat file, in the\n&lt;level-name&gt;/playerdata/ folder.","ret":""},{"name":"loadData","params":[],"desc":"Loads the players current location, health, inventory, motion, and\nother information from the &lt;uuid&gt;.dat file, in the\n&lt;level-name&gt;/playerdata/ folder.\n<p>\nNote: This will overwrite the players current inventory, health,\nmotion, etc, with the state from the saved dat file.","ret":""},{"name":"setSleepingIgnored","params":[{"name":"isSleeping","type":"boolean","desc":"Whether to ignore."}],"desc":"Sets whether the player is ignored as not sleeping. If everyone is\neither sleeping or has this flag set, then time will advance to the\nnext day. If everyone has this flag set but no one is actually in bed,\nthen nothing will happen.","ret":""},{"name":"isSleepingIgnored","params":[],"desc":"Returns whether the player is sleeping ignored.","ret":"Whether player is ignoring sleep."},{"name":"getBedSpawnLocation","params":[],"desc":"Gets the Location where the player will spawn at their bed, null if\nthey have not slept in one or their current bed spawn is invalid.","ret":"Bed Spawn Location if bed exists, otherwise null."},{"name":"getRespawnLocation","params":[],"desc":"Gets the Location where the player will spawn at, null if they\ndon't have a valid respawn point.","ret":"respawn location if exists, otherwise null."},{"name":"setBedSpawnLocation","params":[{"name":"location","type":"Location","desc":"where to set the respawn location"}],"desc":"Sets the Location where the player will spawn at their bed.","ret":""},{"name":"setRespawnLocation","params":[{"name":"location","type":"Location","desc":"where to set the respawn location"}],"desc":"Sets the Location where the player will respawn.","ret":""},{"name":"setBedSpawnLocation","params":[{"name":"location","type":"Location","desc":"where to set the respawn location"},{"name":"force","type":"boolean","desc":"whether to forcefully set the respawn location even if a\n    valid bed is not present"}],"desc":"Sets the Location where the player will spawn at their bed.","ret":""},{"name":"setRespawnLocation","params":[{"name":"location","type":"Location","desc":"where to set the respawn location"},{"name":"force","type":"boolean","desc":"whether to forcefully set the respawn location even if a\n    valid respawn point is not present"}],"desc":"Sets the Location where the player will respawn.","ret":""},{"name":"playNote","params":[{"name":"loc","type":"Location","desc":"The location to play the note"},{"name":"instrument","type":"byte","desc":"The instrument ID."},{"name":"note","type":"byte","desc":"The note ID."}],"desc":"Play a note for the player at a location. <br>\nThis <i>will</i> work with cake.","ret":""},{"name":"playNote","params":[{"name":"loc","type":"Location","desc":"The location to play the note"},{"name":"instrument","type":"Instrument","desc":"The instrument"},{"name":"note","type":"Note","desc":"The note"}],"desc":"Play a note for the player at a location. <br>\nThis <i>will</i> work with cake.\n<p>\nThis method will fail silently when called with {@link Instrument#CUSTOM_HEAD}.","ret":""},{"name":"playSound","params":[{"name":"location","type":"Location","desc":"The location to play the sound"},{"name":"sound","type":"Sound","desc":"The sound to play"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"}],"desc":"Play a sound for a player at the location.\n<p>\nThis function will fail silently if Location or Sound are null.","ret":""},{"name":"playSound","params":[{"name":"location","type":"Location","desc":"The location to play the sound"},{"name":"sound","type":"String","desc":"The internal sound name to play"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"}],"desc":"Play a sound for a player at the location.\n<p>\nThis function will fail silently if Location or Sound are null. No\nsound will be heard by the player if their client does not have the\nrespective sound for the value passed.","ret":""},{"name":"playSound","params":[{"name":"location","type":"Location","desc":"The location to play the sound"},{"name":"sound","type":"Sound","desc":"The sound to play"},{"name":"category","type":"SoundCategory","desc":"The category of the sound"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"}],"desc":"Play a sound for a player at the location.\n<p>\nThis function will fail silently if Location or Sound are null.","ret":""},{"name":"playSound","params":[{"name":"location","type":"Location","desc":"The location to play the sound"},{"name":"sound","type":"String","desc":"The internal sound name to play"},{"name":"category","type":"SoundCategory","desc":"The category of the sound"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"}],"desc":"Play a sound for a player at the location.\n<p>\nThis function will fail silently if Location or Sound are null. No sound\nwill be heard by the player if their client does not have the respective\nsound for the value passed.","ret":""},{"name":"playSound","params":[{"name":"location","type":"Location","desc":"The location to play the sound"},{"name":"sound","type":"Sound","desc":"The sound to play"},{"name":"category","type":"SoundCategory","desc":"The category of the sound"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"},{"name":"seed","type":"long","desc":"The seed for the sound"}],"desc":"Play a sound for a player at the location. For sounds with multiple\nvariations passing the same seed will always play the same variation.\n<p>\nThis function will fail silently if Location or Sound are null.","ret":""},{"name":"playSound","params":[{"name":"location","type":"Location","desc":"The location to play the sound"},{"name":"sound","type":"String","desc":"The internal sound name to play"},{"name":"category","type":"SoundCategory","desc":"The category of the sound"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"},{"name":"seed","type":"long","desc":"The seed for the sound"}],"desc":"Play a sound for a player at the location. For sounds with multiple\nvariations passing the same seed will always play the same variation.\n<p>\nThis function will fail silently if Location or Sound are null. No sound\nwill be heard by the player if their client does not have the respective\nsound for the value passed.","ret":""},{"name":"playSound","params":[{"name":"entity","type":"Entity","desc":"The entity to play the sound"},{"name":"sound","type":"Sound","desc":"The sound to play"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"}],"desc":"Play a sound for a player at the location of the entity.\n<p>\nThis function will fail silently if Entity or Sound are null.","ret":""},{"name":"playSound","params":[{"name":"entity","type":"Entity","desc":"The entity to play the sound"},{"name":"sound","type":"String","desc":"The sound to play"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"}],"desc":"Play a sound for a player at the location of the entity.\n<p>\nThis function will fail silently if Entity or Sound are null.","ret":""},{"name":"playSound","params":[{"name":"entity","type":"Entity","desc":"The entity to play the sound"},{"name":"sound","type":"Sound","desc":"The sound to play"},{"name":"category","type":"SoundCategory","desc":"The category of the sound"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"}],"desc":"Play a sound for a player at the location of the entity.\n<p>\nThis function will fail silently if Entity or Sound are null.","ret":""},{"name":"playSound","params":[{"name":"entity","type":"Entity","desc":"The entity to play the sound"},{"name":"sound","type":"String","desc":"The sound to play"},{"name":"category","type":"SoundCategory","desc":"The category of the sound"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"}],"desc":"Play a sound for a player at the location of the entity.\n<p>\nThis function will fail silently if Entity or Sound are null.","ret":""},{"name":"playSound","params":[{"name":"entity","type":"Entity","desc":"The entity to play the sound"},{"name":"sound","type":"Sound","desc":"The sound to play"},{"name":"category","type":"SoundCategory","desc":"The category of the sound"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"},{"name":"seed","type":"long","desc":"The seed for the sound"}],"desc":"Play a sound for a player at the location of the entity. For sounds with\nmultiple variations passing the same seed will always play the same variation.\n<p>\nThis function will fail silently if Entity or Sound are null.","ret":""},{"name":"playSound","params":[{"name":"entity","type":"Entity","desc":"The entity to play the sound"},{"name":"sound","type":"String","desc":"The sound to play"},{"name":"category","type":"SoundCategory","desc":"The category of the sound"},{"name":"volume","type":"float","desc":"The volume of the sound"},{"name":"pitch","type":"float","desc":"The pitch of the sound"},{"name":"seed","type":"long","desc":"The seed for the sound"}],"desc":"Play a sound for a player at the location of the entity. For sounds with\nmultiple variations passing the same seed will always play the same variation.\n<p>\nThis function will fail silently if Entity or Sound are null.","ret":""},{"name":"stopSound","params":[{"name":"sound","type":"Sound","desc":"the sound to stop"}],"desc":"Stop the specified sound from playing.","ret":""},{"name":"stopSound","params":[{"name":"sound","type":"String","desc":"the sound to stop"}],"desc":"Stop the specified sound from playing.","ret":""},{"name":"stopSound","params":[{"name":"sound","type":"Sound","desc":"the sound to stop"},{"name":"category","type":"SoundCategory","desc":"the category of the sound"}],"desc":"Stop the specified sound from playing.","ret":""},{"name":"stopSound","params":[{"name":"sound","type":"String","desc":"the sound to stop"},{"name":"category","type":"SoundCategory","desc":"the category of the sound"}],"desc":"Stop the specified sound from playing.","ret":""},{"name":"stopSound","params":[{"name":"category","type":"SoundCategory","desc":"the sound category to stop"}],"desc":"Stop the specified sound category from playing.","ret":""},{"name":"stopAllSounds","params":[],"desc":"Stop all sounds from playing.","ret":""},{"name":"playEffect","params":[{"name":"loc","type":"Location","desc":"the location to play the effect at"},{"name":"effect","type":"Effect","desc":"the {@link Effect}"},{"name":"data","type":"int","desc":"a data bit needed for some effects"}],"desc":"Plays an effect to just this player.","ret":""},{"name":"playEffect","params":[{"name":"loc","type":"Location","desc":"the location to play the effect at"},{"name":"effect","type":"Effect","desc":"the {@link Effect}"},{"name":"data","type":"T","desc":"a data bit needed for some effects"}],"desc":"Plays an effect to just this player.","ret":""},{"name":"breakBlock","params":[{"name":"block","type":"Block","desc":"the block to break"}],"desc":"Force this player to break a Block using the item in their main hand.\n\nThis method will respect enchantments, handle item durability (if\napplicable) and drop experience and the correct items according to the\ntool/item in the player's hand.\n<p>\nNote that this method will call a {@link BlockBreakEvent}, meaning that\nthis method may not be successful in breaking the block if the event was\ncancelled by a third party plugin. Care should be taken if running this\nmethod in a BlockBreakEvent listener as recursion may be possible if it\nis invoked on the same {@link Block} being broken in the event.\n<p>\nAdditionally, a {@link BlockDropItemEvent} is called for the items\ndropped by this method (if successful).\n<p>\nThe block must be in the same world as the player.","ret":"true if the block was broken, false if the break failed"},{"name":"sendBlockChange","params":[{"name":"loc","type":"Location","desc":"The location of the changed block"},{"name":"material","type":"Material","desc":"The new block"},{"name":"data","type":"byte","desc":"The block data"}],"desc":"Send a block change. This fakes a block change packet for a user at a\ncertain location. This will not actually change the world in any way.","ret":""},{"name":"sendBlockChange","params":[{"name":"loc","type":"Location","desc":"The location of the changed block"},{"name":"block","type":"BlockData","desc":"The new block"}],"desc":"Send a block change. This fakes a block change packet for a user at a\ncertain location. This will not actually change the world in any way.","ret":""},{"name":"sendBlockChanges","params":[{"name":"blocks","type":"Collection<BlockState>","desc":"the block states to send to the player"}],"desc":"Send a multi-block change. This fakes a block change packet for a user\nat multiple locations. This will not actually change the world in any\nway.\n<p>\nThis method may send multiple packets to the client depending on the\nblocks in the collection. A packet must be sent for each chunk section\nmodified, meaning one packet for each 16x16x16 block area. Even if only\none block is changed in two different chunk sections, two packets will\nbe sent.\n<p>\nAdditionally, this method cannot guarantee the functionality of changes\nbeing sent to the player in chunks not loaded by the client. It is the\nresponsibility of the caller to ensure that the client is within range\nof the changed blocks or to handle any side effects caused as a result.","ret":""},{"name":"sendBlockChanges","params":[{"name":"blocks","type":"Collection<BlockState>","desc":"the block states to send to the player"},{"name":"suppressLightUpdates","type":"boolean","desc":"whether or not light updates should be\nsuppressed when updating the blocks on the client"}],"desc":"Send a multi-block change. This fakes a block change packet for a user\nat multiple locations. This will not actually change the world in any\nway.\n<p>\nThis method may send multiple packets to the client depending on the\nblocks in the collection. A packet must be sent for each chunk section\nmodified, meaning one packet for each 16x16x16 block area. Even if only\none block is changed in two different chunk sections, two packets will\nbe sent.\n<p>\nAdditionally, this method cannot guarantee the functionality of changes\nbeing sent to the player in chunks not loaded by the client. It is the\nresponsibility of the caller to ensure that the client is within range\nof the changed blocks or to handle any side effects caused as a result.","ret":""},{"name":"sendBlockDamage","params":[{"name":"loc","type":"Location","desc":"the location of the damaged block"},{"name":"progress","type":"float","desc":"the progress from 0.0 - 1.0 where 0 is no damage and\n1.0 is the most damaged"}],"desc":"Send block damage. This fakes block break progress at a certain location\nsourced by this player. This will not actually change the block's break\nprogress in any way.","ret":""},{"name":"sendMultiBlockChange","params":[{"name":"blockChanges","type":"Map<? extends io.papermc.paper.math.Position,BlockData>","desc":"A map of the positions you want to change to their new block data"}],"desc":"Send multiple block changes. This fakes a multi block change packet for each\nchunk section that a block change occurs. This will not actually change the world in any way.","ret":""},{"name":"sendMultiBlockChange","params":[{"name":"blockChanges","type":"Map<? extends io.papermc.paper.math.Position,BlockData>","desc":"A map of the positions you want to change to their new block data"},{"name":"suppressLightUpdates","type":"boolean","desc":"Whether to suppress light updates or not"}],"desc":"Send multiple block changes. This fakes a multi block change packet for each\nchunk section that a block change occurs. This will not actually change the world in any way.","ret":""},{"name":"sendBlockDamage","params":[{"name":"loc","type":"Location","desc":"the location of the damaged block"},{"name":"progress","type":"float","desc":"the progress from 0.0 - 1.0 where 0 is no damage and\n1.0 is the most damaged"},{"name":"source","type":"Entity","desc":"the entity to which the damage belongs"}],"desc":"Send block damage. This fakes block break progress at a certain location\nsourced by the provided entity. This will not actually change the block's\nbreak progress in any way.\n<p>\nAt the same location for each unique damage source sent to the player, a\nseparate damage overlay will be displayed with the given progress. This allows\nfor block damage at different progress from multiple entities at once.","ret":""},{"name":"sendBlockDamage","params":[{"name":"loc","type":"Location","desc":"the location of the damaged block"},{"name":"progress","type":"float","desc":"the progress from 0.0 - 1.0 where 0 is no damage and\n1.0 is the most damaged"},{"name":"sourceId","type":"int","desc":"the entity id of the entity to which the damage belongs.\nCan be an id that does not associate directly with an existing or loaded entity."}],"desc":"Send block damage. This fakes block break progress at a certain location\nsourced by the provided entity id. This will not actually change the block's\nbreak progress in any way.\n<p>\nAt the same location for each unique damage source sent to the player, a\nseparate damage overlay will be displayed with the given progress. This allows\nfor block damage at different progress from multiple entities at once.","ret":""},{"name":"sendEquipmentChange","params":[{"name":"entity","type":"LivingEntity","desc":"the entity whose equipment to change"},{"name":"slot","type":"EquipmentSlot","desc":"the slot to change"},{"name":"item","type":"ItemStack","desc":"the item to which the slot should be changed, or null to set\nit to air"}],"desc":"Send an equipment change for the target entity. This will not\nactually change the entity's equipment in any way.","ret":""},{"name":"sendEquipmentChange","params":[{"name":"entity","type":"LivingEntity","desc":"the entity whose equipment to change"},{"name":"items","type":"Map<EquipmentSlot,ItemStack>","desc":"the slots to change, where the values are the items to which\nthe slot should be changed. null values will set the slot to air"}],"desc":"Send multiple equipment changes for the target entity. This will not\nactually change the entity's equipment in any way.","ret":""},{"name":"sendSignChange","params":[{"name":"loc","type":"Location","desc":"the location of the sign"},{"name":"lines","type":"java.util.List<? extends net.kyori.adventure.text.Component>","desc":"the new text on the sign or null to clear it"}],"desc":"Send a sign change. This fakes a sign change packet for a user at\na certain location. This will not actually change the world in any way.\nThis method will use a sign at the location's block or a faked sign\nsent via\n{@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n<p>\nIf the client does not have a sign at the given location it will\ndisplay an error message to the user.","ret":""},{"name":"sendSignChange","params":[{"name":"loc","type":"Location","desc":"the location of the sign"},{"name":"lines","type":"java.util.List<? extends net.kyori.adventure.text.Component>","desc":"the new text on the sign or null to clear it"},{"name":"dyeColor","type":"DyeColor","desc":"the color of the sign"}],"desc":"Send a sign change. This fakes a sign change packet for a user at\na certain location. This will not actually change the world in any way.\nThis method will use a sign at the location's block or a faked sign\nsent via\n{@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n<p>\nIf the client does not have a sign at the given location it will\ndisplay an error message to the user.","ret":""},{"name":"sendSignChange","params":[{"name":"loc","type":"Location","desc":"the location of the sign"},{"name":"lines","type":"java.util.List<? extends net.kyori.adventure.text.Component>","desc":"the new text on the sign or null to clear it"},{"name":"hasGlowingText","type":"boolean","desc":"whether the text of the sign should glow as if dyed with a glowing ink sac"}],"desc":"Send a sign change. This fakes a sign change packet for a user at\na certain location. This will not actually change the world in any way.\nThis method will use a sign at the location's block or a faked sign\nsent via\n{@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n<p>\nIf the client does not have a sign at the given location it will\ndisplay an error message to the user.","ret":""},{"name":"sendSignChange","params":[{"name":"loc","type":"Location","desc":"the location of the sign"},{"name":"lines","type":"java.util.List<? extends net.kyori.adventure.text.Component>","desc":"the new text on the sign or null to clear it"},{"name":"dyeColor","type":"DyeColor","desc":"the color of the sign"},{"name":"hasGlowingText","type":"boolean","desc":"whether the text of the sign should glow as if dyed with a glowing ink sac"}],"desc":"Send a sign change. This fakes a sign change packet for a user at\na certain location. This will not actually change the world in any way.\nThis method will use a sign at the location's block or a faked sign\nsent via\n{@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n<p>\nIf the client does not have a sign at the given location it will\ndisplay an error message to the user.","ret":""},{"name":"sendSignChange","params":[{"name":"loc","type":"Location","desc":"the location of the sign"},{"name":"lines","type":"String[]","desc":"the new text on the sign or null to clear it"}],"desc":"Send a sign change. This fakes a sign change packet for a user at\na certain location. This will not actually change the world in any way.\nThis method will use a sign at the location's block or a faked sign\nsent via\n{@link #sendBlockChange(org.bukkit.Location, org.bukkit.block.data.BlockData)}.\n<p>\nIf the client does not have a sign at the given location it will\ndisplay an error message to the user.\n<p>\nTo change all attributes of a sign, including the back Side, use\n{@link #sendBlockUpdate(org.bukkit.Location, org.bukkit.block.TileState)}.","ret":""},{"name":"sendSignChange","params":[{"name":"loc","type":"Location","desc":"the location of the sign"},{"name":"lines","type":"String[]","desc":"the new text on the sign or null to clear it"},{"name":"dyeColor","type":"DyeColor","desc":"the color of the sign"}],"desc":"Send a sign change. This fakes a sign change packet for a user at\na certain location. This will not actually change the world in any way.\nThis method will use a sign at the location's block or a faked sign\nsent via\n{@link #sendBlockChange(org.bukkit.Location, org.bukkit.block.data.BlockData)}.\n<p>\nIf the client does not have a sign at the given location it will\ndisplay an error message to the user.\n<p>\nTo change all attributes of a sign, including the back Side, use\n{@link #sendBlockUpdate(org.bukkit.Location, org.bukkit.block.TileState)}.","ret":""},{"name":"sendSignChange","params":[{"name":"loc","type":"Location","desc":"the location of the sign"},{"name":"lines","type":"String[]","desc":"the new text on the sign or null to clear it"},{"name":"dyeColor","type":"DyeColor","desc":"the color of the sign"},{"name":"hasGlowingText","type":"boolean","desc":"if the sign's text should be glowing"}],"desc":"Send a sign change. This fakes a sign change packet for a user at\na certain location. This will not actually change the world in any way.\nThis method will use a sign at the location's block or a faked sign\nsent via\n{@link #sendBlockChange(org.bukkit.Location, org.bukkit.block.data.BlockData)}.\n<p>\nIf the client does not have a sign at the given location it will\ndisplay an error message to the user.\n<p>\nTo change all attributes of a sign, including the back Side, use\n{@link #sendBlockUpdate(org.bukkit.Location, org.bukkit.block.TileState)}.","ret":""},{"name":"sendBlockUpdate","params":[{"name":"loc","type":"Location","desc":"the location of the sign"},{"name":"tileState","type":"TileState","desc":"the tile state"}],"desc":"Send a TileState change. This fakes a TileState change for a user at\nthe given location. This will not actually change the world in any way.\nThis method will use a TileState at the location's block or a faked TileState\nsent via\n{@link #sendBlockChange(org.bukkit.Location, org.bukkit.block.data.BlockData)}.\n<p>\nIf the client does not have an appropriate tile at the given location it\nmay display an error message to the user.\n<p>\n{@link BlockData#createBlockState()} can be used to create a {@link BlockState}.","ret":""},{"name":"sendPotionEffectChange","params":[{"name":"entity","type":"LivingEntity","desc":"the entity whose potion effects to change"},{"name":"effect","type":"PotionEffect","desc":"the effect to change"}],"desc":"Change a potion effect for the target entity. This will not actually\nchange the entity's potion effects in any way.\n<p>\n<b>Note:</b> Sending an effect change to a player for themselves may\ncause unexpected behavior on the client. Effects sent this way will also\nnot be removed when their timer reaches 0, they can be removed with\n{@link #sendPotionEffectChangeRemove(LivingEntity, PotionEffectType)}","ret":""},{"name":"sendPotionEffectChangeRemove","params":[{"name":"entity","type":"LivingEntity","desc":"the entity whose potion effects to change"},{"name":"type","type":"PotionEffectType","desc":"the effect type to remove"}],"desc":"Remove a potion effect for the target entity. This will not actually\nchange the entity's potion effects in any way.\n<p>\n<b>Note:</b> Sending an effect change to a player for themselves may\ncause unexpected behavior on the client.","ret":""},{"name":"sendMap","params":[{"name":"map","type":"MapView","desc":"The map to be sent"}],"desc":"Render a map and send it to the player in its entirety. This may be\nused when streaming the map in the normal manner is not desirable.","ret":""},{"name":"showWinScreen","params":[],"desc":"Shows the player the win screen that normally is only displayed after one kills the ender dragon\nand exits the end for the first time.\nIn vanilla, the win screen starts with a poem and then continues with the credits but its content can be\nchanged by using a resource pack.\n<br>\nCalling this method does not change the value of {@link #hasSeenWinScreen()}.\nThat means that the win screen is still displayed to a player if they leave the end for the first time, even though\nthey have seen it before because this method was called.\nNote this method does not make the player invulnerable, which is normally expected when viewing credits.","ret":""},{"name":"hasSeenWinScreen","params":[],"desc":"Returns whether this player has seen the win screen before.\nWhen a player leaves the end the win screen is shown to them if they have not seen it before.","ret":"Whether this player has seen the win screen before"},{"name":"setHasSeenWinScreen","params":[{"name":"hasSeenWinScreen","type":"boolean","desc":"Whether this player has seen the win screen before"}],"desc":"Changes whether this player has seen the win screen before.\nWhen a player leaves the end the win screen is shown to them if they have not seen it before.","ret":""},{"name":"banPlayerFull","params":[{"name":"reason","type":"String","desc":"Reason for ban"},{"name":"source","type":"String","desc":"Source of ban, or null for default"}],"desc":"Permanently Bans the Profile and IP address currently used by the player.","ret":"Ban Entry"},{"name":"banPlayerFull","params":[{"name":"reason","type":"String","desc":"Reason for Ban"},{"name":"expires","type":"java.util.Date","desc":"When to expire the ban"}],"desc":"Bans the Profile and IP address currently used by the player.","ret":"Ban Entry"},{"name":"banPlayerFull","params":[{"name":"reason","type":"String","desc":"Reason for Ban"},{"name":"expires","type":"java.util.Date","desc":"When to expire the ban"},{"name":"source","type":"String","desc":"Source of the ban, or null for default"}],"desc":"Bans the Profile and IP address currently used by the player.","ret":"Ban Entry"},{"name":"banPlayerIP","params":[{"name":"reason","type":"String","desc":"Reason for ban"},{"name":"kickPlayer","type":"boolean","desc":"Whether or not to kick the player afterwards"}],"desc":"Permanently Bans the IP address currently used by the player.\nDoes not ban the Profile, use {@link #banPlayerFull(String, java.util.Date, String)}","ret":"Ban Entry"},{"name":"banPlayerIP","params":[{"name":"reason","type":"String","desc":"Reason for ban"},{"name":"source","type":"String","desc":"Source of ban, or null for default"},{"name":"kickPlayer","type":"boolean","desc":"Whether or not to kick the player afterwards"}],"desc":"Permanently Bans the IP address currently used by the player.\nDoes not ban the Profile, use {@link #banPlayerFull(String, java.util.Date, String)}","ret":"Ban Entry"},{"name":"banPlayerIP","params":[{"name":"reason","type":"String","desc":"Reason for Ban"},{"name":"expires","type":"java.util.Date","desc":"When to expire the ban"},{"name":"kickPlayer","type":"boolean","desc":"Whether or not to kick the player afterwards"}],"desc":"Bans the IP address currently used by the player.\nDoes not ban the Profile, use {@link #banPlayerFull(String, java.util.Date, String)}","ret":"Ban Entry"},{"name":"banPlayerIP","params":[{"name":"reason","type":"String","desc":"Reason for ban"}],"desc":"Permanently Bans the IP address currently used by the player.\nDoes not ban the Profile, use {@link #banPlayerFull(String, java.util.Date, String)}","ret":"Ban Entry"},{"name":"banPlayerIP","params":[{"name":"reason","type":"String","desc":"Reason for ban"},{"name":"source","type":"String","desc":"Source of ban, or null for default"}],"desc":"Permanently Bans the IP address currently used by the player.\nDoes not ban the Profile, use {@link #banPlayerFull(String, java.util.Date, String)}","ret":"Ban Entry"},{"name":"banPlayerIP","params":[{"name":"reason","type":"String","desc":"Reason for Ban"},{"name":"expires","type":"java.util.Date","desc":"When to expire the ban"}],"desc":"Bans the IP address currently used by the player.\nDoes not ban the Profile, use {@link #banPlayerFull(String, java.util.Date, String)}","ret":"Ban Entry"},{"name":"banPlayerIP","params":[{"name":"reason","type":"String","desc":"Reason for Ban"},{"name":"expires","type":"java.util.Date","desc":"When to expire the ban"},{"name":"source","type":"String","desc":"Source of the ban or null for default"}],"desc":"Bans the IP address currently used by the player.\nDoes not ban the Profile, use {@link #banPlayerFull(String, java.util.Date, String)}","ret":"Ban Entry"},{"name":"banPlayerIP","params":[{"name":"reason","type":"String","desc":"Reason for Ban"},{"name":"expires","type":"java.util.Date","desc":"When to expire the ban"},{"name":"source","type":"String","desc":"Source of the ban or null for default"},{"name":"kickPlayer","type":"boolean","desc":"if the targeted player should be kicked"}],"desc":"Bans the IP address currently used by the player.\nDoes not ban the Profile, use {@link #banPlayerFull(String, java.util.Date, String)}","ret":"Ban Entry"},{"name":"sendActionBar","params":[{"name":"message","type":"String","desc":"The message to send"}],"desc":"Sends an Action Bar message to the client.\n\nUse Section symbols for legacy color codes to send formatting.","ret":""},{"name":"sendActionBar","params":[{"name":"alternateChar","type":"char","desc":"Alternate symbol such as '&amp;'"},{"name":"message","type":"String","desc":"The message to send"}],"desc":"Sends an Action Bar message to the client.\n\nUse supplied alternative character to the section symbol to represent legacy color codes.","ret":""},{"name":"sendActionBar","params":[{"name":"message","type":"net.md_5.bungee.api.chat.BaseComponent","desc":"The components to send"}],"desc":"Sends an Action Bar message to the client.","ret":""},{"name":"sendMessage","params":[{"name":"component","type":"net.md_5.bungee.api.chat.BaseComponent","desc":"the components to send"}],"desc":"Sends the component to the player","ret":""},{"name":"sendMessage","params":[{"name":"components","type":"net.md_5.bungee.api.chat.BaseComponent","desc":"the components to send"}],"desc":"Sends an array of components as a single message to the player","ret":""},{"name":"sendMessage","params":[{"name":"position","type":"net.md_5.bungee.api.ChatMessageType","desc":"the screen position"},{"name":"components","type":"net.md_5.bungee.api.chat.BaseComponent","desc":"the components to send"}],"desc":"Sends an array of components as a single message to the specified screen position of this player","ret":""},{"name":"setPlayerListHeaderFooter","params":[{"name":"header","type":"net.md_5.bungee.api.chat.BaseComponent[]","desc":"content for the top of the player list"},{"name":"footer","type":"net.md_5.bungee.api.chat.BaseComponent[]","desc":"content for the bottom of the player list"}],"desc":"Set the text displayed in the player list header and footer for this player","ret":""},{"name":"setPlayerListHeaderFooter","params":[{"name":"header","type":"net.md_5.bungee.api.chat.BaseComponent","desc":"content for the top of the player list"},{"name":"footer","type":"net.md_5.bungee.api.chat.BaseComponent","desc":"content for the bottom of the player list"}],"desc":"Set the text displayed in the player list header and footer for this player","ret":""},{"name":"setTitleTimes","params":[{"name":"fadeInTicks","type":"int","desc":"ticks to fade-in"},{"name":"stayTicks","type":"int","desc":"ticks to stay visible"},{"name":"fadeOutTicks","type":"int","desc":"ticks to fade-out"}],"desc":"Update the times for titles displayed to the player","ret":""},{"name":"setSubtitle","params":[{"name":"subtitle","type":"net.md_5.bungee.api.chat.BaseComponent[]","desc":"Subtitle to set"}],"desc":"Update the subtitle of titles displayed to the player","ret":""},{"name":"setSubtitle","params":[{"name":"subtitle","type":"net.md_5.bungee.api.chat.BaseComponent","desc":"Subtitle to set"}],"desc":"Update the subtitle of titles displayed to the player","ret":""},{"name":"showTitle","params":[{"name":"title","type":"net.md_5.bungee.api.chat.BaseComponent[]","desc":"Title to set"}],"desc":"Show the given title to the player, along with the last subtitle set, using the last set times","ret":""},{"name":"showTitle","params":[{"name":"title","type":"net.md_5.bungee.api.chat.BaseComponent","desc":"Title to set"}],"desc":"Show the given title to the player, along with the last subtitle set, using the last set times","ret":""},{"name":"showTitle","params":[{"name":"title","type":"net.md_5.bungee.api.chat.BaseComponent[]","desc":"big text"},{"name":"subtitle","type":"net.md_5.bungee.api.chat.BaseComponent[]","desc":"little text under it"},{"name":"fadeInTicks","type":"int","desc":"ticks to fade-in"},{"name":"stayTicks","type":"int","desc":"ticks to stay visible"},{"name":"fadeOutTicks","type":"int","desc":"ticks to fade-out"}],"desc":"Show the given title and subtitle to the player using the given times","ret":""},{"name":"showTitle","params":[{"name":"title","type":"net.md_5.bungee.api.chat.BaseComponent","desc":"big text"},{"name":"subtitle","type":"net.md_5.bungee.api.chat.BaseComponent","desc":"little text under it"},{"name":"fadeInTicks","type":"int","desc":"ticks to fade-in"},{"name":"stayTicks","type":"int","desc":"ticks to stay visible"},{"name":"fadeOutTicks","type":"int","desc":"ticks to fade-out"}],"desc":"Show the given title and subtitle to the player using the given times","ret":""},{"name":"sendTitle","params":[{"name":"title","type":"com.destroystokyo.paper.Title","desc":"the title to send"}],"desc":"Show the title to the player, overriding any previously displayed title.\n\n<p>This method overrides any previous title, use {@link #updateTitle(com.destroystokyo.paper.Title)} to change the existing one.</p>","ret":""},{"name":"updateTitle","params":[{"name":"title","type":"com.destroystokyo.paper.Title","desc":"the title to send"}],"desc":"Show the title to the player, overriding any previously displayed title.\n\n<p>This method doesn't override previous titles, but changes their values.</p>","ret":""},{"name":"hideTitle","params":[],"desc":"Hide any title that is currently visible to the player","ret":""},{"name":"sendHurtAnimation","params":[{"name":"yaw","type":"float","desc":"the yaw in degrees relative to the player's direction where 0\nis in front of the player, 90 is to the right, 180 is behind, and 270 is\nto the left"}],"desc":"Send a hurt animation. This fakes incoming damage towards the player from\nthe given yaw relative to the player's direction.","ret":""},{"name":"addCustomChatCompletions","params":[{"name":"completions","type":"Collection<String>","desc":"the completions to send"}],"desc":"Add custom chat completion suggestions shown to the player while typing a\nmessage.","ret":""},{"name":"removeCustomChatCompletions","params":[{"name":"completions","type":"Collection<String>","desc":"the completions to remove"}],"desc":"Remove custom chat completion suggestions shown to the player while\ntyping a message.\n\nOnline player names cannot be removed with this method. This will affect\nonly custom completions added by {@link #addCustomChatCompletions(Collection)}\nor {@link #setCustomChatCompletions(Collection)}.","ret":""},{"name":"setCustomChatCompletions","params":[{"name":"completions","type":"Collection<String>","desc":"the completions to set"}],"desc":"Set the list of chat completion suggestions shown to the player while\ntyping a message.\n<p>\nIf completions were set previously, this method will remove them all and\nreplace them with the provided completions.","ret":""},{"name":"getPreviousGameMode","params":[],"desc":"Gets this player's previous {@link GameMode}","ret":"Previous game mode or null"},{"name":"setPlayerTime","params":[{"name":"time","type":"long","desc":"The current player's perceived time or the player's time\n    offset from the server time."},{"name":"relative","type":"boolean","desc":"When true the player time is kept relative to its world\n    time."}],"desc":"Sets the current time on the player's client. When relative is true the\nplayer's time will be kept synchronized to its world time with the\nspecified offset.\n<p>\nWhen using non relative time the player's time will stay fixed at the\nspecified time parameter. It's up to the caller to continue updating\nthe player's time. To restore player time to normal use\nresetPlayerTime().","ret":""},{"name":"getPlayerTime","params":[],"desc":"Returns the player's current timestamp.","ret":"The player's time"},{"name":"getPlayerTimeOffset","params":[],"desc":"Returns the player's current time offset relative to server time, or\nthe current player's fixed time if the player's time is absolute.","ret":"The player's time"},{"name":"isPlayerTimeRelative","params":[],"desc":"Returns true if the player's time is relative to the server time,\notherwise the player's time is absolute and will not change its current\ntime unless done so with setPlayerTime().","ret":"true if the player's time is relative to the server time."},{"name":"resetPlayerTime","params":[],"desc":"Restores the normal condition where the player's time is synchronized\nwith the server time.\n<p>\nEquivalent to calling setPlayerTime(0, true).","ret":""},{"name":"setPlayerWeather","params":[{"name":"type","type":"WeatherType","desc":"The WeatherType enum type the player should experience"}],"desc":"Sets the type of weather the player will see.  When used, the weather\nstatus of the player is locked until {@link #resetPlayerWeather()} is\nused.","ret":""},{"name":"getPlayerWeather","params":[],"desc":"Returns the type of weather the player is currently experiencing.","ret":"The WeatherType that the player is currently experiencing or\n    null if player is seeing server weather."},{"name":"resetPlayerWeather","params":[],"desc":"Restores the normal condition where the player's weather is controlled\nby server conditions.","ret":""},{"name":"giveExp","params":[{"name":"amount","type":"int","desc":"Exp amount to give"}],"desc":"Gives the player the amount of experience specified.","ret":""},{"name":"getExpCooldown","params":[],"desc":"Gets the player's cooldown between picking up experience orbs.","ret":"The cooldown in ticks"},{"name":"setExpCooldown","params":[{"name":"ticks","type":"int","desc":"The cooldown in ticks"}],"desc":"Sets the player's cooldown between picking up experience orbs..\n\n<strong>Note:</strong> Setting this to 0 allows the player to pick up\ninstantly, but setting this to a negative value will cause the player to\nbe unable to pick up xp-orbs.\n\nCalling this Method will result in {@link PlayerExpCooldownChangeEvent}\nbeing called.","ret":""},{"name":"giveExp","params":[{"name":"amount","type":"int","desc":"Exp amount to give"},{"name":"applyMending","type":"boolean","desc":"Mend players items with mending, with same behavior as picking up orbs. calls {@link #applyMending(int)}"}],"desc":"Gives the player the amount of experience specified.","ret":""},{"name":"applyMending","params":[{"name":"amount","type":"int","desc":"Exp to apply"}],"desc":"Applies the mending effect to any items just as picking up an orb would.\n\nCan also be called with {@link #giveExp(int, boolean)} by passing true to applyMending","ret":"the remaining experience"},{"name":"giveExpLevels","params":[{"name":"amount","type":"int","desc":"amount of experience levels to give or take"}],"desc":"Gives the player the amount of experience levels specified. Levels can\nbe taken by specifying a negative amount.","ret":""},{"name":"getExp","params":[],"desc":"Gets the players current experience points towards the next level.\n<p>\nThis is a percentage value. 0 is \"no progress\" and 1 is \"next level\".","ret":"Current experience points"},{"name":"setExp","params":[{"name":"exp","type":"float","desc":"New experience points"}],"desc":"Sets the players current experience points towards the next level\n<p>\nThis is a percentage value. 0 is \"no progress\" and 1 is \"next level\".","ret":""},{"name":"getLevel","params":[],"desc":"Gets the players current experience level","ret":"Current experience level"},{"name":"setLevel","params":[{"name":"level","type":"int","desc":"New experience level"}],"desc":"Sets the players current experience level","ret":""},{"name":"getTotalExperience","params":[],"desc":"Gets the players total experience points.\n<br>\nThis refers to the total amount of experience the player has collected\nover time and is not currently displayed to the client.","ret":"Current total experience points"},{"name":"setTotalExperience","params":[{"name":"exp","type":"int","desc":"New total experience points"}],"desc":"Sets the players current experience points.\n<br>\nThis refers to the total amount of experience the player has collected\nover time and is not currently displayed to the client.","ret":""},{"name":"calculateTotalExperiencePoints","params":[],"desc":"Gets the players total amount of experience points he collected to reach the current level and level progress.\n\n<p>This method differs from {@link #getTotalExperience()} in that this method always returns an\nup-to-date value that reflects the players{@link #getLevel() level} and {@link #getExp() level progress}</p>","ret":"Current total experience points"},{"name":"setExperienceLevelAndProgress","params":[{"name":"totalExperience","type":"int","desc":"New total experience points"}],"desc":"Updates the players level and level progress to that what would be reached when the total amount of experience\nhad been collected.\n\n<p>This method differs from {@link #setTotalExperience(int)} in that this method actually updates the\n{@link #getLevel() level} and {@link #getExp() level progress} so that a subsequent call of\n{@link #calculateTotalExperiencePoints()} yields the same amount of points that have been set</p>","ret":""},{"name":"getExperiencePointsNeededForNextLevel","params":[],"desc":"Gets the total amount of experience points that are needed to reach the next level from zero progress towards it.\n\n<p>Can be used with {@link #getExp()} to calculate the current points for the current level and alike</p>","ret":"The required experience points"},{"name":"sendExperienceChange","params":[{"name":"progress","type":"float","desc":"Experience progress percentage (between 0.0 and 1.0)"}],"desc":"Send an experience change.\n\nThis fakes an experience change packet for a user. This will not actually\nchange the experience points in any way.","ret":""},{"name":"sendExperienceChange","params":[{"name":"progress","type":"float","desc":"New experience progress percentage (between 0.0 and 1.0)"},{"name":"level","type":"int","desc":"New experience level"}],"desc":"Send an experience change.\n\nThis fakes an experience change packet for a user. This will not actually\nchange the experience points in any way.","ret":""},{"name":"getAllowFlight","params":[],"desc":"Determines if the Player is allowed to fly via jump key double-tap like\nin creative mode.","ret":"True if the player is allowed to fly."},{"name":"setAllowFlight","params":[{"name":"flight","type":"boolean","desc":"If flight should be allowed."}],"desc":"Sets if the Player is allowed to fly via jump key double-tap like in\ncreative mode.","ret":""},{"name":"setFlyingFallDamage","params":[{"name":"flyingFallDamage","type":"net.kyori.adventure.util.TriState","desc":"Enables fall damage when {@link #getAllowFlight()} is {@code true}"}],"desc":"Allows you to enable fall damage while {@link #getAllowFlight()} is {@code true}","ret":""},{"name":"hasFlyingFallDamage","params":[],"desc":"Allows you to get if fall damage is enabled while {@link #getAllowFlight()} is {@code true}","ret":"A tristate of whether fall damage is enabled, not set, or disabled when {@link #getAllowFlight()} is {@code true}"},{"name":"hidePlayer","params":[{"name":"player","type":"Player","desc":"Player to hide"}],"desc":"Hides a player from this player","ret":""},{"name":"hidePlayer","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that wants to hide the player"},{"name":"player","type":"Player","desc":"Player to hide"}],"desc":"Hides a player from this player","ret":""},{"name":"showPlayer","params":[{"name":"player","type":"Player","desc":"Player to show"}],"desc":"Allows this player to see a player that was previously hidden","ret":""},{"name":"showPlayer","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that wants to show the player"},{"name":"player","type":"Player","desc":"Player to show"}],"desc":"Allows this player to see a player that was previously hidden. If\nanother plugin had hidden the player too, then the player will\nremain hidden until the other plugin calls this method too.","ret":""},{"name":"canSee","params":[{"name":"player","type":"Player","desc":"Player to check"}],"desc":"Checks to see if a player has been hidden from this player","ret":"True if the provided player is not being hidden from this\n    player"},{"name":"hideEntity","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that wants to hide the entity"},{"name":"entity","type":"Entity","desc":"Entity to hide"}],"desc":"Visually hides an entity from this player.","ret":""},{"name":"showEntity","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that wants to show the entity"},{"name":"entity","type":"Entity","desc":"Entity to show"}],"desc":"Allows this player to see an entity that was previously hidden. If\nanother plugin had hidden the entity too, then the entity will\nremain hidden until the other plugin calls this method too.","ret":""},{"name":"canSee","params":[{"name":"entity","type":"Entity","desc":"Entity to check"}],"desc":"Checks to see if an entity has been visually hidden from this player.","ret":"True if the provided entity is not being hidden from this\n    player"},{"name":"isListed","params":[{"name":"other","type":"Player","desc":"The other {@link Player} to check for listing."}],"desc":"Returns whether the {@code other} player is listed for {@code this}.","ret":"True if the {@code other} player is listed for {@code this}."},{"name":"unlistPlayer","params":[{"name":"other","type":"Player","desc":"The other {@link Player} to de-list."}],"desc":"Unlists the {@code other} player from the tablist.","ret":"True if the {@code other} player was listed."},{"name":"listPlayer","params":[{"name":"other","type":"Player","desc":"The other {@link Player} to list."}],"desc":"Lists the {@code other} player.","ret":"True if the {@code other} player was not listed."},{"name":"isFlying","params":[],"desc":"Checks to see if this player is currently flying or not.","ret":"True if the player is flying, else false."},{"name":"setFlying","params":[{"name":"value","type":"boolean","desc":"True to fly."}],"desc":"Makes this player start or stop flying.","ret":""},{"name":"setFlySpeed","params":[{"name":"value","type":"float","desc":"The new speed, from -1 to 1."}],"desc":"Sets the speed at which a client will fly. Negative values indicate\nreverse directions.","ret":""},{"name":"setWalkSpeed","params":[{"name":"value","type":"float","desc":"The new speed, from -1 to 1."}],"desc":"Sets the speed at which a client will walk. Negative values indicate\nreverse directions.","ret":""},{"name":"getFlySpeed","params":[],"desc":"Gets the current allowed speed that a client can fly.","ret":"The current allowed speed, from -1 to 1"},{"name":"getWalkSpeed","params":[],"desc":"Gets the current allowed speed that a client can walk.","ret":"The current allowed speed, from -1 to 1"},{"name":"setTexturePack","params":[{"name":"url","type":"String","desc":"The URL from which the client will download the texture\n    pack. The string must contain only US-ASCII characters and should\n    be encoded as per RFC 1738."}],"desc":"Request that the player's client download and switch texture packs.\n<p>\nThe player's client will download the new texture pack asynchronously\nin the background, and will automatically switch to it once the\ndownload is complete. If the client has downloaded and cached the same\ntexture pack in the past, it will perform a file size check against\nthe response content to determine if the texture pack has changed and\nneeds to be downloaded again. When this request is sent for the very\nfirst time from a given server, the client will first display a\nconfirmation GUI to the player before proceeding with the download.\n<p>\nNotes:\n<ul>\n<li>Players can disable server textures on their client, in which\n    case this method will have no affect on them. Use the\n    {@link PlayerResourcePackStatusEvent} to figure out whether or not\n    the player loaded the pack!\n<li>The request is send with \"null\" as the hash. This might result\n    in newer versions not loading the pack correctly.\n</ul>","ret":""},{"name":"setResourcePack","params":[{"name":"url","type":"String","desc":"The URL from which the client will download the resource\n    pack. The string must contain only US-ASCII characters and should\n    be encoded as per RFC 1738."}],"desc":"Request that the player's client download and switch resource packs.\n<p>\nThe player's client will download the new resource pack asynchronously\nin the background, and will automatically switch to it once the\ndownload is complete. If the client has downloaded and cached the same\nresource pack in the past, it will perform a file size check against\nthe response content to determine if the resource pack has changed and\nneeds to be downloaded again. When this request is sent for the very\nfirst time from a given server, the client will first display a\nconfirmation GUI to the player before proceeding with the download.\n<p>\nNotes:\n<ul>\n<li>Players can disable server resources on their client, in which\n    case this method will have no affect on them. Use the\n    {@link PlayerResourcePackStatusEvent} to figure out whether or not\n    the player loaded the pack!\n<li>The request is send with empty string as the hash. This might result\n    in newer versions not loading the pack correctly.\n</ul>","ret":""},{"name":"setResourcePack","params":[{"name":"url","type":"String","desc":"The URL from which the client will download the resource\n    pack. The string must contain only US-ASCII characters and should\n    be encoded as per RFC 1738."},{"name":"hash","type":"byte[]","desc":"The sha1 hash sum of the resource pack file which is used\n    to apply a cached version of the pack directly without downloading\n    if it is available. Hast to be 20 bytes long!"}],"desc":"Request that the player's client download and switch resource packs.\n<p>\nThe player's client will download the new resource pack asynchronously\nin the background, and will automatically switch to it once the\ndownload is complete. If the client has downloaded and cached a\nresource pack with the same hash in the past it will not download but\ndirectly apply the cached pack. If the hash is null and the client has\ndownloaded and cached the same resource pack in the past, it will\nperform a file size check against the response content to determine if\nthe resource pack has changed and needs to be downloaded again. When\nthis request is sent for the very first time from a given server, the\nclient will first display a confirmation GUI to the player before\nproceeding with the download.\n<p>\nNotes:\n<ul>\n<li>Players can disable server resources on their client, in which\n    case this method will have no affect on them. Use the\n    {@link PlayerResourcePackStatusEvent} to figure out whether or not\n    the player loaded the pack!\n<li>The request is sent with empty string as the hash when the hash is\n    not provided. This might result in newer versions not loading the\n    pack correctly.\n</ul>","ret":""},{"name":"setResourcePack","params":[{"name":"url","type":"String","desc":"The URL from which the client will download the resource\n    pack. The string must contain only US-ASCII characters and should\n    be encoded as per RFC 1738."},{"name":"hash","type":"byte[]","desc":"The sha1 hash sum of the resource pack file which is used\n    to apply a cached version of the pack directly without downloading\n    if it is available. Hast to be 20 bytes long!"},{"name":"prompt","type":"String","desc":"The optional custom prompt message to be shown to client."}],"desc":"Request that the player's client download and switch resource packs.\n<p>\nThe player's client will download the new resource pack asynchronously\nin the background, and will automatically switch to it once the\ndownload is complete. If the client has downloaded and cached a\nresource pack with the same hash in the past it will not download but\ndirectly apply the cached pack. If the hash is null and the client has\ndownloaded and cached the same resource pack in the past, it will\nperform a file size check against the response content to determine if\nthe resource pack has changed and needs to be downloaded again. When\nthis request is sent for the very first time from a given server, the\nclient will first display a confirmation GUI to the player before\nproceeding with the download.\n<p>\nNotes:\n<ul>\n<li>Players can disable server resources on their client, in which\n    case this method will have no affect on them. Use the\n    {@link PlayerResourcePackStatusEvent} to figure out whether or not\n    the player loaded the pack!\n<li>To remove a resource pack you can use\n    {@link #removeResourcePacks(UUID, UUID...)} or {@link #clearResourcePacks()}.\n<li>The request is sent with empty string as the hash when the hash is\n    not provided. This might result in newer versions not loading the\n    pack correctly.\n</ul>","ret":""},{"name":"setResourcePack","params":[{"name":"url","type":"String","desc":"The URL from which the client will download the resource\n    pack. The string must contain only US-ASCII characters and should\n    be encoded as per RFC 1738."},{"name":"hash","type":"byte[]","desc":"The sha1 hash sum of the resource pack file which is used\n    to apply a cached version of the pack directly without downloading\n    if it is available. Hast to be 20 bytes long!"},{"name":"prompt","type":"net.kyori.adventure.text.Component","desc":"The optional custom prompt message to be shown to client."}],"desc":"Request that the player's client download and switch resource packs.\n<p>\nThe player's client will download the new resource pack asynchronously\nin the background, and will automatically switch to it once the\ndownload is complete. If the client has downloaded and cached a\nresource pack with the same hash in the past it will not download but\ndirectly apply the cached pack. If the hash is null and the client has\ndownloaded and cached the same resource pack in the past, it will\nperform a file size check against the response content to determine if\nthe resource pack has changed and needs to be downloaded again. When\nthis request is sent for the very first time from a given server, the\nclient will first display a confirmation GUI to the player before\nproceeding with the download.\n<p>\nNotes:\n<ul>\n<li>Players can disable server resources on their client, in which\n    case this method will have no affect on them. Use the\n    {@link PlayerResourcePackStatusEvent} to figure out whether or not\n    the player loaded the pack!\n<li>To remove a resource pack you can use\n    {@link #removeResourcePacks(UUID, UUID...)} or {@link #clearResourcePacks()}.\n<li>The request is sent with empty string as the hash when the hash is\n    not provided. This might result in newer versions not loading the\n    pack correctly.\n</ul>","ret":""},{"name":"setResourcePack","params":[{"name":"url","type":"String","desc":"The URL from which the client will download the resource\n    pack. The string must contain only US-ASCII characters and should\n    be encoded as per RFC 1738."},{"name":"hash","type":"byte[]","desc":"The sha1 hash sum of the resource pack file which is used\n    to apply a cached version of the pack directly without downloading\n    if it is available. Hast to be 20 bytes long!"},{"name":"force","type":"boolean","desc":"If true, the client will be disconnected from the server\n    when it declines to use the resource pack."}],"desc":"Request that the player's client download and switch resource packs.\n<p>\nThe player's client will download the new resource pack asynchronously\nin the background, and will automatically switch to it once the\ndownload is complete. If the client has downloaded and cached a\nresource pack with the same hash in the past it will not download but\ndirectly apply the cached pack. If the hash is null and the client has\ndownloaded and cached the same resource pack in the past, it will\nperform a file size check against the response content to determine if\nthe resource pack has changed and needs to be downloaded again. When\nthis request is sent for the very first time from a given server, the\nclient will first display a confirmation GUI to the player before\nproceeding with the download.\n<p>\nNotes:\n<ul>\n<li>Players can disable server resources on their client, in which\n    case this method will have no affect on them. Use the\n    {@link PlayerResourcePackStatusEvent} to figure out whether or not\n    the player loaded the pack!\n<li>To remove a resource pack you can use\n    {@link #removeResourcePacks(UUID, UUID...)} or {@link #clearResourcePacks()}.\n<li>The request is sent with empty string as the hash when the hash is\n    not provided. This might result in newer versions not loading the\n    pack correctly.\n</ul>","ret":""},{"name":"setResourcePack","params":[{"name":"url","type":"String","desc":"The URL from which the client will download the resource\n    pack. The string must contain only US-ASCII characters and should\n    be encoded as per RFC 1738."},{"name":"hash","type":"byte[]","desc":"The sha1 hash sum of the resource pack file which is used\n    to apply a cached version of the pack directly without downloading\n    if it is available. Hast to be 20 bytes long!"},{"name":"prompt","type":"String","desc":"The optional custom prompt message to be shown to client."},{"name":"force","type":"boolean","desc":"If true, the client will be disconnected from the server\n    when it declines to use the resource pack."}],"desc":"Request that the player's client download and switch resource packs.\n<p>\nThe player's client will download the new resource pack asynchronously\nin the background, and will automatically switch to it once the\ndownload is complete. If the client has downloaded and cached a\nresource pack with the same hash in the past it will not download but\ndirectly apply the cached pack. If the hash is null and the client has\ndownloaded and cached the same resource pack in the past, it will\nperform a file size check against the response content to determine if\nthe resource pack has changed and needs to be downloaded again. When\nthis request is sent for the very first time from a given server, the\nclient will first display a confirmation GUI to the player before\nproceeding with the download.\n<p>\nNotes:\n<ul>\n<li>Players can disable server resources on their client, in which\n    case this method will have no affect on them. Use the\n    {@link PlayerResourcePackStatusEvent} to figure out whether or not\n    the player loaded the pack!\n<li>To remove a resource pack you can use\n    {@link #removeResourcePacks(UUID, UUID...)} or {@link #clearResourcePacks()}.\n<li>The request is sent with empty string as the hash when the hash is\n    not provided. This might result in newer versions not loading the\n    pack correctly.\n</ul>","ret":""},{"name":"setResourcePack","params":[{"name":"url","type":"String","desc":"The URL from which the client will download the resource\n    pack. The string must contain only US-ASCII characters and should\n    be encoded as per RFC 1738."},{"name":"hash","type":"byte[]","desc":"The sha1 hash sum of the resource pack file which is used\n    to apply a cached version of the pack directly without downloading\n    if it is available. Hast to be 20 bytes long!"},{"name":"prompt","type":"net.kyori.adventure.text.Component","desc":"The optional custom prompt message to be shown to client."},{"name":"force","type":"boolean","desc":"If true, the client will be disconnected from the server\n    when it declines to use the resource pack."}],"desc":"Request that the player's client download and switch resource packs.\n<p>\nThe player's client will download the new resource pack asynchronously\nin the background, and will automatically switch to it once the\ndownload is complete. If the client has downloaded and cached a\nresource pack with the same hash in the past it will not download but\ndirectly apply the cached pack. If the hash is null and the client has\ndownloaded and cached the same resource pack in the past, it will\nperform a file size check against the response content to determine if\nthe resource pack has changed and needs to be downloaded again. When\nthis request is sent for the very first time from a given server, the\nclient will first display a confirmation GUI with a custom prompt\nto the player before proceeding with the download.\n<p>\nNotes:\n<ul>\n<li>Players can disable server resources on their client, in which\n    case this method will have no affect on them. Use the\n    {@link PlayerResourcePackStatusEvent} to figure out whether or not\n    the player loaded the pack!\n<li>To remove a resource pack you can use\n    {@link #removeResourcePacks(UUID, UUID...)} or {@link #clearResourcePacks()}.\n<li>The request is sent with empty string as the hash when the hash is\n    not provided. This might result in newer versions not loading the\n    pack correctly.\n</ul>","ret":""},{"name":"setResourcePack","params":[{"name":"id","type":"UUID","desc":"Unique resource pack ID."},{"name":"url","type":"String","desc":"The URL from which the client will download the resource\n    pack. The string must contain only US-ASCII characters and should\n    be encoded as per RFC 1738."},{"name":"hash","type":"byte[]","desc":"The sha1 hash sum of the resource pack file which is used\n    to apply a cached version of the pack directly without downloading\n    if it is available. Hast to be 20 bytes long!"},{"name":"prompt","type":"String","desc":"The optional custom prompt message to be shown to client."},{"name":"force","type":"boolean","desc":"If true, the client will be disconnected from the server\n    when it declines to use the resource pack."}],"desc":"Request that the player's client download and switch resource packs.\n<p>\nThe player's client will download the new resource pack asynchronously\nin the background, and will automatically switch to it once the\ndownload is complete. If the client has downloaded and cached a\nresource pack with the same hash in the past it will not download but\ndirectly apply the cached pack. If the hash is null and the client has\ndownloaded and cached the same resource pack in the past, it will\nperform a file size check against the response content to determine if\nthe resource pack has changed and needs to be downloaded again. When\nthis request is sent for the very first time from a given server, the\nclient will first display a confirmation GUI to the player before\nproceeding with the download.\n<p>\nNotes:\n<ul>\n<li>Players can disable server resources on their client, in which\n    case this method will have no affect on them. Use the\n    {@link PlayerResourcePackStatusEvent} to figure out whether or not\n    the player loaded the pack!\n<li>To remove a resource pack you can use\n    {@link #removeResourcePacks(UUID, UUID...)} or {@link #clearResourcePacks()}.\n<li>The request is sent with empty string as the hash when the hash is\n    not provided. This might result in newer versions not loading the\n    pack correctly.\n</ul>","ret":""},{"name":"setResourcePack","params":[{"name":"uuid","type":"UUID","desc":"Unique resource pack ID."},{"name":"url","type":"String","desc":"The URL from which the client will download the resource\n    pack. The string must contain only US-ASCII characters and should\n    be encoded as per RFC 1738."},{"name":"hash","type":"byte[]","desc":"The sha1 hash sum of the resource pack file which is used\n    to apply a cached version of the pack directly without downloading\n    if it is available. Hast to be 20 bytes long!"},{"name":"prompt","type":"net.kyori.adventure.text.Component","desc":"The optional custom prompt message to be shown to client."},{"name":"force","type":"boolean","desc":"If true, the client will be disconnected from the server\n    when it declines to use the resource pack."}],"desc":"Request that the player's client download and switch resource packs.\n<p>\nThe player's client will download the new resource pack asynchronously\nin the background, and will automatically switch to it once the\ndownload is complete. If the client has downloaded and cached a\nresource pack with the same hash in the past it will not download but\ndirectly apply the cached pack. If the hash is null and the client has\ndownloaded and cached the same resource pack in the past, it will\nperform a file size check against the response content to determine if\nthe resource pack has changed and needs to be downloaded again. When\nthis request is sent for the very first time from a given server, the\nclient will first display a confirmation GUI to the player before\nproceeding with the download.\n<p>\nNotes:\n<ul>\n<li>Players can disable server resources on their client, in which\n    case this method will have no affect on them. Use the\n    {@link PlayerResourcePackStatusEvent} to figure out whether or not\n    the player loaded the pack!\n<li>To remove a resource pack you can use\n    {@link #removeResourcePacks(UUID, UUID...)} or {@link #clearResourcePacks()}.\n<li>The request is sent with empty string as the hash when the hash is\n    not provided. This might result in newer versions not loading the\n    pack correctly.\n</ul>","ret":""},{"name":"setResourcePack","params":[{"name":"url","type":"String","desc":"The URL from which the client will download the resource\n    pack. The string must contain only US-ASCII characters and should\n    be encoded as per RFC 1738."},{"name":"hash","type":"String","desc":"A 40 character hexadecimal and lowercase SHA-1 digest of\n    the resource pack file."}],"desc":"Request that the player's client download and switch resource packs.\n<p>\nThe player's client will download the new resource pack asynchronously\nin the background, and will automatically switch to it once the\ndownload is complete. If the client has downloaded and cached the same\nresource pack in the past, it will perform a quick timestamp check\nover the network to determine if the resource pack has changed and\nneeds to be downloaded again. When this request is sent for the very\nfirst time from a given server, the client will first display a\nconfirmation GUI to the player before proceeding with the download.\n<p>\nNotes:\n<ul>\n<li>Players can disable server resources on their client, in which\n    case this method will have no affect on them.\n<li>To remove a resource pack you can use\n    {@link #removeResourcePacks(UUID, UUID...)} or {@link #clearResourcePacks()}.\n</ul>","ret":""},{"name":"setResourcePack","params":[{"name":"url","type":"String","desc":"The URL from which the client will download the resource\n    pack. The string must contain only US-ASCII characters and should\n    be encoded as per RFC 1738."},{"name":"hash","type":"String","desc":"A 40 character hexadecimal and lowercase SHA-1 digest of\n    the resource pack file."},{"name":"required","type":"boolean","desc":"Marks if the resource pack should be required by the client"}],"desc":"Request that the player's client download and switch resource packs.\n<p>\nThe player's client will download the new resource pack asynchronously\nin the background, and will automatically switch to it once the\ndownload is complete. If the client has downloaded and cached the same\nresource pack in the past, it will perform a quick timestamp check\nover the network to determine if the resource pack has changed and\nneeds to be downloaded again. When this request is sent for the very\nfirst time from a given server, the client will first display a\nconfirmation GUI to the player before proceeding with the download.\n<p>\nNotes:\n<ul>\n<li>Players can disable server resources on their client, in which\n    case this method will have no affect on them.\n<li>To remove a resource pack you can use\n    {@link #removeResourcePacks(UUID, UUID...)} or {@link #clearResourcePacks()}.\n</ul>","ret":""},{"name":"setResourcePack","params":[{"name":"url","type":"String","desc":"The URL from which the client will download the resource\n    pack. The string must contain only US-ASCII characters and should\n    be encoded as per RFC 1738."},{"name":"hash","type":"String","desc":"A 40 character hexadecimal and lowercase SHA-1 digest of\n    the resource pack file."},{"name":"required","type":"boolean","desc":"Marks if the resource pack should be required by the client"},{"name":"resourcePackPrompt","type":"net.kyori.adventure.text.Component","desc":"A Prompt to be displayed in the client request"}],"desc":"Request that the player's client download and switch resource packs.\n<p>\nThe player's client will download the new resource pack asynchronously\nin the background, and will automatically switch to it once the\ndownload is complete. If the client has downloaded and cached the same\nresource pack in the past, it will perform a quick timestamp check\nover the network to determine if the resource pack has changed and\nneeds to be downloaded again. When this request is sent for the very\nfirst time from a given server, the client will first display a\nconfirmation GUI to the player before proceeding with the download.\n<p>\nNotes:\n<ul>\n<li>Players can disable server resources on their client, in which\n    case this method will have no affect on them.\n<li>To remove a resource pack you can use\n    {@link #removeResourcePacks(UUID, UUID...)} or {@link #clearResourcePacks()}.\n</ul>","ret":""},{"name":"setResourcePack","params":[{"name":"uuid","type":"UUID","desc":"Unique resource pack ID."},{"name":"url","type":"String","desc":"The URL from which the client will download the resource\n    pack. The string must contain only US-ASCII characters and should\n    be encoded as per RFC 1738."},{"name":"hash","type":"String","desc":"A 40 character hexadecimal and lowercase SHA-1 digest of\n    the resource pack file."},{"name":"resourcePackPrompt","type":"net.kyori.adventure.text.Component","desc":"A Prompt to be displayed in the client request"},{"name":"required","type":"boolean","desc":"Marks if the resource pack should be required by the client"}],"desc":"Request that the player's client download and switch resource packs.\n<p>\nThe player's client will download the new resource pack asynchronously\nin the background, and will automatically switch to it once the\ndownload is complete. If the client has downloaded and cached the same\nresource pack in the past, it will perform a quick timestamp check\nover the network to determine if the resource pack has changed and\nneeds to be downloaded again. When this request is sent for the very\nfirst time from a given server, the client will first display a\nconfirmation GUI to the player before proceeding with the download.\n<p>\nNotes:\n<ul>\n<li>Players can disable server resources on their client, in which\n    case this method will have no affect on them.\n<li>To remove a resource pack you can use\n    {@link #removeResourcePacks(UUID, UUID...)} or {@link #clearResourcePacks()}.\n</ul>","ret":""},{"name":"getResourcePackStatus","params":[],"desc":"Gets the most recent resource pack status from the player.","ret":"the most recent status or null"},{"name":"getResourcePackHash","params":[],"desc":"Gets the most recent pack hash from the player.","ret":"the most recent hash or null"},{"name":"hasResourcePack","params":[],"desc":"Gets if the last resource pack status from the player\nwas {@link org.bukkit.event.player.PlayerResourcePackStatusEvent.Status#SUCCESSFULLY_LOADED}.","ret":"true if last status was successfully loaded"},{"name":"addResourcePack","params":[{"name":"id","type":"UUID","desc":"Unique resource pack ID."},{"name":"url","type":"String","desc":"The URL from which the client will download the resource\n    pack. The string must contain only US-ASCII characters and should\n    be encoded as per RFC 1738."},{"name":"hash","type":"byte[]","desc":"The sha1 hash sum of the resource pack file which is used\n    to apply a cached version of the pack directly without downloading\n    if it is available. Hast to be 20 bytes long!"},{"name":"prompt","type":"String","desc":"The optional custom prompt message to be shown to client."},{"name":"force","type":"boolean","desc":"If true, the client will be disconnected from the server\n    when it declines to use the resource pack."}],"desc":"Request that the player's client download and include another resource pack.\n<p>\nThe player's client will download the new resource pack asynchronously\nin the background, and will automatically add to it once the\ndownload is complete. If the client has downloaded and cached a\nresource pack with the same hash in the past it will not download but\ndirectly apply the cached pack. If the hash is null and the client has\ndownloaded and cached the same resource pack in the past, it will\nperform a file size check against the response content to determine if\nthe resource pack has changed and needs to be downloaded again. When\nthis request is sent for the very first time from a given server, the\nclient will first display a confirmation GUI to the player before\nproceeding with the download.\n<p>\nNotes:\n<ul>\n<li>Players can disable server resources on their client, in which\n    case this method will have no affect on them. Use the\n    {@link PlayerResourcePackStatusEvent} to figure out whether or not\n    the player loaded the pack!\n<li>To remove a resource pack you can use\n    {@link #removeResourcePack(UUID)} or {@link #removeResourcePacks()}.\n<li>The request is sent with empty string as the hash when the hash is\n    not provided. This might result in newer versions not loading the\n    pack correctly.\n</ul>","ret":""},{"name":"removeResourcePack","params":[{"name":"id","type":"UUID","desc":"the id of the resource pack."}],"desc":"Request that the player's client remove a resource pack sent by the\nserver.","ret":""},{"name":"removeResourcePacks","params":[],"desc":"Request that the player's client remove all loaded resource pack sent by\nthe server.","ret":""},{"name":"getScoreboard","params":[],"desc":"Gets the Scoreboard displayed to this player","ret":"The current scoreboard seen by this player"},{"name":"setScoreboard","params":[{"name":"scoreboard","type":"Scoreboard","desc":"New Scoreboard for the player"}],"desc":"Sets the player's visible Scoreboard.","ret":""},{"name":"getWorldBorder","params":[],"desc":"Gets the {@link WorldBorder} visible to this Player, or null if viewing\nthe world's world border.","ret":"the player's world border"},{"name":"setWorldBorder","params":[{"name":"border","type":"WorldBorder","desc":"the border to set, or null to set to the world border of\nthe player's current world"}],"desc":"Sets the {@link WorldBorder} visible to this Player.","ret":""},{"name":"sendHealthUpdate","params":[{"name":"health","type":"double","desc":"the health. If 0.0, the client will believe it is dead"},{"name":"foodLevel","type":"int","desc":"the food level"},{"name":"saturation","type":"float","desc":"the saturation"}],"desc":"Send a health update to the player. This will adjust the health, food, and\nsaturation on the client and will not affect the player's actual values on\nthe server. As soon as any of these values change on the server, changes sent\nby this method will no longer be visible.","ret":""},{"name":"sendHealthUpdate","params":[],"desc":"Send a health update to the player using its known server values. This will\nsynchronize the health, food, and saturation on the client and therefore may\nbe useful when changing a player's maximum health attribute.","ret":""},{"name":"isHealthScaled","params":[],"desc":"Gets if the client is displayed a 'scaled' health, that is, health on a\nscale from 0-{@link #getHealthScale()}.","ret":"if client health display is scaled"},{"name":"setHealthScaled","params":[{"name":"scale","type":"boolean","desc":"if the client health display is scaled"}],"desc":"Sets if the client is displayed a 'scaled' health, that is, health on a\nscale from 0-{@link #getHealthScale()}.\n<p>\nDisplayed health follows a simple formula <code>displayedHealth =\ngetHealth() / getMaxHealth() * getHealthScale()</code>.","ret":""},{"name":"setHealthScale","params":[{"name":"scale","type":"double","desc":"the number to scale health to"}],"desc":"Sets the number to scale health to for the client; this will also\n{@link #setHealthScaled(boolean) setHealthScaled(true)}.\n<p>\nDisplayed health follows a simple formula <code>displayedHealth =\ngetHealth() / getMaxHealth() * getHealthScale()</code>.","ret":""},{"name":"getHealthScale","params":[],"desc":"Gets the number that health is scaled to for the client.","ret":"the number that health would be scaled to for the client if\n    HealthScaling is set to true"},{"name":"getSpectatorTarget","params":[],"desc":"Gets the entity which is followed by the camera when in\n{@link GameMode#SPECTATOR}.","ret":"the followed entity, or null if not in spectator mode or not\nfollowing a specific entity."},{"name":"setSpectatorTarget","params":[{"name":"entity","type":"Entity","desc":"the entity to follow or null to reset"}],"desc":"Sets the entity which is followed by the camera when in\n{@link GameMode#SPECTATOR}.","ret":""},{"name":"sendTitle","params":[{"name":"title","type":"String","desc":"Title text"},{"name":"subtitle","type":"String","desc":"Subtitle text"}],"desc":"Sends a title and a subtitle message to the player. If either of these\nvalues are null, they will not be sent and the display will remain\nunchanged. If they are empty strings, the display will be updated as\nsuch. If the strings contain a new line, only the first line will be\nsent. The titles will be displayed with the client's default timings.","ret":""},{"name":"sendTitle","params":[{"name":"title","type":"String","desc":"Title text"},{"name":"subtitle","type":"String","desc":"Subtitle text"},{"name":"fadeIn","type":"int","desc":"time in ticks for titles to fade in. Defaults to 10."},{"name":"stay","type":"int","desc":"time in ticks for titles to stay. Defaults to 70."},{"name":"fadeOut","type":"int","desc":"time in ticks for titles to fade out. Defaults to 20."}],"desc":"Sends a title and a subtitle message to the player. If either of these\nvalues are null, they will not be sent and the display will remain\nunchanged. If they are empty strings, the display will be updated as\nsuch. If the strings contain a new line, only the first line will be\nsent. All timings values may take a value of -1 to indicate that they\nwill use the last value sent (or the defaults if no title has been\ndisplayed).","ret":""},{"name":"resetTitle","params":[],"desc":"Resets the title displayed to the player. This will clear the displayed\ntitle / subtitle and reset timings to their default values.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"location","type":"Location","desc":"the location to spawn at"},{"name":"count","type":"int","desc":"the number of particles"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"x","type":"double","desc":"the position on the x axis to spawn at"},{"name":"y","type":"double","desc":"the position on the y axis to spawn at"},{"name":"z","type":"double","desc":"the position on the z axis to spawn at"},{"name":"count","type":"int","desc":"the number of particles"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"location","type":"Location","desc":"the location to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"data","type":"T","desc":"the data to use for the particle or null,\n            the type of this depends on {@link Particle#getDataType()}"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"x","type":"double","desc":"the position on the x axis to spawn at"},{"name":"y","type":"double","desc":"the position on the y axis to spawn at"},{"name":"z","type":"double","desc":"the position on the z axis to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"data","type":"T","desc":"the data to use for the particle or null,\n            the type of this depends on {@link Particle#getDataType()}"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"location","type":"Location","desc":"the location to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"offsetX","type":"double","desc":"the maximum random offset on the X axis"},{"name":"offsetY","type":"double","desc":"the maximum random offset on the Y axis"},{"name":"offsetZ","type":"double","desc":"the maximum random offset on the Z axis"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"x","type":"double","desc":"the position on the x axis to spawn at"},{"name":"y","type":"double","desc":"the position on the y axis to spawn at"},{"name":"z","type":"double","desc":"the position on the z axis to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"offsetX","type":"double","desc":"the maximum random offset on the X axis"},{"name":"offsetY","type":"double","desc":"the maximum random offset on the Y axis"},{"name":"offsetZ","type":"double","desc":"the maximum random offset on the Z axis"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"location","type":"Location","desc":"the location to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"offsetX","type":"double","desc":"the maximum random offset on the X axis"},{"name":"offsetY","type":"double","desc":"the maximum random offset on the Y axis"},{"name":"offsetZ","type":"double","desc":"the maximum random offset on the Z axis"},{"name":"data","type":"T","desc":"the data to use for the particle or null,\n            the type of this depends on {@link Particle#getDataType()}"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"x","type":"double","desc":"the position on the x axis to spawn at"},{"name":"y","type":"double","desc":"the position on the y axis to spawn at"},{"name":"z","type":"double","desc":"the position on the z axis to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"offsetX","type":"double","desc":"the maximum random offset on the X axis"},{"name":"offsetY","type":"double","desc":"the maximum random offset on the Y axis"},{"name":"offsetZ","type":"double","desc":"the maximum random offset on the Z axis"},{"name":"data","type":"T","desc":"the data to use for the particle or null,\n            the type of this depends on {@link Particle#getDataType()}"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"location","type":"Location","desc":"the location to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"offsetX","type":"double","desc":"the maximum random offset on the X axis"},{"name":"offsetY","type":"double","desc":"the maximum random offset on the Y axis"},{"name":"offsetZ","type":"double","desc":"the maximum random offset on the Z axis"},{"name":"extra","type":"double","desc":"the extra data for this particle, depends on the\n             particle used (normally speed)"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"x","type":"double","desc":"the position on the x axis to spawn at"},{"name":"y","type":"double","desc":"the position on the y axis to spawn at"},{"name":"z","type":"double","desc":"the position on the z axis to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"offsetX","type":"double","desc":"the maximum random offset on the X axis"},{"name":"offsetY","type":"double","desc":"the maximum random offset on the Y axis"},{"name":"offsetZ","type":"double","desc":"the maximum random offset on the Z axis"},{"name":"extra","type":"double","desc":"the extra data for this particle, depends on the\n             particle used (normally speed)"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"location","type":"Location","desc":"the location to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"offsetX","type":"double","desc":"the maximum random offset on the X axis"},{"name":"offsetY","type":"double","desc":"the maximum random offset on the Y axis"},{"name":"offsetZ","type":"double","desc":"the maximum random offset on the Z axis"},{"name":"extra","type":"double","desc":"the extra data for this particle, depends on the\n             particle used (normally speed)"},{"name":"data","type":"T","desc":"the data to use for the particle or null,\n            the type of this depends on {@link Particle#getDataType()}"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.","ret":""},{"name":"spawnParticle","params":[{"name":"particle","type":"Particle","desc":"the particle to spawn"},{"name":"x","type":"double","desc":"the position on the x axis to spawn at"},{"name":"y","type":"double","desc":"the position on the y axis to spawn at"},{"name":"z","type":"double","desc":"the position on the z axis to spawn at"},{"name":"count","type":"int","desc":"the number of particles"},{"name":"offsetX","type":"double","desc":"the maximum random offset on the X axis"},{"name":"offsetY","type":"double","desc":"the maximum random offset on the Y axis"},{"name":"offsetZ","type":"double","desc":"the maximum random offset on the Z axis"},{"name":"extra","type":"double","desc":"the extra data for this particle, depends on the\n             particle used (normally speed)"},{"name":"data","type":"T","desc":"the data to use for the particle or null,\n            the type of this depends on {@link Particle#getDataType()}"}],"desc":"Spawns the particle (the number of times specified by count)\nat the target location. The position of each particle will be\nrandomized positively and negatively by the offset parameters\non each axis.","ret":""},{"name":"getAdvancementProgress","params":[{"name":"advancement","type":"Advancement","desc":"advancement"}],"desc":"Return the player's progression on the specified advancement.","ret":"object detailing the player's progress"},{"name":"getClientViewDistance","params":[],"desc":"Get the player's current client side view distance.\n<br>\nWill default to the server view distance if the client has not yet\ncommunicated this information,","ret":"client view distance as above"},{"name":"locale","params":[],"desc":"Gets the player's current locale.","ret":"the player's locale"},{"name":"getPing","params":[],"desc":"Gets the player's estimated ping in milliseconds.\n\nIn Vanilla this value represents a weighted average of the response time\nto application layer ping packets sent. This value does not represent the\nnetwork round trip time and as such may have less granularity and be\nimpacted by other sources. For these reasons it <b>should not</b> be used\nfor anti-cheat purposes. Its recommended use is only as a\n<b>qualitative</b> indicator of connection quality (Vanilla uses it for\nthis purpose in the tab list).","ret":"player ping"},{"name":"getLocale","params":[],"desc":"Gets the player's current locale.\n\nThe value of the locale String is not defined properly.\n<br>\nThe vanilla Minecraft client will use lowercase language / country pairs\nseparated by an underscore, but custom resource packs may use any format\nthey wish.","ret":"the player's locale"},{"name":"getAffectsSpawning","params":[],"desc":"Get whether the player can affect mob spawning","ret":"if the player can affect mob spawning"},{"name":"setAffectsSpawning","params":[{"name":"affects","type":"boolean","desc":"Whether the player can affect mob spawning"}],"desc":"Set whether the player can affect mob spawning","ret":""},{"name":"getViewDistance","params":[],"desc":"Gets the view distance for this player","ret":"the player's view distance"},{"name":"setViewDistance","params":[{"name":"viewDistance","type":"int","desc":"the player's view distance"}],"desc":"Sets the view distance for this player","ret":""},{"name":"getSimulationDistance","params":[],"desc":"Gets the simulation distance for this player","ret":"the player's simulation distance"},{"name":"setSimulationDistance","params":[{"name":"simulationDistance","type":"int","desc":"the player's new simulation distance"}],"desc":"Sets the simulation distance for this player","ret":""},{"name":"getNoTickViewDistance","params":[],"desc":"Gets the no-ticking view distance for this player.\n<p>\nNo-tick view distance is the view distance where chunks will load, however the chunks and their entities will not\nbe set to tick.\n</p>","ret":"The no-tick view distance for this player."},{"name":"setNoTickViewDistance","params":[{"name":"viewDistance","type":"int","desc":"view distance in [2, 32] or -1"}],"desc":"Sets the no-ticking view distance for this player.\n<p>\nNo-tick view distance is the view distance where chunks will load, however the chunks and their entities will not\nbe set to tick.\n</p>","ret":""},{"name":"getSendViewDistance","params":[],"desc":"Gets the sending view distance for this player.\n<p>\nSending view distance is the view distance where chunks will load in for players.\n</p>","ret":"The sending view distance for this player."},{"name":"setSendViewDistance","params":[{"name":"viewDistance","type":"int","desc":"view distance in [2, 32] or -1"}],"desc":"Sets the sending view distance for this player.\n<p>\nSending view distance is the view distance where chunks will load in for players.\n</p>","ret":""},{"name":"updateCommands","params":[],"desc":"Update the list of commands sent to the client.\n<br>\nGenerally useful to ensure the client has a complete list of commands\nafter permission changes are done.","ret":""},{"name":"openBook","params":[{"name":"book","type":"ItemStack","desc":"The book to open for this player"}],"desc":"Open a {@link Material#WRITTEN_BOOK} for a Player","ret":""},{"name":"openSign","params":[{"name":"sign","type":"Sign","desc":"The sign to edit"}],"desc":"Open a Sign for editing by the Player.\n\nThe Sign must be in the same world as the player.","ret":""},{"name":"openSign","params":[{"name":"sign","type":"Sign","desc":"The sign to edit"},{"name":"side","type":"Side","desc":"The side to edit"}],"desc":"Open a Sign for editing by the Player.\n\nThe Sign must be placed in the same world as the player.","ret":""},{"name":"showDemoScreen","params":[],"desc":"Shows the demo screen to the player, this screen is normally only seen in\nthe demo version of the game.\n<br>\nServers can modify the text on this screen using a resource pack.","ret":""},{"name":"isAllowingServerListings","params":[],"desc":"Gets whether the player has the \"Allow Server Listings\" setting enabled.","ret":"whether the player allows server listings"},{"name":"getPlayerProfile","params":[],"desc":"Gets a copy of this players profile","ret":"The players profile object"},{"name":"setPlayerProfile","params":[{"name":"profile","type":"com.destroystokyo.paper.profile.PlayerProfile","desc":"The new profile to use"}],"desc":"Changes the PlayerProfile for this player. This will cause this player\nto be re-registered to all clients that can currently see this player.\n<p>\nAfter executing this method, the player {@link java.util.UUID} won't\nbe swapped, only their name and profile properties.","ret":""},{"name":"getCooldownPeriod","params":[],"desc":"Returns the amount of ticks the current cooldown lasts","ret":"Amount of ticks cooldown will last"},{"name":"getCooledAttackStrength","params":[{"name":"adjustTicks","type":"float","desc":"Amount of ticks to add to cooldown counter for this calculation"}],"desc":"Returns the percentage of attack power available based on the cooldown (zero to one).","ret":"Percentage of attack power available"},{"name":"resetCooldown","params":[],"desc":"Reset the cooldown counter to 0, effectively starting the cooldown period.","ret":""},{"name":"getClientOption","params":[{"name":"option","type":"com.destroystokyo.paper.ClientOption<T>","desc":""}],"desc":"","ret":"the client option value of the player"},{"name":"boostElytra","params":[{"name":"firework","type":"ItemStack","desc":"The {@link Material#FIREWORK_ROCKET} to boost the player with"}],"desc":"Boost a Player that's {@link #isGliding()} using a {@link Firework}.\nIf the creation of the entity is cancelled, no boosting is done.\nThis method does not fire {@link com.destroystokyo.paper.event.player.PlayerElytraBoostEvent}.","ret":"The {@link Firework} boosting the Player or null if the spawning of the entity was cancelled"},{"name":"sendOpLevel","params":[{"name":"level","type":"byte","desc":"The level to send to the player. Must be in {@code [0, 4]}."}],"desc":"Send a packet to the player indicating its operator status level.\n<p>\n<b>Note:</b> This will not persist across more than the current connection, and setting the player's operator\nstatus as a later point <i>will</i> override the effects of this.","ret":""},{"name":"addAdditionalChatCompletions","params":[{"name":"completions","type":"java.util.Collection<String>","desc":"custom completions"}],"desc":"Adds custom chat completion suggestions that the client will\nsuggest when typing in chat.","ret":""},{"name":"removeAdditionalChatCompletions","params":[{"name":"completions","type":"java.util.Collection<String>","desc":"custom completions"}],"desc":"Removes custom chat completion suggestions that the client\nsuggests when typing in chat.\n\nNote: this only applies to previously added custom completions,\nonline player names are always suggested and cannot be removed.","ret":""},{"name":"getClientBrandName","params":[],"desc":"Returns player's client brand name. If the client didn't send this information, the brand name will be null.<br>\nFor the Notchian client this name defaults to <code>vanilla</code>. Some modified clients report other names such as <code>forge</code>.<br>","ret":"client brand name"},{"name":"setRotation","params":[{"name":"yaw","type":"float","desc":"the yaw"},{"name":"pitch","type":"float","desc":"the pitch"}],"desc":"Sets the player's rotation.","ret":""},{"name":"lookAt","params":[{"name":"x","type":"double","desc":"x coordinate"},{"name":"y","type":"double","desc":"y coordinate"},{"name":"z","type":"double","desc":"z coordinate"},{"name":"playerAnchor","type":"io.papermc.paper.entity.LookAnchor","desc":"What part of the player should face the given position"}],"desc":"Causes the player to look towards the given position.","ret":""},{"name":"lookAt","params":[{"name":"position","type":"io.papermc.paper.math.Position","desc":"Position to look at in the player's current world"},{"name":"playerAnchor","type":"io.papermc.paper.entity.LookAnchor","desc":"What part of the player should face the given position"}],"desc":"Causes the player to look towards the given position.","ret":""},{"name":"lookAt","params":[{"name":"entity","type":"org.bukkit.entity.Entity","desc":"Entity to look at"},{"name":"playerAnchor","type":"io.papermc.paper.entity.LookAnchor","desc":"What part of the player should face the entity"},{"name":"entityAnchor","type":"io.papermc.paper.entity.LookAnchor","desc":"What part of the entity the player should face"}],"desc":"Causes the player to look towards the given entity.","ret":""},{"name":"showElderGuardian","params":[],"desc":"Displays elder guardian effect with a sound","ret":""},{"name":"showElderGuardian","params":[{"name":"silent","type":"boolean","desc":"whether sound should be silenced"}],"desc":"Displays elder guardian effect and optionally plays a sound","ret":""},{"name":"getWardenWarningCooldown","params":[],"desc":"Returns the player's cooldown in ticks until the next Warden warning can occur.","ret":"ticks until next Warden warning can occur. 0 means there is no cooldown left."},{"name":"setWardenWarningCooldown","params":[{"name":"cooldown","type":"int","desc":"ticks until next Warden warning can occur. 0 means there is no cooldown left. Values less than 0 are set to 0."}],"desc":"Sets the player's cooldown in ticks until next Warden warning can occur.","ret":""},{"name":"getWardenTimeSinceLastWarning","params":[],"desc":"Returns time since last Warden warning in ticks.","ret":"ticks since last Warden warning"},{"name":"setWardenTimeSinceLastWarning","params":[{"name":"time","type":"int","desc":"ticks since last Warden warning"}],"desc":"Sets time since last Warden warning in ticks.","ret":""},{"name":"getWardenWarningLevel","params":[],"desc":"Returns the player's current Warden warning level.","ret":"current Warden warning level"},{"name":"setWardenWarningLevel","params":[{"name":"warningLevel","type":"int","desc":"player's Warden warning level. The warning level is internally limited to valid values."}],"desc":"Sets the player's Warden warning level.\n<p>\n<b>Note:</b> This will not actually spawn the Warden.\nEven if the warning level is over threshold, the player still needs to activate a Shrieker in order to summon the Warden.","ret":""},{"name":"increaseWardenWarningLevel","params":[],"desc":"Increases the player's Warden warning level if possible and not on cooldown.\n<p>\n<b>Note:</b> This will not actually spawn the Warden.\nEven if the warning level is over threshold, the player still needs to activate a Shrieker in order to summon the Warden.","ret":""},{"name":"getIdleDuration","params":[],"desc":"The idle duration is reset when the player\nsends specific action packets.\n<p>\nAfter the idle duration exceeds {@link org.bukkit.Bukkit#getIdleTimeout()}, the\nplayer will be kicked for {@link org.bukkit.event.player.PlayerKickEvent.Cause#IDLING}.","ret":"the current idle duration of this player"},{"name":"resetIdleDuration","params":[],"desc":"Resets this player's idle duration.\n<p>\nAfter the idle duration exceeds {@link org.bukkit.Bukkit#getIdleTimeout()}, the\nplayer will be kicked for {@link org.bukkit.event.player.PlayerKickEvent.Cause#IDLING}.","ret":""}],"desc":"Represents a player, connected or not"},{"FQCN":"org.bukkit.entity.Tadpole","methods":[{"name":"getAge","params":[],"desc":"Gets the age of this mob.","ret":"Age"},{"name":"setAge","params":[{"name":"age","type":"int","desc":"New age"}],"desc":"Sets the age of this mob.","ret":""},{"name":"setAgeLock","params":[{"name":"lock","type":"boolean","desc":"new lock"}],"desc":"Lock the age of the animal, setting this will prevent the animal from\nmaturing.","ret":""},{"name":"getAgeLock","params":[],"desc":"Gets the current agelock.","ret":"the current agelock"}],"desc":"A baby {@link Frog}."},{"FQCN":"org.bukkit.entity.EnderDragonPart","methods":[],"desc":"Represents an ender dragon part"},{"FQCN":"org.bukkit.entity.ChestedHorse","methods":[{"name":"isCarryingChest","params":[],"desc":"Gets whether the horse has a chest equipped.","ret":"true if the horse has chest storage"},{"name":"setCarryingChest","params":[{"name":"chest","type":"boolean","desc":"true if the horse should have a chest"}],"desc":"Sets whether the horse has a chest equipped. Removing a chest will also\nclear the chest's inventory.","ret":""}],"desc":"Represents Horse-like creatures which can carry an inventory."},{"FQCN":"org.bukkit.entity.MagmaCube","methods":[],"desc":"Represents a MagmaCube."},{"FQCN":"org.bukkit.entity.TextDisplay","methods":[{"name":"getText","params":[],"desc":"Gets the displayed text.","ret":"the displayed text."},{"name":"setText","params":[{"name":"text","type":"String","desc":"the new text"}],"desc":"Sets the displayed text.","ret":""},{"name":"text","params":[],"desc":"Gets the displayed text.","ret":"the displayed text"},{"name":"text","params":[{"name":"text","type":"net.kyori.adventure.text.Component","desc":"the new text"}],"desc":"Sets the displayed text.","ret":""},{"name":"getLineWidth","params":[],"desc":"Gets the maximum line width before wrapping.","ret":"the line width"},{"name":"setLineWidth","params":[{"name":"width","type":"int","desc":"new line width"}],"desc":"Sets the maximum line width before wrapping.","ret":""},{"name":"getBackgroundColor","params":[],"desc":"Gets the text background color.","ret":"the background color"},{"name":"getTextOpacity","params":[],"desc":"Gets the text opacity.","ret":"opacity or -1 if not set"},{"name":"setTextOpacity","params":[{"name":"opacity","type":"byte","desc":"new opacity or -1 if default"}],"desc":"Sets the text opacity.","ret":""},{"name":"isShadowed","params":[],"desc":"Gets if the text is shadowed.","ret":"shadow status"},{"name":"setShadowed","params":[{"name":"shadow","type":"boolean","desc":"if shadowed"}],"desc":"Sets if the text is shadowed.","ret":""},{"name":"isSeeThrough","params":[],"desc":"Gets if the text is see through.","ret":"see through status"},{"name":"setSeeThrough","params":[{"name":"seeThrough","type":"boolean","desc":"if see through"}],"desc":"Sets if the text is see through.","ret":""},{"name":"isDefaultBackground","params":[],"desc":"Gets if the text has its default background.","ret":"default background"},{"name":"setDefaultBackground","params":[{"name":"defaultBackground","type":"boolean","desc":"if default"}],"desc":"Sets if the text has its default background.","ret":""},{"name":"getAlignment","params":[],"desc":"Gets the text alignment for this display.","ret":"text alignment"},{"name":"setAlignment","params":[{"name":"alignment","type":"TextAlignment","desc":"new alignment"}],"desc":"Sets the text alignment for this display.","ret":""}],"desc":"Represents a text display entity."},{"FQCN":"org.bukkit.entity.Cow","methods":[],"desc":"Represents a Cow."},{"FQCN":"org.bukkit.entity.Spellcaster","methods":[{"name":"getSpell","params":[],"desc":"Gets the {@link Spell} the entity is currently using.","ret":"the current spell"},{"name":"setSpell","params":[{"name":"spell","type":"Spell","desc":"the spell the entity should be using"}],"desc":"Sets the {@link Spell} the entity is currently using.","ret":""}],"desc":"Represents a spell casting \"Illager\"."},{"FQCN":"org.bukkit.entity.Salmon","methods":[],"desc":""},{"FQCN":"org.bukkit.entity.Husk","methods":[{"name":"isConverting","params":[],"desc":"Get if this entity is in the process of converting to a Zombie as a\nresult of being underwater.","ret":"conversion status"},{"name":"getConversionTime","params":[],"desc":"Gets the amount of ticks until this entity will be converted to a Zombie\nas a result of being underwater.\n\nWhen this reaches 0, the entity will be converted.","ret":"conversion time"},{"name":"setConversionTime","params":[{"name":"time","type":"int","desc":"new conversion time"}],"desc":"Sets the amount of ticks until this entity will be converted to a Zombie\nas a result of being underwater.\n\nWhen this reaches 0, the entity will be converted. A value of less than 0\nwill stop the current conversion process without converting the current\nentity.","ret":""}],"desc":"Represents a Husk - variant of {@link Zombie}."},{"FQCN":"org.bukkit.entity.Pillager","methods":[],"desc":""},{"FQCN":"org.bukkit.entity.minecart.ExplosiveMinecart","methods":[{"name":"setFuseTicks","params":[{"name":"ticks","type":"int","desc":"the ticks"}],"desc":"Set the fuse ticks of this minecart.\n\nIf the fuse ticks are set to a non-zero value, this will ignite the\nexplosive.","ret":""},{"name":"getFuseTicks","params":[],"desc":"Get the fuse ticks of this minecart.\n\nIf the fuse ticks reach 0, the minecart will explode.","ret":"the fuse ticks, or -1 if this minecart's fuse has not yet been\nignited"},{"name":"ignite","params":[],"desc":"Ignite this minecart's fuse naturally.","ret":""},{"name":"isIgnited","params":[],"desc":"Check whether or not this minecart's fuse has been ignited.","ret":"true if ignited, false otherwise"},{"name":"explode","params":[],"desc":"Immediately explode this minecart with the power assumed by its current\nmovement.","ret":""},{"name":"explode","params":[{"name":"power","type":"double","desc":"the power to use. Must be positive and cannot exceed 5.0"}],"desc":"Immediately explode this minecart with the given power.","ret":""}],"desc":"Represents a Minecart with TNT inside it that can explode when triggered."},{"FQCN":"org.bukkit.entity.minecart.SpawnerMinecart","methods":[],"desc":"Represents a Minecart with an {@link org.bukkit.block.CreatureSpawner\nentity spawner} inside it."},{"FQCN":"org.bukkit.entity.minecart.CommandMinecart","methods":[{"name":"getCommand","params":[],"desc":"Gets the command that this CommandMinecart will run when activated.\nThis will never return null.  If the CommandMinecart does not have a\ncommand, an empty String will be returned instead.","ret":"Command that this CommandMinecart will run when powered."},{"name":"setCommand","params":[{"name":"command","type":"String","desc":"Command that this CommandMinecart will run when\n    activated."}],"desc":"Sets the command that this CommandMinecart will run when activated.\nSetting the command to null is the same as setting it to an empty\nString.","ret":""},{"name":"setName","params":[{"name":"name","type":"String","desc":"New name for this CommandMinecart."}],"desc":"Sets the name of this CommandMinecart.  The name is used with commands\nthat this CommandMinecart executes.  Setting the name to null is the\nsame as setting it to \"@\".","ret":""}],"desc":""},{"FQCN":"org.bukkit.entity.minecart.RideableMinecart","methods":[],"desc":"Represents a minecart that can have certain {@link\norg.bukkit.entity.Entity entities} as passengers. Normal passengers\ninclude all {@link org.bukkit.entity.LivingEntity living entities} with\nthe exception of {@link org.bukkit.entity.IronGolem iron golems}.\nNon-player entities that meet normal passenger criteria automatically\nmount these minecarts when close enough."},{"FQCN":"org.bukkit.entity.minecart.HopperMinecart","methods":[{"name":"isEnabled","params":[],"desc":"Checks whether or not this Minecart will pick up\nitems into its inventory.","ret":"true if the Minecart will pick up items"},{"name":"setEnabled","params":[{"name":"enabled","type":"boolean","desc":"new enabled state"}],"desc":"Sets whether this Minecart will pick up items.","ret":""},{"name":"getPickupCooldown","params":[],"desc":"Gets the number of ticks that this hopper minecart cannot pickup items up for.","ret":"ticks left on cooldown"},{"name":"setPickupCooldown","params":[{"name":"cooldown","type":"int","desc":"cooldown length in ticks"}],"desc":"Sets the number of ticks that this hopper minecart cannot pickup items for.","ret":""}],"desc":"Represents a Minecart with a Hopper inside it"},{"FQCN":"org.bukkit.entity.minecart.PoweredMinecart","methods":[{"name":"getFuel","params":[],"desc":"Get the number of ticks until the minecart runs out of fuel.","ret":"Number of ticks until the minecart runs out of fuel"},{"name":"setFuel","params":[{"name":"fuel","type":"int","desc":"Number of ticks until the minecart runs out of fuel"}],"desc":"Set the number of ticks until the minecart runs out of fuel.","ret":""},{"name":"getPushX","params":[],"desc":"Get the x push of the minecart.","ret":"The x push of the minecart"},{"name":"getPushZ","params":[],"desc":"Get the z push of the minecart.","ret":"The z push of the minecart"},{"name":"setPushX","params":[{"name":"xPush","type":"double","desc":"The new x push of the minecart"}],"desc":"Set the x push of the minecart.","ret":""},{"name":"setPushZ","params":[{"name":"zPush","type":"double","desc":"The new z push of the minecart"}],"desc":"Set the z push of the minecart.","ret":""}],"desc":"Represents a powered minecart. A powered minecart moves on its own when a\nplayer deposits {@link org.bukkit.Material#COAL fuel}."},{"FQCN":"org.bukkit.entity.minecart.StorageMinecart","methods":[],"desc":"Represents a minecart with a chest. These types of {@link Minecart\nminecarts} have their own inventory that can be accessed using methods\nfrom the {@link InventoryHolder} interface."},{"FQCN":"org.bukkit.entity.Breeze","methods":[],"desc":"Represents a Breeze. Whoosh!"},{"FQCN":"org.bukkit.entity.FishHook","methods":[{"name":"getMinWaitTime","params":[],"desc":"Get the minimum number of ticks one has to wait for a fish appearing.\n<p>\nThe default is 100 ticks (5 seconds).<br>\nNote that this is before applying lure.","ret":"Minimum number of ticks one has to wait for a fish appearing"},{"name":"setMinWaitTime","params":[{"name":"minWaitTime","type":"int","desc":"Minimum number of ticks one has to wait for a fish\nappearing"}],"desc":"Set the minimum number of ticks one has to wait for a fish appearing.\n<p>\nThe default is 100 ticks (5 seconds).<br>\nNote that this is before applying lure.","ret":""},{"name":"getMaxWaitTime","params":[],"desc":"Get the maximum number of ticks one has to wait for a fish appearing.\n<p>\nThe default is 600 ticks (30 seconds).<br>\nNote that this is before applying lure.","ret":"Maximum number of ticks one has to wait for a fish appearing"},{"name":"setMaxWaitTime","params":[{"name":"maxWaitTime","type":"int","desc":"Maximum number of ticks one has to wait for a fish\nappearing"}],"desc":"Set the maximum number of ticks one has to wait for a fish appearing.\n<p>\nThe default is 600 ticks (30 seconds).<br>\nNote that this is before applying lure.","ret":""},{"name":"setWaitTime","params":[{"name":"min","type":"int","desc":"minimum ticks for a fish to appear"},{"name":"max","type":"int","desc":"maximum ticks for a fish to appear"}],"desc":"Set both the minimum (default 100) and maximum (default 600) amount\nof ticks one has to wait for a fish appearing.","ret":""},{"name":"getMinLureTime","params":[],"desc":"Get the minimum number of ticks one has to wait for a fish to bite\nafter appearing.\n<p>\nThe default is 20 ticks (1 second).<br>\nLure does not affect this value.\nThis will also effect the radius (0.1 * lureTime) of where\nthe fish will appear.","ret":"Minimum number of ticks one has to wait for a fish to bite"},{"name":"setMinLureTime","params":[{"name":"minLureTime","type":"int","desc":"Minimum number of ticks one has to wait for a fish\nto bite"}],"desc":"Set the minimum number of ticks one has to wait for a fish to bite\nafter appearing.\n<p>\nThe default is 20 ticks (1 second).<br>\nLure does not affect this value.\nThis will also effect the radius (0.1 * lureTime) of where\nthe fish will appear.","ret":""},{"name":"getMaxLureTime","params":[],"desc":"Get the maximum number of ticks one has to wait for a fish to bite\nafter appearing.\n<p>\nThe default is 80 ticks (4 second).<br>\nLure does not affect this value.\nThis will also effect the radius (0.1 * lureTime) of where\nthe fish will appear.","ret":"Maximum number of ticks one has to wait for a fish to bite"},{"name":"setMaxLureTime","params":[{"name":"maxLureTime","type":"int","desc":"Maximum number of ticks one has to wait for a fish\nto bite"}],"desc":"Set the maximum number of ticks one has to wait for a fish to bite\nafter appearing.\n<p>\nThe default is 80 ticks (4 second).<br>\nLure does not affect this value.\nThis will also effect the radius (0.1 * lureTime) of where\nthe fish will appear.","ret":""},{"name":"setLureTime","params":[{"name":"min","type":"int","desc":"minimum ticks to wait for a bite"},{"name":"max","type":"int","desc":"maximum ticks to wait for a bite"}],"desc":"Set both the minimum (default 20) and maximum (default 80) amount\nof ticks one has to wait for a fish to bite after appearing.","ret":""},{"name":"getMinLureAngle","params":[],"desc":"Get the minimum angle (in degrees, 0 being positive Z 90 being negative\nX) of where a fish will appear after the wait time.\n<p>\nThe default is 0 degrees.","ret":"Minimum angle of where a fish will appear"},{"name":"setMinLureAngle","params":[{"name":"minLureAngle","type":"float","desc":"Minimum angle of where a fish may appear"}],"desc":"Set the minimum angle (in degrees, 0 being positive Z 90 being negative\nX) of where a fish will appear after the wait time.\n<p>\nThe default is 0 degrees.","ret":""},{"name":"getMaxLureAngle","params":[],"desc":"Get the maximum angle (in degrees, 0 being positive Z 90 being negative\nX) of where a fish will appear after the wait time.\n<p>\nThe default is 360 degrees.","ret":"Maximum angle of where a fish will appear"},{"name":"setMaxLureAngle","params":[{"name":"maxLureAngle","type":"float","desc":"Maximum angle of where a fish may appear"}],"desc":"Set the maximum angle (in degrees, 0 being positive Z 90 being negative\nX) of where a fish will appear after the wait time.\n<p>\nThe default is 360 degrees.","ret":""},{"name":"setLureAngle","params":[{"name":"min","type":"float","desc":"minimum angle in degrees"},{"name":"max","type":"float","desc":"maximum angle in degrees"}],"desc":"Set both the minimum (default 0) and maximum (default 360) angle of where\na fish will appear after the wait time.\n\n0 degrees is positive Z, 90 degrees is negative X.","ret":""},{"name":"getApplyLure","params":[],"desc":"Get whether the lure enchantment should be applied to reduce the wait\ntime.\n<p>\nThe default is true.<br>\nLure reduces the wait time by 100 ticks (5 seconds) for each level of the\nenchantment.","ret":"Whether the lure enchantment should be applied to reduce the wait\ntime"},{"name":"setApplyLure","params":[{"name":"applyLure","type":"boolean","desc":"Whether the lure enchantment should be applied to reduce\nthe wait time"}],"desc":"Set whether the lure enchantment should be applied to reduce the wait\ntime.\n<p>\nThe default is true.<br>\nLure reduces the wait time by 100 ticks (5 seconds) for each level of the\nenchantment.","ret":""},{"name":"getBiteChance","params":[],"desc":"Gets the chance of a fish biting.\n<p>\n0.0 = No Chance.<br>\n1.0 = Instant catch.","ret":"chance the bite chance"},{"name":"setBiteChance","params":[{"name":"chance","type":"double","desc":"the bite chance"}],"desc":"Sets the chance of a fish biting.\n<p>\n0.0 = No Chance.<br>\n1.0 = Instant catch.","ret":""},{"name":"isInOpenWater","params":[],"desc":"Check whether or not this fish hook is in open water.\n<p>\nOpen water is defined by a 5x4x5 area of water, air and lily pads. If in\nopen water, treasure items may be caught.","ret":"true if in open water, false otherwise"},{"name":"getHookedEntity","params":[],"desc":"Get the entity hooked by this fish hook.","ret":"the hooked entity. null if none"},{"name":"setHookedEntity","params":[{"name":"entity","type":"Entity","desc":"the entity to set, or null to unhook"}],"desc":"Set the entity hooked by this fish hook.","ret":""},{"name":"pullHookedEntity","params":[],"desc":"Pull the hooked entity to the caster of this fish hook. If no entity is\nhooked, this method has no effect.","ret":"true if pulled, false if no entity is hooked"},{"name":"isSkyInfluenced","params":[],"desc":"Whether or not wait and lure time will be impacted by direct sky access.\n\nTrue by default, causes a 50% time increase on average.","ret":"skylight access influences catch rate"},{"name":"setSkyInfluenced","params":[{"name":"skyInfluenced","type":"boolean","desc":"if this hook is influenced by skylight access"}],"desc":"Set whether or not wait and lure time will be impacted by direct sky\naccess.\n\nTrue by default, causes a 50% time increase on average.","ret":""},{"name":"isRainInfluenced","params":[],"desc":"Whether or not wait and lure time will be impacted by rain.\n\nTrue by default, causes a 25% time decrease on average.","ret":"rain influences catch rate"},{"name":"setRainInfluenced","params":[{"name":"rainInfluenced","type":"boolean","desc":"if this hook is influenced by rain"}],"desc":"Set whether or not wait and lure time will be impacted by rain.\n\nTrue by default, causes a 25% time decrease on average.","ret":""},{"name":"getState","params":[],"desc":"Get the current state of this fish hook.","ret":"the fish hook state"},{"name":"getWaitTime","params":[],"desc":"Get the number of ticks the hook needs to wait for a fish to bite.","ret":"Number of ticks"},{"name":"setWaitTime","params":[{"name":"ticks","type":"int","desc":"Number of ticks"}],"desc":"Sets the number of ticks the hook needs to wait for a fish to bite.","ret":""}],"desc":"Represents a fishing hook."},{"FQCN":"org.bukkit.entity.WitherSkull","methods":[{"name":"setCharged","params":[{"name":"charged","type":"boolean","desc":"whether it should be charged"}],"desc":"Sets the charged status of the wither skull.","ret":""},{"name":"isCharged","params":[],"desc":"Gets whether or not the wither skull is charged.","ret":"whether the wither skull is charged"}],"desc":"Represents a wither skull {@link Fireball}."},{"FQCN":"org.bukkit.entity.Golem","methods":[],"desc":"A mechanical creature that may harm enemies."},{"FQCN":"org.bukkit.entity.Fish","methods":[],"desc":""},{"FQCN":"org.bukkit.entity.Mule","methods":[],"desc":"Represents a Mule - variant of {@link ChestedHorse}."},{"FQCN":"org.bukkit.entity.ComplexEntityPart","methods":[{"name":"getParent","params":[],"desc":"Gets the parent {@link ComplexLivingEntity} of this part.","ret":"Parent complex entity"}],"desc":"Represents a single part of a {@link ComplexLivingEntity}"},{"FQCN":"org.bukkit.entity.ElderGuardian","methods":[],"desc":"Represents an ElderGuardian - variant of {@link Guardian}."},{"FQCN":"org.bukkit.entity.AbstractVillager","methods":[{"name":"getInventory","params":[],"desc":"Gets this villager's inventory.\n<br>\nNote that this inventory is not the Merchant inventory, rather, it is the\nitems that a villager might have collected (from harvesting crops, etc.)\n\n{@inheritDoc}","ret":""},{"name":"resetOffers","params":[],"desc":"Reset this villager's trade offers","ret":""}],"desc":"Represents a villager NPC"},{"FQCN":"org.bukkit.entity.Cat","methods":[{"name":"getCatType","params":[],"desc":"Gets the current type of this cat.","ret":"Type of the cat."},{"name":"setCatType","params":[{"name":"type","type":"Type","desc":"New type of this cat."}],"desc":"Sets the current type of this cat.","ret":""},{"name":"getCollarColor","params":[],"desc":"Get the collar color of this cat","ret":"the color of the collar"},{"name":"setCollarColor","params":[{"name":"color","type":"DyeColor","desc":"the color to apply"}],"desc":"Set the collar color of this cat","ret":""},{"name":"setLyingDown","params":[{"name":"lyingDown","type":"boolean","desc":"whether the cat should lie down"}],"desc":"Sets if the cat is lying down.\nThis is visual and does not affect the behaviour of the cat.","ret":""},{"name":"isLyingDown","params":[],"desc":"Gets if the cat is lying down.","ret":"whether the cat is lying down"},{"name":"setHeadUp","params":[{"name":"headUp","type":"boolean","desc":"head is up"}],"desc":"Sets if the cat has its head up.\nThis is visual and does not affect the behaviour of the cat.","ret":""},{"name":"isHeadUp","params":[],"desc":"Gets if the cat has its head up.","ret":"head is up"}],"desc":"Meow."},{"FQCN":"org.bukkit.entity.SmallFireball","methods":[],"desc":"Represents a small {@link Fireball}"},{"FQCN":"org.bukkit.entity.ZombieVillager","methods":[{"name":"setVillagerProfession","params":[{"name":"profession","type":"Villager.Profession","desc":""}],"desc":"Sets the villager profession of this zombie.","ret":""},{"name":"getVillagerProfession","params":[],"desc":"Returns the villager profession of this zombie.","ret":"the profession or null"},{"name":"getVillagerType","params":[],"desc":"Gets the current type of this villager.","ret":"Current type."},{"name":"setVillagerType","params":[{"name":"type","type":"Villager.Type","desc":"New type."}],"desc":"Sets the new type of this villager.","ret":""},{"name":"isConverting","params":[],"desc":"Get if this entity is in the process of converting to a Villager as a\nresult of being cured.","ret":"conversion status"},{"name":"getConversionTime","params":[],"desc":"Gets the amount of ticks until this entity will be converted to a\nVillager as a result of being cured.\n\nWhen this reaches 0, the entity will be converted.","ret":"conversion time"},{"name":"setConversionTime","params":[{"name":"time","type":"int","desc":"new conversion time"}],"desc":"Sets the amount of ticks until this entity will be converted to a\nVillager as a result of being cured.\n\nWhen this reaches 0, the entity will be converted. A value of less than 0\nwill stop the current conversion process without converting the current\nentity.","ret":""},{"name":"getConversionPlayer","params":[],"desc":"Gets the player who initiated the conversion.","ret":"the player, or <code>null</code> if the player is unknown or the\nentity isn't converting currently"},{"name":"setConversionPlayer","params":[{"name":"conversionPlayer","type":"OfflinePlayer","desc":"the player"}],"desc":"Sets the player who initiated the conversion.\n<p>\nThis has no effect if this entity isn't converting currently.","ret":""},{"name":"setConversionTime","params":[{"name":"time","type":"int","desc":"new conversion time"},{"name":"broadcastEntityEvent","type":"boolean","desc":"whether this conversion time mutation should broadcast the\n                            org.bukkit.{@link org.bukkit.EntityEffect#ZOMBIE_TRANSFORM} entity event to the\n                            world. If false, no entity event is published, preventing for example the\n                            org.bukkit.{@link org.bukkit.Sound#ENTITY_ZOMBIE_VILLAGER_CURE} from playing."}],"desc":"Sets the amount of ticks until this entity will be converted to a\nVillager as a result of being cured.\n<p>\nWhen this reaches 0, the entity will be converted. A value of less than 0\nwill stop the current conversion process without converting the current\nentity.","ret":""}],"desc":"Represents a {@link Zombie} which was once a {@link Villager}."},{"FQCN":"org.bukkit.entity.AnimalTamer","methods":[{"name":"getName","params":[],"desc":"This is the name of the specified AnimalTamer.","ret":"The name to reference on tamed animals or null if a name cannot be obtained"},{"name":"getUniqueId","params":[],"desc":"This is the UUID of the specified AnimalTamer.","ret":"The UUID to reference on tamed animals"}],"desc":""},{"FQCN":"org.bukkit.entity.Llama","methods":[{"name":"getColor","params":[],"desc":"Gets the llama's color.","ret":"a {@link Color} representing the llama's color"},{"name":"setColor","params":[{"name":"color","type":"Color","desc":"a {@link Color} for this llama"}],"desc":"Sets the llama's color.","ret":""},{"name":"getStrength","params":[],"desc":"Gets the llama's strength. A higher strength llama will have more\ninventory slots and be more threatening to entities.","ret":"llama strength [1,5]"},{"name":"setStrength","params":[{"name":"strength","type":"int","desc":"llama strength [1,5]"}],"desc":"Sets the llama's strength. A higher strength llama will have more\ninventory slots and be more threatening to entities. Inventory slots are\nequal to strength * 3.","ret":""},{"name":"inCaravan","params":[],"desc":"Checks if this llama is in a caravan.\nThis means that this llama is currently following\nanother llama.","ret":"is in caravan"},{"name":"joinCaravan","params":[{"name":"llama","type":"Llama","desc":"head of caravan to join"}],"desc":"Joins a caravan, with the provided llama being the leader\nof the caravan.\nThis llama will then follow the provided llama.","ret":""},{"name":"leaveCaravan","params":[],"desc":"Leaves the current caravan that they are in.","ret":""},{"name":"getCaravanHead","params":[],"desc":"Get the llama that this llama is following.\n<p>\nDoes not necessarily mean the leader of the entire caravan.","ret":"the llama currently being followed"},{"name":"hasCaravanTail","params":[],"desc":"Checks if another llama is currently following behind\nthis llama.","ret":"true if being followed in the caravan"},{"name":"getCaravanTail","params":[],"desc":"Gets the llama that is currently following behind\nthis llama.","ret":"the llama following this llama, or null if none is following them"}],"desc":"Represents a Llama."},{"FQCN":"org.bukkit.entity.PolarBear","methods":[{"name":"isStanding","params":[],"desc":"Returns whether the polar bear is standing.","ret":"whether the polar bear is standing"},{"name":"setStanding","params":[{"name":"standing","type":"boolean","desc":"whether the polar bear should be standing"}],"desc":"Sets whether the polar bear is standing.","ret":""}],"desc":""},{"FQCN":"org.bukkit.entity.Shulker","methods":[{"name":"getPeek","params":[],"desc":"Gets the peek state of the shulker between 0.0 and 1.0.","ret":"the peek state of the shulker between 0.0 and 1.0"},{"name":"setPeek","params":[{"name":"value","type":"float","desc":"peek state of the shulker, should be in between 0.0 and 1.0"}],"desc":"Sets the peek state of the shulker, should be in between 0.0 and 1.0.","ret":""},{"name":"getAttachedFace","params":[],"desc":"Gets the face to which the shulker is attached.","ret":"the face to which the shulker is attached"},{"name":"setAttachedFace","params":[{"name":"face","type":"BlockFace","desc":"the face to attach the shulker to"}],"desc":"Sets the face to which the shulker is attached.","ret":""}],"desc":""},{"FQCN":"org.bukkit.entity.TropicalFish","methods":[{"name":"getPatternColor","params":[],"desc":"Gets the color of the fish's pattern.","ret":"pattern color"},{"name":"setPatternColor","params":[{"name":"color","type":"DyeColor","desc":"pattern color"}],"desc":"Sets the color of the fish's pattern","ret":""},{"name":"getBodyColor","params":[],"desc":"Gets the color of the fish's body.","ret":"pattern color"},{"name":"setBodyColor","params":[{"name":"color","type":"DyeColor","desc":"body color"}],"desc":"Sets the color of the fish's body","ret":""},{"name":"getPattern","params":[],"desc":"Gets the fish's pattern.","ret":"pattern"},{"name":"setPattern","params":[{"name":"pattern","type":"Pattern","desc":"new pattern"}],"desc":"Sets the fish's pattern","ret":""}],"desc":"Tropical fish."},{"FQCN":"org.bukkit.entity.EvokerFangs","methods":[{"name":"getOwner","params":[],"desc":"Gets the {@link LivingEntity} which summoned the fangs.","ret":"the {@link LivingEntity} which summoned the fangs"},{"name":"setOwner","params":[{"name":"owner","type":"LivingEntity","desc":"the {@link LivingEntity} which summoned the fangs"}],"desc":"Sets the {@link LivingEntity} which summoned the fangs.","ret":""},{"name":"getAttackDelay","params":[],"desc":"Get the delay in ticks until the fang attacks.","ret":"the delay"},{"name":"setAttackDelay","params":[{"name":"delay","type":"int","desc":"the delay, must be positive"}],"desc":"Set the delay in ticks until the fang attacks.","ret":""}],"desc":"Represents Evoker Fangs."},{"FQCN":"org.bukkit.entity.Fox","methods":[{"name":"getFoxType","params":[],"desc":"Gets the current type of this fox.","ret":"Type of the fox."},{"name":"setFoxType","params":[{"name":"type","type":"Type","desc":"New type of this fox."}],"desc":"Sets the current type of this fox.","ret":""},{"name":"isCrouching","params":[],"desc":"Checks if this animal is crouching","ret":"true if crouching"},{"name":"setCrouching","params":[{"name":"crouching","type":"boolean","desc":"true if crouching"}],"desc":"Sets if this animal is crouching.","ret":""},{"name":"setSleeping","params":[{"name":"sleeping","type":"boolean","desc":"true if sleeping"}],"desc":"Sets if this animal is sleeping.","ret":""},{"name":"getFirstTrustedPlayer","params":[],"desc":"Gets the first trusted player.","ret":"the owning AnimalTamer, or null if not owned"},{"name":"setFirstTrustedPlayer","params":[{"name":"player","type":"AnimalTamer","desc":"the AnimalTamer to be trusted"}],"desc":"Set the first trusted player.\n<p>\nThe first trusted player may only be removed after the second.","ret":""},{"name":"getSecondTrustedPlayer","params":[],"desc":"Gets the second trusted player.","ret":"the owning AnimalTamer, or null if not owned"},{"name":"setSecondTrustedPlayer","params":[{"name":"player","type":"AnimalTamer","desc":"the AnimalTamer to be trusted"}],"desc":"Set the second trusted player.\n<p>\nThe second trusted player may only be added after the first.","ret":""},{"name":"isFaceplanted","params":[],"desc":"Gets whether the fox is faceplanting the ground","ret":"Whether the fox is faceplanting the ground"},{"name":"setInterested","params":[{"name":"interested","type":"boolean","desc":"is interested"}],"desc":"Sets if the fox is interested.","ret":""},{"name":"isInterested","params":[],"desc":"Gets if the fox is interested.","ret":"fox is interested"},{"name":"setLeaping","params":[{"name":"leaping","type":"boolean","desc":"is leaping"}],"desc":"Sets if the fox is leaping.","ret":""},{"name":"isLeaping","params":[],"desc":"Gets if the fox is leaping.","ret":"fox is leaping"},{"name":"setDefending","params":[{"name":"defending","type":"boolean","desc":"is defending"}],"desc":"Sets if the fox is defending.","ret":""},{"name":"isDefending","params":[],"desc":"Gets if the fox is defending.","ret":"fox is defending"},{"name":"setFaceplanted","params":[{"name":"faceplanted","type":"boolean","desc":"face planted"}],"desc":"Sets if the fox face planted.","ret":""}],"desc":"What does the fox say?"},{"FQCN":"org.bukkit.entity.Monster","methods":[],"desc":"Represents a Monster."},{"FQCN":"org.bukkit.entity.Ocelot","methods":[{"name":"isTrusting","params":[],"desc":"Checks if this ocelot trusts players.","ret":"true if it trusts players"},{"name":"setTrusting","params":[{"name":"trust","type":"boolean","desc":"true if it trusts players"}],"desc":"Sets if this ocelot trusts players.","ret":""},{"name":"getCatType","params":[],"desc":"Gets the current type of this cat.","ret":"Type of the cat."},{"name":"setCatType","params":[{"name":"type","type":"Type","desc":"New type of this cat."}],"desc":"Sets the current type of this cat.","ret":""}],"desc":"A wild tameable cat"},{"FQCN":"org.bukkit.entity.Wolf","methods":[{"name":"isAngry","params":[],"desc":"Checks if this wolf is angry","ret":"Anger true if angry"},{"name":"setAngry","params":[{"name":"angry","type":"boolean","desc":"true if angry"}],"desc":"Sets the anger of this wolf.\n<p>\nAn angry wolf can not be fed or tamed.","ret":""},{"name":"getCollarColor","params":[],"desc":"Get the collar color of this wolf","ret":"the color of the collar"},{"name":"setCollarColor","params":[{"name":"color","type":"DyeColor","desc":"the color to apply"}],"desc":"Set the collar color of this wolf","ret":""},{"name":"isWet","params":[],"desc":"Gets whether the wolf is wet","ret":"Whether the wolf is wet"},{"name":"getTailAngle","params":[],"desc":"Gets the wolf's tail angle in radians","ret":"The angle of the wolf's tail in radians"},{"name":"isInterested","params":[],"desc":"Gets if the wolf is interested","ret":"Whether the wolf is interested"},{"name":"setInterested","params":[{"name":"interested","type":"boolean","desc":"Whether the wolf is interested"}],"desc":"Set wolf to be interested","ret":""}],"desc":"Represents a Wolf"},{"FQCN":"org.bukkit.entity.Sniffer","methods":[{"name":"getExploredLocations","params":[],"desc":"Gets the locations explored by the sniffer.","ret":"a collection of locations"},{"name":"removeExploredLocation","params":[{"name":"location","type":"Location","desc":"the location to remove"}],"desc":"Remove a location of the explored locations.","ret":""},{"name":"addExploredLocation","params":[{"name":"location","type":"Location","desc":"the location to add"}],"desc":"Add a location to the explored locations.\n<br>\n<b>Note:</b> the location must be in the sniffer's current world for this\nmethod to have any effect.","ret":""},{"name":"getState","params":[],"desc":"Get the current state of the sniffer.","ret":"the state of the sniffer"},{"name":"setState","params":[{"name":"state","type":"Sniffer.State","desc":"the new state"}],"desc":"Set a new state for the sniffer.\n<br>\nThis will also make the sniffer make the transition to the new state.","ret":""},{"name":"findPossibleDigLocation","params":[],"desc":"Try to get a possible location where the sniffer can dig.","ret":"a {@link Location} if found or null"},{"name":"canDig","params":[],"desc":"Gets whether the sniffer can dig in the current {@link Location} below\nits head.","ret":"{@code true} if can dig or {@code false} otherwise"}],"desc":"Represents a Sniffer."},{"FQCN":"org.bukkit.entity.ItemDisplay","methods":[{"name":"getItemStack","params":[],"desc":"Gets the displayed item stack.","ret":"the displayed item stack"},{"name":"setItemStack","params":[{"name":"item","type":"ItemStack","desc":"the new item stack"}],"desc":"Sets the displayed item stack.","ret":""},{"name":"getItemDisplayTransform","params":[],"desc":"Gets the item display transform for this entity.\n\nDefaults to {@link ItemDisplayTransform#FIXED}.","ret":"item display transform"},{"name":"setItemDisplayTransform","params":[{"name":"display","type":"ItemDisplayTransform","desc":"new display"}],"desc":"Sets the item display transform for this entity.\n\nDefaults to {@link ItemDisplayTransform#FIXED}.","ret":""}],"desc":"Represents an item display entity."},{"FQCN":"org.bukkit.entity.Axolotl","methods":[{"name":"isPlayingDead","params":[],"desc":"Gets if this axolotl is playing dead.\n\nAn axolotl may play dead when it is damaged underwater.","ret":"playing dead status"},{"name":"setPlayingDead","params":[{"name":"playingDead","type":"boolean","desc":"playing dead status"}],"desc":"Sets if this axolotl is playing dead.\n\nAn axolotl may play dead when it is damaged underwater.","ret":""},{"name":"getVariant","params":[],"desc":"Get the variant of this axolotl.","ret":"axolotl variant"},{"name":"setVariant","params":[{"name":"variant","type":"Variant","desc":"axolotl variant"}],"desc":"Set the variant of this axolotl.","ret":""}],"desc":"An Axolotl."},{"FQCN":"org.bukkit.entity.Ravager","methods":[{"name":"getAttackTicks","params":[],"desc":"Gets how many ticks this ravager is attacking for.\nWhen attacking, the ravager cannot move.","ret":"ticks attacking or -1 if they are currently not attacking"},{"name":"setAttackTicks","params":[{"name":"ticks","type":"int","desc":"ticks attacking or -1 if they should no longer be attacking"}],"desc":"Sets how many ticks this ravager is attacking for.\nWhen attacking, the ravager cannot move.\nThis will tick down till it gets to -1, where this ravager will no longer be attacking.","ret":""},{"name":"getStunnedTicks","params":[],"desc":"Gets how many ticks the ravager is stunned for.\nThe ravager cannot move or attack while stunned.\nAt 0, this will cause the ravager to roar.","ret":"ticks stunned or -1 if they are currently not stunned"},{"name":"setStunnedTicks","params":[{"name":"ticks","type":"int","desc":"ticks stunned or -1 if they should no longer be stunned"}],"desc":"Sets how many ticks the ravager is stunned for.\nThe ravager cannot move or attack while stunned.\nAt 0, this will cause the ravager to roar.","ret":""},{"name":"getRoarTicks","params":[],"desc":"Gets how many ticks the ravager is roaring for.\nWhile roaring, the ravager cannot move","ret":"ticks roaring or -1 if they are currently not roaring"},{"name":"setRoarTicks","params":[{"name":"ticks","type":"int","desc":"ticks roaring or -1 if they should no longer be roaring"}],"desc":"Sets how many ticks the ravager is roaring for.\nWhile roaring, the ravager cannot move\nThis will tick down till it gets to -1, where it is no longer active.\nIf set to 11, this will play a sound and hurt nearby players.","ret":""}],"desc":""},{"FQCN":"org.bukkit.entity.ThrownPotion","methods":[{"name":"getEffects","params":[],"desc":"Returns the effects that are applied by this potion.","ret":"The potion effects"},{"name":"getItem","params":[],"desc":"Returns a copy of the ItemStack for this thrown potion.\n<p>\nAltering this copy will not alter the thrown potion directly. If you want\nto alter the thrown potion, you must use the {@link\n#setItem(ItemStack) setItemStack} method.","ret":"A copy of the ItemStack for this thrown potion."},{"name":"setItem","params":[{"name":"item","type":"ItemStack","desc":"New ItemStack"}],"desc":"Set the ItemStack for this thrown potion.","ret":""},{"name":"getPotionMeta","params":[],"desc":"Gets a copy of the PotionMeta for this thrown potion.\nThis includes what effects will be applied by this potion.","ret":"potion meta"},{"name":"setPotionMeta","params":[{"name":"meta","type":"org.bukkit.inventory.meta.PotionMeta","desc":"potion meta"}],"desc":"Sets the PotionMeta of this thrown potion.\nThis will modify the effects applied by this potion.\n<p>\nNote that the type of {@link #getItem()} is irrelevant","ret":""},{"name":"splash","params":[],"desc":"Splashes the potion at its current location.","ret":""}],"desc":"Represents a thrown potion bottle"},{"FQCN":"org.bukkit.entity.Chicken","methods":[{"name":"isChickenJockey","params":[],"desc":"Gets if this chicken was spawned as a chicken jockey.","ret":"is chicken jockey"},{"name":"setIsChickenJockey","params":[{"name":"isChickenJockey","type":"boolean","desc":"is chicken jockey"}],"desc":"Sets if this chicken was spawned as a chicken jockey.","ret":""},{"name":"getEggLayTime","params":[],"desc":"Gets the number of ticks till this chicken lays an egg.","ret":"ticks till the chicken lays an egg"},{"name":"setEggLayTime","params":[{"name":"eggLayTime","type":"int","desc":"ticks till the chicken lays an egg"}],"desc":"Sets the number of ticks till this chicken lays an egg.","ret":""}],"desc":""},{"FQCN":"org.bukkit.entity.HumanEntity","methods":[{"name":"getName","params":[],"desc":"Returns the name of this player","ret":"Player name"},{"name":"getInventory","params":[],"desc":"Get the player's inventory.","ret":"The inventory of the player, this also contains the armor\n    slots."},{"name":"getEnderChest","params":[],"desc":"Get the player's EnderChest inventory","ret":"The EnderChest of the player"},{"name":"getMainHand","params":[],"desc":"Gets the player's selected main hand","ret":"the players main hand"},{"name":"setWindowProperty","params":[{"name":"prop","type":"InventoryView.Property","desc":"The property."},{"name":"value","type":"int","desc":"The value to set the property to."}],"desc":"If the player currently has an inventory window open, this method will\nset a property of that window, such as the state of a progress bar.","ret":"True if the property was successfully set."},{"name":"getEnchantmentSeed","params":[],"desc":"Gets the player's current enchantment seed.\n\nThe Seed is used to generate enchantment options in the enchanting table\nfor the player.","ret":"the player's enchantment seed"},{"name":"setEnchantmentSeed","params":[{"name":"seed","type":"int","desc":"the player's new enchantment seed"}],"desc":"Sets the player's enchantment seed.\n\nThe Seed is used to generate enchantment options in the enchanting table\nfor the player.","ret":""},{"name":"getOpenInventory","params":[],"desc":"Gets the inventory view the player is currently viewing. If they do not\nhave an inventory window open, it returns their internal crafting view.","ret":"The inventory view."},{"name":"openInventory","params":[{"name":"inventory","type":"Inventory","desc":"The inventory to open"}],"desc":"Opens an inventory window with the specified inventory on the top and\nthe player's inventory on the bottom.","ret":"The newly opened inventory view"},{"name":"openWorkbench","params":[{"name":"location","type":"Location","desc":"The location to attach it to. If null, the player's\n    location is used."},{"name":"force","type":"boolean","desc":"If false, and there is no workbench block at the location,\n    no inventory will be opened and null will be returned."}],"desc":"Opens an empty workbench inventory window with the player's inventory\non the bottom.","ret":"The newly opened inventory view, or null if it could not be\n    opened."},{"name":"openEnchanting","params":[{"name":"location","type":"Location","desc":"The location to attach it to. If null, the player's\n    location is used."},{"name":"force","type":"boolean","desc":"If false, and there is no enchanting table at the\n    location, no inventory will be opened and null will be returned."}],"desc":"Opens an empty enchanting inventory window with the player's inventory\non the bottom.","ret":"The newly opened inventory view, or null if it could not be\n    opened."},{"name":"openInventory","params":[{"name":"inventory","type":"InventoryView","desc":"The view to open"}],"desc":"Opens an inventory window to the specified inventory view.","ret":""},{"name":"openMerchant","params":[{"name":"trader","type":"Villager","desc":"The merchant to trade with. Cannot be null."},{"name":"force","type":"boolean","desc":"whether to force the trade even if another player is trading"}],"desc":"Starts a trade between the player and the villager.\n\nNote that only one player may trade with a villager at once. You must use\nthe force parameter for this.","ret":"The newly opened inventory view, or null if it could not be\nopened."},{"name":"openMerchant","params":[{"name":"merchant","type":"Merchant","desc":"The merchant to trade with. Cannot be null."},{"name":"force","type":"boolean","desc":"whether to force the trade even if another player is trading"}],"desc":"Starts a trade between the player and the merchant.\n\nNote that only one player may trade with a merchant at once. You must use\nthe force parameter for this.","ret":"The newly opened inventory view, or null if it could not be\nopened."},{"name":"openAnvil","params":[{"name":"location","type":"Location","desc":"The location to attach it to. If null, the player's\n    location is used."},{"name":"force","type":"boolean","desc":"If false, and there is no anvil block at the location,\n    no inventory will be opened and null will be returned."}],"desc":"Opens an empty anvil inventory window with the player's inventory\non the bottom.","ret":"The newly opened inventory view, or null if it could not be\n    opened."},{"name":"openCartographyTable","params":[{"name":"location","type":"Location","desc":"The location to attach it to. If null, the player's\n    location is used."},{"name":"force","type":"boolean","desc":"If false, and there is no cartography table block at the location,\n    no inventory will be opened and null will be returned."}],"desc":"Opens an empty cartography table inventory window with the player's inventory\non the bottom.","ret":"The newly opened inventory view, or null if it could not be\n    opened."},{"name":"openGrindstone","params":[{"name":"location","type":"Location","desc":"The location to attach it to. If null, the player's\n    location is used."},{"name":"force","type":"boolean","desc":"If false, and there is no grindstone block at the location,\n    no inventory will be opened and null will be returned."}],"desc":"Opens an empty grindstone inventory window with the player's inventory\non the bottom.","ret":"The newly opened inventory view, or null if it could not be\n    opened."},{"name":"openLoom","params":[{"name":"location","type":"Location","desc":"The location to attach it to. If null, the player's\n    location is used."},{"name":"force","type":"boolean","desc":"If false, and there is no loom block at the location,\n    no inventory will be opened and null will be returned."}],"desc":"Opens an empty loom inventory window with the player's inventory\non the bottom.","ret":"The newly opened inventory view, or null if it could not be\n    opened."},{"name":"openSmithingTable","params":[{"name":"location","type":"Location","desc":"The location to attach it to. If null, the player's\n    location is used."},{"name":"force","type":"boolean","desc":"If false, and there is no smithing table block at the location,\n    no inventory will be opened and null will be returned."}],"desc":"Opens an empty smithing table inventory window with the player's inventory\non the bottom.","ret":"The newly opened inventory view, or null if it could not be\n    opened."},{"name":"openStonecutter","params":[{"name":"location","type":"Location","desc":"The location to attach it to. If null, the player's\n    location is used."},{"name":"force","type":"boolean","desc":"If false, and there is no stonecutter block at the location,\n    no inventory will be opened and null will be returned."}],"desc":"Opens an empty stonecutter inventory window with the player's inventory\non the bottom.","ret":"The newly opened inventory view, or null if it could not be\n    opened."},{"name":"closeInventory","params":[],"desc":"Force-closes the currently open inventory view for this player, if any.","ret":""},{"name":"closeInventory","params":[{"name":"reason","type":"org.bukkit.event.inventory.InventoryCloseEvent.Reason","desc":"why the inventory is closing"}],"desc":"Force-closes the currently open inventory view for this player, if any.","ret":""},{"name":"getItemInHand","params":[],"desc":"Returns the ItemStack currently in your hand, can be empty.","ret":"The ItemStack of the item you are currently holding."},{"name":"setItemInHand","params":[{"name":"item","type":"ItemStack","desc":"The ItemStack which will end up in the hand"}],"desc":"Sets the item to the given ItemStack, this will replace whatever the\nuser was holding.","ret":""},{"name":"getItemOnCursor","params":[],"desc":"Returns the ItemStack currently on your cursor, can be empty. Will\nalways be empty if the player currently has no open window.","ret":"The ItemStack of the item you are currently moving around."},{"name":"setItemOnCursor","params":[{"name":"item","type":"ItemStack","desc":"The ItemStack which will end up in the hand"}],"desc":"Sets the item to the given ItemStack, this will replace whatever the\nuser was moving. Will always be empty if the player currently has no\nopen window.","ret":""},{"name":"hasCooldown","params":[{"name":"material","type":"Material","desc":"the material to check"}],"desc":"Check whether a cooldown is active on the specified material.","ret":"if a cooldown is active on the material"},{"name":"getCooldown","params":[{"name":"material","type":"Material","desc":"the material to check"}],"desc":"Get the cooldown time in ticks remaining for the specified material.","ret":"the remaining cooldown time in ticks"},{"name":"setCooldown","params":[{"name":"material","type":"Material","desc":"the material to set the cooldown for"},{"name":"ticks","type":"int","desc":"the amount of ticks to set or 0 to remove"}],"desc":"Set a cooldown on the specified material for a certain amount of ticks.\nticks. 0 ticks will result in the removal of the cooldown.\n<p>\nCooldowns are used by the server for items such as ender pearls and\nshields to prevent them from being used repeatedly.\n<p>\nNote that cooldowns will not by themselves stop an item from being used\nfor attacking.","ret":""},{"name":"setHurtDirection","params":[{"name":"hurtDirection","type":"float","desc":"hurt direction"}],"desc":"Sets player hurt direction","ret":""},{"name":"isDeeplySleeping","params":[],"desc":"If the player has slept enough to count towards passing the night.","ret":"true if the player has slept enough"},{"name":"getSleepTicks","params":[],"desc":"Get the sleep ticks of the player. This value may be capped.","ret":"slumber ticks"},{"name":"getPotentialBedLocation","params":[],"desc":"Gets the Location of the player's bed, null if they have not slept\nin one. This method will not attempt to validate if the current bed\nis still valid.","ret":"Bed Location if has slept in one, otherwise null."},{"name":"getFishHook","params":[],"desc":"","ret":"the player's fishing hook if they are fishing"},{"name":"sleep","params":[{"name":"location","type":"Location","desc":"the location of the bed"},{"name":"force","type":"boolean","desc":"whether to try and sleep at the location even if not\nnormally possible"}],"desc":"Attempts to make the entity sleep at the given location.\n<br>\nThe location must be in the current world and have a bed placed at the\nlocation. The game may also enforce other requirements such as proximity\nto bed, monsters, and dimension type if force is not set.","ret":"whether the sleep was successful"},{"name":"wakeup","params":[{"name":"setSpawnLocation","type":"boolean","desc":"whether to set their spawn location to the bed\nthey are currently sleeping in"}],"desc":"Causes the player to wakeup if they are currently sleeping.","ret":""},{"name":"getBedLocation","params":[],"desc":"Gets the location of the bed the player is currently sleeping in","ret":"location"},{"name":"getGameMode","params":[],"desc":"Gets this human's current {@link GameMode}","ret":"Current game mode"},{"name":"setGameMode","params":[{"name":"mode","type":"GameMode","desc":"New game mode"}],"desc":"Sets this human's current {@link GameMode}","ret":""},{"name":"isBlocking","params":[],"desc":"Check if the player is currently blocking (ie with a shield).","ret":"Whether they are blocking."},{"name":"isHandRaised","params":[],"desc":"Check if the player currently has their hand raised (ie about to begin\nblocking).","ret":"Whether their hand is raised"},{"name":"getItemInUse","params":[],"desc":"Gets the item that the player is using (eating food, drawing back a bow,\nblocking, etc.)","ret":"the item being used by the player, or null if they are not using\nan item"},{"name":"getExpToLevel","params":[],"desc":"Get the total amount of experience required for the player to level","ret":"Experience required to level up"},{"name":"releaseLeftShoulderEntity","params":[],"desc":"If there is an Entity on this entities left shoulder, it will be released to the world and returned.\nIf no Entity is released, null will be returned.","ret":"The released entity, or null"},{"name":"releaseRightShoulderEntity","params":[],"desc":"If there is an Entity on this entities left shoulder, it will be released to the world and returned.\nIf no Entity is released, null will be returned.","ret":"The released entity, or null"},{"name":"getAttackCooldown","params":[],"desc":"Gets the current cooldown for a player's attack.\n\nThis is used to calculate damage, with 1.0 representing a fully charged\nattack and 0.0 representing a non-charged attack","ret":"A float between 0.0-1.0 representing the progress of the charge"},{"name":"discoverRecipe","params":[{"name":"recipe","type":"NamespacedKey","desc":"the key of the recipe to discover"}],"desc":"Discover a recipe for this player such that it has not already been\ndiscovered. This method will add the key's associated recipe to the\nplayer's recipe book.","ret":"whether or not the recipe was newly discovered"},{"name":"discoverRecipes","params":[{"name":"recipes","type":"Collection<NamespacedKey>","desc":"the keys of the recipes to discover"}],"desc":"Discover a collection of recipes for this player such that they have not\nalready been discovered. This method will add the keys' associated\nrecipes to the player's recipe book. If a recipe in the provided\ncollection has already been discovered, it will be silently ignored.","ret":"the amount of newly discovered recipes where 0 indicates that\nnone were newly discovered and a number equal to {@code recipes.size()}\nindicates that all were new"},{"name":"undiscoverRecipe","params":[{"name":"recipe","type":"NamespacedKey","desc":"the key of the recipe to undiscover"}],"desc":"Undiscover a recipe for this player such that it has already been\ndiscovered. This method will remove the key's associated recipe from the\nplayer's recipe book.","ret":"whether or not the recipe was successfully undiscovered (i.e. it\nwas previously discovered)"},{"name":"undiscoverRecipes","params":[{"name":"recipes","type":"Collection<NamespacedKey>","desc":"the keys of the recipes to undiscover"}],"desc":"Undiscover a collection of recipes for this player such that they have\nalready been discovered. This method will remove the keys' associated\nrecipes from the player's recipe book. If a recipe in the provided\ncollection has not yet been discovered, it will be silently ignored.","ret":"the amount of undiscovered recipes where 0 indicates that none\nwere undiscovered and a number equal to {@code recipes.size()} indicates\nthat all were undiscovered"},{"name":"hasDiscoveredRecipe","params":[{"name":"recipe","type":"NamespacedKey","desc":"the key of the recipe to check"}],"desc":"Check whether or not this entity has discovered the specified recipe.","ret":"true if discovered, false otherwise"},{"name":"getDiscoveredRecipes","params":[],"desc":"Get an immutable set of recipes this entity has discovered.","ret":"all discovered recipes"},{"name":"getShoulderEntityLeft","params":[],"desc":"Gets the entity currently perched on the left shoulder or null if no\nentity.\n<br>\nThe returned entity will not be spawned within the world, so most\noperations are invalid unless the entity is first spawned in.","ret":"left shoulder entity"},{"name":"setShoulderEntityLeft","params":[{"name":"entity","type":"Entity","desc":"left shoulder entity"}],"desc":"Sets the entity currently perched on the left shoulder, or null to\nremove. This method will remove the entity from the world.\n<br>\nNote that only a copy of the entity will be set to display on the\nshoulder.\n<br>\nAlso note that the client will currently only render {@link Parrot}\nentities.","ret":""},{"name":"getShoulderEntityRight","params":[],"desc":"Gets the entity currently perched on the right shoulder or null if no\nentity.\n<br>\nThe returned entity will not be spawned within the world, so most\noperations are invalid unless the entity is first spawned in.","ret":"right shoulder entity"},{"name":"setShoulderEntityRight","params":[{"name":"entity","type":"Entity","desc":"right shoulder entity"}],"desc":"Sets the entity currently perched on the right shoulder, or null to\nremove. This method will remove the entity from the world.\n<br>\nNote that only a copy of the entity will be set to display on the\nshoulder.\n<br>\nAlso note that the client will currently only render {@link Parrot}\nentities.","ret":""},{"name":"openSign","params":[{"name":"sign","type":"org.bukkit.block.Sign","desc":"The sign to open"}],"desc":"Opens an editor window for the specified sign","ret":""},{"name":"openSign","params":[{"name":"sign","type":"org.bukkit.block.Sign","desc":"The sign to open"},{"name":"side","type":"org.bukkit.block.sign.Side","desc":"The side of the sign to open"}],"desc":"Opens an editor window for the specified sign","ret":""},{"name":"dropItem","params":[{"name":"dropAll","type":"boolean","desc":"True to drop entire stack, false to drop 1 of the stack"}],"desc":"Make the entity drop the item in their hand.\n<br>\nThis will force the entity to drop the item they are holding with\nan option to drop the entire {@link ItemStack} or just 1 of the items.","ret":"True if item was dropped successfully"},{"name":"getExhaustion","params":[],"desc":"Gets the players current exhaustion level.\n<p>\nExhaustion controls how fast the food level drops. While you have a\ncertain amount of exhaustion, your saturation will drop to zero, and\nthen your food will drop to zero.","ret":"Exhaustion level"},{"name":"setExhaustion","params":[{"name":"value","type":"float","desc":"Exhaustion level"}],"desc":"Sets the players current exhaustion level","ret":""},{"name":"getSaturation","params":[],"desc":"Gets the players current saturation level.\n<p>\nSaturation is a buffer for food level. Your food level will not drop if\nyou are saturated {@literal >} 0.","ret":"Saturation level"},{"name":"setSaturation","params":[{"name":"value","type":"float","desc":"Saturation level"}],"desc":"Sets the players current saturation level","ret":""},{"name":"getFoodLevel","params":[],"desc":"Gets the players current food level","ret":"Food level"},{"name":"setFoodLevel","params":[{"name":"value","type":"int","desc":"New food level"}],"desc":"Sets the players current food level","ret":""},{"name":"getSaturatedRegenRate","params":[],"desc":"Get the regeneration rate (1 health per x ticks) of\nthe HumanEntity when they have saturation and\ntheir food level is {@literal >=} 20. Default is 10.","ret":"the regeneration rate"},{"name":"setSaturatedRegenRate","params":[{"name":"ticks","type":"int","desc":"the amount of ticks to gain 1 health."}],"desc":"Set the regeneration rate (1 health per x ticks) of\nthe HumanEntity when they have saturation and\ntheir food level is {@literal >=} 20. Default is 10.\nNot affected if the world's difficulty is peaceful.","ret":""},{"name":"getUnsaturatedRegenRate","params":[],"desc":"Get the regeneration rate (1 health per x ticks) of\nthe HumanEntity when they have no saturation and\ntheir food level is {@literal >=} 18. Default is 80.","ret":"the regeneration rate"},{"name":"setUnsaturatedRegenRate","params":[{"name":"ticks","type":"int","desc":"the amount of ticks to gain 1 health."}],"desc":"Get the regeneration rate (1 health per x ticks) of\nthe HumanEntity when they have no saturation and\ntheir food level is {@literal >=} 18. Default is 80.\nNot affected if the world's difficulty is peaceful.","ret":""},{"name":"getStarvationRate","params":[],"desc":"Get the starvation rate (1 health per x ticks) of\nthe HumanEntity. Default is 80.","ret":"the starvation rate"},{"name":"setStarvationRate","params":[{"name":"ticks","type":"int","desc":"the amount of ticks to lose 1 health"}],"desc":"Get the starvation rate (1 health per x ticks) of\nthe HumanEntity. Default is 80.","ret":""},{"name":"getLastDeathLocation","params":[],"desc":"Gets the player's last death location.","ret":"the last death location if it exists, otherwise null."},{"name":"setLastDeathLocation","params":[{"name":"location","type":"Location","desc":"where to set the last death player location"}],"desc":"Sets the player's last death location.\n<br>\n<b>Note:</b> This data is updated in the player's client only when the\nplayer respawns.","ret":""},{"name":"fireworkBoost","params":[{"name":"fireworkItemStack","type":"ItemStack","desc":"the firework item stack to use to glide"}],"desc":"Perform a firework boost.\n<p>\nThis method will only work such that {@link #isGliding()} is true and\nthe entity is actively gliding with an elytra. Additionally, the supplied\n{@code fireworkItemStack} must be a firework rocket. The power of the boost\nwill directly correlate to {@link FireworkMeta#getPower()}.","ret":"the attached {@link Firework}, or null if the entity could not\nbe boosted"}],"desc":"Represents a human entity, such as an NPC or a player"},{"FQCN":"org.bukkit.entity.Fireball","methods":[{"name":"setDirection","params":[{"name":"direction","type":"Vector","desc":"the direction this fireball is flying toward"}],"desc":"Fireballs fly straight and do not take setVelocity(...) well.","ret":""},{"name":"getDirection","params":[],"desc":"Retrieve the direction this fireball is heading toward","ret":"the direction"},{"name":"setVelocity","params":[{"name":"velocity","type":"Vector","desc":"New velocity to travel with"}],"desc":"{@inheritDoc}\n<p>\nNote: For fireball entities, their movement is also controlled by their power.","ret":""},{"name":"setPower","params":[{"name":"power","type":"Vector","desc":"the power"}],"desc":"Sets the power of a fireball. The power determines the direction and magnitude of its acceleration.","ret":""},{"name":"getPower","params":[],"desc":"Gets the power of a fireball. The power determines the direction and magnitude of its acceleration.","ret":"the power"}],"desc":"Represents a Fireball."},{"FQCN":"org.bukkit.entity.Drowned","methods":[],"desc":""},{"FQCN":"org.bukkit.entity.Donkey","methods":[],"desc":"Represents a Donkey - variant of {@link ChestedHorse}."},{"FQCN":"org.bukkit.entity.LingeringPotion","methods":[],"desc":"Represents a thrown lingering potion bottle"},{"FQCN":"org.bukkit.entity.Vehicle","methods":[{"name":"getVelocity","params":[],"desc":"Gets the vehicle's velocity.","ret":"velocity vector"},{"name":"setVelocity","params":[{"name":"vel","type":"Vector","desc":"velocity vector"}],"desc":"Sets the vehicle's velocity in meters per tick.","ret":""}],"desc":"Represents a vehicle entity."},{"FQCN":"org.bukkit.entity.Marker","methods":[],"desc":"A Marker entity, exists only on the server."},{"FQCN":"org.bukkit.entity.PiglinAbstract","methods":[{"name":"isImmuneToZombification","params":[],"desc":"Gets whether the piglin is immune to zombification.","ret":"Whether the piglin is immune to zombification"},{"name":"setImmuneToZombification","params":[{"name":"flag","type":"boolean","desc":"Whether the piglin is immune to zombification"}],"desc":"Sets whether the piglin is immune to zombification.","ret":""},{"name":"getConversionTime","params":[],"desc":"Gets the amount of ticks until this entity will be converted to a\nZombified Piglin.\n\nWhen this reaches 300, the entity will be converted.","ret":"conversion time"},{"name":"setConversionTime","params":[{"name":"time","type":"int","desc":"new conversion counter"}],"desc":"Sets the conversion counter value. The counter is incremented\nevery tick the method {@link #isConverting()} returns true. Setting\nthis value will not start the conversion if the {@link PiglinAbstract} is\nnot in a valid environment ({@link org.bukkit.World#isPiglinSafe})\nto convert, is immune to zombification ({@link #isImmuneToZombification()})\nor has no AI ({@link #hasAI}).\n\nWhen this reaches 300, the entity will be converted. To stop the\nconversion use {@link #setImmuneToZombification(boolean)}.","ret":""},{"name":"isConverting","params":[],"desc":"Get if this entity is in the process of converting to a Zombified Piglin.","ret":"conversion status"},{"name":"isBaby","params":[],"desc":"Gets whether the piglin is a baby","ret":"Whether the piglin is a baby"},{"name":"setBaby","params":[{"name":"flag","type":"boolean","desc":"Whether the piglin is a baby"}],"desc":"Sets whether the piglin is a baby","ret":""}],"desc":"Piglin / Piglin Brute."},{"FQCN":"org.bukkit.entity.Panda","methods":[{"name":"getMainGene","params":[],"desc":"Gets this Panda's main gene.","ret":"main gene"},{"name":"setMainGene","params":[{"name":"gene","type":"Gene","desc":"main gene"}],"desc":"Sets this Panda's main gene.","ret":""},{"name":"getHiddenGene","params":[],"desc":"Gets this Panda's hidden gene.","ret":"hidden gene"},{"name":"setHiddenGene","params":[{"name":"gene","type":"Gene","desc":"hidden gene"}],"desc":"Sets this Panda's hidden gene.","ret":""},{"name":"isRolling","params":[],"desc":"Gets whether the Panda is rolling","ret":"Whether the Panda is rolling"},{"name":"setRolling","params":[{"name":"flag","type":"boolean","desc":"Whether the Panda is rolling"}],"desc":"Sets whether the Panda is rolling","ret":""},{"name":"isSneezing","params":[],"desc":"Gets whether the Panda is sneezing","ret":"Whether the Panda is sneezing"},{"name":"setSneezing","params":[{"name":"flag","type":"boolean","desc":"Whether the Panda is sneezing"}],"desc":"Sets whether the Panda is sneezing","ret":""},{"name":"isOnBack","params":[],"desc":"Gets whether the Panda is on its back","ret":"Whether the Panda is on its back"},{"name":"setOnBack","params":[{"name":"flag","type":"boolean","desc":"Whether the Panda is on its back"}],"desc":"Sets whether the Panda is on its back","ret":""},{"name":"isEating","params":[],"desc":"Gets whether the Panda is eating","ret":"Whether the Panda is eating"},{"name":"setEating","params":[{"name":"flag","type":"boolean","desc":"Whether the Panda is eating"}],"desc":"Sets the Panda's eating status. The panda must be holding food for this to work","ret":""},{"name":"isScared","params":[],"desc":"Gets whether the Panda is scared","ret":"Whether the Panda is scared"},{"name":"getUnhappyTicks","params":[],"desc":"Gets how many ticks the panda will be unhappy for","ret":"The number of ticks the panda will be unhappy for"},{"name":"setSneezeTicks","params":[{"name":"ticks","type":"int","desc":"sneeze progress"}],"desc":"Sets the sneeze progress in this animation.\nThis value counts up only if {@link Panda#isSneezing()} is true","ret":""},{"name":"getSneezeTicks","params":[],"desc":"Gets the current sneeze progress, or how many ticks this panda will sneeze for.","ret":"sneeze progress"},{"name":"setEatingTicks","params":[{"name":"ticks","type":"int","desc":"eating ticks"}],"desc":"Sets the eating ticks for this panda.\n<p>\n\nThis starts counting up as long as it is greater than 0.","ret":""},{"name":"getEatingTicks","params":[],"desc":"Gets the current eating progress, or how many ticks this panda has been eating for.","ret":"eating progress"},{"name":"setUnhappyTicks","params":[{"name":"ticks","type":"int","desc":"unhappy ticks"}],"desc":"Sets the number of ticks this panda will be unhappy for.\n<p>\nThis value counts down.","ret":""},{"name":"setIsOnBack","params":[{"name":"onBack","type":"boolean","desc":"is on its back"}],"desc":"Sets if this panda is currently on its back.","ret":""},{"name":"setIsSitting","params":[{"name":"sitting","type":"boolean","desc":"is currently sitting"}],"desc":"Sets if this panda is currently sitting.","ret":""},{"name":"setSitting","params":[{"name":"sitting","type":"boolean","desc":"is currently sitting"}],"desc":"Sets if this panda is currently sitting.","ret":""},{"name":"isSitting","params":[],"desc":"Gets if this panda is sitting.","ret":"is sitting"},{"name":"getCombinedGene","params":[],"desc":"Gets this Panda's combined gene.\n<p>\nThe combined gene can be modified using\n{@link #setMainGene(Gene)} or {@link #setHiddenGene(Gene)}.","ret":"combined gene"}],"desc":"Panda entity."},{"FQCN":"org.bukkit.entity.Minecart","methods":[{"name":"setDamage","params":[{"name":"damage","type":"double","desc":"over 40 to \"kill\" a minecart"}],"desc":"Sets a minecart's damage.","ret":""},{"name":"getDamage","params":[],"desc":"Gets a minecart's damage.","ret":"The damage"},{"name":"getMaxSpeed","params":[],"desc":"Gets the maximum speed of a minecart. The speed is unrelated to the\nvelocity.","ret":"The max speed"},{"name":"setMaxSpeed","params":[{"name":"speed","type":"double","desc":"The max speed"}],"desc":"Sets the maximum speed of a minecart. Must be nonnegative. Default is\n0.4D.","ret":""},{"name":"isSlowWhenEmpty","params":[],"desc":"Returns whether this minecart will slow down faster without a passenger\noccupying it","ret":"Whether it decelerates faster"},{"name":"setSlowWhenEmpty","params":[{"name":"slow","type":"boolean","desc":"Whether it will decelerate faster"}],"desc":"Sets whether this minecart will slow down faster without a passenger\noccupying it","ret":""},{"name":"getFlyingVelocityMod","params":[],"desc":"Gets the flying velocity modifier. Used for minecarts that are in\nmid-air. A flying minecart's velocity is multiplied by this factor each\ntick.","ret":"The vector factor"},{"name":"setFlyingVelocityMod","params":[{"name":"flying","type":"Vector","desc":"velocity modifier vector"}],"desc":"Sets the flying velocity modifier. Used for minecarts that are in\nmid-air. A flying minecart's velocity is multiplied by this factor each\ntick.","ret":""},{"name":"getDerailedVelocityMod","params":[],"desc":"Gets the derailed velocity modifier. Used for minecarts that are on the\nground, but not on rails.\n<p>\nA derailed minecart's velocity is multiplied by this factor each tick.","ret":"derailed visible speed"},{"name":"setDerailedVelocityMod","params":[{"name":"derailed","type":"Vector","desc":"visible speed"}],"desc":"Sets the derailed velocity modifier. Used for minecarts that are on the\nground, but not on rails. A derailed minecart's velocity is multiplied\nby this factor each tick.","ret":""},{"name":"setDisplayBlock","params":[{"name":"material","type":"MaterialData","desc":"the material to set as display block."}],"desc":"Sets the display block for this minecart.\nPassing a null value will set the minecart to have no display block.","ret":""},{"name":"getDisplayBlock","params":[],"desc":"Gets the display block for this minecart.\nThis function will return the type AIR if none is set.","ret":"the block displayed by this minecart."},{"name":"setDisplayBlockData","params":[{"name":"blockData","type":"BlockData","desc":"the material to set as display block."}],"desc":"Sets the display block for this minecart.\nPassing a null value will set the minecart to have no display block.","ret":""},{"name":"getDisplayBlockData","params":[],"desc":"Gets the display block for this minecart.\nThis function will return the type AIR if none is set.","ret":"the block displayed by this minecart."},{"name":"setDisplayBlockOffset","params":[{"name":"offset","type":"int","desc":"the block offset to set for this minecart."}],"desc":"Sets the offset of the display block.","ret":""},{"name":"getDisplayBlockOffset","params":[],"desc":"Gets the offset of the display block.","ret":"the current block offset for this minecart."},{"name":"getMinecartMaterial","params":[],"desc":"Gets the {@link Material} that represents this Minecart type.","ret":"the minecart material."}],"desc":"Represents a minecart entity."},{"FQCN":"org.bukkit.entity.LlamaSpit","methods":[],"desc":"Represents Llama spit."},{"FQCN":"org.bukkit.entity.Entity","methods":[{"name":"getLocation","params":[],"desc":"Gets the entity's current position","ret":"a new copy of Location containing the position of this entity"},{"name":"getLocation","params":[{"name":"loc","type":"Location","desc":"the location to copy into"}],"desc":"Stores the entity's current position in the provided Location object.\n<p>\nIf the provided Location is null this method does nothing and returns\nnull.","ret":"The Location object provided or null"},{"name":"setVelocity","params":[{"name":"velocity","type":"Vector","desc":"New velocity to travel with"}],"desc":"Sets this entity's velocity in meters per tick","ret":""},{"name":"getVelocity","params":[],"desc":"Gets this entity's current velocity","ret":"Current traveling velocity of this entity"},{"name":"getHeight","params":[],"desc":"Gets the entity's height","ret":"height of entity"},{"name":"getWidth","params":[],"desc":"Gets the entity's width","ret":"width of entity"},{"name":"getBoundingBox","params":[],"desc":"Gets the entity's current bounding box.\n<p>\nThe returned bounding box reflects the entity's current location and\nsize.","ret":"the entity's current bounding box"},{"name":"isOnGround","params":[],"desc":"Returns true if the entity is supported by a block. This value is a\nstate updated by the server and is not recalculated unless the entity\nmoves.","ret":"True if entity is on ground."},{"name":"isInWater","params":[],"desc":"Returns true if the entity is in water.","ret":"<code>true</code> if the entity is in water."},{"name":"getWorld","params":[],"desc":"Gets the current world this entity resides in","ret":"World"},{"name":"setRotation","params":[{"name":"yaw","type":"float","desc":"the yaw"},{"name":"pitch","type":"float","desc":"the pitch"}],"desc":"Sets the entity's rotation.\n<p>\nNote that if the entity is affected by AI, it may override this rotation.","ret":""},{"name":"teleport","params":[{"name":"location","type":"Location","desc":"New location to teleport this entity to"},{"name":"teleportFlags","type":"io.papermc.paper.entity.TeleportFlag","desc":"Flags to be used in this teleportation"}],"desc":"Teleports this entity to the given location.","ret":"<code>true</code> if the teleport was successful"},{"name":"teleport","params":[{"name":"location","type":"Location","desc":"New location to teleport this entity to"},{"name":"cause","type":"TeleportCause","desc":"The cause of this teleportation"},{"name":"teleportFlags","type":"io.papermc.paper.entity.TeleportFlag","desc":"Flags to be used in this teleportation"}],"desc":"Teleports this entity to the given location.","ret":"<code>true</code> if the teleport was successful"},{"name":"teleport","params":[{"name":"location","type":"Location","desc":"New location to teleport this entity to"}],"desc":"Teleports this entity to the given location. If this entity is riding a\nvehicle, it will be dismounted prior to teleportation.","ret":"<code>true</code> if the teleport was successful"},{"name":"teleport","params":[{"name":"location","type":"Location","desc":"New location to teleport this entity to"},{"name":"cause","type":"TeleportCause","desc":"The cause of this teleportation"}],"desc":"Teleports this entity to the given location. If this entity is riding a\nvehicle, it will be dismounted prior to teleportation.","ret":"<code>true</code> if the teleport was successful"},{"name":"teleport","params":[{"name":"destination","type":"Entity","desc":"Entity to teleport this entity to"}],"desc":"Teleports this entity to the target Entity. If this entity is riding a\nvehicle, it will be dismounted prior to teleportation.","ret":"<code>true</code> if the teleport was successful"},{"name":"teleport","params":[{"name":"destination","type":"Entity","desc":"Entity to teleport this entity to"},{"name":"cause","type":"TeleportCause","desc":"The cause of this teleportation"}],"desc":"Teleports this entity to the target Entity. If this entity is riding a\nvehicle, it will be dismounted prior to teleportation.","ret":"<code>true</code> if the teleport was successful"},{"name":"teleportAsync","params":[{"name":"loc","type":"Location","desc":"Location to teleport to"}],"desc":"Loads/Generates(in 1.13+) the Chunk asynchronously, and then teleports the entity when the chunk is ready.","ret":"A future that will be completed with the result of the teleport"},{"name":"teleportAsync","params":[{"name":"loc","type":"Location","desc":"Location to teleport to"},{"name":"cause","type":"TeleportCause","desc":"Reason for teleport"}],"desc":"Loads/Generates(in 1.13+) the Chunk asynchronously, and then teleports the entity when the chunk is ready.","ret":"A future that will be completed with the result of the teleport"},{"name":"getNearbyEntities","params":[{"name":"x","type":"double","desc":"1/2 the size of the box along x axis"},{"name":"y","type":"double","desc":"1/2 the size of the box along y axis"},{"name":"z","type":"double","desc":"1/2 the size of the box along z axis"}],"desc":"Returns a list of entities within a bounding box centered around this\nentity","ret":"{@code List<Entity>} List of entities nearby"},{"name":"getEntityId","params":[],"desc":"Returns a unique id for this entity","ret":"Entity id"},{"name":"getFireTicks","params":[],"desc":"Returns the entity's current fire ticks (ticks before the entity stops\nbeing on fire).","ret":"int fireTicks"},{"name":"getMaxFireTicks","params":[],"desc":"Returns the entity's maximum fire ticks.","ret":"int maxFireTicks"},{"name":"setFireTicks","params":[{"name":"ticks","type":"int","desc":"Current ticks remaining"}],"desc":"Sets the entity's current fire ticks (ticks before the entity stops\nbeing on fire).","ret":""},{"name":"setVisualFire","params":[{"name":"fire","type":"boolean","desc":"whether visual fire is enabled"}],"desc":"Sets if the entity has visual fire (it will always appear to be on fire).","ret":""},{"name":"isVisualFire","params":[],"desc":"Gets if the entity has visual fire (it will always appear to be on fire).","ret":"whether visual fire is enabled"},{"name":"getFreezeTicks","params":[],"desc":"Returns the entity's current freeze ticks (amount of ticks the entity has\nbeen in powdered snow).","ret":"int freeze ticks"},{"name":"getMaxFreezeTicks","params":[],"desc":"Returns the entity's maximum freeze ticks (amount of ticks before it will\nbe fully frozen)","ret":"int max freeze ticks"},{"name":"setFreezeTicks","params":[{"name":"ticks","type":"int","desc":"Current ticks"}],"desc":"Sets the entity's current freeze ticks (amount of ticks the entity has\nbeen in powdered snow).","ret":""},{"name":"isFrozen","params":[],"desc":"Gets if the entity is fully frozen (it has been in powdered snow for max\nfreeze ticks).","ret":"freeze status"},{"name":"setNoPhysics","params":[{"name":"noPhysics","type":"boolean","desc":"boolean indicating if the entity should not have physics."}],"desc":"Sets this entities no physics status.","ret":""},{"name":"hasNoPhysics","params":[],"desc":"Gets if this entity has no physics.","ret":"true if the entity does not have physics."},{"name":"isFreezeTickingLocked","params":[],"desc":"Gets if the entity currently has its freeze ticks locked\nto a set amount.\n<p>\nThis is only set by plugins","ret":"locked or not"},{"name":"lockFreezeTicks","params":[{"name":"locked","type":"boolean","desc":"prevent vanilla modification or not"}],"desc":"Sets if the entity currently has its freeze ticks locked,\npreventing default vanilla freeze tick modification.","ret":""},{"name":"remove","params":[],"desc":"Mark the entity's removal.","ret":""},{"name":"isDead","params":[],"desc":"Returns true if this entity has been marked for removal.","ret":"True if it is dead."},{"name":"isValid","params":[],"desc":"Returns false if the entity has died, been despawned for some other\nreason, or has not been added to the world.","ret":"True if valid."},{"name":"getServer","params":[],"desc":"Gets the {@link Server} that contains this Entity","ret":"Server instance running this Entity"},{"name":"isPersistent","params":[],"desc":"Returns true if the entity gets persisted.\n<p>\nBy default all entities are persistent. An entity will also not get\npersisted, if it is riding an entity that is not persistent.\n<p>\nThe persistent flag on players controls whether or not to save their\nplayerdata file when they quit. If a player is directly or indirectly\nriding a non-persistent entity, the vehicle at the root and all its\npassengers won't get persisted.\n<p>\n<b>This should not be confused with\n{@link LivingEntity#setRemoveWhenFarAway(boolean)} which controls\ndespawning of living entities. </b>","ret":"true if this entity is persistent"},{"name":"setPersistent","params":[{"name":"persistent","type":"boolean","desc":"the persistence status"}],"desc":"Sets whether or not the entity gets persisted.","ret":""},{"name":"getPassenger","params":[],"desc":"Gets the primary passenger of a vehicle. For vehicles that could have\nmultiple passengers, this will only return the primary passenger.","ret":"an entity"},{"name":"setPassenger","params":[{"name":"passenger","type":"Entity","desc":"The new passenger."}],"desc":"Set the passenger of a vehicle.","ret":"false if it could not be done for whatever reason"},{"name":"getPassengers","params":[],"desc":"Gets a list of passengers of this vehicle.\n<p>\nThe returned list will not be directly linked to the entity's current\npassengers, and no guarantees are made as to its mutability.","ret":"list of entities corresponding to current passengers."},{"name":"addPassenger","params":[{"name":"passenger","type":"Entity","desc":"The passenger to add"}],"desc":"Add a passenger to the vehicle.","ret":"false if it could not be done for whatever reason"},{"name":"removePassenger","params":[{"name":"passenger","type":"Entity","desc":"The passenger to remove"}],"desc":"Remove a passenger from the vehicle.","ret":"false if it could not be done for whatever reason"},{"name":"isEmpty","params":[],"desc":"Check if a vehicle has passengers.","ret":"True if the vehicle has no passengers."},{"name":"eject","params":[],"desc":"Eject any passenger.","ret":"True if there was a passenger."},{"name":"getFallDistance","params":[],"desc":"Returns the distance this entity has fallen","ret":"The distance."},{"name":"setFallDistance","params":[{"name":"distance","type":"float","desc":"The new distance."}],"desc":"Sets the fall distance for this entity","ret":""},{"name":"setLastDamageCause","params":[{"name":"event","type":"EntityDamageEvent","desc":"a {@link EntityDamageEvent}"}],"desc":"Record the last {@link EntityDamageEvent} inflicted on this entity","ret":""},{"name":"getLastDamageCause","params":[],"desc":"Retrieve the last {@link EntityDamageEvent} inflicted on this entity.\nThis event may have been cancelled.","ret":"the last known {@link EntityDamageEvent} or null if hitherto\n    unharmed"},{"name":"getUniqueId","params":[],"desc":"Returns a unique and persistent id for this entity","ret":"unique id"},{"name":"getTicksLived","params":[],"desc":"Gets the amount of ticks this entity has lived for.\n<p>\nThis is the equivalent to \"age\" in entities.","ret":"Age of entity"},{"name":"setTicksLived","params":[{"name":"value","type":"int","desc":"Age of entity"}],"desc":"Sets the amount of ticks this entity has lived for.\n<p>\nThis is the equivalent to \"age\" in entities. May not be less than one\ntick.","ret":""},{"name":"playEffect","params":[{"name":"type","type":"EntityEffect","desc":"Effect to play."}],"desc":"Performs the specified {@link EntityEffect} for this entity.\n<p>\nThis will be viewable to all players near the entity.\n<p>\nIf the effect is not applicable to this class of entity, it will not play.","ret":""},{"name":"getType","params":[],"desc":"Get the type of the entity.","ret":"The entity type."},{"name":"getSwimSound","params":[],"desc":"Get the {@link Sound} this entity makes while swimming.","ret":"the swimming sound"},{"name":"getSwimSplashSound","params":[],"desc":"Get the {@link Sound} this entity makes when splashing in water. For most\nentities, this is just {@link Sound#ENTITY_GENERIC_SPLASH}.","ret":"the splash sound"},{"name":"getSwimHighSpeedSplashSound","params":[],"desc":"Get the {@link Sound} this entity makes when splashing in water at high\nspeeds. For most entities, this is just {@link Sound#ENTITY_GENERIC_SPLASH}.","ret":"the splash sound"},{"name":"isInsideVehicle","params":[],"desc":"Returns whether this entity is inside a vehicle.","ret":"True if the entity is in a vehicle."},{"name":"leaveVehicle","params":[],"desc":"Leave the current vehicle. If the entity is currently in a vehicle (and\nis removed from it), true will be returned, otherwise false will be\nreturned.","ret":"True if the entity was in a vehicle."},{"name":"getVehicle","params":[],"desc":"Get the vehicle that this entity is inside. If there is no vehicle,\nnull will be returned.","ret":"The current vehicle."},{"name":"setCustomNameVisible","params":[{"name":"flag","type":"boolean","desc":"custom name or not"}],"desc":"Sets whether or not to display the mob's custom name client side. The\nname will be displayed above the mob similarly to a player.\n<p>\nThis value has no effect on players, they will always display their\nname.","ret":""},{"name":"isCustomNameVisible","params":[],"desc":"Gets whether or not the mob's custom name is displayed client side.\n<p>\nThis value has no effect on players, they will always display their\nname.","ret":"if the custom name is displayed"},{"name":"setVisibleByDefault","params":[{"name":"visible","type":"boolean","desc":"default visibility status"}],"desc":"Sets whether or not this entity is visible by default.\n\nIf this entity is not visible by default, then\n{@link Player#showEntity(org.bukkit.plugin.Plugin, org.bukkit.entity.Entity)}\nwill need to be called before the entity is visible to a given player.","ret":""},{"name":"isVisibleByDefault","params":[],"desc":"Gets whether or not this entity is visible by default.\n\nIf this entity is not visible by default, then\n{@link Player#showEntity(org.bukkit.plugin.Plugin, org.bukkit.entity.Entity)}\nwill need to be called before the entity is visible to a given player.","ret":"default visibility status"},{"name":"getTrackedBy","params":[],"desc":"Get all players that are currently tracking this entity.\n<p>\n'Tracking' means that this entity has been sent to the player and that\nthey are receiving updates on its state. Note that the client's {@code\n'Entity Distance'} setting does not affect the range at which entities\nare tracked.","ret":"the players tracking this entity, or an empty set if none"},{"name":"setGlowing","params":[{"name":"flag","type":"boolean","desc":"if the entity is glowing"}],"desc":"Sets whether the entity has a team colored (default: white) glow.\n\n<b>nb: this refers to the 'Glowing' entity property, not whether a\nglowing potion effect is applied</b>","ret":""},{"name":"isGlowing","params":[],"desc":"Gets whether the entity is glowing or not.\n\n<b>nb: this refers to the 'Glowing' entity property, not whether a\nglowing potion effect is applied</b>","ret":"whether the entity is glowing"},{"name":"setInvulnerable","params":[{"name":"flag","type":"boolean","desc":"if the entity is invulnerable"}],"desc":"Sets whether the entity is invulnerable or not.\n<p>\nWhen an entity is invulnerable it can only be damaged by players in\ncreative mode.","ret":""},{"name":"isInvulnerable","params":[],"desc":"Gets whether the entity is invulnerable or not.","ret":"whether the entity is"},{"name":"isSilent","params":[],"desc":"Gets whether the entity is silent or not.","ret":"whether the entity is silent."},{"name":"setSilent","params":[{"name":"flag","type":"boolean","desc":"if the entity is silent"}],"desc":"Sets whether the entity is silent or not.\n<p>\nWhen an entity is silent it will not produce any sound.","ret":""},{"name":"hasGravity","params":[],"desc":"Returns whether gravity applies to this entity.","ret":"whether gravity applies"},{"name":"setGravity","params":[{"name":"gravity","type":"boolean","desc":"whether gravity should apply"}],"desc":"Sets whether gravity applies to this entity.","ret":""},{"name":"getPortalCooldown","params":[],"desc":"Gets the period of time (in ticks) before this entity can use a portal.","ret":"portal cooldown ticks"},{"name":"setPortalCooldown","params":[{"name":"cooldown","type":"int","desc":"portal cooldown ticks"}],"desc":"Sets the period of time (in ticks) before this entity can use a portal.","ret":""},{"name":"getScoreboardTags","params":[],"desc":"Returns a set of tags for this entity.\n<br>\nEntities can have no more than 1024 tags.","ret":"a set of tags for this entity"},{"name":"addScoreboardTag","params":[{"name":"tag","type":"String","desc":"the tag to add"}],"desc":"Add a tag to this entity.\n<br>\nEntities can have no more than 1024 tags.","ret":"true if the tag was successfully added"},{"name":"removeScoreboardTag","params":[{"name":"tag","type":"String","desc":"the tag to remove"}],"desc":"Removes a given tag from this entity.","ret":"true if the tag was successfully removed"},{"name":"getPistonMoveReaction","params":[],"desc":"Returns the reaction of the entity when moved by a piston.","ret":"reaction"},{"name":"getFacing","params":[],"desc":"Get the closest cardinal {@link BlockFace} direction an entity is\ncurrently facing.\n<br>\nThis will not return any non-cardinal directions such as\n{@link BlockFace#UP} or {@link BlockFace#DOWN}.\n<br>\n{@link Hanging} entities will override this call and thus their behavior\nmay be different.","ret":"the entity's current cardinal facing."},{"name":"getPose","params":[],"desc":"Gets the entity's current pose.\n\n<b>Note that the pose is only updated at the end of a tick, so may be\ninconsistent with other methods. eg {@link Player#isSneaking()} being\ntrue does not imply the current pose will be {@link Pose#SNEAKING}</b>","ret":"current pose"},{"name":"isSneaking","params":[],"desc":"Returns if the entity is in sneak mode","ret":"true if the entity is in sneak mode"},{"name":"setSneaking","params":[{"name":"sneak","type":"boolean","desc":"true if the entity should be sneaking"}],"desc":"Sets the sneak mode the entity.\n<p>\nNote: For most Entities this does not update Entity's pose\nand just makes its name tag less visible.","ret":""},{"name":"setPose","params":[{"name":"pose","type":"Pose","desc":"a new {@link Pose}"}],"desc":"Sets the entity's current {@link Pose}.\n\n<p>Note: While poses affect some things like hitboxes, they do not change the entity's state\n(e.g. having {@link Pose#SNEAKING} does not guarantee {@link #isSneaking()} being {@code true}).\n\n<p>If applied to the {@link Player}, they might see a different pose client-side.","ret":""},{"name":"setPose","params":[{"name":"pose","type":"Pose","desc":"a new {@link Pose}"},{"name":"fixed","type":"boolean","desc":"whether the new {@link Pose} should stay until manually changed"}],"desc":"Sets the entity's current {@link Pose}.\n\n<p>Note: While poses affect some things like hitboxes, they do not change the entity's state\n(e.g. having {@link Pose#SNEAKING} does not guarantee {@link #isSneaking()} being {@code true}).\n\n<p>If applied to the {@link Player}, they might see a different pose client-side.","ret":""},{"name":"hasFixedPose","params":[],"desc":"Checks whether the entity has a fixed {@link Pose}","ret":"whether the entity has a fixed {@link Pose}"},{"name":"getSpawnCategory","params":[],"desc":"Get the category of spawn to which this entity belongs.","ret":"the entity´s category spawn"},{"name":"isInWorld","params":[],"desc":"Checks if this entity has been spawned in a world. <br>\nEntities not spawned in a world will not tick, be sent to players, or be\nsaved to the server files.","ret":"whether the entity has been spawned in a world"},{"name":"createSnapshot","params":[],"desc":"Crates an {@link EntitySnapshot} representing the current state of this entity.","ret":"a snapshot representing this entity or null if one cannot be made"},{"name":"copy","params":[],"desc":"Creates a copy of this entity and all its data. Does not spawn the copy in\nthe world. <br>\n<b>Note:</b> Players cannot be copied.","ret":"a copy of this entity."},{"name":"copy","params":[{"name":"to","type":"Location","desc":"the location to copy to"}],"desc":"Creates a copy of this entity and all its data. Spawns the copy at the given location. <br>\n<b>Note:</b> Players cannot be copied.","ret":"a copy of this entity."},{"name":"teamDisplayName","params":[],"desc":"Gets the entity's display name formatted with their team prefix/suffix and\nthe entity's default hover/click events.","ret":"the team display name"},{"name":"getOrigin","params":[],"desc":"Gets the location where this entity originates from.\n<p>\nThis value can be null if the entity hasn't yet been added to the world.","ret":"Location where entity originates or null if not yet added"},{"name":"fromMobSpawner","params":[],"desc":"Returns whether this entity was spawned from a mob spawner.","ret":"True if entity spawned from a mob spawner"},{"name":"getChunk","params":[],"desc":"Gets the latest chunk an entity is currently or was in.","ret":"The current, or most recent chunk if the entity is invalid (which may load the chunk)"},{"name":"getEntitySpawnReason","params":[],"desc":"","ret":"The {@link org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason} that initially spawned this entity. <!-- Paper - added \"initially\" to clarify that the SpawnReason doesn't change after the Entity was initially spawned\" -->"},{"name":"isUnderWater","params":[],"desc":"Check if entity is underwater","ret":""},{"name":"isInRain","params":[],"desc":"Check if entity is in rain","ret":""},{"name":"isInBubbleColumn","params":[],"desc":"Check if entity is in bubble column","ret":""},{"name":"isInWaterOrRain","params":[],"desc":"Check if entity is in water or rain","ret":""},{"name":"isInWaterOrBubbleColumn","params":[],"desc":"Check if entity is in water or bubble column","ret":""},{"name":"isInWaterOrRainOrBubbleColumn","params":[],"desc":"Check if entity is in water or rain or bubble column","ret":""},{"name":"isInLava","params":[],"desc":"Check if entity is in lava","ret":""},{"name":"isTicking","params":[],"desc":"Check if entity is inside a ticking chunk","ret":""},{"name":"getTrackedPlayers","params":[],"desc":"Returns a set of {@link Player Players} within this entity's tracking range (players that can \"see\" this entity).","ret":"players in tracking range"},{"name":"spawnAt","params":[{"name":"location","type":"Location","desc":"The location to spawn the entity at."}],"desc":"Spawns the entity in the world at the given {@link Location} with the default spawn reason.\n<p>\nThis will not spawn the entity if the entity is already spawned or has previously been despawned.\n<p>\nAlso, this method will fire the same events as a normal entity spawn.","ret":"Whether the entity was successfully spawned."},{"name":"spawnAt","params":[{"name":"location","type":"Location","desc":"The location to spawn the entity at."},{"name":"reason","type":"org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason","desc":"The reason for the entity being spawned."}],"desc":"Spawns the entity in the world at the given {@link Location} with the reason given.\n<p>\nThis will not spawn the entity if the entity is already spawned or has previously been despawned.\n<p>\nAlso, this method will fire the same events as a normal entity spawn.","ret":"Whether the entity was successfully spawned."},{"name":"isInPowderedSnow","params":[],"desc":"Check if entity is inside powdered snow.","ret":"true if in powdered snow."},{"name":"getX","params":[],"desc":"Gets the x-coordinate of this entity","ret":"x-coordinate"},{"name":"getY","params":[],"desc":"Gets the y-coordinate of this entity","ret":"y-coordinate"},{"name":"getZ","params":[],"desc":"Gets the z-coordinate of this entity","ret":"z-coordinate"},{"name":"getPitch","params":[],"desc":"Gets this entity's pitch","ret":"the entity's pitch"},{"name":"getYaw","params":[],"desc":"Gets this entity's yaw","ret":"the entity's yaw"},{"name":"collidesAt","params":[{"name":"location","type":"Location","desc":"the location to check collisions in"}],"desc":"Checks for any collisions with the entity's bounding box at the provided location.\nThis will check for any colliding entities (boats, shulkers) / worldborder / blocks.\nDoes not load chunks that are within the bounding box at the specified location.","ret":"collides or not"},{"name":"wouldCollideUsing","params":[{"name":"boundingBox","type":"BoundingBox","desc":"the box to check collisions in"}],"desc":"This checks using the given boundingbox as the entity's boundingbox if the entity would collide with anything.\nThis will check for any colliding entities (boats, shulkers) / worldborder / blocks.\nDoes not load chunks that are within the bounding box.","ret":"collides or not"},{"name":"getScheduler","params":[],"desc":"Returns the task scheduler for this entity. The entity scheduler can be used to schedule tasks\nthat are guaranteed to always execute on the tick thread that owns the entity.\n<p><b>If you do not need/want to make your plugin run on Folia, use {@link org.bukkit.Server#getScheduler()} instead.</b></p>","ret":"the task scheduler for this entity."},{"name":"getScoreboardEntryName","params":[],"desc":"Gets the string name of the entity used to track it in {@link org.bukkit.scoreboard.Scoreboard Scoreboards}.","ret":"the scoreboard entry name"}],"desc":"Represents a base entity in the world\n<p>\nNot all methods are guaranteed to work/may have side effects when\n{@link #isInWorld()} is false."},{"FQCN":"org.bukkit.entity.LargeFireball","methods":[],"desc":"Represents a large {@link Fireball}"},{"FQCN":"org.bukkit.entity.MushroomCow","methods":[{"name":"hasEffectsForNextStew","params":[],"desc":"Checks for the presence of custom potion effects to be applied to the\nnext suspicious stew received from milking this {@link MushroomCow}.","ret":"true if custom potion effects are applied to the stew"},{"name":"getEffectsForNextStew","params":[],"desc":"Gets an immutable list containing all custom potion effects applied to\nthe next suspicious stew received from milking this {@link MushroomCow}.\n<p>\nPlugins should check that hasCustomEffects() returns true before calling\nthis method.","ret":"an immutable list of custom potion effects"},{"name":"addEffectToNextStew","params":[{"name":"effect","type":"PotionEffect","desc":"the potion effect to add"},{"name":"overwrite","type":"boolean","desc":"true if any existing effect of the same type should be\noverwritten"}],"desc":"Adds a custom potion effect to be applied to the next suspicious stew\nreceived from milking this {@link MushroomCow}.","ret":"true if the effects to be applied to the suspicious stew changed\nas a result of this call"},{"name":"addEffectToNextStew","params":[{"name":"suspiciousEffectEntry","type":"io.papermc.paper.potion.SuspiciousEffectEntry","desc":"the suspicious effect entry to add"},{"name":"overwrite","type":"boolean","desc":"true if any existing effect of the same type should be\noverwritten"}],"desc":"Adds a suspicious effect entry to be applied to the next suspicious stew\nreceived from milking this {@link MushroomCow}.","ret":"true if the effects to be applied to the suspicious stew changed\nas a result of this call"},{"name":"removeEffectFromNextStew","params":[{"name":"type","type":"PotionEffectType","desc":"the potion effect type to remove"}],"desc":"Removes a custom potion effect from being applied to the next suspicious\nstew received from milking this {@link MushroomCow}.","ret":"true if the effects to be applied to the suspicious stew changed\nas a result of this call"},{"name":"hasEffectForNextStew","params":[{"name":"type","type":"PotionEffectType","desc":"the potion effect type to check for"}],"desc":"Checks for a specific custom potion effect type to be applied to the next\nsuspicious stew received from milking this {@link MushroomCow}.","ret":"true if the suspicious stew to be generated has this effect"},{"name":"clearEffectsForNextStew","params":[],"desc":"Removes all custom potion effects to be applied to the next suspicious\nstew received from milking this {@link MushroomCow}.","ret":""},{"name":"getVariant","params":[],"desc":"Get the variant of this cow.","ret":"cow variant"},{"name":"setVariant","params":[{"name":"variant","type":"Variant","desc":"cow variant"}],"desc":"Set the variant of this cow.","ret":""},{"name":"getStewEffectDuration","params":[],"desc":"Gets how long the effect applied to stew\nfrom this mushroom cow is.","ret":"duration of the effect (in ticks)"},{"name":"setStewEffectDuration","params":[{"name":"duration","type":"int","desc":"duration of the effect (in ticks)"}],"desc":"Sets how long the effect applied to stew\nfrom this mushroom cow is.","ret":""},{"name":"getStewEffectType","params":[],"desc":"Gets the type of effect applied to stew\nfrom this mushroom cow is.","ret":"effect type, or null if an effect is currently not set"},{"name":"setStewEffect","params":[{"name":"type","type":"org.bukkit.potion.PotionEffectType","desc":"new effect type\n            or null if this cow does not give effects"}],"desc":"Sets the type of effect applied to stew\nfrom this mushroom cow is.","ret":""},{"name":"getStewEffects","params":[],"desc":"Returns an immutable collection of the effects applied to stew\nitems for this mushroom cow.","ret":"immutable effect entry collection"},{"name":"setStewEffects","params":[{"name":"effects","type":"java.util.List<io.papermc.paper.potion.SuspiciousEffectEntry>","desc":"effect entry list"}],"desc":"Sets effects applied to stew items for this mushroom cow.","ret":""}],"desc":"Represents a mushroom {@link Cow}"},{"FQCN":"org.bukkit.entity.Villager","methods":[{"name":"getProfession","params":[],"desc":"Gets the current profession of this villager.","ret":"Current profession."},{"name":"setProfession","params":[{"name":"profession","type":"Profession","desc":"New profession."}],"desc":"Sets the new profession of this villager.","ret":""},{"name":"getVillagerType","params":[],"desc":"Gets the current type of this villager.","ret":"Current type."},{"name":"setVillagerType","params":[{"name":"type","type":"Type","desc":"New type."}],"desc":"Sets the new type of this villager.","ret":""},{"name":"getVillagerLevel","params":[],"desc":"Gets the level of this villager.\n\nA villager with a level of 1 and no experience is liable to lose its\nprofession.","ret":"this villager's level"},{"name":"setVillagerLevel","params":[{"name":"level","type":"int","desc":"the new level"}],"desc":"Sets the level of this villager.\n\nA villager with a level of 1 and no experience is liable to lose its\nprofession.\n\nThis doesn't update the trades of this villager.","ret":""},{"name":"getVillagerExperience","params":[],"desc":"Gets the trading experience of this villager.","ret":"trading experience"},{"name":"setVillagerExperience","params":[{"name":"experience","type":"int","desc":"new experience"}],"desc":"Sets the trading experience of this villager.","ret":""},{"name":"increaseLevel","params":[{"name":"amount","type":"int","desc":"The amount of level"}],"desc":"Increases the level of this villager.\nThe villager will also unlock new recipes unlike the raw\nmethod {@link #setVillagerLevel(int)}.\n<p>\nA villager with a level of 1 and no experience is liable to lose its\nprofession.\n<p>\nA master villager has a level of 5 in its profession and\nwill unlock 10 trades (2 per level).","ret":"Whether trades are unlocked"},{"name":"addTrades","params":[{"name":"amount","type":"int","desc":"The amount of trades to give"}],"desc":"Gives to this villager some potential new trades\nbased to its profession and level.","ret":"Whether trades are added"},{"name":"getRestocksToday","params":[],"desc":"Gets the amount of times a villager has restocked their trades today","ret":"The amount of trade restocks."},{"name":"setRestocksToday","params":[{"name":"restocksToday","type":"int","desc":"new restock count"}],"desc":"Sets the amount of times a villager has restocked their trades today","ret":""},{"name":"sleep","params":[{"name":"location","type":"Location","desc":"the location of the bed"}],"desc":"Attempts to make this villager sleep at the given location.\n<br>\nThe location must be in the current world and have a bed placed at the\nlocation. The villager will put its head on the specified block while\nsleeping.","ret":"whether the sleep was successful"},{"name":"wakeup","params":[],"desc":"Causes this villager to wake up if he's currently sleeping.","ret":""},{"name":"shakeHead","params":[],"desc":"Causes this villager to shake his head.","ret":""},{"name":"zombify","params":[],"desc":"Convert this Villager into a ZombieVillager as if it was killed by a\nZombie.\n\n<b>Note:</b> this will fire a EntityTransformEvent","ret":"the converted entity {@link ZombieVillager} or null if the\nconversion its cancelled"},{"name":"getReputation","params":[{"name":"uniqueId","type":"UUID","desc":"The {@link UUID} of the player to get the reputation of."}],"desc":"Get the {@link com.destroystokyo.paper.entity.villager.Reputation reputation}\nfor a specific player by {@link UUID}.","ret":"The player's copied reputation with this villager."},{"name":"getReputations","params":[],"desc":"Get all {@link com.destroystokyo.paper.entity.villager.Reputation reputations}\nfor all players mapped by their {@link UUID unique IDs}.","ret":"All {@link com.destroystokyo.paper.entity.villager.Reputation reputations} for all players\nin a copied map."},{"name":"setReputation","params":[{"name":"uniqueId","type":"UUID","desc":"The {@link UUID} of the player to set the reputation of."},{"name":"reputation","type":"com.destroystokyo.paper.entity.villager.Reputation","desc":"The {@link com.destroystokyo.paper.entity.villager.Reputation reputation} to set."}],"desc":"Set the {@link com.destroystokyo.paper.entity.villager.Reputation reputation}\nfor a specific player by {@link UUID}.","ret":""},{"name":"setReputations","params":[{"name":"reputations","type":"Map<UUID,com.destroystokyo.paper.entity.villager.Reputation>","desc":"All {@link com.destroystokyo.paper.entity.villager.Reputation reputations}\nfor all players mapped by their {@link UUID unique IDs}."}],"desc":"Set all {@link com.destroystokyo.paper.entity.villager.Reputation reputations}\nfor all players mapped by their {@link UUID unique IDs}.","ret":""},{"name":"clearReputations","params":[],"desc":"Clear all reputations from this villager. This removes every single\nreputation regardless of its impact and the player associated.","ret":""}],"desc":"Represents a villager NPC"},{"FQCN":"org.bukkit.entity.ExperienceOrb","methods":[{"name":"getExperience","params":[],"desc":"Gets how much experience is contained within this orb","ret":"Amount of experience"},{"name":"setExperience","params":[{"name":"value","type":"int","desc":"Amount of experience"}],"desc":"Sets how much experience is contained within this orb","ret":""},{"name":"isFromBottle","params":[],"desc":"Check if this orb was spawned from a {@link ThrownExpBottle}","ret":"if orb was spawned from a bottle"},{"name":"getTriggerEntityId","params":[],"desc":"If this experience orb was triggered to be spawned by\nan entity such as a player, due to events such as killing entity,\nbreaking blocks, smelting in a furnace, etc, this will return the UUID\nof the entity that triggered this orb to drop.\n\nIn the case of an entity being killed, this will be the killers UUID.","ret":"UUID of the player that triggered this orb to drop, or null if unknown/no triggering entity"},{"name":"getSourceEntityId","params":[],"desc":"If this experience orb was spawned in relation to another\nentity, such as a player or other living entity death, or breeding,\nreturn the source entity UUID.\n\nIn the case of breeding, this will be the new baby entities UUID.\nIn the case of an entity being killed, this will be the dead entities UUID.","ret":"The UUID of the entity that sourced this experience orb"},{"name":"getSpawnReason","params":[],"desc":"Gets the reason that this experience orb was spawned. For any case that we\ndo not know, such as orbs spawned before this API was added, UNKNOWN is returned.","ret":"The reason for this orb being spawned."}],"desc":"Represents an Experience Orb."},{"FQCN":"org.bukkit.entity.Wither","methods":[{"name":"setTarget","params":[{"name":"target","type":"LivingEntity","desc":""}],"desc":"{@inheritDoc}\n<p>\nThis method will set the target of the {@link Head#CENTER center head} of\nthe wither.","ret":""},{"name":"setTarget","params":[{"name":"head","type":"Head","desc":"the individual head"},{"name":"target","type":"LivingEntity","desc":"the entity that should be targeted"}],"desc":"This method will set the target of individual heads {@link Head} of the\nwither.","ret":""},{"name":"getTarget","params":[{"name":"head","type":"Head","desc":"the individual head"}],"desc":"This method will get the target of individual heads {@link Head} of the\nwither.","ret":"the entity targeted by the given head, or null if none is\ntargeted"},{"name":"getInvulnerabilityTicks","params":[],"desc":"Returns the wither's current invulnerability ticks.","ret":"amount of invulnerability ticks"},{"name":"setInvulnerabilityTicks","params":[{"name":"ticks","type":"int","desc":"amount of invulnerability ticks"}],"desc":"Sets the wither's current invulnerability ticks.\n\nWhen invulnerability ticks reach 0, the wither will trigger an explosion.","ret":""},{"name":"isCharged","params":[],"desc":"","ret":"whether the wither is charged"},{"name":"getInvulnerableTicks","params":[],"desc":"","ret":"ticks the wither is invulnerable for"},{"name":"setInvulnerableTicks","params":[{"name":"ticks","type":"int","desc":"ticks the wither is invulnerable for"}],"desc":"Sets for how long in the future, the wither should be invulnerable.","ret":""},{"name":"canTravelThroughPortals","params":[],"desc":"","ret":"whether the wither can travel through portals"},{"name":"setCanTravelThroughPortals","params":[{"name":"value","type":"boolean","desc":"whether the wither can travel through portals"}],"desc":"Sets whether the wither can travel through portals.","ret":""},{"name":"enterInvulnerabilityPhase","params":[],"desc":"Makes the wither invulnerable for 11 seconds and\nsets the health to one third of the max health.\n<br>\nThis is called in vanilla directly after spawning the wither.","ret":""}],"desc":"Represents a Wither boss"},{"FQCN":"org.bukkit.entity.AbstractHorse","methods":[{"name":"getVariant","params":[],"desc":"Gets the horse's variant.\n<p>\nA horse's variant defines its physical appearance and capabilities.\nWhether a horse is a regular horse, donkey, mule, or other kind of horse\nis determined using the variant.","ret":"a {@link Horse.Variant} representing the horse's variant"},{"name":"setVariant","params":[{"name":"variant","type":"Horse.Variant","desc":"variant"}],"desc":"","ret":""},{"name":"getDomestication","params":[],"desc":"Gets the domestication level of this horse.\n<p>\nA higher domestication level indicates that the horse is closer to\nbecoming tame. As the domestication level gets closer to the max\ndomestication level, the chance of the horse becoming tame increases.","ret":"domestication level"},{"name":"setDomestication","params":[{"name":"level","type":"int","desc":"domestication level"}],"desc":"Sets the domestication level of this horse.\n<p>\nSetting the domestication level to a high value will increase the\nhorse's chances of becoming tame.\n<p>\nDomestication level must be greater than zero and no greater than\nthe max domestication level of the horse, determined with\n{@link #getMaxDomestication()}","ret":""},{"name":"getMaxDomestication","params":[],"desc":"Gets the maximum domestication level of this horse.\n<p>\nThe higher this level is, the longer it will likely take\nfor the horse to be tamed.","ret":"the max domestication level"},{"name":"setMaxDomestication","params":[{"name":"level","type":"int","desc":"the max domestication level"}],"desc":"Sets the maximum domestication level of this horse.\n<p>\nSetting a higher max domestication will increase the amount of\ndomesticating (feeding, riding, etc.) necessary in order to tame it,\nwhile setting a lower max value will have the opposite effect.\n<p>\nMaximum domestication must be greater than zero.","ret":""},{"name":"getJumpStrength","params":[],"desc":"Gets the jump strength of this horse.\n<p>\nJump strength defines how high the horse can jump. A higher jump strength\nincreases how high a jump will go.","ret":"the horse's jump strength"},{"name":"setJumpStrength","params":[{"name":"strength","type":"double","desc":"jump strength for this horse"}],"desc":"Sets the jump strength of this horse.\n<p>\nA higher jump strength increases how high a jump will go.\nSetting a jump strength to 0 will result in no jump.\nYou cannot set a jump strength to a value below 0 or\nabove 2.","ret":""},{"name":"isEatingHaystack","params":[],"desc":"Gets whether the horse is currently grazing hay.","ret":"true if eating hay"},{"name":"setEatingHaystack","params":[{"name":"eatingHaystack","type":"boolean","desc":"new hay grazing status"}],"desc":"Sets whether the horse is grazing hay.","ret":""},{"name":"isEatingGrass","params":[],"desc":"Gets if a horse is in their eating grass animation.","ret":"eating grass animation is active"},{"name":"setEatingGrass","params":[{"name":"eating","type":"boolean","desc":"eating grass animation is active"}],"desc":"Sets if a horse is in their eating grass animation.\n\n<p>When true, the horse will lower its neck.</p>","ret":""},{"name":"isRearing","params":[],"desc":"Gets if a horse is in their rearing animation.","ret":"rearing animation is active"},{"name":"setRearing","params":[{"name":"rearing","type":"boolean","desc":"rearing animation is active"}],"desc":"Sets if a horse is in their rearing animation.\n\n<p>When true, the horse will stand on its hind legs.</p>","ret":""},{"name":"isEating","params":[],"desc":"Gets if a horse is in their eating animation.","ret":"eating animation is active"},{"name":"setEating","params":[{"name":"eating","type":"boolean","desc":"eating animation is active"}],"desc":"Sets if a horse is in their eating animation.\n\n<p>When true, the horse will bob its head.</p>","ret":""}],"desc":"Represents a Horse-like creature."},{"FQCN":"org.bukkit.entity.Pig","methods":[],"desc":"Represents a Pig."},{"FQCN":"org.bukkit.entity.TippedArrow","methods":[],"desc":""},{"FQCN":"org.bukkit.entity.Boss","methods":[{"name":"getBossBar","params":[],"desc":"Returns the {@link BossBar} of the {@link Boss}","ret":"the {@link BossBar} of the entity"}],"desc":"Represents the Boss Entity."},{"FQCN":"org.bukkit.entity.AreaEffectCloud","methods":[{"name":"getDuration","params":[],"desc":"Gets the duration which this cloud will exist for (in ticks).","ret":"cloud duration"},{"name":"setDuration","params":[{"name":"duration","type":"int","desc":"cloud duration"}],"desc":"Sets the duration which this cloud will exist for (in ticks).","ret":""},{"name":"getWaitTime","params":[],"desc":"Gets the time which an entity has to be exposed to the cloud before the\neffect is applied.","ret":"wait time"},{"name":"setWaitTime","params":[{"name":"waitTime","type":"int","desc":"wait time"}],"desc":"Sets the time which an entity has to be exposed to the cloud before the\neffect is applied.","ret":""},{"name":"getReapplicationDelay","params":[],"desc":"Gets the time that an entity will be immune from subsequent exposure.","ret":"reapplication delay"},{"name":"setReapplicationDelay","params":[{"name":"delay","type":"int","desc":"reapplication delay"}],"desc":"Sets the time that an entity will be immune from subsequent exposure.","ret":""},{"name":"getDurationOnUse","params":[],"desc":"Gets the amount that the duration of this cloud will decrease by when it\napplies an effect to an entity.","ret":"duration on use delta"},{"name":"setDurationOnUse","params":[{"name":"duration","type":"int","desc":"duration on use delta"}],"desc":"Sets the amount that the duration of this cloud will decrease by when it\napplies an effect to an entity.","ret":""},{"name":"getRadius","params":[],"desc":"Gets the initial radius of the cloud.","ret":"radius"},{"name":"setRadius","params":[{"name":"radius","type":"float","desc":"radius"}],"desc":"Sets the initial radius of the cloud.","ret":""},{"name":"getRadiusOnUse","params":[],"desc":"Gets the amount that the radius of this cloud will decrease by when it\napplies an effect to an entity.","ret":"radius on use delta"},{"name":"setRadiusOnUse","params":[{"name":"radius","type":"float","desc":"radius on use delta"}],"desc":"Sets the amount that the radius of this cloud will decrease by when it\napplies an effect to an entity.","ret":""},{"name":"getRadiusPerTick","params":[],"desc":"Gets the amount that the radius of this cloud will decrease by each tick.","ret":"radius per tick delta"},{"name":"setRadiusPerTick","params":[{"name":"radius","type":"float","desc":"per tick delta"}],"desc":"Gets the amount that the radius of this cloud will decrease by each tick.","ret":""},{"name":"getParticle","params":[],"desc":"Gets the particle which this cloud will be composed of","ret":"particle the set particle type"},{"name":"setParticle","params":[{"name":"particle","type":"Particle","desc":"the new particle type"}],"desc":"Sets the particle which this cloud will be composed of","ret":""},{"name":"setParticle","params":[{"name":"particle","type":"Particle","desc":"the new particle type"},{"name":"data","type":"T","desc":"the data to use for the particle or null,\n            the type of this depends on {@link Particle#getDataType()}"}],"desc":"Sets the particle which this cloud will be composed of","ret":""},{"name":"setBasePotionData","params":[{"name":"data","type":"PotionData","desc":"PotionData to set the base potion state to"}],"desc":"Sets the underlying potion data","ret":""},{"name":"getBasePotionData","params":[],"desc":"Returns the potion data about the base potion","ret":"a PotionData object"},{"name":"setBasePotionType","params":[{"name":"type","type":"PotionType","desc":"PotionType to set the base potion state to"}],"desc":"Sets the underlying potion type","ret":""},{"name":"getBasePotionType","params":[],"desc":"Returns the potion type about the base potion","ret":"a PotionType object"},{"name":"hasCustomEffects","params":[],"desc":"Checks for the presence of custom potion effects.","ret":"true if custom potion effects are applied"},{"name":"getCustomEffects","params":[],"desc":"Gets an immutable list containing all custom potion effects applied to\nthis cloud.\n<p>\nPlugins should check that hasCustomEffects() returns true before calling\nthis method.","ret":"the immutable list of custom potion effects"},{"name":"addCustomEffect","params":[{"name":"effect","type":"PotionEffect","desc":"the potion effect to add"},{"name":"overwrite","type":"boolean","desc":"true if any existing effect of the same type should be\noverwritten"}],"desc":"Adds a custom potion effect to this cloud.","ret":"true if the effect was added as a result of this call"},{"name":"removeCustomEffect","params":[{"name":"type","type":"PotionEffectType","desc":"the potion effect type to remove"}],"desc":"Removes a custom potion effect from this cloud.","ret":"true if the an effect was removed as a result of this call"},{"name":"hasCustomEffect","params":[{"name":"type","type":"PotionEffectType","desc":"the potion effect type to check for"}],"desc":"Checks for a specific custom potion effect type on this cloud.","ret":"true if the potion has this effect"},{"name":"clearCustomEffects","params":[],"desc":"Removes all custom potion effects from this cloud.","ret":""},{"name":"getColor","params":[],"desc":"Gets the color of this cloud. Will be applied as a tint to its particles.","ret":"cloud color"},{"name":"setColor","params":[{"name":"color","type":"Color","desc":"cloud color"}],"desc":"Sets the color of this cloud. Will be applied as a tint to its particles.","ret":""},{"name":"getSource","params":[],"desc":"Retrieve the original source of this cloud.","ret":"the {@link ProjectileSource} that threw the LingeringPotion"},{"name":"setSource","params":[{"name":"source","type":"ProjectileSource","desc":"the {@link ProjectileSource} that threw the LingeringPotion"}],"desc":"Set the original source of this cloud.","ret":""},{"name":"getOwnerUniqueId","params":[],"desc":"Get the entity UUID for the owner of this area effect cloud.","ret":"the entity owner uuid or null"},{"name":"setOwnerUniqueId","params":[{"name":"ownerUuid","type":"java.util.UUID","desc":"the entity owner uuid or null to clear"}],"desc":"Sets the entity UUID for the owner of this area effect cloud.","ret":""}],"desc":"Represents an area effect cloud which will imbue a potion effect onto\nentities which enter it."},{"FQCN":"org.bukkit.entity.SpectralArrow","methods":[{"name":"getGlowingTicks","params":[],"desc":"Returns the amount of time that this arrow will apply\nthe glowing effect for.","ret":"the glowing effect ticks"},{"name":"setGlowingTicks","params":[{"name":"duration","type":"int","desc":"the glowing effect ticks"}],"desc":"Sets the amount of time to apply the glowing effect for.","ret":""}],"desc":"Represents a spectral arrow."},{"FQCN":"org.bukkit.entity.Goat","methods":[{"name":"hasLeftHorn","params":[],"desc":"Gets if this goat has its left horn.","ret":"left horn status"},{"name":"setLeftHorn","params":[{"name":"hasHorn","type":"boolean","desc":"left horn status"}],"desc":"Sets if this goat has its left horn.","ret":""},{"name":"hasRightHorn","params":[],"desc":"Gets if this goat has its right horn.","ret":"right horn status"},{"name":"setRightHorn","params":[{"name":"hasHorn","type":"boolean","desc":"right horn status"}],"desc":"Sets if this goat has its right horn.","ret":""},{"name":"isScreaming","params":[],"desc":"Gets if this is a screaming goat.\n\nA screaming goat makes screaming sounds and rams more often. They do not\noffer home loans.","ret":"screaming status"},{"name":"setScreaming","params":[{"name":"screaming","type":"boolean","desc":"screaming status"}],"desc":"Sets if this is a screaming goat.\n\nA screaming goat makes screaming sounds and rams more often. They do not\noffer home loans.","ret":""},{"name":"ram","params":[{"name":"entity","type":"LivingEntity","desc":"the entity to ram at"}],"desc":"Makes the goat ram at the specified entity","ret":""}],"desc":"A Goat."},{"FQCN":"org.bukkit.entity.Cod","methods":[],"desc":""},{"FQCN":"org.bukkit.entity.EntityCategory","methods":[],"desc":"A classification of entities which may behave differently than others or be\naffected uniquely by enchantments and potion effects among other things."},{"FQCN":"org.bukkit.entity.Item","methods":[{"name":"getItemStack","params":[],"desc":"Gets the item stack associated with this item drop.","ret":"An item stack."},{"name":"setItemStack","params":[{"name":"stack","type":"ItemStack","desc":"An item stack."}],"desc":"Sets the item stack associated with this item drop.","ret":""},{"name":"getPickupDelay","params":[],"desc":"Gets the delay before this Item is available to be picked up by players","ret":"Remaining delay"},{"name":"setPickupDelay","params":[{"name":"delay","type":"int","desc":"New delay"}],"desc":"Sets the delay before this Item is available to be picked up by players","ret":""},{"name":"setUnlimitedLifetime","params":[{"name":"unlimited","type":"boolean","desc":"true if the lifetime is unlimited"}],"desc":"Sets if this Item should live forever","ret":""},{"name":"isUnlimitedLifetime","params":[],"desc":"Gets if this Item lives forever","ret":"true if the lifetime is unlimited"},{"name":"setOwner","params":[{"name":"owner","type":"UUID","desc":"UUID of new owner"}],"desc":"Sets the owner of this item.\n\nOther entities will not be able to pickup this item when an owner is set.","ret":""},{"name":"getOwner","params":[],"desc":"Get the owner of this item.","ret":"UUID of owner"},{"name":"setThrower","params":[{"name":"uuid","type":"UUID","desc":"UUID of thrower"}],"desc":"Set the thrower of this item.\n\nThe thrower is the entity which dropped the item. This affects the\ntrigger criteria for item pickups, for things such as advancements.","ret":""},{"name":"getThrower","params":[],"desc":"Get the thrower of this item.\n\nThe thrower is the entity which dropped the item.","ret":"UUID of thrower"},{"name":"canMobPickup","params":[],"desc":"Gets if non-player entities can pick this Item up","ret":"True if non-player entities can pickup"},{"name":"setCanMobPickup","params":[{"name":"canMobPickup","type":"boolean","desc":"True to allow non-player entity pickup"}],"desc":"Sets if non-player entities can pick this Item up","ret":""},{"name":"canPlayerPickup","params":[],"desc":"Gets whether the player can pickup the item or not","ret":"True if a player can pickup the item"},{"name":"setCanPlayerPickup","params":[{"name":"canPlayerPickup","type":"boolean","desc":"True if the player can pickup the item"}],"desc":"Sets whether the item can be picked up or not. Modifies the pickup delay value to do so.","ret":""},{"name":"willAge","params":[],"desc":"Gets whether the item will age and despawn from being on the ground too long","ret":"True if the item will age"},{"name":"setWillAge","params":[{"name":"willAge","type":"boolean","desc":"True if the item should age"}],"desc":"Sets whether the item will age or not. If the item is not ageing, it will not despawn\nby being on the ground for too long.","ret":""},{"name":"getHealth","params":[],"desc":"Gets the health of item stack.\n<p>\nCurrently the default max health is 5.","ret":"the health"},{"name":"setHealth","params":[{"name":"health","type":"int","desc":"the health, a non-positive value will destroy the entity"}],"desc":"Sets the health of the item stack. If the value is non-positive\nthe itemstack's normal \"on destroy\" functionality will be run.\n<p>\nCurrently, the default max health is 5.","ret":""}],"desc":"Represents a dropped item."},{"FQCN":"org.bukkit.entity.Firework","methods":[{"name":"getFireworkMeta","params":[],"desc":"Get a copy of the fireworks meta","ret":"A copy of the current Firework meta"},{"name":"setFireworkMeta","params":[{"name":"meta","type":"FireworkMeta","desc":"The FireworkMeta to apply"}],"desc":"Apply the provided meta to the fireworks\n<p>\nAdjusts detonation ticks automatically.","ret":""},{"name":"setAttachedTo","params":[{"name":"entity","type":"LivingEntity","desc":"the entity to which the firework should be attached, or\nnull to remove the attached entity"}],"desc":"Set the {@link LivingEntity} to which this firework is attached.\n<p>\nWhen attached to an entity, the firework effect will act as normal but\nremain positioned on the entity. If the entity {@code LivingEntity#isGliding()\nis gliding}, then the entity will receive a boost in the direction that\nthey are looking.","ret":"true if the entity could be attached, false if the firework was\nalready detonated"},{"name":"getAttachedTo","params":[],"desc":"Get the {@link LivingEntity} to which this firework is attached.\n<p>\nWhen attached to an entity, the firework effect will act as normal but\nremain positioned on the entity. If the entity {@code LivingEntity#isGliding()\nis gliding}, then the entity will receive a boost in the direction that\nthey are looking.","ret":"the attached entity, or null if none"},{"name":"setLife","params":[{"name":"ticks","type":"int","desc":"the ticks to set. Must be greater than or equal to 0"}],"desc":"Set the ticks that this firework has been alive. If this value exceeds\n{@link #getMaxLife()}, the firework will detonate.","ret":"true if the life was set, false if this firework has already detonated"},{"name":"getLife","params":[],"desc":"Get the ticks that this firework has been alive. When this value reaches\n{@link #getMaxLife()}, the firework will detonate.","ret":"the life ticks"},{"name":"setMaxLife","params":[{"name":"ticks","type":"int","desc":"the ticks to set. Must be greater than 0"}],"desc":"Set the time in ticks this firework will exist until it is detonated.","ret":"true if the time was set, false if this firework has already detonated"},{"name":"getMaxLife","params":[],"desc":"Get the time in ticks this firework will exist until it is detonated.","ret":"the maximum life in ticks"},{"name":"detonate","params":[],"desc":"Cause this firework to explode at earliest opportunity, as if it has no\nremaining fuse.","ret":""},{"name":"isDetonated","params":[],"desc":"Check whether or not this firework has detonated.","ret":"true if detonated, false if still in the world"},{"name":"isShotAtAngle","params":[],"desc":"Gets if the firework was shot at an angle (i.e. from a crossbow).\n\nA firework which was not shot at an angle will fly straight upwards.","ret":"shot at angle status"},{"name":"setShotAtAngle","params":[{"name":"shotAtAngle","type":"boolean","desc":"the new shotAtAngle"}],"desc":"Sets if the firework was shot at an angle (i.e. from a crossbow).\n\nA firework which was not shot at an angle will fly straight upwards.","ret":""},{"name":"getBoostedEntity","params":[],"desc":"If this firework is boosting an entity, return it","ret":"The entity being boosted"},{"name":"getItem","params":[],"desc":"Gets the item used in the firework.","ret":"firework item"},{"name":"setItem","params":[{"name":"itemStack","type":"org.bukkit.inventory.ItemStack","desc":"item to set"}],"desc":"Sets the item used in the firework.\n<p>\nFirework explosion effects are used from this item.","ret":""},{"name":"getTicksFlown","params":[],"desc":"Gets the number of ticks the firework has flown.","ret":"ticks flown"},{"name":"setTicksFlown","params":[{"name":"ticks","type":"int","desc":"ticks flown"}],"desc":"Sets the number of ticks the firework has flown.\nSetting this greater than detonation ticks will cause the firework to explode.","ret":""},{"name":"getTicksToDetonate","params":[],"desc":"Gets the number of ticks the firework will detonate on.","ret":"the tick to detonate on"},{"name":"setTicksToDetonate","params":[{"name":"ticks","type":"int","desc":"ticks to detonate on"}],"desc":"Set the amount of ticks the firework will detonate on.","ret":""}],"desc":""},{"FQCN":"org.bukkit.entity.Vindicator","methods":[{"name":"isJohnny","params":[],"desc":"Returns whether a vindicator is in \"Johnny\" mode.\n\nWhen this mode is active, vindicators will be hostile to all mobs.","ret":"true if johnny"},{"name":"setJohnny","params":[{"name":"johnny","type":"boolean","desc":"new johnny state"}],"desc":"Sets the Johnny state of a vindicator.","ret":""}],"desc":"Represents a Vindicator."},{"FQCN":"org.bukkit.entity.Dolphin","methods":[{"name":"getMoistness","params":[],"desc":"Gets the moistness level of this dolphin","ret":""},{"name":"setMoistness","params":[{"name":"moistness","type":"int","desc":"moistness level"}],"desc":"Sets the moistness of this dolphin, once this is less than 0 the dolphin will start to take damage.","ret":""},{"name":"setHasFish","params":[{"name":"hasFish","type":"boolean","desc":"has a fish"}],"desc":"Sets if this dolphin was fed a fish.","ret":""},{"name":"hasFish","params":[],"desc":"Gets if this dolphin has a fish.","ret":"has a fish"},{"name":"getTreasureLocation","params":[],"desc":"Gets the treasure location this dolphin tries to guide players to.\n<p>\nThis value is calculated if the player has fed the dolphin a fish, and it tries to start the {@link com.destroystokyo.paper.entity.ai.VanillaGoal#DOLPHIN_SWIM_TO_TREASURE} goal.","ret":"calculated closest treasure location"},{"name":"setTreasureLocation","params":[{"name":"location","type":"Location","desc":"location to guide to"}],"desc":"Sets the treasure location that this dolphin will try to lead the player to.\nThis only has an effect if the dolphin is currently leading a player, as this value is recalculated next time it leads a player.\n<p>\nThe world of the location does not matter, as the dolphin will always use the world it is currently in.","ret":""}],"desc":""},{"FQCN":"org.bukkit.Vibration","methods":[{"name":"getOrigin","params":[],"desc":"Get the origin of the vibration.","ret":"origin"},{"name":"getDestination","params":[],"desc":"Get the vibration destination.","ret":"destination"},{"name":"getArrivalTime","params":[],"desc":"Get the vibration arrival time in ticks.","ret":"arrival time"}],"desc":"Represents a vibration from a Skulk sensor."},{"FQCN":"org.bukkit.Art","methods":[{"name":"getBlockWidth","params":[],"desc":"Gets the width of the painting, in blocks","ret":"The width of the painting, in blocks"},{"name":"getBlockHeight","params":[],"desc":"Gets the height of the painting, in blocks","ret":"The height of the painting, in blocks"},{"name":"getId","params":[],"desc":"Get the ID of this painting.","ret":"The ID of this painting"},{"name":"getById","params":[{"name":"id","type":"int","desc":"The ID"}],"desc":"Get a painting by its numeric ID","ret":"The painting"},{"name":"getByName","params":[{"name":"name","type":"String","desc":"The name"}],"desc":"Get a painting by its unique name\n<p>\nThis ignores underscores and capitalization","ret":"The painting"}],"desc":"Represents the art on a painting"},{"FQCN":"org.bukkit.ServerTickManager","methods":[{"name":"isRunningNormally","params":[],"desc":"Checks if the server is running normally.\n<p>\nWhen the server is running normally it indicates that the server is not\ncurrently frozen.","ret":"true if the server is running normally, otherwise false"},{"name":"isStepping","params":[],"desc":"Checks if the server is currently stepping.","ret":"true if stepping, otherwise false"},{"name":"isSprinting","params":[],"desc":"Checks if the server is currently sprinting.","ret":"true if sprinting, otherwise false"},{"name":"isFrozen","params":[],"desc":"Checks if the server is currently frozen.","ret":"true if the server is frozen, otherwise false"},{"name":"getTickRate","params":[],"desc":"Gets the current tick rate of the server.","ret":"the current tick rate of the server"},{"name":"setTickRate","params":[{"name":"tick","type":"float","desc":"the tick rate to set the server to"}],"desc":"Sets the tick rate of the server.\n<p>\nThe normal tick rate of the server is 20. No tick rate below 1.0F or\nabove 10,000 can be applied to the server.","ret":""},{"name":"setFrozen","params":[{"name":"frozen","type":"boolean","desc":"true to freeze the server, otherwise false"}],"desc":"Sets the server to a frozen state that does not tick most things.","ret":""},{"name":"stepGameIfFrozen","params":[{"name":"ticks","type":"int","desc":"the amount of ticks to step the game for"}],"desc":"Steps the game a certain amount of ticks if the server is currently\nfrozen.\n<p>\nSteps occur when the server is in a frozen state which can be started by\neither using the in game /tick freeze command or the\n{@link #setFrozen(boolean)} method.","ret":"true if the game is now stepping. False if the game is not frozen\nso the request could not be fulfilled."},{"name":"stopStepping","params":[],"desc":"Stops the current stepping if stepping is occurring.","ret":"true if the game is no-longer stepping. False if the server was\nnot stepping or was already done stepping."},{"name":"requestGameToSprint","params":[{"name":"ticks","type":"int","desc":"the amount of ticks to sprint for"}],"desc":"Attempts to initiate a sprint, which executes all server ticks at a\nfaster rate then normal.","ret":"true if a sprint was already initiated and was stopped, otherwise\nfalse"},{"name":"stopSprinting","params":[],"desc":"Stops the current sprint if one is currently happening.","ret":"true if the game is no-longer sprinting, false if the server was\nnot sprinting or was already done sprinting"},{"name":"isFrozen","params":[{"name":"entity","type":"Entity","desc":"the entity to check if frozen."}],"desc":"Checks if a given entity is frozen.","ret":"true if the entity is currently frozen otherwise false."},{"name":"getFrozenTicksToRun","params":[],"desc":"Gets the amount of frozen ticks left to run.","ret":"the amount of frozen ticks left to run"}],"desc":"Manages ticking within a server.\n<p>\nTo learn more about the features surrounding this interface."},{"FQCN":"org.bukkit.WorldCreator","methods":[{"name":"key","params":[],"desc":"Gets the key for this WorldCreator","ret":"the key"},{"name":"ofNameAndKey","params":[{"name":"levelName","type":"String","desc":"LevelName of the world that will be created"},{"name":"worldKey","type":"NamespacedKey","desc":"NamespacedKey of the world that will be created"}],"desc":"Creates an empty WorldCreator for the given world name and key","ret":""},{"name":"ofKey","params":[{"name":"worldKey","type":"NamespacedKey","desc":"NamespacedKey of the world that will be created"}],"desc":"Creates an empty WorldCreator for the given key.\nLevelName will be the Key part of the NamespacedKey.","ret":""},{"name":"copy","params":[{"name":"world","type":"World","desc":"World to copy options from"}],"desc":"Copies the options from the specified world","ret":"This object, for chaining"},{"name":"copy","params":[{"name":"creator","type":"WorldCreator","desc":"World creator to copy options from"}],"desc":"Copies the options from the specified {@link WorldCreator}","ret":"This object, for chaining"},{"name":"name","params":[],"desc":"Gets the name of the world that is to be loaded or created.","ret":"World name"},{"name":"seed","params":[],"desc":"Gets the seed that will be used to create this world","ret":"World seed"},{"name":"seed","params":[{"name":"seed","type":"long","desc":"World seed"}],"desc":"Sets the seed that will be used to create this world","ret":"This object, for chaining"},{"name":"environment","params":[],"desc":"Gets the environment that will be used to create or load the world","ret":"World environment"},{"name":"environment","params":[{"name":"env","type":"World.Environment","desc":"World environment"}],"desc":"Sets the environment that will be used to create or load the world","ret":"This object, for chaining"},{"name":"type","params":[],"desc":"Gets the type of the world that will be created or loaded","ret":"World type"},{"name":"type","params":[{"name":"type","type":"WorldType","desc":"World type"}],"desc":"Sets the type of the world that will be created or loaded","ret":"This object, for chaining"},{"name":"generator","params":[],"desc":"Gets the generator that will be used to create or load the world.\n<p>\nThis may be null, in which case the \"natural\" generator for this\nenvironment will be used.","ret":"Chunk generator"},{"name":"generator","params":[{"name":"generator","type":"ChunkGenerator","desc":"Chunk generator"}],"desc":"Sets the generator that will be used to create or load the world.\n<p>\nThis may be null, in which case the \"natural\" generator for this\nenvironment will be used.","ret":"This object, for chaining"},{"name":"generator","params":[{"name":"generator","type":"String","desc":"Name of the generator to use, in \"plugin:id\" notation"}],"desc":"Sets the generator that will be used to create or load the world.\n<p>\nThis may be null, in which case the \"natural\" generator for this\nenvironment will be used.\n<p>\nIf the generator cannot be found for the given name, the natural\nenvironment generator will be used instead and a warning will be\nprinted to the console.","ret":"This object, for chaining"},{"name":"generator","params":[{"name":"generator","type":"String","desc":"Name of the generator to use, in \"plugin:id\" notation"},{"name":"output","type":"CommandSender","desc":"{@link CommandSender} that will receive any error\n    messages"}],"desc":"Sets the generator that will be used to create or load the world.\n<p>\nThis may be null, in which case the \"natural\" generator for this\nenvironment will be used.\n<p>\nIf the generator cannot be found for the given name, the natural\nenvironment generator will be used instead and a warning will be\nprinted to the specified output","ret":"This object, for chaining"},{"name":"biomeProvider","params":[],"desc":"Gets the biome provider that will be used to create or load the world.\n<p>\nThis may be null, in which case the biome provider from the {@link ChunkGenerator}\nwill be used. If no {@link ChunkGenerator} is specific the \"natural\" biome provider\nfor this environment will be used.","ret":"Biome provider"},{"name":"biomeProvider","params":[{"name":"biomeProvider","type":"BiomeProvider","desc":"Biome provider"}],"desc":"Sets the biome provider that will be used to create or load the world.\n<p>\nThis may be null, in which case the biome provider from the\n{@link ChunkGenerator} will be used. If no {@link ChunkGenerator} is\nspecific the \"natural\" biome provider for this environment will be used.","ret":"This object, for chaining"},{"name":"biomeProvider","params":[{"name":"biomeProvider","type":"String","desc":"Name of the biome provider to use, in \"plugin:id\"\nnotation"}],"desc":"Sets the biome provider that will be used to create or load the world.\n<p>\nThis may be null, in which case the biome provider from the\n{@link ChunkGenerator} will be used. If no {@link ChunkGenerator} is\nspecific the \"natural\" biome provider for this environment will be used.\n<p>\nIf the biome provider cannot be found for the given name and no\n{@link ChunkGenerator} is specific, the natural environment biome\nprovider will be used instead and a warning will be printed to the\nspecified output","ret":"This object, for chaining"},{"name":"biomeProvider","params":[{"name":"biomeProvider","type":"String","desc":"Name of the biome provider to use, in \"plugin:id\"\nnotation"},{"name":"output","type":"CommandSender","desc":"{@link CommandSender} that will receive any error messages"}],"desc":"Sets the biome provider that will be used to create or load the world.\n<p>\nThis may be null, in which case the biome provider from the\n{@link ChunkGenerator} will be used. If no {@link ChunkGenerator} is\nspecific the \"natural\" biome provider for this environment will be used.\n<p>\nIf the biome provider cannot be found for the given name and no\n{@link ChunkGenerator} is specific, the natural environment biome\nprovider will be used instead and a warning will be printed to the\nspecified output","ret":"This object, for chaining"},{"name":"generatorSettings","params":[{"name":"generatorSettings","type":"String","desc":"The settings that should be used by the\ngenerator"}],"desc":"Sets the generator settings of the world that will be created or loaded.\n<p>\nCurrently only {@link WorldType#FLAT} uses these settings, and expects\nthem to be in JSON format with a valid biome (1.18.2 and\nabove) defined. An example valid configuration is as follows:\n<code>{\"layers\": [{\"block\": \"stone\", \"height\": 1}, {\"block\": \"grass_block\", \"height\": 1}], \"biome\":\"plains\"}</code>","ret":"This object, for chaining"},{"name":"generatorSettings","params":[],"desc":"Gets the generator settings of the world that will be created or loaded.","ret":"The settings that should be used by the generator"},{"name":"generateStructures","params":[{"name":"generate","type":"boolean","desc":"Whether to generate structures"}],"desc":"Sets whether or not worlds created or loaded with this creator will\nhave structures.","ret":"This object, for chaining"},{"name":"generateStructures","params":[],"desc":"Gets whether or not structures will be generated in the world.","ret":"True if structures will be generated"},{"name":"hardcore","params":[{"name":"hardcore","type":"boolean","desc":"Whether the world will be hardcore"}],"desc":"Sets whether the world will be hardcore or not.\n\nIn a hardcore world the difficulty will be locked to hard.","ret":"This object, for chaining"},{"name":"hardcore","params":[],"desc":"Gets whether the world will be hardcore or not.\n\nIn a hardcore world the difficulty will be locked to hard.","ret":"hardcore status"},{"name":"keepSpawnInMemory","params":[{"name":"keepSpawnInMemory","type":"boolean","desc":"Whether the spawn chunks will be kept loaded"}],"desc":"Sets whether the spawn chunks will be kept loaded. <br>\nSetting this to false will also stop the spawn chunks from being generated\nwhen creating a new world.\n<p>\nHas little performance benefit unless paired with a {@link ChunkGenerator}\nthat overrides {@link ChunkGenerator#getFixedSpawnLocation(World, Random)}.","ret":"This object, for chaining"},{"name":"keepSpawnInMemory","params":[],"desc":"Gets whether or not the spawn chunks will be kept loaded.","ret":"True if the spawn chunks will be kept loaded"},{"name":"createWorld","params":[],"desc":"Creates a world with the specified options.\n<p>\nIf the world already exists, it will be loaded from disk and some\noptions may be ignored.","ret":"Newly created or loaded world"},{"name":"name","params":[{"name":"name","type":"String","desc":"Name of the world to load or create"}],"desc":"Creates a new {@link WorldCreator} for the given world name","ret":"Resulting WorldCreator"},{"name":"getGeneratorForName","params":[{"name":"world","type":"String","desc":"Name of the world this will be used for"},{"name":"name","type":"String","desc":"Name of the generator to retrieve"},{"name":"output","type":"CommandSender","desc":"Where to output if errors are present"}],"desc":"Attempts to get the {@link ChunkGenerator} with the given name.\n<p>\nIf the generator is not found, null will be returned and a message will\nbe printed to the specified {@link CommandSender} explaining why.\n<p>\nThe name must be in the \"plugin:id\" notation, or optionally just\n\"plugin\", where \"plugin\" is the safe-name of a plugin and \"id\" is an\noptional unique identifier for the generator you wish to request from\nthe plugin.","ret":"Resulting generator, or null"},{"name":"getBiomeProviderForName","params":[{"name":"world","type":"String","desc":"Name of the world this will be used for"},{"name":"name","type":"String","desc":"Name of the biome provider to retrieve"},{"name":"output","type":"CommandSender","desc":"Where to output if errors are present"}],"desc":"Attempts to get the {@link BiomeProvider} with the given name.\n<p>\nIf the biome provider is not found, null will be returned and a message\nwill be printed to the specified {@link CommandSender} explaining why.\n<p>\nThe name must be in the \"plugin:id\" notation, or optionally just\n\"plugin\", where \"plugin\" is the safe-name of a plugin and \"id\" is an\noptional unique identifier for the biome provider you wish to request\nfrom the plugin.","ret":"Resulting biome provider, or null"},{"name":"keepSpawnLoaded","params":[],"desc":"Returns the current intent to keep the world loaded, @see {@link WorldCreator#keepSpawnLoaded(net.kyori.adventure.util.TriState)}","ret":"the current tristate value"},{"name":"keepSpawnLoaded","params":[{"name":"keepSpawnLoaded","type":"net.kyori.adventure.util.TriState","desc":"the new value"}],"desc":"Controls if a world should be kept loaded or not, default (NOT_SET) will use the servers standard\nconfiguration, otherwise, will act as an override towards this setting","ret":"This object, for chaining"}],"desc":"Represents various types of options that may be used to create a world."},{"FQCN":"org.bukkit.BlockChangeDelegate","methods":[{"name":"setBlockData","params":[{"name":"x","type":"int","desc":"X coordinate"},{"name":"y","type":"int","desc":"Y coordinate"},{"name":"z","type":"int","desc":"Z coordinate"},{"name":"blockData","type":"BlockData","desc":"Block data"}],"desc":"Set a block data at the specified coordinates.","ret":"true if the block was set successfully"},{"name":"getBlockData","params":[{"name":"x","type":"int","desc":"X coordinate"},{"name":"y","type":"int","desc":"Y coordinate"},{"name":"z","type":"int","desc":"Z coordinate"}],"desc":"Get the block data at the location.","ret":"The block data"},{"name":"getHeight","params":[],"desc":"Gets the height of the world.","ret":"Height of the world"},{"name":"isEmpty","params":[{"name":"x","type":"int","desc":"X coordinate"},{"name":"y","type":"int","desc":"Y coordinate"},{"name":"z","type":"int","desc":"Z coordinate"}],"desc":"Checks if the specified block is empty (air) or not.","ret":"True if the block is considered empty."}],"desc":"A delegate for handling block changes. This serves as a direct interface\nbetween generation algorithms in the server implementation and utilizing\ncode."},{"FQCN":"org.bukkit.SoundCategory","methods":[],"desc":"An Enum of categories for sounds."},{"FQCN":"org.bukkit.Axis","methods":[],"desc":"Represents a mutually perpendicular axis in 3D Cartesian coordinates. In\nMinecraft the x, z axes lie in the horizontal plane, whilst the y axis points\nupwards."},{"FQCN":"org.bukkit.EntityEffect","methods":[{"name":"getData","params":[],"desc":"Gets the data value of this EntityEffect, may not be unique.","ret":"The data value"},{"name":"getApplicable","params":[],"desc":"Gets entity superclass which this affect is applicable to.","ret":"applicable class"},{"name":"isApplicableTo","params":[{"name":"entity","type":"Entity","desc":"the entity to check"}],"desc":"Checks if this effect is applicable to the given entity.","ret":"true if applicable"},{"name":"isApplicableTo","params":[{"name":"clazz","type":"Class<? extends Entity>","desc":"the entity class to check"}],"desc":"Checks if this effect is applicable to the given entity class.","ret":"true if applicable"}],"desc":"A list of all Effects that can happen to entities."},{"FQCN":"org.bukkit.plugin.InvalidDescriptionException","methods":[],"desc":"Thrown when attempting to load an invalid PluginDescriptionFile"},{"FQCN":"org.bukkit.plugin.PluginDescriptionFile","methods":[{"name":"getName","params":[],"desc":"Gives the name of the plugin. This name is a unique identifier for\nplugins.\n<ul>\n<li>Must consist of all alphanumeric characters, underscores, hyphon,\n    and period (a-z,A-Z,0-9, _.-). Any other character will cause the\n    plugin.yml to fail loading.\n<li>Used to determine the name of the plugin's data folder. Data\n    folders are placed in the ./plugins/ directory by default, but this\n    behavior should not be relied on. {@link Plugin#getDataFolder()}\n    should be used to reference the data folder.\n<li>It is good practice to name your jar the same as this, for example\n    'MyPlugin.jar'.\n<li>Case sensitive.\n<li>The is the token referenced in {@link #getDepend()}, {@link\n    #getSoftDepend()}, and {@link #getLoadBefore()}.\n<li>Using spaces in the plugin's name is deprecated.\n</ul>\n<p>\nIn the plugin.yml, this entry is named <code>name</code>.\n<p>\nExample:<blockquote><pre>name: MyPlugin</pre></blockquote>","ret":"the name of the plugin"},{"name":"getProvides","params":[],"desc":"Gives the list of other plugin APIs which this plugin provides.\nThese are usable for other plugins to depend on.\n<ul>\n<li>Must consist of all alphanumeric characters, underscores, hyphon,\n    and period (a-z,A-Z,0-9, _.-). Any other character will cause the\n    plugin.yml to fail loading.\n<li>A different plugin providing the same one or using it as their name\n    will not result in the plugin to fail loading.\n<li>Case sensitive.\n<li>An entry of this list can be referenced in {@link #getDepend()},\n   {@link #getSoftDepend()}, and {@link #getLoadBefore()}.\n<li><code>provides</code> must be in <a\n    href=\"https://en.wikipedia.org/wiki/YAML#Lists\">YAML list\n    format</a>.\n</ul>\n<p>\nIn the plugin.yml, this entry is named <code>provides</code>.\n<p>\nExample:\n<blockquote><pre>provides:\n- OtherPluginName\n- OldPluginName</pre></blockquote>","ret":"immutable list of the plugin APIs which this plugin provides"},{"name":"getVersion","params":[],"desc":"Gives the version of the plugin.\n<ul>\n<li>Version is an arbitrary string, however the most common format is\n    MajorRelease.MinorRelease.Build (eg: 1.4.1).\n<li>Typically you will increment this every time you release a new\n    feature or bug fix.\n<li>Displayed when a user types <code>/version PluginName</code>\n</ul>\n<p>\nIn the plugin.yml, this entry is named <code>version</code>.\n<p>\nExample:<blockquote><pre>version: 1.4.1</pre></blockquote>","ret":"the version of the plugin"},{"name":"getMain","params":[],"desc":"Gives the fully qualified name of the main class for a plugin. The\nformat should follow the {@link ClassLoader#loadClass(String)} syntax\nto successfully be resolved at runtime. For most plugins, this is the\nclass that extends {@link JavaPlugin}.\n<ul>\n<li>This must contain the full namespace including the class file\n    itself.\n<li>If your namespace is <code>org.bukkit.plugin</code>, and your class\n    file is called <code>MyPlugin</code> then this must be\n    <code>org.bukkit.plugin.MyPlugin</code>\n<li>No plugin can use <code>org.bukkit.</code> as a base package for\n    <b>any class</b>, including the main class.\n</ul>\n<p>\nIn the plugin.yml, this entry is named <code>main</code>.\n<p>\nExample:\n<blockquote><pre>main: org.bukkit.plugin.MyPlugin</pre></blockquote>","ret":"the fully qualified main class for the plugin"},{"name":"getDescription","params":[],"desc":"Gives a human-friendly description of the functionality the plugin\nprovides.\n<ul>\n<li>The description can have multiple lines.\n<li>Displayed when a user types <code>/version PluginName</code>\n</ul>\n<p>\nIn the plugin.yml, this entry is named <code>description</code>.\n<p>\nExample:\n<blockquote><pre>description: This plugin is so 31337. You can set yourself on fire.</pre></blockquote>","ret":"description of this plugin, or null if not specified"},{"name":"getLoad","params":[],"desc":"Gives the phase of server startup that the plugin should be loaded.\n<ul>\n<li>Possible values are in {@link PluginLoadOrder}.\n<li>Defaults to {@link PluginLoadOrder#POSTWORLD}.\n<li>Certain caveats apply to each phase.\n<li>When different, {@link #getDepend()}, {@link #getSoftDepend()}, and\n    {@link #getLoadBefore()} become relative in order loaded per-phase.\n    If a plugin loads at <code>STARTUP</code>, but a dependency loads\n    at <code>POSTWORLD</code>, the dependency will not be loaded before\n    the plugin is loaded.\n</ul>\n<p>\nIn the plugin.yml, this entry is named <code>load</code>.\n<p>\nExample:<blockquote><pre>load: STARTUP</pre></blockquote>","ret":"the phase when the plugin should be loaded"},{"name":"getAuthors","params":[],"desc":"Gives the list of authors for the plugin.\n<ul>\n<li>Gives credit to the developer.\n<li>Used in some server error messages to provide helpful feedback on\n    who to contact when an error occurs.\n<li>A SpigotMC forum handle or email address is recommended.\n<li>Is displayed when a user types <code>/version PluginName</code>\n<li><code>authors</code> must be in <a\n    href=\"https://en.wikipedia.org/wiki/YAML#Lists\">YAML list\n    format</a>.\n</ul>\n<p>\nIn the plugin.yml, this has two entries, <code>author</code> and\n<code>authors</code>.\n<p>\nSingle author example:\n<blockquote><pre>author: CaptainInflamo</pre></blockquote>\nMultiple author example:\n<blockquote><pre>authors: [Cogito, verrier, EvilSeph]</pre></blockquote>\nWhen both are specified, author will be the first entry in the list, so\nthis example:\n<blockquote><pre>author: Grum\nauthors:\n- feildmaster\n- amaranth</pre></blockquote>\nIs equivilant to this example:\n<pre>authors: [Grum, feildmaster, aramanth]</pre>","ret":"an immutable list of the plugin's authors"},{"name":"getContributors","params":[],"desc":"Gives the list of contributors for the plugin.\n<ul>\n<li>Gives credit to those that have contributed to the plugin, though\n    not enough so to warrant authorship.\n<li>Unlike {@link #getAuthors()}, contributors will not be mentioned in\nserver error messages as a means of contact.\n<li>A SpigotMC forum handle or email address is recommended.\n<li>Is displayed when a user types <code>/version PluginName</code>\n<li><code>contributors</code> must be in <a\n    href=\"https://en.wikipedia.org/wiki/YAML#Lists\">YAML list\n    format</a>.\n</ul>\n<p>\nExample:\n<blockquote><pre>authors: [Choco, md_5]</pre></blockquote>","ret":"an immutable list of the plugin's contributors"},{"name":"getWebsite","params":[],"desc":"Gives the plugin's or plugin's author's website.\n<ul>\n<li>A link to the Curse page that includes documentation and downloads\n    is highly recommended.\n<li>Displayed when a user types <code>/version PluginName</code>\n</ul>\n<p>\nIn the plugin.yml, this entry is named <code>website</code>.\n<p>\nExample:\n<blockquote><pre>website: http://www.curse.com/server-mods/minecraft/myplugin</pre></blockquote>","ret":"description of this plugin, or null if not specified"},{"name":"getDepend","params":[],"desc":"Gives a list of other plugins that the plugin requires.\n<ul>\n<li>Use the value in the {@link #getName()} of the target plugin to\n    specify the dependency.\n<li>If any plugin listed here is not found, your plugin will fail to\n    load at startup.\n<li>If multiple plugins list each other in <code>depend</code>,\n    creating a network with no individual plugin does not list another\n    plugin in the <a\n    href=https://en.wikipedia.org/wiki/Circular_dependency>network</a>,\n    all plugins in that network will fail.\n<li><code>depend</code> must be in <a\n    href=\"https://en.wikipedia.org/wiki/YAML#Lists\">YAML list\n    format</a>.\n</ul>\n<p>\nIn the plugin.yml, this entry is named <code>depend</code>.\n<p>\nExample:\n<blockquote><pre>depend:\n- OnePlugin\n- AnotherPlugin</pre></blockquote>","ret":"immutable list of the plugin's dependencies"},{"name":"getSoftDepend","params":[],"desc":"Gives a list of other plugins that the plugin requires for full\nfunctionality. The {@link PluginManager} will make best effort to treat\nall entries here as if they were a {@link #getDepend() dependency}, but\nwill never fail because of one of these entries.\n<ul>\n<li>Use the value in the {@link #getName()} of the target plugin to\n    specify the dependency.\n<li>When an unresolvable plugin is listed, it will be ignored and does\n    not affect load order.\n<li>When a circular dependency occurs (a network of plugins depending\n    or soft-dependending each other), it will arbitrarily choose a\n    plugin that can be resolved when ignoring soft-dependencies.\n<li><code>softdepend</code> must be in <a\n    href=\"https://en.wikipedia.org/wiki/YAML#Lists\">YAML list\n    format</a>.\n</ul>\n<p>\nIn the plugin.yml, this entry is named <code>softdepend</code>.\n<p>\nExample:\n<blockquote><pre>softdepend: [OnePlugin, AnotherPlugin]</pre></blockquote>","ret":"immutable list of the plugin's preferred dependencies"},{"name":"getLoadBefore","params":[],"desc":"Gets the list of plugins that should consider this plugin a\nsoft-dependency.\n<ul>\n<li>Use the value in the {@link #getName()} of the target plugin to\n    specify the dependency.\n<li>The plugin should load before any other plugins listed here.\n<li>Specifying another plugin here is strictly equivalent to having the\n    specified plugin's {@link #getSoftDepend()} include {@link\n    #getName() this plugin}.\n<li><code>loadbefore</code> must be in <a\n    href=\"https://en.wikipedia.org/wiki/YAML#Lists\">YAML list\n    format</a>.\n</ul>\n<p>\nIn the plugin.yml, this entry is named <code>loadbefore</code>.\n<p>\nExample:\n<blockquote><pre>loadbefore:\n- OnePlugin\n- AnotherPlugin</pre></blockquote>","ret":"immutable list of plugins that should consider this plugin a\n    soft-dependency"},{"name":"getPrefix","params":[],"desc":"Gives the token to prefix plugin-specific logging messages with.\n<ul>\n<li>This includes all messages using {@link Plugin#getLogger()}.\n<li>If not specified, the server uses the plugin's {@link #getName()\n    name}.\n<li>This should clearly indicate what plugin is being logged.\n</ul>\n<p>\nIn the plugin.yml, this entry is named <code>prefix</code>.\n<p>\nExample:<blockquote><pre>prefix: ex-why-zee</pre></blockquote>","ret":"the prefixed logging token, or null if not specified"},{"name":"getCommands","params":[],"desc":"Gives the map of command-name to command-properties. Each entry in this\nmap corresponds to a single command and the respective values are the\nproperties of the command. Each property, <i>with the exception of\naliases</i>, can be defined at runtime using methods in {@link\nPluginCommand} and are defined here only as a convenience.\n<table border=1>\n<caption>The command section's description</caption>\n<tr>\n    <th>Node</th>\n    <th>Method</th>\n    <th>Type</th>\n    <th>Description</th>\n    <th>Example</th>\n</tr><tr>\n    <td><code>description</code></td>\n    <td>{@link PluginCommand#setDescription(String)}</td>\n    <td>String</td>\n    <td>A user-friendly description for a command. It is useful for\n        documentation purposes as well as in-game help.</td>\n    <td><blockquote><pre>description: Set yourself on fire</pre></blockquote></td>\n</tr><tr>\n    <td><code>aliases</code></td>\n    <td>{@link PluginCommand#setAliases(List)}</td>\n    <td>String or <a\n        href=\"https://en.wikipedia.org/wiki/YAML#Lists\">List</a> of\n        strings</td>\n    <td>Alternative command names, with special usefulness for commands\n        that are already registered. <i>Aliases are not effective when\n        defined at runtime,</i> so the plugin description file is the\n        only way to have them properly defined.\n        <p>\n        Note: Command aliases may not have a colon in them.</td>\n    <td>Single alias format:\n        <blockquote><pre>aliases: combust_me</pre></blockquote> or\n        multiple alias format:\n        <blockquote><pre>aliases: [combust_me, combustMe]</pre></blockquote></td>\n</tr><tr>\n    <td><code>permission</code></td>\n    <td>{@link PluginCommand#setPermission(String)}</td>\n    <td>String</td>\n    <td>The name of the {@link Permission} required to use the command.\n        A user without the permission will receive the specified\n        message (see {@linkplain\n        PluginCommand#setPermissionMessage(String) below}), or a\n        standard one if no specific message is defined. Without the\n        permission node, no {@link\n        PluginCommand#setExecutor(CommandExecutor) CommandExecutor} or\n        {@link PluginCommand#setTabCompleter(TabCompleter)} will be called.</td>\n    <td><blockquote><pre>permission: inferno.flagrate</pre></blockquote></td>\n</tr><tr>\n    <td><code>permission-message</code></td>\n    <td>{@link PluginCommand#setPermissionMessage(String)}</td>\n    <td>String</td>\n    <td><ul>\n        <li>Displayed to a player that attempts to use a command, but\n            does not have the required permission. See {@link\n            PluginCommand#getPermission() above}.\n        <li>&lt;permission&gt; is a macro that is replaced with the\n            permission node required to use the command.\n        <li>Using empty quotes is a valid way to indicate nothing\n            should be displayed to a player.\n        </ul></td>\n    <td><blockquote><pre>permission-message: You do not have /&lt;permission&gt;</pre></blockquote></td>\n</tr><tr>\n    <td><code>usage</code></td>\n    <td>{@link PluginCommand#setUsage(String)}</td>\n    <td>String</td>\n    <td>This message is displayed to a player when the {@link\n        PluginCommand#setExecutor(CommandExecutor)} {@linkplain\n        CommandExecutor#onCommand(CommandSender, Command, String, String[]) returns false}.\n        &lt;command&gt; is a macro that is replaced the command issued.</td>\n    <td><blockquote><pre>usage: Syntax error! Perhaps you meant /&lt;command&gt; PlayerName?</pre></blockquote>\n        It is worth noting that to use a colon in a yaml, like\n        <code>`usage: Usage: /god [player]'</code>, you need to\n        <a href=\"http://yaml.org/spec/current.html#id2503232\">surround\n        the message with double-quote</a>:\n        <blockquote><pre>usage: \"Usage: /god [player]\"</pre></blockquote></td>\n</tr>\n</table>\nThe commands are structured as a hiearchy of <a\nhref=\"http://yaml.org/spec/current.html#id2502325\">nested mappings</a>.\nThe primary (top-level, no intendentation) node is\n`<code>commands</code>', while each individual command name is\nindented, indicating it maps to some value (in our case, the\nproperties of the table above).\n<p>\nHere is an example bringing together the piecemeal examples above, as\nwell as few more definitions:<blockquote><pre>\ncommands:\n flagrate:\n   description: Set yourself on fire.\n   aliases: [combust_me, combustMe]\n   permission: inferno.flagrate\n   permission-message: You do not have /&lt;permission&gt;\n   usage: Syntax error! Perhaps you meant /&lt;command&gt; PlayerName?\n burningdeaths:\n   description: List how many times you have died by fire.\n   aliases:\n   - burning_deaths\n   - burningDeaths\n   permission: inferno.burningdeaths\n   usage: |\n     /&lt;command&gt; [player]\n     Example: /&lt;command&gt; - see how many times you have burned to death\n     Example: /&lt;command&gt; CaptainIce - see how many times CaptainIce has burned to death\n # The next command has no description, aliases, etc. defined, but is still valid\n # Having an empty declaration is useful for defining the description, permission, and messages from a configuration dynamically\n apocalypse:\n</pre></blockquote>\nNote: Command names may not have a colon in their name.","ret":"the commands this plugin will register"},{"name":"getPermissions","params":[],"desc":"Gives the list of permissions the plugin will register at runtime,\nimmediately proceding enabling. The format for defining permissions is\na map from permission name to properties. To represent a map without\nany specific property, empty <a\nhref=\"http://yaml.org/spec/current.html#id2502702\">curly-braces</a> (\n<code>&#123;&#125;</code> ) may be used (as a null value is not\naccepted, unlike the {@link #getCommands() commands} above).\n<p>\nA list of optional properties for permissions:\n<table border=1>\n<caption>The permission section's description</caption>\n<tr>\n    <th>Node</th>\n    <th>Description</th>\n    <th>Example</th>\n</tr><tr>\n    <td><code>description</code></td>\n    <td>Plaintext (user-friendly) description of what the permission\n        is for.</td>\n    <td><blockquote><pre>description: Allows you to set yourself on fire</pre></blockquote></td>\n</tr><tr>\n    <td><code>default</code></td>\n    <td>The default state for the permission, as defined by {@link\n        Permission#getDefault()}. If not defined, it will be set to\n        the value of {@link PluginDescriptionFile#getPermissionDefault()}.\n        <p>\n        For reference:<ul>\n        <li><code>true</code> - Represents a positive assignment to\n            {@link Permissible permissibles}.\n        <li><code>false</code> - Represents no assignment to {@link\n            Permissible permissibles}.\n        <li><code>op</code> - Represents a positive assignment to\n            {@link Permissible#isOp() operator permissibles}.\n        <li><code>notop</code> - Represents a positive assignment to\n            {@link Permissible#isOp() non-operator permissibiles}.\n        </ul></td>\n    <td><blockquote><pre>default: true</pre></blockquote></td>\n</tr><tr>\n    <td><code>children</code></td>\n    <td>Allows other permissions to be set as a {@linkplain\n        Permission#getChildren() relation} to the parent permission.\n        When a parent permissions is assigned, child permissions are\n        respectively assigned as well.\n        <ul>\n        <li>When a parent permission is assigned negatively, child\n            permissions are assigned based on an inversion of their\n            association.\n        <li>When a parent permission is assigned positively, child\n            permissions are assigned based on their association.\n        </ul>\n        <p>\n        Child permissions may be defined in a number of ways:<ul>\n        <li>Children may be defined as a <a\n            href=\"https://en.wikipedia.org/wiki/YAML#Lists\">list</a> of\n            names. Using a list will treat all children associated\n            positively to their parent.\n        <li>Children may be defined as a map. Each permission name maps\n            to either a boolean (representing the association), or a\n            nested permission definition (just as another permission).\n            Using a nested definition treats the child as a positive\n            association.\n        <li>A nested permission definition must be a map of these same\n            properties. To define a valid nested permission without\n            defining any specific property, empty curly-braces (\n            <code>&#123;&#125;</code> ) must be used.\n         <li>A nested permission may carry it's own nested permissions\n             as children, as they may also have nested permissions, and\n             so forth. There is no direct limit to how deep the\n             permission tree is defined.\n        </ul></td>\n    <td>As a list:\n        <blockquote><pre>children: [inferno.flagrate, inferno.burningdeaths]</pre></blockquote>\n        Or as a mapping:\n        <blockquote><pre>children:\n inferno.flagrate: true\n inferno.burningdeaths: true</pre></blockquote>\n        An additional example showing basic nested values can be seen\n        <a href=\"doc-files/permissions-example_plugin.yml\">here</a>.\n        </td>\n</tr>\n</table>\nThe permissions are structured as a hiearchy of <a\nhref=\"http://yaml.org/spec/current.html#id2502325\">nested mappings</a>.\nThe primary (top-level, no intendentation) node is\n`<code>permissions</code>', while each individual permission name is\nindented, indicating it maps to some value (in our case, the\nproperties of the table above).\n<p>\nHere is an example using some of the properties:<blockquote><pre>\npermissions:\n inferno.*:\n   description: Gives access to all Inferno commands\n   children:\n     inferno.flagrate: true\n     inferno.burningdeaths: true\n inferno.flagate:\n   description: Allows you to ignite yourself\n   default: true\n inferno.burningdeaths:\n   description: Allows you to see how many times you have burned to death\n   default: true\n</pre></blockquote>\nAnother example, with nested definitions, can be found <a\nhref=\"doc-files/permissions-example_plugin.yml\">here</a>.","ret":"the permissions this plugin will register"},{"name":"getPermissionDefault","params":[],"desc":"Gives the default {@link Permission#getDefault() default} state of\n{@link #getPermissions() permissions} registered for the plugin.\n<ul>\n<li>If not specified, it will be {@link PermissionDefault#OP}.\n<li>It is matched using {@link PermissionDefault#getByName(String)}\n<li>It only affects permissions that do not define the\n    <code>default</code> node.\n<li>It may be any value in {@link PermissionDefault}.\n</ul>\n<p>\nIn the plugin.yml, this entry is named <code>default-permission</code>.\n<p>\nExample:<blockquote><pre>default-permission: NOT_OP</pre></blockquote>","ret":"the default value for the plugin's permissions"},{"name":"getAwareness","params":[],"desc":"Gives a set of every {@link PluginAwareness} for a plugin. An awareness\ndictates something that a plugin developer acknowledges when the plugin\nis compiled. Some implementions may define extra awarenesses that are\nnot included in the API. Any unrecognized\nawareness (one unsupported or in a future version) will cause a dummy\nobject to be created instead of failing.\n\n<ul>\n<li>Currently only supports the enumerated values in {@link\n    PluginAwareness.Flags}.\n<li>Each awareness starts the identifier with bang-at\n    (<code>!@</code>).\n<li>Unrecognized (future / unimplemented) entries are quietly replaced\n    by a generic object that implements PluginAwareness.\n<li>A type of awareness must be defined by the runtime and acknowledged\n    by the API, effectively discluding any derived type from any\n    plugin's classpath.\n<li><code>awareness</code> must be in <a\n    href=\"https://en.wikipedia.org/wiki/YAML#Lists\">YAML list\n    format</a>.\n</ul>\n<p>\nIn the plugin.yml, this entry is named <code>awareness</code>.\n<p>\nExample:<blockquote><pre>awareness:\n- !@UTF8</pre></blockquote>\n<p>\n<b>Note:</b> Although unknown versions of some future awareness are\ngracefully substituted, previous versions of Bukkit (ones prior to the\nfirst implementation of awareness) will fail to load a plugin that\ndefines any awareness.","ret":"a set containing every awareness for the plugin"},{"name":"getFullName","params":[],"desc":"Returns the name of a plugin, including the version. This method is\nprovided for convenience; it uses the {@link #getName()} and {@link\n#getVersion()} entries.","ret":"a descriptive name of the plugin and respective version"},{"name":"getAPIVersion","params":[],"desc":"Gives the API version which this plugin is designed to support. No\nspecific format is guaranteed.\n<ul>\n<li>Refer to release notes for supported API versions.\n</ul>\n<p>\nIn the plugin.yml, this entry is named <code>api-version</code>.\n<p>\nExample:<blockquote><pre>api-version: 1.13</pre></blockquote>","ret":"the version of the plugin"},{"name":"getLibraries","params":[],"desc":"Gets the libraries this plugin requires. This is a preview feature.\n<ul>\n<li>Libraries must be GAV specifiers and are loaded from Maven Central.\n</ul>\n<p>\nExample:<blockquote><pre>libraries:\n    - com.squareup.okhttp3:okhttp:4.9.0</pre></blockquote>","ret":"required libraries"},{"name":"getClassLoaderOf","params":[],"desc":"","ret":"unused"},{"name":"save","params":[{"name":"writer","type":"Writer","desc":"Writer to output this file to"}],"desc":"Saves this PluginDescriptionFile to the given writer","ret":""},{"name":"getRawName","params":[],"desc":"","ret":"internal use"}],"desc":"This type is the runtime-container for the information in the plugin.yml.\nAll plugins must have a respective plugin.yml. For plugins written in java\nusing the standard plugin loader, this file must be in the root of the jar\nfile.\n<p>\nWhen Bukkit loads a plugin, it needs to know some basic information about\nit. It reads this information from a YAML file, 'plugin.yml'. This file\nconsists of a set of attributes, each defined on a new line and with no\nindentation.\n<p>\nEvery (almost* every) method corresponds with a specific entry in the\nplugin.yml. These are the <b>required</b> entries for every plugin.yml:\n<ul>\n<li>{@link #getName()} - <code>name</code>\n<li>{@link #getVersion()} - <code>version</code>\n<li>{@link #getMain()} - <code>main</code>\n</ul>\n<p>\nFailing to include any of these items will throw an exception and cause the\nserver to ignore your plugin.\n<p>\nThis is a list of the possible yaml keys, with specific details included in\nthe respective method documentations:\n<table border=1>\n<caption>The description of the plugin.yml layout</caption>\n<tr>\n    <th>Node</th>\n    <th>Method</th>\n    <th>Summary</th>\n</tr><tr>\n    <td><code>name</code></td>\n    <td>{@link #getName()}</td>\n    <td>The unique name of plugin</td>\n</tr><tr>\n    <td><code>provides</code></td>\n    <td>{@link #getProvides()}</td>\n    <td>The plugin APIs which this plugin provides</td>\n</tr><tr>\n    <td><code>version</code></td>\n    <td>{@link #getVersion()}</td>\n    <td>A plugin revision identifier</td>\n</tr><tr>\n    <td><code>main</code></td>\n    <td>{@link #getMain()}</td>\n    <td>The plugin's initial class file</td>\n</tr><tr>\n    <td><code>author</code><br><code>authors</code></td>\n    <td>{@link #getAuthors()}</td>\n    <td>The plugin authors</td>\n</tr><tr>\n    <td><code>contributors</code></td>\n    <td>{@link #getContributors()}</td>\n    <td>The plugin contributors</td>\n</tr><tr>\n    <td><code>description</code></td>\n    <td>{@link #getDescription()}</td>\n    <td>Human readable plugin summary</td>\n</tr><tr>\n    <td><code>website</code></td>\n    <td>{@link #getWebsite()}</td>\n    <td>The URL to the plugin's site</td>\n</tr><tr>\n    <td><code>prefix</code></td>\n    <td>{@link #getPrefix()}</td>\n    <td>The token to prefix plugin log entries</td>\n</tr><tr>\n    <td><code>load</code></td>\n    <td>{@link #getLoad()}</td>\n    <td>The phase of server-startup this plugin will load during</td>\n</tr><tr>\n    <td><code>depend</code></td>\n    <td>{@link #getDepend()}</td>\n    <td>Other required plugins</td>\n</tr><tr>\n    <td><code>softdepend</code></td>\n    <td>{@link #getSoftDepend()}</td>\n    <td>Other plugins that add functionality</td>\n</tr><tr>\n    <td><code>loadbefore</code></td>\n    <td>{@link #getLoadBefore()}</td>\n    <td>The inverse softdepend</td>\n</tr><tr>\n    <td><code>commands</code></td>\n    <td>{@link #getCommands()}</td>\n    <td>The commands the plugin will register</td>\n</tr><tr>\n    <td><code>permissions</code></td>\n    <td>{@link #getPermissions()}</td>\n    <td>The permissions the plugin will register</td>\n</tr><tr>\n    <td><code>default-permission</code></td>\n    <td>{@link #getPermissionDefault()}</td>\n    <td>The default {@link Permission#getDefault() default} permission\n        state for defined {@link #getPermissions() permissions} the plugin\n        will register</td>\n</tr><tr>\n    <td><code>awareness</code></td>\n    <td>{@link #getAwareness()}</td>\n    <td>The concepts that the plugin acknowledges</td>\n</tr><tr>\n    <td><code>api-version</code></td>\n    <td>{@link #getAPIVersion()}</td>\n    <td>The API version which this plugin was programmed against</td>\n</tr><tr>\n    <td><code>libraries</code></td>\n    <td>{@link #getLibraries() ()}</td>\n    <td>The libraries to be linked with this plugin</td>\n</tr>\n</table>\n<p>\nA plugin.yml example:<blockquote><pre>\nname: Inferno\nprovides: [Hell]\nversion: 1.4.1\ndescription: This plugin is so 31337. You can set yourself on fire.\n# We could place every author in the authors list, but chose not to for illustrative purposes\n# Also, having an author distinguishes that person as the project lead, and ensures their\n# name is displayed first\nauthor: CaptainInflamo\nauthors: [Cogito, verrier, EvilSeph]\ncontributors: [Choco, md_5]\nwebsite: http://www.curse.com/server-mods/minecraft/myplugin\n\nmain: com.captaininflamo.bukkit.inferno.Inferno\ndepend: [NewFire, FlameWire]\napi-version: 1.13\nlibraries:\n    - com.squareup.okhttp3:okhttp:4.9.0\n\ncommands:\n flagrate:\n   description: Set yourself on fire.\n   aliases: [combust_me, combustMe]\n   permission: inferno.flagrate\n   usage: Syntax error! Simply type /&lt;command&gt; to ignite yourself.\n burningdeaths:\n   description: List how many times you have died by fire.\n   aliases: [burning_deaths, burningDeaths]\n   permission: inferno.burningdeaths\n   usage: |\n     /&lt;command&gt; [player]\n     Example: /&lt;command&gt; - see how many times you have burned to death\n     Example: /&lt;command&gt; CaptainIce - see how many times CaptainIce has burned to death\n\npermissions:\n inferno.*:\n   description: Gives access to all Inferno commands\n   children:\n     inferno.flagrate: true\n     inferno.burningdeaths: true\n     inferno.burningdeaths.others: true\n inferno.flagrate:\n   description: Allows you to ignite yourself\n   default: true\n inferno.burningdeaths:\n   description: Allows you to see how many times you have burned to death\n   default: true\n inferno.burningdeaths.others:\n   description: Allows you to see how many times others have burned to death\n   default: op\n   children:\n     inferno.burningdeaths: true\n</pre></blockquote>"},{"FQCN":"org.bukkit.plugin.PluginLoadOrder","methods":[],"desc":"Represents the order in which a plugin should be initialized and enabled"},{"FQCN":"org.bukkit.plugin.SimplePluginManager","methods":[{"name":"registerInterface","params":[{"name":"loader","type":"Class<? extends PluginLoader>","desc":"Class name of the PluginLoader to register"}],"desc":"Registers the specified plugin loader","ret":""},{"name":"loadPlugins","params":[{"name":"directory","type":"File","desc":"Directory to check for plugins"}],"desc":"Loads the plugins contained within the specified directory","ret":"A list of all plugins loaded"},{"name":"loadPlugin","params":[{"name":"file","type":"File","desc":"File containing the plugin to load"}],"desc":"Loads the plugin in the specified file\n<p>\nFile must be valid according to the current enabled Plugin interfaces","ret":"The Plugin loaded, or null if it was invalid"},{"name":"getPlugin","params":[{"name":"name","type":"String","desc":"Name of the plugin to check"}],"desc":"Checks if the given plugin is loaded and returns it when applicable\n<p>\nPlease note that the name of the plugin is case-sensitive","ret":"Plugin if it exists, otherwise null"},{"name":"isPluginEnabled","params":[{"name":"name","type":"String","desc":"Name of the plugin to check"}],"desc":"Checks if the given plugin is enabled or not\n<p>\nPlease note that the name of the plugin is case-sensitive.","ret":"true if the plugin is enabled, otherwise false"},{"name":"isPluginEnabled","params":[{"name":"plugin","type":"Plugin","desc":"Plugin to check"}],"desc":"Checks if the given plugin is enabled or not","ret":"true if the plugin is enabled, otherwise false"},{"name":"callEvent","params":[{"name":"event","type":"Event","desc":"Event details"}],"desc":"Calls an event with the given details.","ret":""},{"name":"registerEvent","params":[{"name":"event","type":"Class<? extends Event>","desc":"Event class to register"},{"name":"listener","type":"Listener","desc":"PlayerListener to register"},{"name":"priority","type":"EventPriority","desc":"Priority of this event"},{"name":"executor","type":"EventExecutor","desc":"EventExecutor to register"},{"name":"plugin","type":"Plugin","desc":"Plugin to register"},{"name":"ignoreCancelled","type":"boolean","desc":"Do not call executor if event was already\n    cancelled"}],"desc":"Registers the given event to the specified listener using a directly\npassed EventExecutor","ret":""},{"name":"useTimings","params":[{"name":"use","type":"boolean","desc":"True if per event timing code should be used"}],"desc":"Sets whether or not per event timing code should be used","ret":""}],"desc":"Handles all plugin management from the Server"},{"FQCN":"org.bukkit.plugin.TimedRegisteredListener","methods":[{"name":"reset","params":[],"desc":"Resets the call count and total time for this listener","ret":""},{"name":"getCount","params":[],"desc":"Gets the total times this listener has been called","ret":"Times this listener has been called"},{"name":"getTotalTime","params":[],"desc":"Gets the total time calls to this listener have taken","ret":"Total time for all calls of this listener"},{"name":"getEventClass","params":[],"desc":"Gets the class of the events this listener handled. If it handled\nmultiple classes of event, the closest shared superclass will be\nreturned, such that for any event this listener has handled,\n<code>this.getEventClass().isAssignableFrom(event.getClass())</code>\nand no class <code>this.getEventClass().isAssignableFrom(clazz)\n{@literal && this.getEventClass() != clazz &&}\nevent.getClass().isAssignableFrom(clazz)</code> for all handled events.","ret":"the event class handled by this RegisteredListener"},{"name":"hasMultiple","params":[],"desc":"Gets whether this listener has handled multiple events, such that for\nsome two events, <code>eventA.getClass() != eventB.getClass()</code>.","ret":"true if this listener has handled multiple events"}],"desc":"Extends RegisteredListener to include timing information"},{"FQCN":"org.bukkit.plugin.RegisteredListener","methods":[{"name":"getListener","params":[],"desc":"Gets the listener for this registration","ret":"Registered Listener"},{"name":"getPlugin","params":[],"desc":"Gets the plugin for this registration","ret":"Registered Plugin"},{"name":"getPriority","params":[],"desc":"Gets the priority for this registration","ret":"Registered Priority"},{"name":"callEvent","params":[{"name":"event","type":"Event","desc":"The event"}],"desc":"Calls the event executor","ret":""},{"name":"isIgnoringCancelled","params":[],"desc":"Whether this listener accepts cancelled events","ret":"True when ignoring cancelled events"},{"name":"getExecutor","params":[],"desc":"Get the executor for this registration.","ret":"executor"}],"desc":"Stores relevant information for plugin listeners"},{"FQCN":"org.bukkit.plugin.AuthorNagException","methods":[],"desc":""},{"FQCN":"org.bukkit.plugin.SimpleServicesManager","methods":[{"name":"register","params":[{"name":"service","type":"Class<T>","desc":"service class"},{"name":"provider","type":"T","desc":"provider to register"},{"name":"plugin","type":"Plugin","desc":"plugin with the provider"},{"name":"priority","type":"ServicePriority","desc":"priority of the provider"}],"desc":"Register a provider of a service.","ret":""},{"name":"unregisterAll","params":[{"name":"plugin","type":"Plugin","desc":"The plugin"}],"desc":"Unregister all the providers registered by a particular plugin.","ret":""},{"name":"unregister","params":[{"name":"service","type":"Class<?>","desc":"The service interface"},{"name":"provider","type":"Object","desc":"The service provider implementation"}],"desc":"Unregister a particular provider for a particular service.","ret":""},{"name":"unregister","params":[{"name":"provider","type":"Object","desc":"The service provider implementation"}],"desc":"Unregister a particular provider.","ret":""},{"name":"load","params":[{"name":"service","type":"Class<T>","desc":"The service interface"}],"desc":"Queries for a provider. This may return if no provider has been\nregistered for a service. The highest priority provider is returned.","ret":"provider or null"},{"name":"getRegistration","params":[{"name":"service","type":"Class<T>","desc":"The service interface"}],"desc":"Queries for a provider registration. This may return if no provider\nhas been registered for a service.","ret":"provider registration or null"},{"name":"getRegistrations","params":[{"name":"plugin","type":"Plugin","desc":"The plugin"}],"desc":"Get registrations of providers for a plugin.","ret":"provider registrations"},{"name":"getRegistrations","params":[{"name":"service","type":"Class<T>","desc":"The service interface"}],"desc":"Get registrations of providers for a service. The returned list is\nan unmodifiable copy.","ret":"a copy of the list of registrations"},{"name":"getKnownServices","params":[],"desc":"Get a list of known services. A service is known if it has registered\nproviders for it.","ret":"a copy of the set of known services"},{"name":"isProvidedFor","params":[{"name":"service","type":"Class<T>","desc":"service to check"}],"desc":"Returns whether a provider has been registered for a service.","ret":"true if and only if there are registered providers"}],"desc":"A simple services manager."},{"FQCN":"org.bukkit.plugin.PluginAwareness","methods":[],"desc":"Represents a concept that a plugin is aware of.\n<p>\nThe internal representation may be singleton, or be a parameterized\ninstance, but must be immutable."},{"FQCN":"org.bukkit.plugin.InvalidPluginException","methods":[],"desc":"Thrown when attempting to load an invalid Plugin file"},{"FQCN":"org.bukkit.plugin.PluginLoader","methods":[{"name":"loadPlugin","params":[{"name":"file","type":"File","desc":"File to attempt to load"}],"desc":"Loads the plugin contained in the specified file","ret":"Plugin that was contained in the specified file, or null if\n    unsuccessful"},{"name":"getPluginDescription","params":[{"name":"file","type":"File","desc":"File to attempt to load from"}],"desc":"Loads a PluginDescriptionFile from the specified file","ret":"A new PluginDescriptionFile loaded from the plugin.yml in the\n    specified file"},{"name":"getPluginFileFilters","params":[],"desc":"Returns a list of all filename filters expected by this PluginLoader","ret":"The filters"},{"name":"createRegisteredListeners","params":[{"name":"listener","type":"Listener","desc":"The object that will handle the eventual call back"},{"name":"plugin","type":"Plugin","desc":"The plugin to use when creating registered listeners"}],"desc":"Creates and returns registered listeners for the event classes used in\nthis listener","ret":"The registered listeners."},{"name":"enablePlugin","params":[{"name":"plugin","type":"Plugin","desc":"Plugin to enable"}],"desc":"Enables the specified plugin\n<p>\nAttempting to enable a plugin that is already enabled will have no\neffect","ret":""},{"name":"disablePlugin","params":[{"name":"plugin","type":"Plugin","desc":"Plugin to disable"}],"desc":"Disables the specified plugin\n<p>\nAttempting to disable a plugin that is not enabled will have no effect","ret":""}],"desc":"Represents a plugin loader, which handles direct access to specific types\nof plugins"},{"FQCN":"org.bukkit.plugin.PluginLogger","methods":[],"desc":"The PluginLogger class is a modified {@link Logger} that prepends all\nlogging calls with the name of the plugin doing the logging. The API for\nPluginLogger is exactly the same as {@link Logger}."},{"FQCN":"org.bukkit.plugin.PluginDescriptionResolver","methods":[],"desc":""},{"FQCN":"org.bukkit.plugin.java.JavaPlugin","methods":[{"name":"getDataFolder","params":[],"desc":"Returns the folder that the plugin data's files are located in. The\nfolder may not yet exist.","ret":"The folder."},{"name":"getPluginLoader","params":[],"desc":"Gets the associated PluginLoader responsible for this plugin","ret":"PluginLoader that controls this plugin"},{"name":"getServer","params":[],"desc":"Returns the Server instance currently running this plugin","ret":"Server running this plugin"},{"name":"isEnabled","params":[],"desc":"Returns a value indicating whether or not this plugin is currently\nenabled","ret":"true if this plugin is enabled, otherwise false"},{"name":"getFile","params":[],"desc":"Returns the file which contains this plugin","ret":"File containing this plugin"},{"name":"getDescription","params":[],"desc":"Returns the plugin.yaml file containing the details for this plugin","ret":"Contents of the plugin.yaml file"},{"name":"getTextResource","params":[{"name":"file","type":"String","desc":"the filename of the resource to load"}],"desc":"Provides a reader for a text file located inside the jar.\n<p>\nThe returned reader will read text with the UTF-8 charset.","ret":"null if {@link #getResource(String)} returns null"},{"name":"getClassLoader","params":[],"desc":"Returns the ClassLoader which holds this plugin","ret":"ClassLoader holding this plugin"},{"name":"setEnabled","params":[{"name":"enabled","type":"boolean","desc":"true if enabled, otherwise false"}],"desc":"Sets the enabled state of this plugin","ret":""},{"name":"onCommand","params":[{"name":"sender","type":"CommandSender","desc":""},{"name":"command","type":"Command","desc":""},{"name":"label","type":"String","desc":""},{"name":"args","type":"String[]","desc":""}],"desc":"{@inheritDoc}","ret":""},{"name":"onTabComplete","params":[{"name":"sender","type":"CommandSender","desc":""},{"name":"command","type":"Command","desc":""},{"name":"alias","type":"String","desc":""},{"name":"args","type":"String[]","desc":""}],"desc":"{@inheritDoc}","ret":""},{"name":"getCommand","params":[{"name":"name","type":"String","desc":"name or alias of the command"}],"desc":"Gets the command with the given name, specific to this plugin. Commands\nneed to be registered in the {@link PluginDescriptionFile#getCommands()\nPluginDescriptionFile} to exist at runtime.","ret":"the plugin command if found, otherwise null"},{"name":"getPlugin","params":[{"name":"clazz","type":"Class<T>","desc":"the class desired"}],"desc":"This method provides fast access to the plugin that has {@link\n#getProvidingPlugin(Class) provided} the given plugin class, which is\nusually the plugin that implemented it.\n<p>\nAn exception to this would be if plugin's jar that contained the class\ndoes not extend the class, where the intended plugin would have\nresided in a different jar / classloader.","ret":"the plugin that provides and implements said class"},{"name":"getProvidingPlugin","params":[{"name":"clazz","type":"Class<?>","desc":"a class belonging to a plugin"}],"desc":"This method provides fast access to the plugin that has provided the\ngiven class.","ret":"the plugin that provided the class"}],"desc":"Represents a Java plugin and its main class. It contains fundamental methods\nand fields for a plugin to be loaded and work properly. This is an indirect\nimplementation of {@link org.bukkit.plugin.Plugin}."},{"FQCN":"org.bukkit.plugin.java.JavaPluginLoader","methods":[],"desc":"Represents a Java plugin loader, allowing plugins in the form of .jar"},{"FQCN":"org.bukkit.plugin.java.PluginClassLoader","methods":[],"desc":"A ClassLoader for plugins, to allow shared classes across multiple plugins"},{"FQCN":"org.bukkit.plugin.java.LibraryLoader","methods":[],"desc":""},{"FQCN":"org.bukkit.plugin.ServicePriority","methods":[],"desc":"Represents various priorities of a provider."},{"FQCN":"org.bukkit.plugin.PluginManager","methods":[{"name":"registerInterface","params":[{"name":"loader","type":"Class<? extends PluginLoader>","desc":"Class name of the PluginLoader to register"}],"desc":"Registers the specified plugin loader","ret":""},{"name":"getPlugin","params":[{"name":"name","type":"String","desc":"Name of the plugin to check"}],"desc":"Checks if the given plugin is loaded and returns it when applicable\n<p>\nPlease note that the name of the plugin is case-sensitive","ret":"Plugin if it exists, otherwise null"},{"name":"getPlugins","params":[],"desc":"Gets a list of all currently loaded plugins","ret":"Array of Plugins"},{"name":"isPluginEnabled","params":[{"name":"name","type":"String","desc":"Name of the plugin to check"}],"desc":"Checks if the given plugin is enabled or not\n<p>\nPlease note that the name of the plugin is case-sensitive.","ret":"true if the plugin is enabled, otherwise false"},{"name":"isPluginEnabled","params":[{"name":"plugin","type":"Plugin","desc":"Plugin to check"}],"desc":"Checks if the given plugin is enabled or not","ret":"true if the plugin is enabled, otherwise false"},{"name":"loadPlugin","params":[{"name":"file","type":"File","desc":"File containing the plugin to load"}],"desc":"Loads the plugin in the specified file\n<p>\nFile must be valid according to the current enabled Plugin interfaces","ret":"The Plugin loaded, or null if it was invalid"},{"name":"loadPlugins","params":[{"name":"directory","type":"File","desc":"Directory to check for plugins"}],"desc":"Loads the plugins contained within the specified directory","ret":"A list of all plugins loaded"},{"name":"disablePlugins","params":[],"desc":"Disables all the loaded plugins","ret":""},{"name":"clearPlugins","params":[],"desc":"Disables and removes all plugins","ret":""},{"name":"callEvent","params":[{"name":"event","type":"Event","desc":"Event details"}],"desc":"Calls an event with the given details","ret":""},{"name":"registerEvents","params":[{"name":"listener","type":"Listener","desc":"Listener to register"},{"name":"plugin","type":"Plugin","desc":"Plugin to register"}],"desc":"Registers all the events in the given listener class","ret":""},{"name":"registerEvent","params":[{"name":"event","type":"Class<? extends Event>","desc":"Event type to register"},{"name":"listener","type":"Listener","desc":"Listener to register"},{"name":"priority","type":"EventPriority","desc":"Priority to register this event at"},{"name":"executor","type":"EventExecutor","desc":"EventExecutor to register"},{"name":"plugin","type":"Plugin","desc":"Plugin to register"}],"desc":"Registers the specified executor to the given event class","ret":""},{"name":"registerEvent","params":[{"name":"event","type":"Class<? extends Event>","desc":"Event type to register"},{"name":"listener","type":"Listener","desc":"Listener to register"},{"name":"priority","type":"EventPriority","desc":"Priority to register this event at"},{"name":"executor","type":"EventExecutor","desc":"EventExecutor to register"},{"name":"plugin","type":"Plugin","desc":"Plugin to register"},{"name":"ignoreCancelled","type":"boolean","desc":"Whether to pass cancelled events or not"}],"desc":"Registers the specified executor to the given event class","ret":""},{"name":"enablePlugin","params":[{"name":"plugin","type":"Plugin","desc":"Plugin to enable"}],"desc":"Enables the specified plugin\n<p>\nAttempting to enable a plugin that is already enabled will have no\neffect","ret":""},{"name":"disablePlugin","params":[{"name":"plugin","type":"Plugin","desc":"Plugin to disable"}],"desc":"Disables the specified plugin\n<p>\nAttempting to disable a plugin that is not enabled will have no effect","ret":""},{"name":"getPermission","params":[{"name":"name","type":"String","desc":"Name of the permission"}],"desc":"Gets a {@link Permission} from its fully qualified name","ret":"Permission, or null if none"},{"name":"addPermission","params":[{"name":"perm","type":"Permission","desc":"Permission to add"}],"desc":"Adds a {@link Permission} to this plugin manager.\n<p>\nIf a permission is already defined with the given name of the new\npermission, an exception will be thrown.","ret":""},{"name":"removePermission","params":[{"name":"perm","type":"Permission","desc":"Permission to remove"}],"desc":"Removes a {@link Permission} registration from this plugin manager.\n<p>\nIf the specified permission does not exist in this plugin manager,\nnothing will happen.\n<p>\nRemoving a permission registration will <b>not</b> remove the\npermission from any {@link Permissible}s that have it.","ret":""},{"name":"removePermission","params":[{"name":"name","type":"String","desc":"Permission to remove"}],"desc":"Removes a {@link Permission} registration from this plugin manager.\n<p>\nIf the specified permission does not exist in this plugin manager,\nnothing will happen.\n<p>\nRemoving a permission registration will <b>not</b> remove the\npermission from any {@link Permissible}s that have it.","ret":""},{"name":"getDefaultPermissions","params":[{"name":"op","type":"boolean","desc":"Which set of default permissions to get"}],"desc":"Gets the default permissions for the given op status","ret":"The default permissions"},{"name":"recalculatePermissionDefaults","params":[{"name":"perm","type":"Permission","desc":"Permission to recalculate"}],"desc":"Recalculates the defaults for the given {@link Permission}.\n<p>\nThis will have no effect if the specified permission is not registered\nhere.","ret":""},{"name":"subscribeToPermission","params":[{"name":"permission","type":"String","desc":"Permission to subscribe to"},{"name":"permissible","type":"Permissible","desc":"Permissible subscribing"}],"desc":"Subscribes the given Permissible for information about the requested\nPermission, by name.\n<p>\nIf the specified Permission changes in any form, the Permissible will\nbe asked to recalculate.","ret":""},{"name":"unsubscribeFromPermission","params":[{"name":"permission","type":"String","desc":"Permission to unsubscribe from"},{"name":"permissible","type":"Permissible","desc":"Permissible subscribing"}],"desc":"Unsubscribes the given Permissible for information about the requested\nPermission, by name.","ret":""},{"name":"getPermissionSubscriptions","params":[{"name":"permission","type":"String","desc":"Permission to query for"}],"desc":"Gets a set containing all subscribed {@link Permissible}s to the given\npermission, by name","ret":"Set containing all subscribed permissions"},{"name":"subscribeToDefaultPerms","params":[{"name":"op","type":"boolean","desc":"Default list to subscribe to"},{"name":"permissible","type":"Permissible","desc":"Permissible subscribing"}],"desc":"Subscribes to the given Default permissions by operator status\n<p>\nIf the specified defaults change in any form, the Permissible will be\nasked to recalculate.","ret":""},{"name":"unsubscribeFromDefaultPerms","params":[{"name":"op","type":"boolean","desc":"Default list to unsubscribe from"},{"name":"permissible","type":"Permissible","desc":"Permissible subscribing"}],"desc":"Unsubscribes from the given Default permissions by operator status","ret":""},{"name":"getDefaultPermSubscriptions","params":[{"name":"op","type":"boolean","desc":"Default list to query for"}],"desc":"Gets a set containing all subscribed {@link Permissible}s to the given\ndefault list, by op status","ret":"Set containing all subscribed permissions"},{"name":"getPermissions","params":[],"desc":"Gets a set of all registered permissions.\n<p>\nThis set is a copy and will not be modified live.","ret":"Set containing all current registered permissions"},{"name":"useTimings","params":[],"desc":"Returns whether or not timing code should be used for event calls","ret":"True if event timings are to be used"},{"name":"overridePermissionManager","params":[{"name":"plugin","type":"Plugin","desc":""},{"name":"permissionManager","type":"io.papermc.paper.plugin.PermissionManager","desc":"permission manager"}],"desc":"Sets the permission manager to be used for this server.","ret":""}],"desc":"Handles all plugin management from the Server"},{"FQCN":"org.bukkit.plugin.ServicesManager","methods":[{"name":"register","params":[{"name":"service","type":"Class<T>","desc":"service class"},{"name":"provider","type":"T","desc":"provider to register"},{"name":"plugin","type":"Plugin","desc":"plugin with the provider"},{"name":"priority","type":"ServicePriority","desc":"priority of the provider"}],"desc":"Register a provider of a service.","ret":""},{"name":"unregisterAll","params":[{"name":"plugin","type":"Plugin","desc":"The plugin"}],"desc":"Unregister all the providers registered by a particular plugin.","ret":""},{"name":"unregister","params":[{"name":"service","type":"Class<?>","desc":"The service interface"},{"name":"provider","type":"Object","desc":"The service provider implementation"}],"desc":"Unregister a particular provider for a particular service.","ret":""},{"name":"unregister","params":[{"name":"provider","type":"Object","desc":"The service provider implementation"}],"desc":"Unregister a particular provider.","ret":""},{"name":"load","params":[{"name":"service","type":"Class<T>","desc":"The service interface"}],"desc":"Queries for a provider. This may return null if no provider has been\nregistered for a service. The highest priority provider is returned.","ret":"provider or null"},{"name":"getRegistration","params":[{"name":"service","type":"Class<T>","desc":"The service interface"}],"desc":"Queries for a provider registration. This may return null if no provider\nhas been registered for a service.","ret":"provider registration or null"},{"name":"getRegistrations","params":[{"name":"plugin","type":"Plugin","desc":"The plugin"}],"desc":"Get registrations of providers for a plugin.","ret":"provider registrations"},{"name":"getRegistrations","params":[{"name":"service","type":"Class<T>","desc":"The service interface"}],"desc":"Get registrations of providers for a service. The returned list is\nunmodifiable.","ret":"list of registrations"},{"name":"getKnownServices","params":[],"desc":"Get a list of known services. A service is known if it has registered\nproviders for it.","ret":"list of known services"},{"name":"isProvidedFor","params":[{"name":"service","type":"Class<T>","desc":"service to check"}],"desc":"Returns whether a provider has been registered for a service. Do not\ncheck this first only to call <code>load(service)</code> later, as that\nwould be a non-thread safe situation.","ret":"whether there has been a registered provider"}],"desc":"Manages services and service providers. Services are an interface\nspecifying a list of methods that a provider must implement. Providers are\nimplementations of these services. A provider can be queried from the\nservices manager in order to use a service (if one is available). If\nmultiple plugins register a service, then the service with the highest\npriority takes precedence."},{"FQCN":"org.bukkit.plugin.IllegalPluginAccessException","methods":[],"desc":"Thrown when a plugin attempts to interact with the server when it is not\nenabled"},{"FQCN":"org.bukkit.plugin.Plugin","methods":[{"name":"getDataFolder","params":[],"desc":"Returns the folder that the plugin data's files are located in. The\nfolder may not yet exist.","ret":"The folder"},{"name":"getDescription","params":[],"desc":"Returns the plugin.yaml file containing the details for this plugin","ret":"Contents of the plugin.yaml file"},{"name":"getPluginMeta","params":[],"desc":"Gets the plugin meta for this plugin.","ret":"configuration"},{"name":"getConfig","params":[],"desc":"Gets a {@link FileConfiguration} for this plugin, read through\n\"config.yml\"\n<p>\nIf there is a default config.yml embedded in this plugin, it will be\nprovided as a default for this Configuration.","ret":"Plugin configuration"},{"name":"getResource","params":[{"name":"filename","type":"String","desc":"Filename of the resource"}],"desc":"Gets an embedded resource in this plugin","ret":"File if found, otherwise null"},{"name":"saveConfig","params":[],"desc":"Saves the {@link FileConfiguration} retrievable by {@link #getConfig()}.","ret":""},{"name":"saveDefaultConfig","params":[],"desc":"Saves the raw contents of the default config.yml file to the location\nretrievable by {@link #getConfig()}.\n<p>\nThis should fail silently if the config.yml already exists.","ret":""},{"name":"saveResource","params":[{"name":"resourcePath","type":"String","desc":"the embedded resource path to look for within the\n    plugin's .jar file. (No preceding slash)."},{"name":"replace","type":"boolean","desc":"if true, the embedded resource will overwrite the\n    contents of an existing file."}],"desc":"Saves the raw contents of any resource embedded with a plugin's .jar\nfile assuming it can be found using {@link #getResource(String)}.\n<p>\nThe resource is saved into the plugin's data folder using the same\nhierarchy as the .jar file (subdirectories are preserved).","ret":""},{"name":"reloadConfig","params":[],"desc":"Discards any data in {@link #getConfig()} and reloads from disk.","ret":""},{"name":"getPluginLoader","params":[],"desc":"Gets the associated PluginLoader responsible for this plugin","ret":"PluginLoader that controls this plugin"},{"name":"getServer","params":[],"desc":"Returns the Server instance currently running this plugin","ret":"Server running this plugin"},{"name":"isEnabled","params":[],"desc":"Returns a value indicating whether or not this plugin is currently\nenabled","ret":"true if this plugin is enabled, otherwise false"},{"name":"onDisable","params":[],"desc":"Called when this plugin is disabled","ret":""},{"name":"onLoad","params":[],"desc":"Called after a plugin is loaded but before it has been enabled.\n<p>\nWhen multiple plugins are loaded, the onLoad() for all plugins is\ncalled before any onEnable() is called.","ret":""},{"name":"onEnable","params":[],"desc":"Called when this plugin is enabled","ret":""},{"name":"isNaggable","params":[],"desc":"Simple boolean if we can still nag to the logs about things","ret":"boolean whether we can nag"},{"name":"setNaggable","params":[{"name":"canNag","type":"boolean","desc":"is this plugin still naggable?"}],"desc":"Set naggable state","ret":""},{"name":"getDefaultWorldGenerator","params":[{"name":"worldName","type":"String","desc":"Name of the world that this will be applied to"},{"name":"id","type":"String","desc":"Unique ID, if any, that was specified to indicate which\n    generator was requested"}],"desc":"Gets a {@link ChunkGenerator} for use in a default world, as specified\nin the server configuration","ret":"ChunkGenerator for use in the default world generation"},{"name":"getDefaultBiomeProvider","params":[{"name":"worldName","type":"String","desc":"Name of the world that this will be applied to"},{"name":"id","type":"String","desc":"Unique ID, if any, that was specified to indicate which\n    biome provider was requested"}],"desc":"Gets a {@link BiomeProvider} for use in a default world, as specified\nin the server configuration","ret":"BiomeProvider for use in the default world generation"},{"name":"getLogger","params":[],"desc":"Returns the plugin logger associated with this server's logger. The\nreturned logger automatically tags all log messages with the plugin's\nname.","ret":"Logger associated with this plugin"},{"name":"getLog4JLogger","params":[],"desc":"","ret":""},{"name":"getName","params":[],"desc":"Returns the name of the plugin.\n<p>\nThis should return the bare name of the plugin and should be used for\ncomparison.","ret":"name of the plugin"},{"name":"getLifecycleManager","params":[],"desc":"Get the lifecycle event manager for registering handlers\nfor lifecycle events allowed on the {@link Plugin}.","ret":"the lifecycle event manager"}],"desc":"Represents a Plugin\n<p>\nThe use of {@link PluginBase} is recommended for actual Implementation"},{"FQCN":"org.bukkit.plugin.RegisteredServiceProvider","methods":[],"desc":"A registered service provider."},{"FQCN":"org.bukkit.plugin.PluginBase","methods":[],"desc":"Represents a base {@link Plugin}\n<p>\nExtend this class if your plugin is not a {@link\norg.bukkit.plugin.java.JavaPlugin}"},{"FQCN":"org.bukkit.plugin.EventExecutor","methods":[],"desc":"Interface which defines the class for event call backs to plugins"},{"FQCN":"org.bukkit.plugin.messaging.PluginMessageListenerRegistration","methods":[{"name":"getChannel","params":[],"desc":"Gets the plugin channel that this registration is about.","ret":"Plugin channel."},{"name":"getListener","params":[],"desc":"Gets the registered listener described by this registration.","ret":"Registered listener."},{"name":"getPlugin","params":[],"desc":"Gets the plugin that this registration is for.","ret":"Registered plugin."},{"name":"isValid","params":[],"desc":"Checks if this registration is still valid.","ret":"True if this registration is still valid, otherwise false."}],"desc":"Contains information about a {@link Plugin}s registration to a plugin\nchannel."},{"FQCN":"org.bukkit.plugin.messaging.ChannelNameTooLongException","methods":[],"desc":"Thrown if a Plugin Channel is too long."},{"FQCN":"org.bukkit.plugin.messaging.StandardMessenger","methods":[{"name":"validateChannel","params":[{"name":"channel","type":"String","desc":"Channel name to validate."}],"desc":"Validates a Plugin Channel name.","ret":""},{"name":"validateAndCorrectChannel","params":[{"name":"channel","type":"String","desc":"Channel name to validate."}],"desc":"Validates and corrects a Plugin Channel name. Method is not reentrant / idempotent.","ret":"corrected channel name"},{"name":"validatePluginMessage","params":[{"name":"messenger","type":"Messenger","desc":"Messenger to use for validation."},{"name":"source","type":"Plugin","desc":"Source plugin of the Message."},{"name":"channel","type":"String","desc":"Plugin Channel to send the message by."},{"name":"message","type":"byte[]","desc":"Raw message payload to send."}],"desc":"Validates the input of a Plugin Message, ensuring the arguments are all\nvalid.","ret":""}],"desc":"Standard implementation to {@link Messenger}"},{"FQCN":"org.bukkit.plugin.messaging.Messenger","methods":[{"name":"isReservedChannel","params":[{"name":"channel","type":"String","desc":"Channel name to check."}],"desc":"Checks if the specified channel is a reserved name.\n<br>\nAll channels within the \"minecraft\" namespace except for\n\"minecraft:brand\" are reserved.","ret":"True if the channel is reserved, otherwise false."},{"name":"registerOutgoingPluginChannel","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that wishes to send messages through the channel."},{"name":"channel","type":"String","desc":"Channel to register."}],"desc":"Registers the specific plugin to the requested outgoing plugin channel,\nallowing it to send messages through that channel to any clients.","ret":""},{"name":"unregisterOutgoingPluginChannel","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that no longer wishes to send messages through the\n    channel."},{"name":"channel","type":"String","desc":"Channel to unregister."}],"desc":"Unregisters the specific plugin from the requested outgoing plugin\nchannel, no longer allowing it to send messages through that channel to\nany clients.","ret":""},{"name":"unregisterOutgoingPluginChannel","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that no longer wishes to send plugin messages."}],"desc":"Unregisters the specific plugin from all outgoing plugin channels, no\nlonger allowing it to send any plugin messages.","ret":""},{"name":"registerIncomingPluginChannel","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that wishes to register to this channel."},{"name":"channel","type":"String","desc":"Channel to register."},{"name":"listener","type":"PluginMessageListener","desc":"Listener to receive messages on."}],"desc":"Registers the specific plugin for listening on the requested incoming\nplugin channel, allowing it to act upon any plugin messages.","ret":"The resulting registration that was made as a result of this\n    method."},{"name":"unregisterIncomingPluginChannel","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that wishes to unregister from this channel."},{"name":"channel","type":"String","desc":"Channel to unregister."},{"name":"listener","type":"PluginMessageListener","desc":"Listener to stop receiving messages on."}],"desc":"Unregisters the specific plugin's listener from listening on the\nrequested incoming plugin channel, no longer allowing it to act upon\nany plugin messages.","ret":""},{"name":"unregisterIncomingPluginChannel","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that wishes to unregister from this channel."},{"name":"channel","type":"String","desc":"Channel to unregister."}],"desc":"Unregisters the specific plugin from listening on the requested\nincoming plugin channel, no longer allowing it to act upon any plugin\nmessages.","ret":""},{"name":"unregisterIncomingPluginChannel","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that wishes to unregister from this channel."}],"desc":"Unregisters the specific plugin from listening on all plugin channels\nthrough all listeners.","ret":""},{"name":"getOutgoingChannels","params":[],"desc":"Gets a set containing all the outgoing plugin channels.","ret":"List of all registered outgoing plugin channels."},{"name":"getOutgoingChannels","params":[{"name":"plugin","type":"Plugin","desc":"Plugin to retrieve channels for."}],"desc":"Gets a set containing all the outgoing plugin channels that the\nspecified plugin is registered to.","ret":"List of all registered outgoing plugin channels that a plugin\n    is registered to."},{"name":"getIncomingChannels","params":[],"desc":"Gets a set containing all the incoming plugin channels.","ret":"List of all registered incoming plugin channels."},{"name":"getIncomingChannels","params":[{"name":"plugin","type":"Plugin","desc":"Plugin to retrieve channels for."}],"desc":"Gets a set containing all the incoming plugin channels that the\nspecified plugin is registered for.","ret":"List of all registered incoming plugin channels that the plugin\n    is registered for."},{"name":"getIncomingChannelRegistrations","params":[{"name":"plugin","type":"Plugin","desc":"Plugin to retrieve registrations for."}],"desc":"Gets a set containing all the incoming plugin channel registrations\nthat the specified plugin has.","ret":"List of all registrations that the plugin has."},{"name":"getIncomingChannelRegistrations","params":[{"name":"channel","type":"String","desc":"Channel to retrieve registrations for."}],"desc":"Gets a set containing all the incoming plugin channel registrations\nthat are on the requested channel.","ret":"List of all registrations that are on the channel."},{"name":"getIncomingChannelRegistrations","params":[{"name":"plugin","type":"Plugin","desc":"Plugin to retrieve registrations for."},{"name":"channel","type":"String","desc":"Channel to filter registrations by."}],"desc":"Gets a set containing all the incoming plugin channel registrations\nthat the specified plugin has on the requested channel.","ret":"List of all registrations that the plugin has."},{"name":"isRegistrationValid","params":[{"name":"registration","type":"PluginMessageListenerRegistration","desc":"Registration to check."}],"desc":"Checks if the specified plugin message listener registration is valid.\n<p>\nA registration is considered valid if it has not be unregistered and\nthat the plugin is still enabled.","ret":"True if the registration is valid, otherwise false."},{"name":"isIncomingChannelRegistered","params":[{"name":"plugin","type":"Plugin","desc":"Plugin to check registration for."},{"name":"channel","type":"String","desc":"Channel to test for."}],"desc":"Checks if the specified plugin has registered to receive incoming\nmessages through the requested channel.","ret":"True if the channel is registered, else false."},{"name":"isOutgoingChannelRegistered","params":[{"name":"plugin","type":"Plugin","desc":"Plugin to check registration for."},{"name":"channel","type":"String","desc":"Channel to test for."}],"desc":"Checks if the specified plugin has registered to send outgoing messages\nthrough the requested channel.","ret":"True if the channel is registered, else false."},{"name":"dispatchIncomingMessage","params":[{"name":"source","type":"Player","desc":"Source of the message."},{"name":"channel","type":"String","desc":"Channel that the message was sent by."},{"name":"message","type":"byte[]","desc":"Raw payload of the message."}],"desc":"Dispatches the specified incoming message to any registered listeners.","ret":""}],"desc":"A class responsible for managing the registrations of plugin channels and\ntheir listeners.\n\nChannel names must contain a colon separator and consist of only [a-z0-9/._-]\n- i.e. they MUST be valid {@link NamespacedKey}. The \"BungeeCord\" channel is\nan exception and may only take this form."},{"FQCN":"org.bukkit.plugin.messaging.MessageTooLargeException","methods":[],"desc":"Thrown if a Plugin Message is sent that is too large to be sent."},{"FQCN":"org.bukkit.plugin.messaging.PluginChannelDirection","methods":[],"desc":"Represents the different directions a plugin channel may go."},{"FQCN":"org.bukkit.plugin.messaging.PluginMessageRecipient","methods":[{"name":"sendPluginMessage","params":[{"name":"source","type":"Plugin","desc":"The plugin that sent this message."},{"name":"channel","type":"String","desc":"The channel to send this message on."},{"name":"message","type":"byte[]","desc":"The raw message to send."}],"desc":"Sends this recipient a Plugin Message on the specified outgoing\nchannel.\n<p>\nThe message may not be larger than {@link Messenger#MAX_MESSAGE_SIZE}\nbytes, and the plugin must be registered to send messages on the\nspecified channel.","ret":""},{"name":"getListeningPluginChannels","params":[],"desc":"Gets a set containing all the Plugin Channels that this client is\nlistening on.","ret":"Set containing all the channels that this client may accept."}],"desc":"Represents a possible recipient for a Plugin Message."},{"FQCN":"org.bukkit.plugin.messaging.PluginMessageListener","methods":[{"name":"onPluginMessageReceived","params":[{"name":"channel","type":"String","desc":"Channel that the message was sent through."},{"name":"player","type":"Player","desc":"Source of the message."},{"name":"message","type":"byte[]","desc":"The raw message that was sent."}],"desc":"A method that will be thrown when a PluginMessageSource sends a plugin\nmessage on a registered channel.","ret":""}],"desc":"A listener for a specific Plugin Channel, which will receive notifications\nof messages sent from a client."},{"FQCN":"org.bukkit.plugin.messaging.ChannelNotRegisteredException","methods":[],"desc":"Thrown if a Plugin attempts to send a message on an unregistered channel."},{"FQCN":"org.bukkit.plugin.messaging.ReservedChannelException","methods":[],"desc":"Thrown if a plugin attempts to register for a reserved channel (such as\n\"REGISTER\")"},{"FQCN":"org.bukkit.plugin.UnknownDependencyException","methods":[],"desc":"Thrown when attempting to load an invalid Plugin file"},{"FQCN":"org.bukkit.GameRule","methods":[{"name":"getName","params":[],"desc":"Get the name of this GameRule.","ret":"the name of this GameRule"},{"name":"getType","params":[],"desc":"Get the type of this rule.","ret":"the rule type; Integer or Boolean"},{"name":"getByName","params":[{"name":"rule","type":"String","desc":"the name of the GameRule"}],"desc":"Get a {@link GameRule} by its name.","ret":"the {@link GameRule} or null if no GameRule matches the given\nname"},{"name":"values","params":[],"desc":"Get an immutable collection of {@link GameRule}s.","ret":"an immutable collection containing all registered GameRules."}],"desc":"GameRules dictate certain behavior within Minecraft itself\n<br>\nFor more information please visit the\n<a href=\"https://minecraft.wiki/w/Commands/gamerule\">Minecraft\nWiki</a>"},{"FQCN":"org.bukkit.Statistic","methods":[{"name":"getType","params":[],"desc":"Gets the type of this statistic.","ret":"the type of this statistic"},{"name":"isSubstatistic","params":[],"desc":"Checks if this is a substatistic.\n<p>\nA substatistic exists en masse for each block, item, or entitytype, depending on\n{@link #getType()}.\n<p>\nThis is a redundant method and equivalent to checking\n<code>getType() != Type.UNTYPED</code>","ret":"true if this is a substatistic"},{"name":"isBlock","params":[],"desc":"Checks if this is a substatistic dealing with blocks.\n<p>\nThis is a redundant method and equivalent to checking\n<code>getType() == Type.BLOCK</code>","ret":"true if this deals with blocks"}],"desc":"Represents a countable statistic, which is tracked by the server."},{"FQCN":"org.bukkit.DyeColor","methods":[{"name":"getWoolData","params":[],"desc":"Gets the associated wool data value representing this color.","ret":"A byte containing the wool data value of this color"},{"name":"getDyeData","params":[],"desc":"Gets the associated dye data value representing this color.","ret":"A byte containing the dye data value of this color"},{"name":"getColor","params":[],"desc":"Gets the color that this dye represents.","ret":"The {@link Color} that this dye represents"},{"name":"getFireworkColor","params":[],"desc":"Gets the firework color that this dye represents.","ret":"The {@link Color} that this dye represents"},{"name":"getByWoolData","params":[{"name":"data","type":"byte","desc":"Wool data value to fetch"}],"desc":"Gets the DyeColor with the given wool data value.","ret":"The {@link DyeColor} representing the given value, or null if\n    it doesn't exist"},{"name":"getByDyeData","params":[{"name":"data","type":"byte","desc":"Dye data value to fetch"}],"desc":"Gets the DyeColor with the given dye data value.","ret":"The {@link DyeColor} representing the given value, or null if\n    it doesn't exist"},{"name":"getByColor","params":[{"name":"color","type":"Color","desc":"Color value to get the dye by"}],"desc":"Gets the DyeColor with the given color value.","ret":"The {@link DyeColor} representing the given value, or null if\n    it doesn't exist"},{"name":"getByFireworkColor","params":[{"name":"color","type":"Color","desc":"Color value to get dye by"}],"desc":"Gets the DyeColor with the given firework color value.","ret":"The {@link DyeColor} representing the given value, or null if\n    it doesn't exist"},{"name":"legacyValueOf","params":[{"name":"name","type":"String","desc":"dye name"}],"desc":"Gets the DyeColor for the given name, possibly doing legacy transformations.","ret":"dye color"}],"desc":"All supported color values for dyes and cloth"},{"FQCN":"org.bukkit.scheduler.BukkitRunnable","methods":[{"name":"isCancelled","params":[],"desc":"Returns true if this task has been cancelled.","ret":"true if the task has been cancelled"},{"name":"cancel","params":[],"desc":"Attempts to cancel this task.","ret":""},{"name":"runTask","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"}],"desc":"Schedules this in the Bukkit scheduler to run on next tick.","ret":"a BukkitTask that contains the id number"},{"name":"runTaskAsynchronously","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"}],"desc":"<b>Asynchronous tasks should never access any API in Bukkit. Great care\nshould be taken to assure the thread-safety of asynchronous tasks.</b>\n<p>\nSchedules this in the Bukkit scheduler to run asynchronously.","ret":"a BukkitTask that contains the id number"},{"name":"runTaskLater","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"delay","type":"long","desc":"the ticks to wait before running the task"}],"desc":"Schedules this to run after the specified number of server ticks.","ret":"a BukkitTask that contains the id number"},{"name":"runTaskLaterAsynchronously","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"delay","type":"long","desc":"the ticks to wait before running the task"}],"desc":"<b>Asynchronous tasks should never access any API in Bukkit. Great care\nshould be taken to assure the thread-safety of asynchronous tasks.</b>\n<p>\nSchedules this to run asynchronously after the specified number of\nserver ticks.","ret":"a BukkitTask that contains the id number"},{"name":"runTaskTimer","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"delay","type":"long","desc":"the ticks to wait before running the task"},{"name":"period","type":"long","desc":"the ticks to wait between runs"}],"desc":"Schedules this to repeatedly run until cancelled, starting after the\nspecified number of server ticks.","ret":"a BukkitTask that contains the id number"},{"name":"runTaskTimerAsynchronously","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"delay","type":"long","desc":"the ticks to wait before running the task for the first\n    time"},{"name":"period","type":"long","desc":"the ticks to wait between runs"}],"desc":"<b>Asynchronous tasks should never access any API in Bukkit. Great care\nshould be taken to assure the thread-safety of asynchronous tasks.</b>\n<p>\nSchedules this to repeatedly run asynchronously until cancelled,\nstarting after the specified number of server ticks.","ret":"a BukkitTask that contains the id number"},{"name":"getTaskId","params":[],"desc":"Gets the task id for this runnable.","ret":"the task id that this runnable was scheduled as"}],"desc":"This class is provided as an easy way to handle scheduling tasks."},{"FQCN":"org.bukkit.scheduler.BukkitWorker","methods":[{"name":"getTaskId","params":[],"desc":"Returns the taskId for the task being executed by this worker.","ret":"Task id number"},{"name":"getOwner","params":[],"desc":"Returns the Plugin that owns this task.","ret":"The Plugin that owns the task"},{"name":"getThread","params":[],"desc":"Returns the thread for the worker.","ret":"The Thread object for the worker"}],"desc":"Represents a worker thread for the scheduler. This gives information about\nthe Thread object for the task, owner of the task and the taskId.\n<p>\nWorkers are used to execute async tasks."},{"FQCN":"org.bukkit.scheduler.BukkitScheduler","methods":[{"name":"scheduleSyncDelayedTask","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that owns the task"},{"name":"task","type":"Runnable","desc":"Task to be executed"},{"name":"delay","type":"long","desc":"Delay in server ticks before executing task"}],"desc":"Schedules a once off task to occur after a delay.\n<p>\nThis task will be executed by the main server thread.","ret":"Task id number (-1 if scheduling failed)"},{"name":"scheduleSyncDelayedTask","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that owns the task"},{"name":"task","type":"BukkitRunnable","desc":"Task to be executed"},{"name":"delay","type":"long","desc":"Delay in server ticks before executing task"}],"desc":"","ret":"Task id number (-1 if scheduling failed)"},{"name":"scheduleSyncDelayedTask","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that owns the task"},{"name":"task","type":"Runnable","desc":"Task to be executed"}],"desc":"Schedules a once off task to occur as soon as possible.\n<p>\nThis task will be executed by the main server thread.","ret":"Task id number (-1 if scheduling failed)"},{"name":"scheduleSyncDelayedTask","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that owns the task"},{"name":"task","type":"BukkitRunnable","desc":"Task to be executed"}],"desc":"","ret":"Task id number (-1 if scheduling failed)"},{"name":"scheduleSyncRepeatingTask","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that owns the task"},{"name":"task","type":"Runnable","desc":"Task to be executed"},{"name":"delay","type":"long","desc":"Delay in server ticks before executing first repeat"},{"name":"period","type":"long","desc":"Period in server ticks of the task"}],"desc":"Schedules a repeating task.\n<p>\nThis task will be executed by the main server thread.","ret":"Task id number (-1 if scheduling failed)"},{"name":"scheduleSyncRepeatingTask","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that owns the task"},{"name":"task","type":"BukkitRunnable","desc":"Task to be executed"},{"name":"delay","type":"long","desc":"Delay in server ticks before executing first repeat"},{"name":"period","type":"long","desc":"Period in server ticks of the task"}],"desc":"","ret":"Task id number (-1 if scheduling failed)"},{"name":"scheduleAsyncDelayedTask","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that owns the task"},{"name":"task","type":"Runnable","desc":"Task to be executed"},{"name":"delay","type":"long","desc":"Delay in server ticks before executing task"}],"desc":"<b>Asynchronous tasks should never access any API in Bukkit.</b> <b>Great care\nshould be taken to assure the thread-safety of asynchronous tasks.</b>\n<p>\nSchedules a once off task to occur after a delay. This task will be\nexecuted by a thread managed by the scheduler.","ret":"Task id number (-1 if scheduling failed)"},{"name":"scheduleAsyncDelayedTask","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that owns the task"},{"name":"task","type":"Runnable","desc":"Task to be executed"}],"desc":"<b>Asynchronous tasks should never access any API in Bukkit.</b> <b>Great care\nshould be taken to assure the thread-safety of asynchronous tasks.</b>\n<p>\nSchedules a once off task to occur as soon as possible. This task will\nbe executed by a thread managed by the scheduler.","ret":"Task id number (-1 if scheduling failed)"},{"name":"scheduleAsyncRepeatingTask","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that owns the task"},{"name":"task","type":"Runnable","desc":"Task to be executed"},{"name":"delay","type":"long","desc":"Delay in server ticks before executing first repeat"},{"name":"period","type":"long","desc":"Period in server ticks of the task"}],"desc":"<b>Asynchronous tasks should never access any API in Bukkit.</b> <b>Great care\nshould be taken to assure the thread-safety of asynchronous tasks.</b>\n<p>\nSchedules a repeating task. This task will be executed by a thread\nmanaged by the scheduler.","ret":"Task id number (-1 if scheduling failed)"},{"name":"callSyncMethod","params":[{"name":"plugin","type":"Plugin","desc":"Plugin that owns the task"},{"name":"task","type":"Callable<T>","desc":"Task to be executed"}],"desc":"Calls a method on the main thread and returns a Future object. This\ntask will be executed by the main server thread.\n<ul>\n<li>Note: The Future.get() methods must NOT be called from the main\n    thread.\n<li>Note2: There is at least an average of 10ms latency until the\n    isDone() method returns true.\n</ul>","ret":"Future Future object related to the task"},{"name":"cancelTask","params":[{"name":"taskId","type":"int","desc":"Id number of task to be removed"}],"desc":"Removes task from scheduler.","ret":""},{"name":"cancelTasks","params":[{"name":"plugin","type":"Plugin","desc":"Owner of tasks to be removed"}],"desc":"Removes all tasks associated with a particular plugin from the\nscheduler.","ret":""},{"name":"isCurrentlyRunning","params":[{"name":"taskId","type":"int","desc":"The task to check.\n<p>"}],"desc":"Check if the task currently running.\n<p>\nA repeating task might not be running currently, but will be running in\nthe future. A task that has finished, and does not repeat, will not be\nrunning ever again.\n<p>\nExplicitly, a task is running if there exists a thread for it, and that\nthread is alive.","ret":"If the task is currently running."},{"name":"isQueued","params":[{"name":"taskId","type":"int","desc":"The task to check.\n<p>"}],"desc":"Check if the task queued to be run later.\n<p>\nIf a repeating task is currently running, it might not be queued now\nbut could be in the future. A task that is not queued, and not running,\nwill not be queued again.","ret":"If the task is queued to be run."},{"name":"getActiveWorkers","params":[],"desc":"Returns a list of all active workers.\n<p>\nThis list contains asynch tasks that are being executed by separate\nthreads.","ret":"Active workers"},{"name":"getPendingTasks","params":[],"desc":"Returns a list of all pending tasks. The ordering of the tasks is not\nrelated to their order of execution.","ret":"Active workers"},{"name":"runTask","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"task","type":"Runnable","desc":"the task to be run"}],"desc":"Returns a task that will run on the next server tick.","ret":"a BukkitTask that contains the id number"},{"name":"runTask","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"task","type":"Consumer<? super BukkitTask>","desc":"the task to be run"}],"desc":"Returns a task that will run on the next server tick.","ret":""},{"name":"runTask","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"task","type":"BukkitRunnable","desc":"the task to be run"}],"desc":"","ret":"a BukkitTask that contains the id number"},{"name":"runTaskAsynchronously","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"task","type":"Runnable","desc":"the task to be run"}],"desc":"<b>Asynchronous tasks should never access any API in Bukkit.</b> <b>Great care\nshould be taken to assure the thread-safety of asynchronous tasks.</b>\n<p>\nReturns a task that will run asynchronously.","ret":"a BukkitTask that contains the id number"},{"name":"runTaskAsynchronously","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"task","type":"Consumer<? super BukkitTask>","desc":"the task to be run"}],"desc":"<b>Asynchronous tasks should never access any API in Bukkit.</b> <b>Great care\nshould be taken to assure the thread-safety of asynchronous tasks.</b>\n<p>\nReturns a task that will run asynchronously.","ret":""},{"name":"runTaskAsynchronously","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"task","type":"BukkitRunnable","desc":"the task to be run"}],"desc":"","ret":"a BukkitTask that contains the id number"},{"name":"runTaskLater","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"task","type":"Runnable","desc":"the task to be run"},{"name":"delay","type":"long","desc":"the ticks to wait before running the task"}],"desc":"Returns a task that will run after the specified number of server\nticks.","ret":"a BukkitTask that contains the id number"},{"name":"runTaskLater","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"task","type":"Consumer<? super BukkitTask>","desc":"the task to be run"},{"name":"delay","type":"long","desc":"the ticks to wait before running the task"}],"desc":"Returns a task that will run after the specified number of server\nticks.","ret":""},{"name":"runTaskLater","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"task","type":"BukkitRunnable","desc":"the task to be run"},{"name":"delay","type":"long","desc":"the ticks to wait before running the task"}],"desc":"","ret":"a BukkitTask that contains the id number"},{"name":"runTaskLaterAsynchronously","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"task","type":"Runnable","desc":"the task to be run"},{"name":"delay","type":"long","desc":"the ticks to wait before running the task"}],"desc":"<b>Asynchronous tasks should never access any API in Bukkit.</b> <b>Great care\nshould be taken to assure the thread-safety of asynchronous tasks.</b>\n<p>\nReturns a task that will run asynchronously after the specified number\nof server ticks.","ret":"a BukkitTask that contains the id number"},{"name":"runTaskLaterAsynchronously","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"task","type":"Consumer<? super BukkitTask>","desc":"the task to be run"},{"name":"delay","type":"long","desc":"the ticks to wait before running the task"}],"desc":"<b>Asynchronous tasks should never access any API in Bukkit.</b> <b>Great care\nshould be taken to assure the thread-safety of asynchronous tasks.</b>\n<p>\nReturns a task that will run asynchronously after the specified number\nof server ticks.","ret":""},{"name":"runTaskLaterAsynchronously","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"task","type":"BukkitRunnable","desc":"the task to be run"},{"name":"delay","type":"long","desc":"the ticks to wait before running the task"}],"desc":"","ret":"a BukkitTask that contains the id number"},{"name":"runTaskTimer","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"task","type":"Runnable","desc":"the task to be run"},{"name":"delay","type":"long","desc":"the ticks to wait before running the task"},{"name":"period","type":"long","desc":"the ticks to wait between runs"}],"desc":"Returns a task that will repeatedly run until cancelled, starting after\nthe specified number of server ticks.","ret":"a BukkitTask that contains the id number"},{"name":"runTaskTimer","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"task","type":"Consumer<? super BukkitTask>","desc":"the task to be run"},{"name":"delay","type":"long","desc":"the ticks to wait before running the task"},{"name":"period","type":"long","desc":"the ticks to wait between runs"}],"desc":"Returns a task that will repeatedly run until cancelled, starting after\nthe specified number of server ticks.","ret":""},{"name":"runTaskTimer","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"task","type":"BukkitRunnable","desc":"the task to be run"},{"name":"delay","type":"long","desc":"the ticks to wait before running the task"},{"name":"period","type":"long","desc":"the ticks to wait between runs"}],"desc":"","ret":"a BukkitTask that contains the id number"},{"name":"runTaskTimerAsynchronously","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"task","type":"Runnable","desc":"the task to be run"},{"name":"delay","type":"long","desc":"the ticks to wait before running the task for the first\n    time"},{"name":"period","type":"long","desc":"the ticks to wait between runs"}],"desc":"<b>Asynchronous tasks should never access any API in Bukkit.</b> <b>Great care\nshould be taken to assure the thread-safety of asynchronous tasks.</b>\n<p>\nReturns a task that will repeatedly run asynchronously until cancelled,\nstarting after the specified number of server ticks.","ret":"a BukkitTask that contains the id number"},{"name":"runTaskTimerAsynchronously","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"task","type":"Consumer<? super BukkitTask>","desc":"the task to be run"},{"name":"delay","type":"long","desc":"the ticks to wait before running the task for the first\n    time"},{"name":"period","type":"long","desc":"the ticks to wait between runs"}],"desc":"<b>Asynchronous tasks should never access any API in Bukkit.</b> <b>Great care\nshould be taken to assure the thread-safety of asynchronous tasks.</b>\n<p>\nReturns a task that will repeatedly run asynchronously until cancelled,\nstarting after the specified number of server ticks.","ret":""},{"name":"runTaskTimerAsynchronously","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling task"},{"name":"task","type":"BukkitRunnable","desc":"the task to be run"},{"name":"delay","type":"long","desc":"the ticks to wait before running the task for the first\n    time"},{"name":"period","type":"long","desc":"the ticks to wait between runs"}],"desc":"","ret":"a BukkitTask that contains the id number"},{"name":"getMainThreadExecutor","params":[{"name":"plugin","type":"Plugin","desc":"the reference to the plugin scheduling tasks"}],"desc":"Returns an executor that will run tasks on the next server tick.","ret":"an executor associated with the given plugin"}],"desc":""},{"FQCN":"org.bukkit.scheduler.BukkitTask","methods":[{"name":"getTaskId","params":[],"desc":"Returns the taskId for the task.","ret":"Task id number"},{"name":"getOwner","params":[],"desc":"Returns the Plugin that owns this task.","ret":"The Plugin that owns the task"},{"name":"isSync","params":[],"desc":"Returns true if the Task is a sync task.","ret":"true if the task is run by main thread"},{"name":"isCancelled","params":[],"desc":"Returns true if this task has been cancelled.","ret":"true if the task has been cancelled"},{"name":"cancel","params":[],"desc":"Will attempt to cancel this task.","ret":""}],"desc":"Represents a task being executed by the scheduler"},{"FQCN":"org.bukkit.CropState","methods":[{"name":"getData","params":[],"desc":"Gets the associated data value representing this growth state","ret":"A byte containing the data value of this growth state"},{"name":"getByData","params":[{"name":"data","type":"byte","desc":"Data value to fetch"}],"desc":"Gets the CropState with the given data value","ret":"The {@link CropState} representing the given value, or null if\n    it doesn't exist"}],"desc":"Represents the different growth states of crops"},{"FQCN":"org.bukkit.boss.BarStyle","methods":[],"desc":""},{"FQCN":"org.bukkit.boss.DragonBattle","methods":[{"name":"getEnderDragon","params":[],"desc":"Get the {@link EnderDragon} active in this battle.\n<br>\nWill return null if the dragon has been slain.","ret":"the ender dragon. null if dead"},{"name":"getBossBar","params":[],"desc":"Get the boss bar to be displayed for this dragon battle.","ret":"the boss bar"},{"name":"getEndPortalLocation","params":[],"desc":"Get the location of the end portal.\n<br>\nThis location will be at the center of the base (bottom) of the portal.","ret":"the end portal location or null if not generated"},{"name":"generateEndPortal","params":[{"name":"withPortals","type":"boolean","desc":"whether end portal blocks should be generated"}],"desc":"Generate the end portal.","ret":"true if generated, false if already present"},{"name":"hasBeenPreviouslyKilled","params":[],"desc":"Check whether the first dragon has been killed already.","ret":"true if killed before, false otherwise"},{"name":"setPreviouslyKilled","params":[{"name":"previouslyKilled","type":"boolean","desc":"true if the dragon has been killed before, false\notherwise"}],"desc":"Sets whether the first dragon has been killed already.\n<br>\nIf the dragon has not previously been killed, a portal will be generated\nwhen it is finally killed.","ret":""},{"name":"initiateRespawn","params":[],"desc":"Try to initiate a respawn sequence to summon the dragon as though a player has\nplaced 4 end crystals on the portal.","ret":""},{"name":"initiateRespawn","params":[{"name":"enderCrystals","type":"Collection<EnderCrystal>","desc":"the {@link EnderCrystal EnderCrystals} to use in the\nrespawn, or a null or empty list to render the respawn sequence\nuncancellable. null entries or crystals that do not reside in the same\nworld as this dragon battle will be ignored."}],"desc":"Try to initiate a respawn sequence to summon the dragon.","ret":"true if the respawn was initiated, false otherwise."},{"name":"getRespawnPhase","params":[],"desc":"Get this battle's current respawn phase.","ret":"the current respawn phase."},{"name":"setRespawnPhase","params":[{"name":"phase","type":"RespawnPhase","desc":"the phase to set"}],"desc":"Set the dragon's respawn phase.\n<br>\nThis method will is unsuccessful if a dragon respawn is not in progress.","ret":"true if successful, false otherwise"},{"name":"resetCrystals","params":[],"desc":"Reset the crystals located on the obsidian pillars (remove their beam\ntargets and invulnerability).","ret":""},{"name":"getGatewayCount","params":[],"desc":"Gets the number of gateways tracked by this DragonBattle.\nThis starts out at 0 and will increase to 20, once for each\nkill of the {@link EnderDragon}.","ret":"the number of gateways around the end island tracked by this"},{"name":"spawnNewGateway","params":[],"desc":"Tries to spawn a new end gateway using default game mechanics.","ret":"true if successful, false if there is already the maximum."},{"name":"spawnNewGateway","params":[{"name":"position","type":"io.papermc.paper.math.Position","desc":"position for the new gateway"}],"desc":"Spawns a new end gateway at the specified position. This will\nspawn regardless of the number of gateways already present.","ret":""},{"name":"getRespawnCrystals","params":[],"desc":"Gets the {@link org.bukkit.entity.EnderCrystal}s being used to respawn the dragon. If no respawn\nis ongoing, the list will be empty.","ret":"the respawn crystals"},{"name":"getHealingCrystals","params":[],"desc":"Gets the {@link org.bukkit.entity.EnderCrystal}s on top of the pillars that heal the dragon.","ret":"the healing crystals"}],"desc":"Represents a dragon battle state for a world with an end environment."},{"FQCN":"org.bukkit.boss.BossBar","methods":[{"name":"getTitle","params":[],"desc":"Returns the title of this boss bar","ret":"the title of the bar"},{"name":"setTitle","params":[{"name":"title","type":"String","desc":"the title of the bar"}],"desc":"Sets the title of this boss bar","ret":""},{"name":"getColor","params":[],"desc":"Returns the color of this boss bar","ret":"the color of the bar"},{"name":"setColor","params":[{"name":"color","type":"BarColor","desc":"the color of the bar"}],"desc":"Sets the color of this boss bar.","ret":""},{"name":"getStyle","params":[],"desc":"Returns the style of this boss bar","ret":"the style of the bar"},{"name":"setStyle","params":[{"name":"style","type":"BarStyle","desc":"the style of the bar"}],"desc":"Sets the bar style of this boss bar","ret":""},{"name":"removeFlag","params":[{"name":"flag","type":"BarFlag","desc":"the existing flag to remove"}],"desc":"Remove an existing flag on this boss bar","ret":""},{"name":"addFlag","params":[{"name":"flag","type":"BarFlag","desc":"an optional flag to set on the boss bar"}],"desc":"Add an optional flag to this boss bar","ret":""},{"name":"hasFlag","params":[{"name":"flag","type":"BarFlag","desc":"the flag to check"}],"desc":"Returns whether this boss bar as the passed flag set","ret":"whether it has the flag"},{"name":"setProgress","params":[{"name":"progress","type":"double","desc":"the progress of the bar"}],"desc":"Sets the progress of the bar. Values should be between 0.0 (empty) and\n1.0 (full)","ret":""},{"name":"getProgress","params":[],"desc":"Returns the progress of the bar between 0.0 and 1.0","ret":"the progress of the bar"},{"name":"addPlayer","params":[{"name":"player","type":"Player","desc":"the player to add"}],"desc":"Adds the player to this boss bar causing it to display on their screen.","ret":""},{"name":"removePlayer","params":[{"name":"player","type":"Player","desc":"the player to remove"}],"desc":"Removes the player from this boss bar causing it to be removed from their\nscreen.","ret":""},{"name":"removeAll","params":[],"desc":"Removes all players from this boss bar","ret":""},{"name":"getPlayers","params":[],"desc":"Returns all players viewing this boss bar","ret":"a immutable list of players"},{"name":"setVisible","params":[{"name":"visible","type":"boolean","desc":"visible status"}],"desc":"Set if the boss bar is displayed to attached players.","ret":""},{"name":"isVisible","params":[],"desc":"Return if the boss bar is displayed to attached players.","ret":"visible status"},{"name":"show","params":[],"desc":"Shows the previously hidden boss bar to all attached players","ret":""},{"name":"hide","params":[],"desc":"Hides this boss bar from all attached players","ret":""}],"desc":""},{"FQCN":"org.bukkit.boss.BarColor","methods":[],"desc":""},{"FQCN":"org.bukkit.boss.BarFlag","methods":[],"desc":""},{"FQCN":"org.bukkit.boss.KeyedBossBar","methods":[],"desc":"Represents a custom {@link BossBar} that has a\n{@link org.bukkit.NamespacedKey}"},{"FQCN":"org.bukkit.NamespacedKey","methods":[{"name":"randomKey","params":[],"desc":"Return a new random key in the {@link #BUKKIT} namespace.","ret":"new key"},{"name":"minecraft","params":[{"name":"key","type":"String","desc":"the key to use"}],"desc":"Get a key in the Minecraft namespace.","ret":"new key in the Minecraft namespace"},{"name":"fromString","params":[{"name":"string","type":"String","desc":"the string to convert to a NamespacedKey"},{"name":"defaultNamespace","type":"Plugin","desc":"the default namespace to use if none was\nsupplied. If null, the {@code minecraft} namespace\n({@link #minecraft(String)}) will be used"}],"desc":"Get a NamespacedKey from the supplied string with a default namespace if\na namespace is not defined. This is a utility method meant to fetch a\nNamespacedKey from user input. Please note that casing does matter and\nany instance of uppercase characters will be considered invalid. The\ninput contract is as follows:\n<pre>\nfromString(\"foo\", plugin) -{@literal >} \"plugin:foo\"\nfromString(\"foo:bar\", plugin) -{@literal >} \"foo:bar\"\nfromString(\":foo\", null) -{@literal >} \"minecraft:foo\"\nfromString(\"foo\", null) -{@literal >} \"minecraft:foo\"\nfromString(\"Foo\", plugin) -{@literal >} null\nfromString(\":Foo\", plugin) -{@literal >} null\nfromString(\"foo:bar:bazz\", plugin) -{@literal >} null\nfromString(\"\", plugin) -{@literal >} null\n</pre>","ret":"the created NamespacedKey. null if invalid key"},{"name":"fromString","params":[{"name":"key","type":"String","desc":"the key to convert to a NamespacedKey"}],"desc":"Get a NamespacedKey from the supplied string.\n\nThe default namespace will be Minecraft's (i.e.\n{@link #minecraft(String)}).","ret":"the created NamespacedKey. null if invalid"}],"desc":"Represents a String based key which consists of two components - a namespace\nand a key.\n\nNamespaces may only contain lowercase alphanumeric characters, periods,\nunderscores, and hyphens.\n<p>\nKeys may only contain lowercase alphanumeric characters, periods,\nunderscores, hyphens, and forward slashes."},{"FQCN":"org.bukkit.BanList","methods":[{"name":"getBanEntry","params":[{"name":"target","type":"String","desc":"entry parameter to search for"}],"desc":"Gets a {@link BanEntry} by target.\n<p>\nBans by name for ban type {@link Type#NAME NAME} are no longer supported and this method will return\nnull when trying to request them. The replacement is bans by UUID.","ret":"the corresponding entry, or null if none found"},{"name":"getBanEntry","params":[{"name":"target","type":"T","desc":"entry parameter to search for"}],"desc":"Gets a {@link BanEntry} by target.","ret":"the corresponding entry, or null if none found"},{"name":"addBan","params":[{"name":"target","type":"String","desc":"the target of the ban"},{"name":"reason","type":"String","desc":"reason for the ban, null indicates implementation default"},{"name":"expires","type":"Date","desc":"date for the ban's expiration (unban), or null to imply\n    forever"},{"name":"source","type":"String","desc":"source of the ban, null indicates implementation default"}],"desc":"Adds a ban to this list. If a previous ban exists, this will\nupdate the previous entry.\n<p>\nBans by name for ban type {@link Type#NAME NAME} are no longer supported and this method will return\nnull when trying to request them. The replacement is bans by UUID.","ret":"the entry for the newly created ban, or the entry for the\n    (updated) previous ban"},{"name":"addBan","params":[{"name":"target","type":"T","desc":"the target of the ban"},{"name":"reason","type":"String","desc":"reason for the ban, null indicates implementation default"},{"name":"expires","type":"Date","desc":"date for the ban's expiration (unban), or null to imply\n    forever"},{"name":"source","type":"String","desc":"source of the ban, null indicates implementation default"}],"desc":"Adds a ban to this list. If a previous ban exists, this will\nupdate the previous entry.","ret":"the entry for the newly created ban, or the entry for the\n    (updated) previous ban"},{"name":"addBan","params":[{"name":"target","type":"T","desc":"the target of the ban"},{"name":"reason","type":"String","desc":"reason for the ban, null indicates implementation default"},{"name":"expires","type":"Instant","desc":"instant for the ban's expiration (unban), or null to imply\n    forever"},{"name":"source","type":"String","desc":"source of the ban, null indicates implementation default"}],"desc":"Adds a ban to this list. If a previous ban exists, this will\nupdate the previous entry.","ret":"the entry for the newly created ban, or the entry for the\n    (updated) previous ban"},{"name":"addBan","params":[{"name":"target","type":"T","desc":"the target of the ban"},{"name":"reason","type":"String","desc":"reason for the ban, null indicates implementation default"},{"name":"duration","type":"Duration","desc":"the duration of the ban, or null to imply\n    forever"},{"name":"source","type":"String","desc":"source of the ban, null indicates implementation default"}],"desc":"Adds a ban to this list. If a previous ban exists, this will\nupdate the previous entry.","ret":"the entry for the newly created ban, or the entry for the\n    (updated) previous ban"},{"name":"getBanEntries","params":[],"desc":"Gets a set containing every {@link BanEntry} in this list.","ret":"an immutable set containing every entry tracked by this list"},{"name":"getEntries","params":[],"desc":"Gets a set containing every {@link BanEntry} in this list.","ret":"an immutable set containing every entry tracked by this list"},{"name":"isBanned","params":[{"name":"target","type":"T","desc":"the target to find"}],"desc":"Gets if a {@link BanEntry} exists for the target, indicating an active\nban status.\n<p>\nBans by name for ban type {@link Type#NAME NAME} are no longer supported.\nThe replacement is bans by UUID.","ret":"true if a {@link BanEntry} exists for the target, indicating an\n    active ban status, false otherwise"},{"name":"isBanned","params":[{"name":"target","type":"String","desc":"the target to find"}],"desc":"Gets if a {@link BanEntry} exists for the target, indicating an active\nban status.","ret":"true if a {@link BanEntry} exists for the target, indicating an\n    active ban status, false otherwise"},{"name":"pardon","params":[{"name":"target","type":"T","desc":"the target to remove from this list"}],"desc":"Removes the specified target from this list, therefore indicating a\n\"not banned\" status.\n<p>\nBans by name for ban type {@link Type#NAME NAME} are no longer supported.\nThe replacement is bans by UUID.","ret":""},{"name":"pardon","params":[{"name":"target","type":"String","desc":"the target to remove from this list"}],"desc":"Removes the specified target from this list, therefore indicating a\n\"not banned\" status.","ret":""}],"desc":"A ban list, containing bans of some {@link Type}."},{"FQCN":"org.bukkit.TreeType","methods":[],"desc":"Tree and organic structure types."},{"FQCN":"org.bukkit.permissions.PermissionDefault","methods":[{"name":"getValue","params":[{"name":"op","type":"boolean","desc":"If the target is op"}],"desc":"Calculates the value of this PermissionDefault for the given operator\nvalue","ret":"True if the default should be true, or false"},{"name":"getByName","params":[{"name":"name","type":"String","desc":"Name of the default"}],"desc":"Looks up a PermissionDefault by name","ret":"Specified value, or null if not found"}],"desc":"Represents the possible default values for permissions"},{"FQCN":"org.bukkit.permissions.PermissibleBase","methods":[],"desc":"Base Permissible for use in any Permissible object via proxy or extension"},{"FQCN":"org.bukkit.permissions.ServerOperator","methods":[{"name":"isOp","params":[],"desc":"Checks if this object is a server operator","ret":"true if this is an operator, otherwise false"},{"name":"setOp","params":[{"name":"value","type":"boolean","desc":"New operator value"}],"desc":"Sets the operator status of this object","ret":""}],"desc":"Represents an object that may become a server operator, such as a {@link\nPlayer}"},{"FQCN":"org.bukkit.permissions.Permissible","methods":[{"name":"isPermissionSet","params":[{"name":"name","type":"String","desc":"Name of the permission"}],"desc":"Checks if this object contains an override for the specified\npermission, by fully qualified name","ret":"true if the permission is set, otherwise false"},{"name":"isPermissionSet","params":[{"name":"perm","type":"Permission","desc":"Permission to check"}],"desc":"Checks if this object contains an override for the specified {@link\nPermission}","ret":"true if the permission is set, otherwise false"},{"name":"hasPermission","params":[{"name":"name","type":"String","desc":"Name of the permission"}],"desc":"Gets the value of the specified permission, if set.\n<p>\nIf a permission override is not set on this object, the default value\nof the permission will be returned.","ret":"Value of the permission"},{"name":"hasPermission","params":[{"name":"perm","type":"Permission","desc":"Permission to get"}],"desc":"Gets the value of the specified permission, if set.\n<p>\nIf a permission override is not set on this object, the default value\nof the permission will be returned","ret":"Value of the permission"},{"name":"addAttachment","params":[{"name":"plugin","type":"Plugin","desc":"Plugin responsible for this attachment, may not be null\n    or disabled"},{"name":"name","type":"String","desc":"Name of the permission to attach"},{"name":"value","type":"boolean","desc":"Value of the permission"}],"desc":"Adds a new {@link PermissionAttachment} with a single permission by\nname and value","ret":"The PermissionAttachment that was just created"},{"name":"addAttachment","params":[{"name":"plugin","type":"Plugin","desc":"Plugin responsible for this attachment, may not be null\n    or disabled"}],"desc":"Adds a new empty {@link PermissionAttachment} to this object","ret":"The PermissionAttachment that was just created"},{"name":"addAttachment","params":[{"name":"plugin","type":"Plugin","desc":"Plugin responsible for this attachment, may not be null\n    or disabled"},{"name":"name","type":"String","desc":"Name of the permission to attach"},{"name":"value","type":"boolean","desc":"Value of the permission"},{"name":"ticks","type":"int","desc":"Amount of ticks to automatically remove this attachment\n    after"}],"desc":"Temporarily adds a new {@link PermissionAttachment} with a single\npermission by name and value","ret":"The PermissionAttachment that was just created"},{"name":"addAttachment","params":[{"name":"plugin","type":"Plugin","desc":"Plugin responsible for this attachment, may not be null\n    or disabled"},{"name":"ticks","type":"int","desc":"Amount of ticks to automatically remove this attachment\n    after"}],"desc":"Temporarily adds a new empty {@link PermissionAttachment} to this\nobject","ret":"The PermissionAttachment that was just created"},{"name":"removeAttachment","params":[{"name":"attachment","type":"PermissionAttachment","desc":"Attachment to remove"}],"desc":"Removes the given {@link PermissionAttachment} from this object","ret":""},{"name":"recalculatePermissions","params":[],"desc":"Recalculates the permissions for this object, if the attachments have\nchanged values.\n<p>\nThis should very rarely need to be called from a plugin.","ret":""},{"name":"getEffectivePermissions","params":[],"desc":"Gets a set containing all of the permissions currently in effect by\nthis object","ret":"Set of currently effective permissions"},{"name":"permissionValue","params":[{"name":"permission","type":"Permission","desc":"the permission to check"}],"desc":"Checks if this object has a permission set and, if it is set, the value of the permission.","ret":"a tri-state of if the permission is set and, if it is set, it's value"},{"name":"permissionValue","params":[{"name":"permission","type":"String","desc":"the permission to check"}],"desc":"Checks if this object has a permission set and, if it is set, the value of the permission.","ret":"a tri-state of if the permission is set and, if it is set, it's value"}],"desc":"Represents an object that may be assigned permissions"},{"FQCN":"org.bukkit.permissions.Permission","methods":[{"name":"getName","params":[],"desc":"Returns the unique fully qualified name of this Permission","ret":"Fully qualified name"},{"name":"getChildren","params":[],"desc":"Gets the children of this permission.\n<p>\nIf you change this map in any form, you must call {@link\n#recalculatePermissibles()} to recalculate all {@link Permissible}s","ret":"Permission children"},{"name":"getDefault","params":[],"desc":"Gets the default value of this permission.","ret":"Default value of this permission."},{"name":"setDefault","params":[{"name":"value","type":"PermissionDefault","desc":"The new default to set"}],"desc":"Sets the default value of this permission.\n<p>\nThis will not be saved to disk, and is a temporary operation until the\nserver reloads permissions. Changing this default will cause all {@link\nPermissible}s that contain this permission to recalculate their\npermissions","ret":""},{"name":"getDescription","params":[],"desc":"Gets a brief description of this permission, may be empty","ret":"Brief description of this permission"},{"name":"setDescription","params":[{"name":"value","type":"String","desc":"The new description to set"}],"desc":"Sets the description of this permission.\n<p>\nThis will not be saved to disk, and is a temporary operation until the\nserver reloads permissions.","ret":""},{"name":"getPermissibles","params":[],"desc":"Gets a set containing every {@link Permissible} that has this\npermission.\n<p>\nThis set cannot be modified.","ret":"Set containing permissibles with this permission"},{"name":"recalculatePermissibles","params":[],"desc":"Recalculates all {@link Permissible}s that contain this permission.\n<p>\nThis should be called after modifying the children, and is\nautomatically called after modifying the default value","ret":""},{"name":"addParent","params":[{"name":"name","type":"String","desc":"Name of the parent permission"},{"name":"value","type":"boolean","desc":"The value to set this permission to"}],"desc":"Adds this permission to the specified parent permission.\n<p>\nIf the parent permission does not exist, it will be created and\nregistered.","ret":"Parent permission it created or loaded"},{"name":"addParent","params":[{"name":"perm","type":"Permission","desc":"Parent permission to register with"},{"name":"value","type":"boolean","desc":"The value to set this permission to"}],"desc":"Adds this permission to the specified parent permission.","ret":""},{"name":"loadPermissions","params":[{"name":"data","type":"Map<?,?>","desc":"Map of permissions"},{"name":"error","type":"String","desc":"An error message to show if a permission is invalid. May contain \"%s\" format tag, which will be replaced with the name of invalid permission."},{"name":"def","type":"PermissionDefault","desc":"Default permission value to use if missing"}],"desc":"Loads a list of Permissions from a map of data, usually used from\nretrieval from a yaml file.\n<p>\nThe data may contain a list of name:data, where the data contains the\nfollowing keys:\n<ul>\n<li>default: Boolean true or false. If not specified, false.\n<li>children: {@code Map<String, Boolean>} of child permissions. If not\n    specified, empty list.\n<li>description: Short string containing a very small description of\n    this description. If not specified, empty string.\n</ul>","ret":"Permission object"},{"name":"loadPermission","params":[{"name":"name","type":"String","desc":"Name of the permission"},{"name":"data","type":"Map<String,Object>","desc":"Map of keys"}],"desc":"Loads a Permission from a map of data, usually used from retrieval from\na yaml file.\n<p>\nThe data may contain the following keys:\n<ul>\n<li>default: Boolean true or false. If not specified, false.\n<li>children: {@code Map<String, Boolean>} of child permissions. If not\n    specified, empty list.\n<li>description: Short string containing a very small description of\n    this description. If not specified, empty string.\n</ul>","ret":"Permission object"},{"name":"loadPermission","params":[{"name":"name","type":"String","desc":"Name of the permission"},{"name":"data","type":"Map<?,?>","desc":"Map of keys"},{"name":"def","type":"PermissionDefault","desc":"Default permission value to use if not set"},{"name":"output","type":"List<Permission>","desc":"A list to append any created child-Permissions to, may be null"}],"desc":"Loads a Permission from a map of data, usually used from retrieval from\na yaml file.\n<p>\nThe data may contain the following keys:\n<ul>\n<li>default: Boolean true or false. If not specified, false.\n<li>children: {@code Map<String, Boolean>} of child permissions. If not\n    specified, empty list.\n<li>description: Short string containing a very small description of\n    this description. If not specified, empty string.\n</ul>","ret":"Permission object"}],"desc":"Represents a unique permission that may be attached to a {@link\nPermissible}"},{"FQCN":"org.bukkit.permissions.PermissionAttachment","methods":[{"name":"getPlugin","params":[],"desc":"Gets the plugin responsible for this attachment","ret":"Plugin responsible for this permission attachment"},{"name":"setRemovalCallback","params":[{"name":"ex","type":"PermissionRemovedExecutor","desc":"Object to be called when this is removed"}],"desc":"Sets an object to be called for when this attachment is removed from a\n{@link Permissible}. May be null.","ret":""},{"name":"getRemovalCallback","params":[],"desc":"Gets the class that was previously set to be called when this\nattachment was removed from a {@link Permissible}. May be null.","ret":"Object to be called when this is removed"},{"name":"getPermissible","params":[],"desc":"Gets the Permissible that this is attached to","ret":"Permissible containing this attachment"},{"name":"getPermissions","params":[],"desc":"Gets a copy of all set permissions and values contained within this\nattachment.\n<p>\nThis map may be modified but will not affect the attachment, as it is a\ncopy.","ret":"Copy of all permissions and values expressed by this attachment"},{"name":"setPermission","params":[{"name":"name","type":"String","desc":"Name of the permission"},{"name":"value","type":"boolean","desc":"New value of the permission"}],"desc":"Sets a permission to the given value, by its fully qualified name","ret":""},{"name":"setPermission","params":[{"name":"perm","type":"Permission","desc":"Permission to set"},{"name":"value","type":"boolean","desc":"New value of the permission"}],"desc":"Sets a permission to the given value","ret":""},{"name":"unsetPermission","params":[{"name":"name","type":"String","desc":"Name of the permission to remove"}],"desc":"Removes the specified permission from this attachment.\n<p>\nIf the permission does not exist in this attachment, nothing will\nhappen.","ret":""},{"name":"unsetPermission","params":[{"name":"perm","type":"Permission","desc":"Permission to remove"}],"desc":"Removes the specified permission from this attachment.\n<p>\nIf the permission does not exist in this attachment, nothing will\nhappen.","ret":""},{"name":"remove","params":[],"desc":"Removes this attachment from its registered {@link Permissible}","ret":"true if the permissible was removed successfully, false if it\n    did not exist"}],"desc":"Holds information about a permission attachment on a {@link Permissible}\nobject"},{"FQCN":"org.bukkit.permissions.PermissionRemovedExecutor","methods":[{"name":"attachmentRemoved","params":[{"name":"attachment","type":"PermissionAttachment","desc":"Attachment which was removed"}],"desc":"Called when a {@link PermissionAttachment} is removed from a {@link\nPermissible}","ret":""}],"desc":"Represents a class which is to be notified when a {@link\nPermissionAttachment} is removed from a {@link Permissible}"},{"FQCN":"org.bukkit.permissions.PermissionAttachmentInfo","methods":[{"name":"getPermissible","params":[],"desc":"Gets the permissible this is attached to","ret":"Permissible this permission is for"},{"name":"getPermission","params":[],"desc":"Gets the permission being set","ret":"Name of the permission"},{"name":"getAttachment","params":[],"desc":"Gets the attachment providing this permission. This may be null for\ndefault permissions (usually parent permissions).","ret":"Attachment"},{"name":"getValue","params":[],"desc":"Gets the value of this permission","ret":"Value of the permission"}],"desc":"Holds information on a permission and which {@link PermissionAttachment}\nprovides it"},{"FQCN":"org.bukkit.loot.LootTable","methods":[{"name":"populateLoot","params":[{"name":"random","type":"Random","desc":"the random instance to use to generate loot"},{"name":"context","type":"LootContext","desc":"context within to populate loot"}],"desc":"Returns a mutable list of loot generated by this LootTable.","ret":"a list of ItemStacks"},{"name":"fillInventory","params":[{"name":"inventory","type":"Inventory","desc":"the inventory to fill"},{"name":"random","type":"Random","desc":"the random instance to use to generate loot"},{"name":"context","type":"LootContext","desc":"context within to populate loot"}],"desc":"Attempt to fill an inventory with this LootTable's loot.","ret":""}],"desc":"LootTables are technical files that represent what items should be in\nnaturally generated containers, what items should be dropped when killing a\nmob, or what items can be fished.\n<br>\nSee the <a href=\"https://minecraft.wiki/w/Loot_table\">\nMinecraft Wiki</a> for more information."},{"FQCN":"org.bukkit.loot.LootContext","methods":[{"name":"getLocation","params":[],"desc":"The {@link Location} to store where the loot will be generated.","ret":"the Location of where the loot will be generated"},{"name":"getLuck","params":[],"desc":"Represents the {@link org.bukkit.potion.PotionEffectType#LUCK} that an\nentity can have. The higher the value the better chance of receiving more\nloot.","ret":"luck"},{"name":"getLootingModifier","params":[],"desc":"Represents the\n{@link org.bukkit.enchantments.Enchantment#LOOT_BONUS_MOBS} the\n{@link #getKiller()} entity has on their equipped item.\n\nThis value is only set via\n{@link LootContext.Builder#lootingModifier(int)}. If not set, the\n{@link #getKiller()} entity's looting level will be used instead.","ret":"the looting level"},{"name":"getLootedEntity","params":[],"desc":"Get the {@link Entity} that was killed. Can be null.","ret":"the looted entity or null"},{"name":"getKiller","params":[],"desc":"Get the {@link HumanEntity} who killed the {@link #getLootedEntity()}.\nCan be null.","ret":"the killer entity, or null."}],"desc":"Represents additional information a {@link LootTable} can use to modify it's\ngenerated loot."},{"FQCN":"org.bukkit.loot.Lootable","methods":[{"name":"setLootTable","params":[{"name":"table","type":"LootTable","desc":"the Loot Table this {@link org.bukkit.block.Container} or\n{@link org.bukkit.entity.Mob} will have."}],"desc":"Set the loot table for a container or entity.\n<br>\nTo remove a loot table use null. Do not use {@link LootTables#EMPTY} to\nclear a LootTable.","ret":""},{"name":"getLootTable","params":[],"desc":"Gets the Loot Table attached to this block or entity.\n<br>\n\nIf an block/entity does not have a loot table, this will return null, NOT\nan empty loot table.","ret":"the Loot Table attached to this block or entity."},{"name":"setLootTable","params":[{"name":"table","type":"LootTable","desc":"the Loot Table this {@link org.bukkit.block.Container} or {@link org.bukkit.entity.Mob} will have."},{"name":"seed","type":"long","desc":"the seed to used to generate loot. Default is 0."}],"desc":"Set the loot table and seed for a container or entity at the same time.","ret":""},{"name":"hasLootTable","params":[],"desc":"Returns whether or not this object has a Loot Table","ret":"Has a loot table"},{"name":"clearLootTable","params":[],"desc":"Clears the associated Loot Table to this object","ret":""},{"name":"setSeed","params":[{"name":"seed","type":"long","desc":"the seed to used to generate loot. Default is 0."}],"desc":"Set the seed used when this Loot Table generates loot.","ret":""},{"name":"getSeed","params":[],"desc":"Get the Loot Table's seed.\n<br>\nThe seed is used when generating loot.","ret":"the seed"}],"desc":"Represents a {@link org.bukkit.block.Container} or a\n{@link org.bukkit.entity.Mob} that can have a loot table.\n<br>\nContainer loot will only generate upon opening, and only when the container\nis <i>first</i> opened.\n<br>\nEntities will only generate loot upon death."},{"FQCN":"org.bukkit.loot.LootTables","methods":[{"name":"getLootTable","params":[],"desc":"Get the {@link LootTable} corresponding to this constant. This is\nequivalent to calling {@code Bukkit.getLootTable(this.getKey());}.","ret":"the associated LootTable"}],"desc":"This enum holds a list of all known {@link LootTable}s offered by Mojang.\nThis list is not guaranteed to be accurate in future versions.\n<br>\nSee the\n<a href=\"https://minecraft.wiki/w/Loot_table#List_of_loot_tables\">\nMinecraft Wiki</a> for more information on loot tables."},{"FQCN":"org.bukkit.FeatureFlag","methods":[],"desc":"This represents a Feature Flag for a World.\n<br>\nFlags which are unavailable in the current version will be null and/or\nremoved."},{"FQCN":"org.bukkit.Difficulty","methods":[{"name":"getValue","params":[],"desc":"Gets the difficulty value associated with this Difficulty.","ret":"An integer value of this difficulty"},{"name":"getByValue","params":[{"name":"value","type":"int","desc":"Value to check"}],"desc":"Gets the Difficulty represented by the specified value","ret":"Associative {@link Difficulty} with the given value, or null if\n    it doesn't exist"}],"desc":"Represents the various difficulty levels that are available."},{"FQCN":"org.bukkit.Nameable","methods":[{"name":"customName","params":[],"desc":"Gets the custom name.\n\n<p>This value has no effect on players, they will always use their real name.</p>","ret":"the custom name"},{"name":"customName","params":[{"name":"customName","type":"net.kyori.adventure.text.Component","desc":"the custom name to set"}],"desc":"Sets the custom name.\n\n<p>This name will be used in death messages and can be sent to the client as a nameplate over the mob.</p>\n\n<p>Setting the name to {@code null} will clear it.</p>\n\n<p>This value has no effect on players, they will always use their real name.</p>","ret":""},{"name":"getCustomName","params":[],"desc":"Gets the custom name on a mob or block. If there is no name this method\nwill return null.\n<p>\nThis value has no effect on players, they will always use their real\nname.","ret":"name of the mob/block or null"},{"name":"setCustomName","params":[{"name":"name","type":"String","desc":"the name to set"}],"desc":"Sets a custom name on a mob or block. This name will be used in death\nmessages and can be sent to the client as a nameplate over the mob.\n<p>\nSetting the name to null or an empty string will clear it.\n<p>\nThis value has no effect on players, they will always use their real\nname.","ret":""}],"desc":"Represents a block, entity, or other object that may receive a custom name."},{"FQCN":"org.bukkit.packs.ResourcePack","methods":[{"name":"getId","params":[],"desc":"Gets the id of the resource pack.","ret":"the id"},{"name":"getUrl","params":[],"desc":"Gets the url of the resource pack.","ret":"the url"},{"name":"getHash","params":[],"desc":"Gets the hash of the resource pack.","ret":"the hash"},{"name":"getPrompt","params":[],"desc":"Gets the prompt to show of the resource pack.","ret":"the prompt"},{"name":"isRequired","params":[],"desc":"Gets if the resource pack is required by the server.","ret":"True if is required"}],"desc":"Represents a resource pack."},{"FQCN":"org.bukkit.packs.DataPack","methods":[{"name":"getTitle","params":[],"desc":"Gets the title of the data pack.","ret":"the title"},{"name":"getDescription","params":[],"desc":"Gets the description of the data pack.","ret":"the description"},{"name":"getPackFormat","params":[],"desc":"Gets the pack format.\n<br>\nPack formats are non-standard and unrelated to the version of Minecraft. For\na list of known pack versions, see the\n<a href=\"https://minecraft.wiki/w/Data_pack#Pack_format\">Minecraft Wiki</a>.","ret":"the pack version"},{"name":"getMinSupportedPackFormat","params":[],"desc":"Gets the minimum supported pack format. If the data pack does not specify a\nminimum supported format, {@link #getPackFormat()} is returned.\n<br>\nPack formats are non-standard and unrelated to the version of Minecraft. For\na list of known pack versions, see the\n<a href=\"https://minecraft.wiki/w/Data_pack#Pack_format\">Minecraft Wiki</a>.","ret":"the min pack version supported"},{"name":"getMaxSupportedPackFormat","params":[],"desc":"Gets the maximum supported pack format. If the data pack does not specify a\nmaximum supported format, {@link #getPackFormat()} is returned.\n<br>\nPack formats are non-standard and unrelated to the version of Minecraft. For\na list of known pack versions, see the\n<a href=\"https://minecraft.wiki/w/Data_pack#Pack_format\">Minecraft Wiki</a>.","ret":"the max pack version supported"},{"name":"isEnabled","params":[],"desc":"Gets if the data pack is enabled on the server.","ret":"True if is enabled"},{"name":"isRequired","params":[],"desc":"Gets if the data pack is required on the server.","ret":"True if is required"},{"name":"getCompatibility","params":[],"desc":"Gets the compatibility of this data pack with the server.","ret":"an enum"},{"name":"getRequestedFeatures","params":[],"desc":"Gets a set of features requested by this data pack.","ret":"a set of features"},{"name":"getSource","params":[],"desc":"Gets the source of this data pack.","ret":"the source"}],"desc":"Represents a data pack."},{"FQCN":"org.bukkit.packs.DataPackManager","methods":[{"name":"getDataPacks","params":[],"desc":"Return all the available {@link DataPack}s on the server.","ret":"a Collection of {@link DataPack}"},{"name":"getDataPack","params":[{"name":"dataPackKey","type":"NamespacedKey","desc":"the key of the {@link DataPack}"}],"desc":"Gets a {@link DataPack} by its key.","ret":"the {@link DataPack} or null if it does not exist"},{"name":"getEnabledDataPacks","params":[{"name":"world","type":"World","desc":"the world to search"}],"desc":"Return all the enabled {@link DataPack} in the World.","ret":"a Collection of {@link DataPack}"},{"name":"getDisabledDataPacks","params":[{"name":"world","type":"World","desc":"the world to search"}],"desc":"Return all the disabled {@link DataPack} in the World.","ret":"a Collection of {@link DataPack}"},{"name":"isEnabledByFeature","params":[{"name":"material","type":"Material","desc":"Material to check (needs to be an {@link Material#isItem()} or {@link Material#isBlock()})"},{"name":"world","type":"World","desc":"World to check"}],"desc":"Gets if the Material is enabled for use by the features in World.","ret":"{@code True} if the Item/Block related to the material is enabled"},{"name":"isEnabledByFeature","params":[{"name":"entityType","type":"EntityType","desc":"EntityType to check"},{"name":"world","type":"World","desc":"World to check"}],"desc":"Gets if the EntityType is enabled for use by the Features in World.","ret":"{@code True} if the type of entity is enabled"}],"desc":"Manager of data packs."},{"FQCN":"org.bukkit.StructureType","methods":[{"name":"getName","params":[],"desc":"Get the name of this structure. This is case-sensitive when used in\ncommands.","ret":"the name of this structure"},{"name":"getMapIcon","params":[],"desc":"Get the {@link org.bukkit.map.MapCursor.Type} that this structure can use on maps. If\nthis is null, this structure will not appear on explorer maps.","ret":"the {@link org.bukkit.map.MapCursor.Type} or null."},{"name":"getStructureTypes","params":[],"desc":"Get all registered {@link StructureType}s.","ret":"an immutable copy of registered structure types."}],"desc":""},{"FQCN":"org.bukkit.Translatable","methods":[{"name":"getTranslationKey","params":[],"desc":"Get the translation key, suitable for use in a translation component.","ret":"the translation key"}],"desc":"Represents an object with a text representation that can be translated by the\nMinecraft client."},{"FQCN":"org.bukkit.Rotation","methods":[{"name":"rotateClockwise","params":[],"desc":"Rotate clockwise by 90 degrees.","ret":"the relative rotation"},{"name":"rotateCounterClockwise","params":[],"desc":"Rotate counter-clockwise by 90 degrees.","ret":"the relative rotation"}],"desc":"An enum to specify a rotation based orientation, like that on a clock.\n<p>\nIt represents how something is viewed, as opposed to cardinal directions."},{"FQCN":"org.bukkit.OfflinePlayer","methods":[{"name":"isOnline","params":[],"desc":"Checks if this player is currently online\n\nIt should be noted that this will return true if any instance of this player is\nonline! This instance may have disconnected. If you wish to check if this specific\ninstance of the player is still online, see {@link OfflinePlayer#isConnected()}.","ret":"true if they are online"},{"name":"isConnected","params":[],"desc":"Checks whether the connection to this player is still valid. This will return\ntrue as long as this specific instance of the player is still connected. This\nwill return false after this instance has disconnected, even if the same player\nhas reconnected since.","ret":"true if this player instance is connected"},{"name":"getName","params":[],"desc":"Returns the name of this player\n<p>\nNames are no longer unique past a single game session. For persistent storage\nit is recommended that you use {@link #getUniqueId()} instead.","ret":"Player name or null if we have not seen a name for this player yet"},{"name":"getUniqueId","params":[],"desc":"Returns the UUID of this player","ret":"Player UUID"},{"name":"getPlayerProfile","params":[],"desc":"Gets a copy of the player's profile.\n<p>\nIf the player is online, the returned profile will be complete.\nOtherwise, only the unique id is guaranteed to be present. You can use\n{@link PlayerProfile#update()} to complete the returned profile.","ret":"the player's profile"},{"name":"isBanned","params":[],"desc":"Checks if this player has had their profile banned.","ret":"true if banned, otherwise false"},{"name":"banPlayer","params":[{"name":"reason","type":"String","desc":"Reason for Ban"}],"desc":"Permanently Bans this player from the server","ret":"Ban Entry"},{"name":"banPlayer","params":[{"name":"reason","type":"String","desc":"Reason for Ban"},{"name":"source","type":"String","desc":"Source of the ban, or null for default"}],"desc":"Permanently Bans this player from the server","ret":"Ban Entry"},{"name":"banPlayer","params":[{"name":"reason","type":"String","desc":"Reason for Ban"},{"name":"expires","type":"java.util.Date","desc":"When to expire the ban"}],"desc":"Bans this player from the server","ret":"Ban Entry"},{"name":"banPlayer","params":[{"name":"reason","type":"String","desc":"Reason for Ban"},{"name":"expires","type":"java.util.Date","desc":"When to expire the ban"},{"name":"source","type":"String","desc":"Source of the ban or null for default"}],"desc":"Bans this player from the server","ret":"Ban Entry"},{"name":"banPlayer","params":[{"name":"reason","type":"String","desc":""},{"name":"expires","type":"java.util.Date","desc":""},{"name":"source","type":"String","desc":""},{"name":"kickIfOnline","type":"boolean","desc":""}],"desc":"","ret":""},{"name":"ban","params":[{"name":"reason","type":"String","desc":"reason for the ban, null indicates implementation default"},{"name":"expires","type":"Date","desc":"date for the ban's expiration (unban), or null to imply\n    forever"},{"name":"source","type":"String","desc":"source of the ban, null indicates implementation default"}],"desc":"Adds this user to the {@link ProfileBanList}. If a previous ban exists, this will\nupdate the entry.","ret":"the entry for the newly created ban, or the entry for the\n    (updated) previous ban"},{"name":"ban","params":[{"name":"reason","type":"String","desc":"reason for the ban, null indicates implementation default"},{"name":"expires","type":"Instant","desc":"instant for the ban's expiration (unban), or null to imply\n    forever"},{"name":"source","type":"String","desc":"source of the ban, null indicates implementation default"}],"desc":"Adds this user to the {@link ProfileBanList}. If a previous ban exists, this will\nupdate the entry.","ret":"the entry for the newly created ban, or the entry for the\n    (updated) previous ban"},{"name":"ban","params":[{"name":"reason","type":"String","desc":"reason for the ban, null indicates implementation default"},{"name":"duration","type":"Duration","desc":"how long the ban last, or null to imply\n    forever"},{"name":"source","type":"String","desc":"source of the ban, null indicates implementation default"}],"desc":"Adds this user to the {@link ProfileBanList}. If a previous ban exists, this will\nupdate the entry.","ret":"the entry for the newly created ban, or the entry for the\n    (updated) previous ban"},{"name":"isWhitelisted","params":[],"desc":"Checks if this player is whitelisted or not","ret":"true if whitelisted"},{"name":"setWhitelisted","params":[{"name":"value","type":"boolean","desc":"true if whitelisted"}],"desc":"Sets if this player is whitelisted or not","ret":""},{"name":"getPlayer","params":[],"desc":"Gets a {@link Player} object that this represents, if there is one\n<p>\nIf the player is online, this will return that player. Otherwise,\nit will return null.","ret":"Online player"},{"name":"getFirstPlayed","params":[],"desc":"Gets the first date and time that this player was witnessed on this\nserver.\n<p>\nIf the player has never played before, this will return 0. Otherwise,\nit will be the amount of milliseconds since midnight, January 1, 1970\nUTC.","ret":"Date of first log-in for this player, or 0"},{"name":"getLastPlayed","params":[],"desc":"Gets the last date and time that this player was witnessed on this\nserver.\n<p>\nIf the player has never played before, this will return 0. Otherwise,\nit will be the amount of milliseconds since midnight, January 1, 1970\nUTC.","ret":"Date of last log-in for this player, or 0"},{"name":"hasPlayedBefore","params":[],"desc":"Checks if this player has played on this server before.","ret":"True if the player has played before, otherwise false"},{"name":"getBedSpawnLocation","params":[],"desc":"Gets the Location where the player will spawn at their bed, null if\nthey have not slept in one or their current bed spawn is invalid.","ret":"Bed Spawn Location if bed exists, otherwise null."},{"name":"getLastLogin","params":[],"desc":"Gets the last date and time that this player logged into the server.\n<p>\nIf the player has never played before, this will return 0. Otherwise,\nit will be the amount of milliseconds since midnight, January 1, 1970\nUTC.","ret":"last login time"},{"name":"getLastSeen","params":[],"desc":"Gets the last date and time that this player was seen on the server.\n<p>\nIf the player has never played before, this will return 0. If the\nplayer is currently online, this will return the current time.\nOtherwise it will be the amount of milliseconds since midnight,\nJanuary 1, 1970 UTC.","ret":"last seen time"},{"name":"getRespawnLocation","params":[],"desc":"Gets the Location where the player will spawn at, null if they\ndon't have a valid respawn point.","ret":"respawn location if exists, otherwise null."},{"name":"incrementStatistic","params":[{"name":"statistic","type":"Statistic","desc":"Statistic to increment"}],"desc":"Increments the given statistic for this player.\n<p>\nThis is equivalent to the following code:\n<code>incrementStatistic(Statistic, 1)</code>","ret":""},{"name":"decrementStatistic","params":[{"name":"statistic","type":"Statistic","desc":"Statistic to decrement"}],"desc":"Decrements the given statistic for this player.\n<p>\nThis is equivalent to the following code:\n<code>decrementStatistic(Statistic, 1)</code>","ret":""},{"name":"incrementStatistic","params":[{"name":"statistic","type":"Statistic","desc":"Statistic to increment"},{"name":"amount","type":"int","desc":"Amount to increment this statistic by"}],"desc":"Increments the given statistic for this player.","ret":""},{"name":"decrementStatistic","params":[{"name":"statistic","type":"Statistic","desc":"Statistic to decrement"},{"name":"amount","type":"int","desc":"Amount to decrement this statistic by"}],"desc":"Decrements the given statistic for this player.","ret":""},{"name":"setStatistic","params":[{"name":"statistic","type":"Statistic","desc":"Statistic to set"},{"name":"newValue","type":"int","desc":"The value to set this statistic to"}],"desc":"Sets the given statistic for this player.","ret":""},{"name":"getStatistic","params":[{"name":"statistic","type":"Statistic","desc":"Statistic to check"}],"desc":"Gets the value of the given statistic for this player.","ret":"the value of the given statistic"},{"name":"incrementStatistic","params":[{"name":"statistic","type":"Statistic","desc":"Statistic to increment"},{"name":"material","type":"Material","desc":"Material to offset the statistic with"}],"desc":"Increments the given statistic for this player for the given material.\n<p>\nThis is equivalent to the following code:\n<code>incrementStatistic(Statistic, Material, 1)</code>","ret":""},{"name":"decrementStatistic","params":[{"name":"statistic","type":"Statistic","desc":"Statistic to decrement"},{"name":"material","type":"Material","desc":"Material to offset the statistic with"}],"desc":"Decrements the given statistic for this player for the given material.\n<p>\nThis is equivalent to the following code:\n<code>decrementStatistic(Statistic, Material, 1)</code>","ret":""},{"name":"getStatistic","params":[{"name":"statistic","type":"Statistic","desc":"Statistic to check"},{"name":"material","type":"Material","desc":"Material offset of the statistic"}],"desc":"Gets the value of the given statistic for this player.","ret":"the value of the given statistic"},{"name":"incrementStatistic","params":[{"name":"statistic","type":"Statistic","desc":"Statistic to increment"},{"name":"material","type":"Material","desc":"Material to offset the statistic with"},{"name":"amount","type":"int","desc":"Amount to increment this statistic by"}],"desc":"Increments the given statistic for this player for the given material.","ret":""},{"name":"decrementStatistic","params":[{"name":"statistic","type":"Statistic","desc":"Statistic to decrement"},{"name":"material","type":"Material","desc":"Material to offset the statistic with"},{"name":"amount","type":"int","desc":"Amount to decrement this statistic by"}],"desc":"Decrements the given statistic for this player for the given material.","ret":""},{"name":"setStatistic","params":[{"name":"statistic","type":"Statistic","desc":"Statistic to set"},{"name":"material","type":"Material","desc":"Material to offset the statistic with"},{"name":"newValue","type":"int","desc":"The value to set this statistic to"}],"desc":"Sets the given statistic for this player for the given material.","ret":""},{"name":"incrementStatistic","params":[{"name":"statistic","type":"Statistic","desc":"Statistic to increment"},{"name":"entityType","type":"EntityType","desc":"EntityType to offset the statistic with"}],"desc":"Increments the given statistic for this player for the given entity.\n<p>\nThis is equivalent to the following code:\n<code>incrementStatistic(Statistic, EntityType, 1)</code>","ret":""},{"name":"decrementStatistic","params":[{"name":"statistic","type":"Statistic","desc":"Statistic to decrement"},{"name":"entityType","type":"EntityType","desc":"EntityType to offset the statistic with"}],"desc":"Decrements the given statistic for this player for the given entity.\n<p>\nThis is equivalent to the following code:\n<code>decrementStatistic(Statistic, EntityType, 1)</code>","ret":""},{"name":"getStatistic","params":[{"name":"statistic","type":"Statistic","desc":"Statistic to check"},{"name":"entityType","type":"EntityType","desc":"EntityType offset of the statistic"}],"desc":"Gets the value of the given statistic for this player.","ret":"the value of the given statistic"},{"name":"incrementStatistic","params":[{"name":"statistic","type":"Statistic","desc":"Statistic to increment"},{"name":"entityType","type":"EntityType","desc":"EntityType to offset the statistic with"},{"name":"amount","type":"int","desc":"Amount to increment this statistic by"}],"desc":"Increments the given statistic for this player for the given entity.","ret":""},{"name":"decrementStatistic","params":[{"name":"statistic","type":"Statistic","desc":"Statistic to decrement"},{"name":"entityType","type":"EntityType","desc":"EntityType to offset the statistic with"},{"name":"amount","type":"int","desc":"Amount to decrement this statistic by"}],"desc":"Decrements the given statistic for this player for the given entity.","ret":""},{"name":"setStatistic","params":[{"name":"statistic","type":"Statistic","desc":"Statistic to set"},{"name":"entityType","type":"EntityType","desc":"EntityType to offset the statistic with"},{"name":"newValue","type":"int","desc":"The value to set this statistic to"}],"desc":"Sets the given statistic for this player for the given entity.","ret":""},{"name":"getLastDeathLocation","params":[],"desc":"Gets the player's last death location.","ret":"the last death location if it exists, otherwise null."},{"name":"getLocation","params":[],"desc":"Gets the player's current location.","ret":"the player's location, {@code null} if player hasn't ever played\nbefore."}],"desc":"Represents a reference to a player identity and the data belonging to a\nplayer that is stored on the disk and can, thus, be retrieved without the\nplayer needing to be online."},{"FQCN":"org.bukkit.generator.BlockPopulator","methods":[{"name":"populate","params":[{"name":"world","type":"World","desc":"The world to generate in"},{"name":"random","type":"Random","desc":"The random generator to use"},{"name":"source","type":"Chunk","desc":"The chunk to generate for"}],"desc":"Populates an area of blocks at or around the given chunk.\n<p>\nThe chunks on each side of the specified chunk must already exist; that\nis, there must be one north, east, south and west of the specified\nchunk. The \"corner\" chunks may not exist, in which scenario the\npopulator should record any changes required for those chunks and\nperform the changes when they are ready.","ret":""},{"name":"populate","params":[{"name":"worldInfo","type":"WorldInfo","desc":"The world info of the world to generate in"},{"name":"random","type":"Random","desc":"The random generator to use"},{"name":"chunkX","type":"int","desc":"The X-coordinate of the chunk"},{"name":"chunkZ","type":"int","desc":"The Z-coordinate of the chunk"},{"name":"limitedRegion","type":"LimitedRegion","desc":"The chunk region to populate"}],"desc":"Populates an area of blocks at or around the given chunk.\n<p>\nNotes:\n<p>\nThis method should <b>never</b> attempt to get the Chunk at the passed\ncoordinates, as doing so may cause an infinite loop\n<p>\nThis method should <b>never</b> modify a {@link LimitedRegion} at a later\npoint of time.\n<p>\nThis method <b>must</b> be completely thread safe and able to handle\nmultiple concurrent callers.\n<p>\nNo physics are applied, whether or not it is set to true in\n{@link org.bukkit.block.BlockState#update(boolean, boolean)}\n<p>\n<b>Only</b> use the {@link org.bukkit.block.BlockState} returned by\n{@link LimitedRegion},\n<b>never</b> use methods from a {@link World} to modify the chunk.","ret":""}],"desc":"A block populator is responsible for generating a small area of blocks.\n<p>\nFor example, generating glowstone inside the nether or generating dungeons\nfull of treasure\n<p>\nA BlockPopulator can be used in combination with a custom {@link ChunkGenerator}\nby returning it in the method {@link ChunkGenerator#getDefaultPopulators(World)}\nor by adding it manually to the worlds populator list returned by {@link World#getPopulators()}.\n<p>\nWhen adding a BlockPopulator manually to a world it is recommended to do so during\nthe {@link WorldInitEvent}."},{"FQCN":"org.bukkit.generator.ChunkGenerator","methods":[{"name":"generateNoise","params":[{"name":"worldInfo","type":"WorldInfo","desc":"The world info of the world this chunk will be used for"},{"name":"random","type":"Random","desc":"The random generator to use"},{"name":"chunkX","type":"int","desc":"The X-coordinate of the chunk"},{"name":"chunkZ","type":"int","desc":"The Z-coordinate of the chunk"},{"name":"chunkData","type":"ChunkData","desc":"To modify"}],"desc":"Shapes the Chunk noise for the given coordinates.\n<p>\nNotes:\n<p>\nThis method should <b>never</b> attempt to get the Chunk at the passed\ncoordinates, as doing so may cause an infinite loop.\n<p>\nThis method should <b>never</b> modify the {@link ChunkData} at a later\npoint of time.\n<p>\nThe Y-coordinate range should <b>never</b> be hardcoded, to get the\nY-coordinate range use the methods {@link ChunkData#getMinHeight()} and\n{@link ChunkData#getMaxHeight()}.\n<p>\nIf {@link #shouldGenerateNoise()} is set to true, the given\n{@link ChunkData} contains already the Vanilla noise generation.","ret":""},{"name":"generateSurface","params":[{"name":"worldInfo","type":"WorldInfo","desc":"The world info of the world this chunk will be used for"},{"name":"random","type":"Random","desc":"The random generator to use"},{"name":"chunkX","type":"int","desc":"The X-coordinate of the chunk"},{"name":"chunkZ","type":"int","desc":"The Z-coordinate of the chunk"},{"name":"chunkData","type":"ChunkData","desc":"To modify"}],"desc":"Shapes the Chunk surface for the given coordinates.\n<p>\nNotes:\n<p>\nThis method should <b>never</b> attempt to get the Chunk at the passed\ncoordinates, as doing so may cause an infinite loop.\n<p>\nThis method should <b>never</b> modify the {@link ChunkData} at a later\npoint of time.\n<p>\nThe Y-coordinate range should <b>never</b> be hardcoded, to get the\nY-coordinate range use the methods {@link ChunkData#getMinHeight()} and\n{@link ChunkData#getMaxHeight()}.\n<p>\nIf {@link #shouldGenerateSurface()} is set to true, the given\n{@link ChunkData} contains already the Vanilla surface generation.","ret":""},{"name":"generateBedrock","params":[{"name":"worldInfo","type":"WorldInfo","desc":"The world info of the world this chunk will be used for"},{"name":"random","type":"Random","desc":"The random generator to use"},{"name":"chunkX","type":"int","desc":"The X-coordinate of the chunk"},{"name":"chunkZ","type":"int","desc":"The Z-coordinate of the chunk"},{"name":"chunkData","type":"ChunkData","desc":"To modify"}],"desc":"Shapes the Chunk bedrock layer for the given coordinates.\n<p>\nNotes:\n<p>\nThis method should <b>never</b> attempt to get the Chunk at the passed\ncoordinates, as doing so may cause an infinite loop.\n<p>\nThis method should <b>never</b> modify the {@link ChunkData} at a later\npoint of time.\n<p>\nThe Y-coordinate range should <b>never</b> be hardcoded, to get the\nY-coordinate range use the methods {@link ChunkData#getMinHeight()} and\n{@link ChunkData#getMaxHeight()}.\n<p>","ret":""},{"name":"generateCaves","params":[{"name":"worldInfo","type":"WorldInfo","desc":"The world info of the world this chunk will be used for"},{"name":"random","type":"Random","desc":"The random generator to use"},{"name":"chunkX","type":"int","desc":"The X-coordinate of the chunk"},{"name":"chunkZ","type":"int","desc":"The Z-coordinate of the chunk"},{"name":"chunkData","type":"ChunkData","desc":"To modify"}],"desc":"Shapes the Chunk caves for the given coordinates.\n<p>\nNotes:\n<p>\nThis method should <b>never</b> attempt to get the Chunk at the passed\ncoordinates, as doing so may cause an infinite loop.\n<p>\nThis method should <b>never</b> modify the {@link ChunkData} at a later\npoint of time.\n<p>\nThe Y-coordinate range should <b>never</b> be hardcoded, to get the\nY-coordinate range use the methods {@link ChunkData#getMinHeight()} and\n{@link ChunkData#getMaxHeight()}.\n<p>\nIf {@link #shouldGenerateCaves()} is set to true, the given\n{@link ChunkData} contains already the Vanilla cave generation.","ret":""},{"name":"getDefaultBiomeProvider","params":[{"name":"worldInfo","type":"WorldInfo","desc":"The world info of the world the biome provider will be\nused for"}],"desc":"Gets called when no {@link BiomeProvider} is set in\n{@link org.bukkit.WorldCreator} or via the server configuration files. It\nis therefore possible that one plugin can provide the Biomes and another\none the generation.\n<p>\nNotes:\n<p>\nIf <code>null</code> is returned, than Vanilla biomes are used.\n<p>\nThis method only gets called once when the world is loaded. Returning\nanother {@link BiomeProvider} later one is not respected.","ret":"BiomeProvider to use to fill the biomes of a chunk"},{"name":"getBaseHeight","params":[{"name":"worldInfo","type":"WorldInfo","desc":"The world info of the world this chunk will be used for"},{"name":"random","type":"Random","desc":"The random generator to use"},{"name":"x","type":"int","desc":"The X-coordinate from world origin"},{"name":"z","type":"int","desc":"The Z-coordinate from world origin"},{"name":"heightMap","type":"HeightMap","desc":"From the highest block should be get"}],"desc":"This method is similar to\n{@link World#getHighestBlockAt(int, int, HeightMap)}. With the difference\nbeing, that the highest y coordinate should be the block before any\nsurface, bedrock, caves or decoration is applied. Or in other words the\nhighest block when only the noise is present at the chunk.\n<p>\nNotes:\n<p>\nWhen this method is not overridden, the Vanilla base height is used.\n<p>\nThis method should <b>never</b> attempt to get the Chunk at the passed\ncoordinates, or use the method\n{@link World#getHighestBlockAt(int, int, HeightMap)}, as doing so may\ncause an infinite loop.","ret":"The y coordinate of the highest block at the given location"},{"name":"generateChunkData","params":[{"name":"world","type":"World","desc":"The world this chunk will be used for"},{"name":"random","type":"Random","desc":"The random generator to use"},{"name":"x","type":"int","desc":"The X-coordinate of the chunk"},{"name":"z","type":"int","desc":"The Z-coordinate of the chunk"},{"name":"biome","type":"BiomeGrid","desc":"Proposed biome values for chunk - can be updated by\n    generator"}],"desc":"Shapes the chunk for the given coordinates.\n\nThis method must return a ChunkData.\n<p>\nNotes:\n<p>\nThis method should <b>never</b> attempt to get the Chunk at\nthe passed coordinates, as doing so may cause an infinite loop\n<p>\nThis method should <b>never</b> modify a ChunkData after it has\nbeen returned.\n<p>\nThis method <b>must</b> return a ChunkData returned by {@link ChunkGenerator#createChunkData(org.bukkit.World)}","ret":"ChunkData containing the types for each block created by this\n    generator"},{"name":"createChunkData","params":[{"name":"world","type":"World","desc":"the world the ChunkData is for"}],"desc":"Create a ChunkData for a world.","ret":"a new ChunkData for world"},{"name":"canSpawn","params":[{"name":"world","type":"World","desc":"The world we're testing on"},{"name":"x","type":"int","desc":"X-coordinate of the block to test"},{"name":"z","type":"int","desc":"Z-coordinate of the block to test"}],"desc":"Tests if the specified location is valid for a natural spawn position","ret":"true if the location is valid, otherwise false"},{"name":"getDefaultPopulators","params":[{"name":"world","type":"World","desc":"World to apply to"}],"desc":"Gets a list of default {@link BlockPopulator}s to apply to a given\nworld","ret":"List containing any amount of BlockPopulators"},{"name":"getFixedSpawnLocation","params":[{"name":"world","type":"World","desc":"The world to locate a spawn point for"},{"name":"random","type":"Random","desc":"Random generator to use in the calculation"}],"desc":"Gets a fixed spawn location to use for a given world.\n<p>\nA null value is returned if a world should not use a fixed spawn point,\nand will instead attempt to find one randomly.","ret":"Location containing a new spawn point, otherwise null"},{"name":"isParallelCapable","params":[],"desc":"Gets if this ChunkGenerator is parallel capable.\n\nSee {@link ChunkGenerator} for more information.","ret":"parallel capable status"},{"name":"shouldGenerateNoise","params":[],"desc":"Gets if the server should generate Vanilla noise.\n<p>\nThe Vanilla noise is generated <b>before</b>\n{@link #generateNoise(WorldInfo, Random, int, int, ChunkData)} is called.\n<p>\nThis is method is not called (and has therefore no effect), if\n{@link #shouldGenerateNoise(WorldInfo, Random, int, int)} is overridden.","ret":"true if the server should generate Vanilla noise"},{"name":"shouldGenerateNoise","params":[{"name":"worldInfo","type":"WorldInfo","desc":"The world info of the world this chunk will be used for"},{"name":"random","type":"Random","desc":"The random generator to use"},{"name":"chunkX","type":"int","desc":"The X-coordinate of the chunk"},{"name":"chunkZ","type":"int","desc":"The Z-coordinate of the chunk"}],"desc":"Gets if the server should generate Vanilla noise.\n<p>\nThe Vanilla noise is generated <b>before</b>\n{@link #generateNoise(WorldInfo, Random, int, int, ChunkData)} is called.\n<p>\nOnly this method is called if both this and\n{@link #shouldGenerateNoise()} are overridden.","ret":"true if the server should generate Vanilla noise"},{"name":"shouldGenerateSurface","params":[],"desc":"Gets if the server should generate Vanilla surface.\n<p>\nThe Vanilla surface is generated <b>before</b>\n{@link #generateSurface(WorldInfo, Random, int, int, ChunkData)} is\ncalled.\n<p>\nThis is method is not called (and has therefore no effect), if\n{@link #shouldGenerateSurface(WorldInfo, Random, int, int)} is overridden.","ret":"true if the server should generate Vanilla surface"},{"name":"shouldGenerateSurface","params":[{"name":"worldInfo","type":"WorldInfo","desc":"The world info of the world this chunk will be used for"},{"name":"random","type":"Random","desc":"The random generator to use"},{"name":"chunkX","type":"int","desc":"The X-coordinate of the chunk"},{"name":"chunkZ","type":"int","desc":"The Z-coordinate of the chunk"}],"desc":"Gets if the server should generate Vanilla surface.\n<p>\nThe Vanilla surface is generated <b>before</b>\n{@link #generateSurface(WorldInfo, Random, int, int, ChunkData)} is\ncalled.\n<p>\nOnly this method is called if both this and\n{@link #shouldGenerateSurface()} are overridden.","ret":"true if the server should generate Vanilla surface"},{"name":"shouldGenerateBedrock","params":[],"desc":"Gets if the server should generate Vanilla bedrock.\n<p>\nThe Vanilla bedrock is generated <b>before</b>\n{@link #generateBedrock(WorldInfo, Random, int, int, ChunkData)} is\ncalled.","ret":"true if the server should generate Vanilla bedrock"},{"name":"shouldGenerateCaves","params":[],"desc":"Gets if the server should generate Vanilla caves.\n<p>\nThe Vanilla caves are generated <b>before</b>\n{@link #generateCaves(WorldInfo, Random, int, int, ChunkData)} is called.\n<p>\nThis is method is not called (and has therefore no effect), if\n{@link #shouldGenerateCaves(WorldInfo, Random, int, int)} is overridden.","ret":"true if the server should generate Vanilla caves"},{"name":"shouldGenerateCaves","params":[{"name":"worldInfo","type":"WorldInfo","desc":"The world info of the world this chunk will be used for"},{"name":"random","type":"Random","desc":"The random generator to use"},{"name":"chunkX","type":"int","desc":"The X-coordinate of the chunk"},{"name":"chunkZ","type":"int","desc":"The Z-coordinate of the chunk"}],"desc":"Gets if the server should generate Vanilla caves.\n<p>\nThe Vanilla caves are generated <b>before</b>\n{@link #generateCaves(WorldInfo, Random, int, int, ChunkData)} is called.\n<p>\nOnly this method is called if both this and\n{@link #shouldGenerateCaves()} are overridden.","ret":"true if the server should generate Vanilla caves"},{"name":"shouldGenerateDecorations","params":[],"desc":"Gets if the server should generate Vanilla decorations after this\nChunkGenerator.\n<p>\nThe Vanilla decoration are generated <b>before</b> any\n{@link BlockPopulator} are called.\n<p>\nThis is method is not called (and has therefore no effect), if\n{@link #shouldGenerateDecorations(WorldInfo, Random, int, int)} is overridden.","ret":"true if the server should generate Vanilla decorations"},{"name":"shouldGenerateDecorations","params":[{"name":"worldInfo","type":"WorldInfo","desc":"The world info of the world this chunk will be used for"},{"name":"random","type":"Random","desc":"The random generator to use"},{"name":"chunkX","type":"int","desc":"The X-coordinate of the chunk"},{"name":"chunkZ","type":"int","desc":"The Z-coordinate of the chunk"}],"desc":"Gets if the server should generate Vanilla decorations after this\nChunkGenerator.\n<p>\nThe Vanilla decoration are generated <b>before</b> any\n{@link BlockPopulator} are called.\n<p>\nOnly this method is called if both this and\n{@link #shouldGenerateDecorations()} are overridden.","ret":"true if the server should generate Vanilla decorations"},{"name":"shouldGenerateMobs","params":[],"desc":"Gets if the server should generate Vanilla mobs after this\nChunkGenerator.\n<p>\nThis is method is not called (and has therefore no effect), if\n{@link #shouldGenerateMobs(WorldInfo, Random, int, int)} is overridden.","ret":"true if the server should generate Vanilla mobs"},{"name":"shouldGenerateMobs","params":[{"name":"worldInfo","type":"WorldInfo","desc":"The world info of the world this chunk will be used for"},{"name":"random","type":"Random","desc":"The random generator to use"},{"name":"chunkX","type":"int","desc":"The X-coordinate of the chunk"},{"name":"chunkZ","type":"int","desc":"The Z-coordinate of the chunk"}],"desc":"Gets if the server should generate Vanilla mobs after this\nChunkGenerator.\n<p>\nOnly this method is called if both this and\n{@link #shouldGenerateMobs()} are overridden.","ret":"true if the server should generate Vanilla mobs"},{"name":"shouldGenerateStructures","params":[],"desc":"Gets if the server should generate Vanilla structures after this\nChunkGenerator.\n<p>\nThis is method is not called (and has therefore no effect), if\n{@link #shouldGenerateStructures(WorldInfo, Random, int, int)} is overridden.","ret":"true if the server should generate Vanilla structures"},{"name":"createVanillaChunkData","params":[{"name":"world","type":"World","desc":"the world to create the ChunkData for"},{"name":"x","type":"int","desc":"the x coordinate of the chunk"},{"name":"z","type":"int","desc":"the z coordinate of the chunk"}],"desc":"Create a ChunkData for use in a generator, that is populated by the vanilla generator for that world","ret":"a new ChunkData for the world"},{"name":"shouldGenerateStructures","params":[{"name":"worldInfo","type":"WorldInfo","desc":"The world info of the world this chunk will be used for"},{"name":"random","type":"Random","desc":"The random generator to use"},{"name":"chunkX","type":"int","desc":"The X-coordinate of the chunk"},{"name":"chunkZ","type":"int","desc":"The Z-coordinate of the chunk"}],"desc":"Gets if the server should generate Vanilla structures after this\nChunkGenerator.\n<p>\nOnly this method is called if both this and\n{@link #shouldGenerateStructures()} are overridden.","ret":"true if the server should generate Vanilla structures"}],"desc":"A chunk generator is responsible for the initial shaping of an entire\nchunk. For example, the nether chunk generator should shape netherrack and\nsoulsand.\n\nA chunk is generated in multiple steps, those steps are always in the same\norder. Between those steps however an unlimited time may pass. This means, a\nchunk may generated until the surface step and continue with the bedrock step\nafter one or multiple server restarts or even after multiple Minecraft\nversions.\n\nThe order of generation is as follows\n<ol>\n<li>{@link #generateNoise(WorldInfo, Random, int, int, ChunkData)}</li>\n<li>{@link #generateSurface(WorldInfo, Random, int, int, ChunkData)}</li>\n<li>{@link #generateBedrock(WorldInfo, Random, int, int, ChunkData)}</li>\n<li>{@link #generateCaves(WorldInfo, Random, int, int, ChunkData)}</li>\n</ol>\n\nEvery method listed above as well as\n{@link #getBaseHeight(WorldInfo, Random, int, int, HeightMap)}\n<b>must</b> be completely thread safe and able to handle multiple concurrent\ncallers.\n\nSome aspects of world generation can be delegated to the Vanilla generator.\nThe following methods can be overridden to enable this:\n<ul>\n<li>{@link ChunkGenerator#shouldGenerateNoise()} or {@link ChunkGenerator#shouldGenerateNoise(WorldInfo, Random, int, int)}</li>\n<li>{@link ChunkGenerator#shouldGenerateSurface()} or {@link ChunkGenerator#shouldGenerateSurface(WorldInfo, Random, int, int)}</li>\n<li>{@link ChunkGenerator#shouldGenerateCaves()} or {@link ChunkGenerator#shouldGenerateCaves(WorldInfo, Random, int, int)}</li>\n<li>{@link ChunkGenerator#shouldGenerateDecorations()} or {@link ChunkGenerator#shouldGenerateDecorations(WorldInfo, Random, int, int)}</li>\n<li>{@link ChunkGenerator#shouldGenerateMobs()} or {@link ChunkGenerator#shouldGenerateMobs(WorldInfo, Random, int, int)}</li>\n<li>{@link ChunkGenerator#shouldGenerateStructures()} or {@link ChunkGenerator#shouldGenerateStructures(WorldInfo, Random, int, int)}</li>\n</ul>"},{"FQCN":"org.bukkit.generator.BiomeParameterPoint","methods":[{"name":"getTemperature","params":[],"desc":"Gets the temperature of the biome at this point that is suggested by the\nNoiseGenerator.","ret":"The temperature of the biome at this point"},{"name":"getMaxTemperature","params":[],"desc":"Gets the maximum temperature that is possible.","ret":"The maximum temperature"},{"name":"getMinTemperature","params":[],"desc":"Gets the minimum temperature that is possible.","ret":"The minimum temperature"},{"name":"getHumidity","params":[],"desc":"Gets the humidity of the biome at this point that is suggested by the\nNoiseGenerator.","ret":"The humidity of the biome at this point"},{"name":"getMaxHumidity","params":[],"desc":"Gets the maximum humidity that is possible.","ret":"The maximum humidity"},{"name":"getMinHumidity","params":[],"desc":"Gets the minimum humidity that is possible.","ret":"The minimum humidity"},{"name":"getContinentalness","params":[],"desc":"Gets the continentalness of the biome at this point that is suggested by\nthe NoiseGenerator.","ret":"The continentalness of the biome at this point"},{"name":"getMaxContinentalness","params":[],"desc":"Gets the maximum continentalness that is possible.","ret":"The maximum continentalness"},{"name":"getMinContinentalness","params":[],"desc":"Gets the minimum continentalness that is possible.","ret":"The minimum continentalness"},{"name":"getErosion","params":[],"desc":"Gets the erosion of the biome at this point that is suggested by the\nNoiseGenerator.","ret":"The erosion of the biome at this point"},{"name":"getMaxErosion","params":[],"desc":"Gets the maximum erosion that is possible.","ret":"The maximum erosion"},{"name":"getMinErosion","params":[],"desc":"Gets the minimum erosion that is possible.","ret":"The minimum erosion"},{"name":"getDepth","params":[],"desc":"Gets the depth of the biome at this point that is suggested by the\nNoiseGenerator.","ret":"The depth of the biome at this point"},{"name":"getMaxDepth","params":[],"desc":"Gets the maximum depth that is possible.","ret":"The maximum depth"},{"name":"getMinDepth","params":[],"desc":"Gets the minimum depth that is possible.","ret":"The minimum depth"},{"name":"getWeirdness","params":[],"desc":"Gets the weirdness of the biome at this point that is suggested by the\nNoiseGenerator.","ret":"The weirdness of the biome at this point"},{"name":"getMaxWeirdness","params":[],"desc":"Gets the maximum weirdness that is possible.","ret":"The maximum weirdness"},{"name":"getMinWeirdness","params":[],"desc":"Gets the minimum weirdness that is possible.","ret":"The minimum weirdness"}],"desc":"Represents the biome noise parameters which may be passed to a world\ngenerator."},{"FQCN":"org.bukkit.generator.WorldInfo","methods":[{"name":"getName","params":[],"desc":"Gets the unique name of this world","ret":"Name of this world"},{"name":"getUID","params":[],"desc":"Gets the Unique ID of this world","ret":"Unique ID of this world."},{"name":"getEnvironment","params":[],"desc":"Gets the {@link World.Environment} type of this world","ret":"This worlds Environment type"},{"name":"getSeed","params":[],"desc":"Gets the Seed for this world.","ret":"This worlds Seed"},{"name":"getMinHeight","params":[],"desc":"Gets the minimum height of this world.\n<p>\nIf the min height is 0, there are only blocks from y=0.","ret":"Minimum height of the world"},{"name":"getMaxHeight","params":[],"desc":"Gets the maximum height of this world.\n<p>\nIf the max height is 100, there are only blocks from y=0 to y=99.","ret":"Maximum height of the world"},{"name":"vanillaBiomeProvider","params":[],"desc":"Get the vanilla {@link BiomeProvider} for this world.","ret":"vanilla biome provider"}],"desc":"Holds various information of a World"},{"FQCN":"org.bukkit.generator.BiomeProvider","methods":[{"name":"getBiome","params":[{"name":"worldInfo","type":"WorldInfo","desc":"The world info of the world the biome will be used for"},{"name":"x","type":"int","desc":"The X-coordinate from world origin"},{"name":"y","type":"int","desc":"The Y-coordinate from world origin"},{"name":"z","type":"int","desc":"The Z-coordinate from world origin"}],"desc":"Return the Biome which should be present at the provided location.\n<p>\nNotes:\n<p>\nThis method <b>must</b> be completely thread safe and able to handle\nmultiple concurrent callers.\n<p>\nThis method should only return biomes which are present in the list\nreturned by {@link #getBiomes(WorldInfo)}\n<p>\nThis method should <b>never</b> return {@link Biome#CUSTOM}.","ret":"Biome for the given location"},{"name":"getBiome","params":[{"name":"worldInfo","type":"WorldInfo","desc":"The world info of the world the biome will be used for"},{"name":"x","type":"int","desc":"The X-coordinate from world origin"},{"name":"y","type":"int","desc":"The Y-coordinate from world origin"},{"name":"z","type":"int","desc":"The Z-coordinate from world origin"},{"name":"biomeParameterPoint","type":"BiomeParameterPoint","desc":"The parameter point that is provided by default\n                      for this location (contains temperature, humidity,\n                      continentalness, erosion, depth and weirdness)"}],"desc":"Return the Biome which should be present at the provided location.\n<p>\nNotes:\n<p>\nThis method <b>must</b> be completely thread safe and able to handle\nmultiple concurrent callers.\n<p>\nThis method should only return biomes which are present in the list\nreturned by {@link #getBiomes(WorldInfo)}\n<p>\nThis method should <b>never</b> return {@link Biome#CUSTOM}.\nOnly this method is called if both this and\n{@link #getBiome(WorldInfo, int, int, int)} are overridden.","ret":"Biome for the given location"},{"name":"getBiomes","params":[{"name":"worldInfo","type":"WorldInfo","desc":"The world info of the world the list will be used for"}],"desc":"Returns a list with every biome the {@link BiomeProvider} will use for\nthe given world.\n<p>\nNotes:\n<p>\nThis method only gets called once, when the world is loaded. Returning\nanother list or modifying the values from the initial returned list later\none, are not respected.\n<p>\nThis method should <b>never</b> return a list which contains\n{@link Biome#CUSTOM}.","ret":"A list with every biome the {@link BiomeProvider} uses"}],"desc":"Class for providing biomes."},{"FQCN":"org.bukkit.generator.structure.StructurePiece","methods":[{"name":"getBoundingBox","params":[],"desc":"Gets the bounding box of this structure piece.","ret":"bounding box of this structure piece"}],"desc":"Represents an individual part of a {@link GeneratedStructure}."},{"FQCN":"org.bukkit.generator.structure.Structure","methods":[{"name":"getStructureType","params":[],"desc":"Returns the type of the structure.","ret":"the type of structure"}],"desc":"Represent a Structure from the world.\n\nListed structures are present in the default server. Depending on the server\nthere might be additional structures present (for example structures added by\ndata packs), which can be received via {@link Registry#STRUCTURE}."},{"FQCN":"org.bukkit.generator.structure.StructureType","methods":[],"desc":"Represent a StructureType of a {@link Structure}.\n\nListed structure types are present in the default server. Depending on the\nserver there might be additional structure types present (for example\nstructure types added by data packs), which can be received via\n{@link Registry#STRUCTURE_TYPE}."},{"FQCN":"org.bukkit.generator.structure.GeneratedStructure","methods":[{"name":"getBoundingBox","params":[],"desc":"Gets the bounding box of this placed structure.","ret":"bounding box of this placed structure"},{"name":"getStructure","params":[],"desc":"Gets the structure that this PlacedStructure represents.","ret":"the structure that this PlacedStructure represents"},{"name":"getPieces","params":[],"desc":"Gets all the {@link StructurePiece} that make up this PlacedStructure.","ret":"a collection of all the StructurePieces"}],"desc":"Represents a structure placed in the world."},{"FQCN":"org.bukkit.generator.LimitedRegion","methods":[{"name":"getBuffer","params":[],"desc":"Gets the buffer around the central chunk which is accessible.\nThe returned value is in normal world coordinate scale.\n<p>\nFor example: If the method returns 16 you have a working area of 48x48.","ret":"The buffer in X and Z direction"},{"name":"isInRegion","params":[{"name":"location","type":"Location","desc":"the location to check"}],"desc":"Checks if the given {@link Location} is in the region.","ret":"true if the location is in the region, otherwise false."},{"name":"isInRegion","params":[{"name":"x","type":"int","desc":"X-coordinate to check"},{"name":"y","type":"int","desc":"Y-coordinate to check"},{"name":"z","type":"int","desc":"Z-coordinate to check"}],"desc":"Checks if the given coordinates are in the region.","ret":"true if the coordinates are in the region, otherwise false."},{"name":"getTileEntities","params":[],"desc":"Gets a list of all tile entities in the limited region including the\nbuffer zone.","ret":"a list of tile entities."},{"name":"setBlockData","params":[{"name":"vector","type":"Vector","desc":"{@link Vector} representing the position of the block to set."},{"name":"data","type":"BlockData","desc":"{@link BlockData} to set the block at the provided coordinates to."}],"desc":"Sets the block at a vector location to the provided {@link BlockData}.","ret":""},{"name":"setBlockState","params":[{"name":"x","type":"int","desc":"X coordinate."},{"name":"y","type":"int","desc":"Y coordinate."},{"name":"z","type":"int","desc":"Z coordinate."},{"name":"state","type":"BlockState","desc":"The block state."}],"desc":"Sets the {@link BlockState} at a location.","ret":""},{"name":"setBlockState","params":[{"name":"location","type":"Vector","desc":"Location to set block state."},{"name":"state","type":"BlockState","desc":"The block state."}],"desc":"Sets the {@link BlockState} at a location.","ret":""},{"name":"getBlockState","params":[{"name":"location","type":"Vector","desc":"Location to get block state from."}],"desc":"Gets the {@link BlockState} at a location.","ret":"The block state."},{"name":"scheduleBlockUpdate","params":[{"name":"x","type":"int","desc":"X coordinate"},{"name":"y","type":"int","desc":"Y coordinate"},{"name":"z","type":"int","desc":"Z coordinate"}],"desc":"Schedules a block update at (x, y, z).","ret":""},{"name":"scheduleBlockUpdate","params":[{"name":"location","type":"Vector","desc":"{@link Vector} representing the position of the block to update."}],"desc":"Schedules a block update at a vector location.","ret":""},{"name":"scheduleFluidUpdate","params":[{"name":"x","type":"int","desc":"X coordinate"},{"name":"y","type":"int","desc":"Y coordinate"},{"name":"z","type":"int","desc":"Z coordinate"}],"desc":"Schedules a fluid update at (x, y, z).","ret":""},{"name":"scheduleFluidUpdate","params":[{"name":"location","type":"Vector","desc":"{@link Vector} representing the position of the block to update."}],"desc":"Schedules a fluid update at a vector location.","ret":""},{"name":"getWorld","params":[],"desc":"Gets the {@link World} object this region represents.\n<p>\nDo <b>not</b> attempt to read from/write to this world! Doing so during generation <b>will cause a deadlock!</b>","ret":"The {@link World} object that this region represents."},{"name":"getBlockData","params":[{"name":"vector","type":"Vector","desc":"{@link Vector} representing the position of the block to get."}],"desc":"Gets the {@link BlockData} of the block at the provided coordinates.","ret":"{@link BlockData} at the coordinates"},{"name":"getCenterChunkX","params":[],"desc":"Gets the X-coordinate of the chunk in the center of the region.","ret":"The center chunk's X coordinate."},{"name":"getCenterBlockX","params":[],"desc":"Gets the X-coordinate of the block in the center of the region.","ret":"The center chunk's X coordinate."},{"name":"getCenterChunkZ","params":[],"desc":"Gets the Z-coordinate of the chunk in the center of the region.","ret":"The center chunk's Z coordinate."},{"name":"getCenterBlockZ","params":[],"desc":"Gets the Z-coordinate of the block in the center of the region.","ret":"The center chunk's Z coordinate."}],"desc":"A limited region is used in world generation for features which are\ngoing over a chunk. For example, trees or ores.\n\nUse {@link #getBuffer()} to know how much you can go beyond the central\nchunk. The buffer zone may or may not be already populated.\n\nThe coordinates are <b>absolute</b> from the world origin."},{"FQCN":"org.bukkit.SkullType","methods":[],"desc":"Represents the different types of skulls."},{"FQCN":"org.bukkit.SoundGroup","methods":[{"name":"getVolume","params":[],"desc":"Get the volume these sounds are played at.\n\nNote that this volume does not always represent the actual volume\nreceived by the client.","ret":"volume"},{"name":"getPitch","params":[],"desc":"Gets the pitch these sounds are played at.\n\nNote that this pitch does not always represent the actual pitch received\nby the client.","ret":"pitch"},{"name":"getBreakSound","params":[],"desc":"Gets the corresponding breaking sound for this group.","ret":"the break sound"},{"name":"getStepSound","params":[],"desc":"Gets the corresponding step sound for this group.","ret":"the step sound"},{"name":"getPlaceSound","params":[],"desc":"Gets the corresponding place sound for this group.","ret":"the place sound"},{"name":"getHitSound","params":[],"desc":"Gets the corresponding hit sound for this group.","ret":"the hit sound"},{"name":"getFallSound","params":[],"desc":"Gets the corresponding fall sound for this group.","ret":"the fall sound"}],"desc":"Represents a group of sounds for blocks that are played when various actions\nhappen (ie stepping, breaking, hitting, etc)."},{"FQCN":"org.bukkit.Note","methods":[{"name":"flat","params":[{"name":"octave","type":"int","desc":"The octave where the note is in. Has to be 0 - 1."},{"name":"tone","type":"Tone","desc":"The tone within the octave."}],"desc":"Creates a new note for a flat tone, such as A-flat.","ret":"The new note."},{"name":"sharp","params":[{"name":"octave","type":"int","desc":"The octave where the note is in. Has to be 0 - 2."},{"name":"tone","type":"Tone","desc":"The tone within the octave. If the octave is 2 the note has\n    to be F#."}],"desc":"Creates a new note for a sharp tone, such as A-sharp.","ret":"The new note."},{"name":"natural","params":[{"name":"octave","type":"int","desc":"The octave where the note is in. Has to be 0 - 1."},{"name":"tone","type":"Tone","desc":"The tone within the octave."}],"desc":"Creates a new note for a natural tone, such as A-natural.","ret":"The new note."},{"name":"sharped","params":[],"desc":"","ret":"The note a semitone above this one."},{"name":"flattened","params":[],"desc":"","ret":"The note a semitone below this one."},{"name":"getId","params":[],"desc":"Returns the internal id of this note.","ret":"the internal id of this note."},{"name":"getOctave","params":[],"desc":"Returns the octave of this note.","ret":"the octave of this note."},{"name":"getTone","params":[],"desc":"Returns the tone of this note.","ret":"the tone of this note."},{"name":"isSharped","params":[],"desc":"Returns if this note is sharped.","ret":"if this note is sharped."},{"name":"getPitch","params":[],"desc":"Gets the pitch of this note. This is the value used with\n{@link World#playSound} or the /playsound command.","ret":"the pitch"}],"desc":"A note class to store a specific note."},{"FQCN":"org.bukkit.map.MapCursorCollection","methods":[{"name":"size","params":[],"desc":"Get the amount of cursors in this collection.","ret":"The size of this collection."},{"name":"getCursor","params":[{"name":"index","type":"int","desc":"The index of the cursor."}],"desc":"Get a cursor from this collection.","ret":"The MapCursor."},{"name":"removeCursor","params":[{"name":"cursor","type":"MapCursor","desc":"The MapCursor to remove."}],"desc":"Remove a cursor from the collection.","ret":"Whether the cursor was removed successfully."},{"name":"addCursor","params":[{"name":"cursor","type":"MapCursor","desc":"The MapCursor to add."}],"desc":"Add a cursor to the collection.","ret":"The MapCursor that was passed."},{"name":"addCursor","params":[{"name":"x","type":"int","desc":"The x coordinate, from -128 to 127."},{"name":"y","type":"int","desc":"The y coordinate, from -128 to 127."},{"name":"direction","type":"byte","desc":"The facing of the cursor, from 0 to 15."}],"desc":"Add a cursor to the collection.","ret":"The newly added MapCursor."},{"name":"addCursor","params":[{"name":"x","type":"int","desc":"The x coordinate, from -128 to 127."},{"name":"y","type":"int","desc":"The y coordinate, from -128 to 127."},{"name":"direction","type":"byte","desc":"The facing of the cursor, from 0 to 15."},{"name":"type","type":"byte","desc":"The type (color/style) of the map cursor."}],"desc":"Add a cursor to the collection.","ret":"The newly added MapCursor."},{"name":"addCursor","params":[{"name":"x","type":"int","desc":"The x coordinate, from -128 to 127."},{"name":"y","type":"int","desc":"The y coordinate, from -128 to 127."},{"name":"direction","type":"byte","desc":"The facing of the cursor, from 0 to 15."},{"name":"type","type":"byte","desc":"The type (color/style) of the map cursor."},{"name":"visible","type":"boolean","desc":"Whether the cursor is visible."}],"desc":"Add a cursor to the collection.","ret":"The newly added MapCursor."},{"name":"addCursor","params":[{"name":"x","type":"int","desc":"The x coordinate, from -128 to 127."},{"name":"y","type":"int","desc":"The y coordinate, from -128 to 127."},{"name":"direction","type":"byte","desc":"The facing of the cursor, from 0 to 15."},{"name":"type","type":"byte","desc":"The type (color/style) of the map cursor."},{"name":"visible","type":"boolean","desc":"Whether the cursor is visible."},{"name":"caption","type":"String","desc":"banner caption"}],"desc":"Add a cursor to the collection.","ret":"The newly added MapCursor."},{"name":"addCursor","params":[{"name":"x","type":"int","desc":"The x coordinate, from -128 to 127."},{"name":"y","type":"int","desc":"The y coordinate, from -128 to 127."},{"name":"direction","type":"byte","desc":"The facing of the cursor, from 0 to 15."},{"name":"type","type":"byte","desc":"The type (color/style) of the map cursor."},{"name":"visible","type":"boolean","desc":"Whether the cursor is visible."},{"name":"caption","type":"net.kyori.adventure.text.Component","desc":"banner caption"}],"desc":"Add a cursor to the collection.","ret":"The newly added MapCursor."}],"desc":"Represents all the map cursors on a {@link MapCanvas}. Like MapCanvas, a\nMapCursorCollection is linked to a specific {@link MapRenderer}."},{"FQCN":"org.bukkit.map.MapFont","methods":[{"name":"setChar","params":[{"name":"ch","type":"char","desc":"The character to set the sprite for."},{"name":"sprite","type":"CharacterSprite","desc":"The CharacterSprite to set."}],"desc":"Set the sprite for a given character.","ret":""},{"name":"getChar","params":[{"name":"ch","type":"char","desc":"The character to get the sprite for."}],"desc":"Get the sprite for a given character.","ret":"The CharacterSprite associated with the character, or null if\n    there is none."},{"name":"getWidth","params":[{"name":"text","type":"String","desc":"The text."}],"desc":"Get the width of the given text as it would be rendered using this\nfont.","ret":"The width in pixels."},{"name":"getHeight","params":[],"desc":"Get the height of this font.","ret":"The height of the font."},{"name":"isValid","params":[{"name":"text","type":"String","desc":"The text."}],"desc":"Check whether the given text is valid.","ret":"True if the string contains only defined characters, false\n    otherwise."}],"desc":"Represents a bitmap font drawable to a map."},{"FQCN":"org.bukkit.map.MapCursor","methods":[{"name":"getX","params":[],"desc":"Get the X position of this cursor.","ret":"The X coordinate."},{"name":"getY","params":[],"desc":"Get the Y position of this cursor.","ret":"The Y coordinate."},{"name":"getDirection","params":[],"desc":"Get the direction of this cursor.","ret":"The facing of the cursor, from 0 to 15."},{"name":"getType","params":[],"desc":"Get the type of this cursor.","ret":"The type (color/style) of the map cursor."},{"name":"getRawType","params":[],"desc":"Get the type of this cursor.","ret":"The type (color/style) of the map cursor."},{"name":"isVisible","params":[],"desc":"Get the visibility status of this cursor.","ret":"True if visible, false otherwise."},{"name":"setX","params":[{"name":"x","type":"byte","desc":"The X coordinate."}],"desc":"Set the X position of this cursor.","ret":""},{"name":"setY","params":[{"name":"y","type":"byte","desc":"The Y coordinate."}],"desc":"Set the Y position of this cursor.","ret":""},{"name":"setDirection","params":[{"name":"direction","type":"byte","desc":"The facing of the cursor, from 0 to 15."}],"desc":"Set the direction of this cursor.","ret":""},{"name":"setType","params":[{"name":"type","type":"Type","desc":"The type (color/style) of the map cursor."}],"desc":"Set the type of this cursor.","ret":""},{"name":"setRawType","params":[{"name":"type","type":"byte","desc":"The type (color/style) of the map cursor."}],"desc":"Set the type of this cursor.","ret":""},{"name":"setVisible","params":[{"name":"visible","type":"boolean","desc":"True if visible."}],"desc":"Set the visibility status of this cursor.","ret":""},{"name":"caption","params":[],"desc":"Gets the caption on this cursor.","ret":"caption"},{"name":"caption","params":[{"name":"caption","type":"net.kyori.adventure.text.Component","desc":"new caption"}],"desc":"Sets the caption on this cursor.","ret":""},{"name":"getCaption","params":[],"desc":"Gets the caption on this cursor.","ret":"caption"},{"name":"setCaption","params":[{"name":"caption","type":"String","desc":"new caption"}],"desc":"Sets the caption on this cursor.","ret":""}],"desc":"Represents a cursor on a map."},{"FQCN":"org.bukkit.map.MapCanvas","methods":[{"name":"getMapView","params":[],"desc":"Get the map this canvas is attached to.","ret":"The MapView this canvas is attached to."},{"name":"getCursors","params":[],"desc":"Get the cursor collection associated with this canvas.","ret":"The MapCursorCollection associated with this canvas."},{"name":"setCursors","params":[{"name":"cursors","type":"MapCursorCollection","desc":"The MapCursorCollection to associate with this canvas."}],"desc":"Set the cursor collection associated with this canvas. This does not\nusually need to be called since a MapCursorCollection is already\nprovided.","ret":""},{"name":"setPixelColor","params":[{"name":"x","type":"int","desc":"The x coordinate, from 0 to 127."},{"name":"y","type":"int","desc":"The y coordinate, from 0 to 127."},{"name":"color","type":"Color","desc":"The color."}],"desc":"Draw a pixel to the canvas.\n<p>\nThe provided color might be converted to another color,\nwhich is in the map color range. This means, that\n{@link #getPixelColor(int, int)} might return another\ncolor than set.\n\nIf null is used as color, then the color returned by\n{@link #getBasePixelColor(int, int)} is shown on the map.","ret":""},{"name":"getPixelColor","params":[{"name":"x","type":"int","desc":"The x coordinate, from 0 to 127."},{"name":"y","type":"int","desc":"The y coordinate, from 0 to 127."}],"desc":"Get a pixel from the canvas.\n\nIf no color is set at the given position for this canvas, then null is\nreturned and the color returned by {@link #getBasePixelColor(int, int)}\nis shown on the map.","ret":"The color, or null if no color is set."},{"name":"getBasePixelColor","params":[{"name":"x","type":"int","desc":"The x coordinate, from 0 to 127."},{"name":"y","type":"int","desc":"The y coordinate, from 0 to 127."}],"desc":"Get a pixel from the layers below this canvas.","ret":"The color."},{"name":"setPixel","params":[{"name":"x","type":"int","desc":"The x coordinate, from 0 to 127."},{"name":"y","type":"int","desc":"The y coordinate, from 0 to 127."},{"name":"color","type":"byte","desc":"The color. See {@link MapPalette}."}],"desc":"Draw a pixel to the canvas.","ret":""},{"name":"getPixel","params":[{"name":"x","type":"int","desc":"The x coordinate, from 0 to 127."},{"name":"y","type":"int","desc":"The y coordinate, from 0 to 127."}],"desc":"Get a pixel from the canvas.","ret":"The color. See {@link MapPalette}."},{"name":"getBasePixel","params":[{"name":"x","type":"int","desc":"The x coordinate, from 0 to 127."},{"name":"y","type":"int","desc":"The y coordinate, from 0 to 127."}],"desc":"Get a pixel from the layers below this canvas.","ret":"The color. See {@link MapPalette}."},{"name":"drawImage","params":[{"name":"x","type":"int","desc":"The x coordinate of the image."},{"name":"y","type":"int","desc":"The y coordinate of the image."},{"name":"image","type":"Image","desc":"The Image to draw."}],"desc":"Draw an image to the map. The image will be clipped if necessary.","ret":""},{"name":"drawText","params":[{"name":"x","type":"int","desc":"The column to start rendering on."},{"name":"y","type":"int","desc":"The row to start rendering on."},{"name":"font","type":"MapFont","desc":"The font to use."},{"name":"text","type":"String","desc":"The formatted text to render."}],"desc":"Render text to the map using fancy formatting. Newline (\\n) characters\nwill move down one line and return to the original column, and the text\ncolor can be changed using sequences such as \"§12;\", replacing 12 with\nthe palette index of the color (see {@link MapPalette}).","ret":""}],"desc":"Represents a canvas for drawing to a map. Each canvas is associated with a\nspecific {@link MapRenderer} and represents that renderer's layer on the\nmap."},{"FQCN":"org.bukkit.map.MinecraftFont","methods":[],"desc":"Represents the built-in Minecraft font."},{"FQCN":"org.bukkit.map.MapRenderer","methods":[{"name":"isContextual","params":[],"desc":"Get whether the renderer is contextual, i.e. has different canvases for\ndifferent players.","ret":"True if contextual, false otherwise."},{"name":"initialize","params":[{"name":"map","type":"MapView","desc":"The MapView being initialized."}],"desc":"Initialize this MapRenderer for the given map.","ret":""},{"name":"render","params":[{"name":"map","type":"MapView","desc":"The MapView being rendered to."},{"name":"canvas","type":"MapCanvas","desc":"The canvas to use for rendering."},{"name":"player","type":"Player","desc":"The player who triggered the rendering."}],"desc":"Render to the given map.","ret":""}],"desc":"Represents a renderer for a map."},{"FQCN":"org.bukkit.map.MapPalette","methods":[{"name":"resizeImage","params":[{"name":"image","type":"Image","desc":"The image to resize."}],"desc":"Resize an image to 128x128.","ret":"The resized image."},{"name":"imageToBytes","params":[{"name":"image","type":"Image","desc":"The image to convert."}],"desc":"Convert an Image to a byte[] using the palette.","ret":"A byte[] containing the pixels of the image."},{"name":"matchColor","params":[{"name":"r","type":"int","desc":"The red component of the color."},{"name":"g","type":"int","desc":"The green component of the color."},{"name":"b","type":"int","desc":"The blue component of the color."}],"desc":"Get the index of the closest matching color in the palette to the given\ncolor.","ret":"The index in the palette."},{"name":"matchColor","params":[{"name":"color","type":"Color","desc":"The Color to match."}],"desc":"Get the index of the closest matching color in the palette to the given\ncolor.","ret":"The index in the palette."},{"name":"getColor","params":[{"name":"index","type":"byte","desc":"The index in the palette."}],"desc":"Get the value of the given color in the palette.","ret":"The Color of the palette entry."},{"name":"setMapColorCache","params":[{"name":"mapColorCache","type":"MapColorCache","desc":"The map color cache to set"}],"desc":"Sets the given MapColorCache.","ret":""}],"desc":"Represents the palette that map items use.\n<p>\nThese fields are hee base color ranges. Each entry corresponds to four\ncolors of varying shades with values entry to entry + 3."},{"FQCN":"org.bukkit.map.MapView","methods":[{"name":"getId","params":[],"desc":"Get the ID of this map item for use with {@link MapMeta}.","ret":"The ID of the map."},{"name":"isVirtual","params":[],"desc":"Check whether this map is virtual. A map is virtual if its lowermost\nMapRenderer is plugin-provided.","ret":"Whether the map is virtual."},{"name":"getScale","params":[],"desc":"Get the scale of this map.","ret":"The scale of the map."},{"name":"setScale","params":[{"name":"scale","type":"Scale","desc":"The scale to set."}],"desc":"Set the scale of this map.","ret":""},{"name":"getCenterX","params":[],"desc":"Get the center X position of this map.","ret":"The center X position."},{"name":"getCenterZ","params":[],"desc":"Get the center Z position of this map.","ret":"The center Z position."},{"name":"setCenterX","params":[{"name":"x","type":"int","desc":"The center X position."}],"desc":"Set the center X position of this map.","ret":""},{"name":"setCenterZ","params":[{"name":"z","type":"int","desc":"The center Z position."}],"desc":"Set the center Z position of this map.","ret":""},{"name":"getWorld","params":[],"desc":"Get the world that this map is associated with. Primarily used by the\ninternal renderer, but may be used by external renderers. May return\nnull if the world the map is associated with is not loaded.","ret":"The World this map is associated with."},{"name":"setWorld","params":[{"name":"world","type":"World","desc":"The World to associate this map with."}],"desc":"Set the world that this map is associated with. The world is used by\nthe internal renderer, and may also be used by external renderers.","ret":""},{"name":"getRenderers","params":[],"desc":"Get a list of MapRenderers currently in effect.","ret":"A {@code List<MapRenderer>} containing each map renderer."},{"name":"addRenderer","params":[{"name":"renderer","type":"MapRenderer","desc":"The MapRenderer to add."}],"desc":"Add a renderer to this map.","ret":""},{"name":"removeRenderer","params":[{"name":"renderer","type":"MapRenderer","desc":"The MapRenderer to remove."}],"desc":"Remove a renderer from this map.","ret":"True if the renderer was successfully removed."},{"name":"isTrackingPosition","params":[],"desc":"Gets whether a position cursor should be shown when the map is near its\ncenter.","ret":"tracking status"},{"name":"setTrackingPosition","params":[{"name":"trackingPosition","type":"boolean","desc":"tracking status"}],"desc":"Sets whether a position cursor should be shown when the map is near its\ncenter.","ret":""},{"name":"isUnlimitedTracking","params":[],"desc":"Whether the map will show a smaller position cursor (true), or no\nposition cursor (false) when cursor is outside of map's range.","ret":"unlimited tracking state"},{"name":"setUnlimitedTracking","params":[{"name":"unlimited","type":"boolean","desc":"tracking state"}],"desc":"Whether the map will show a smaller position cursor (true), or no\nposition cursor (false) when cursor is outside of map's range.","ret":""},{"name":"isLocked","params":[],"desc":"Gets whether the map is locked or not.\n\nA locked map may not be explored further.","ret":"lock status"},{"name":"setLocked","params":[{"name":"locked","type":"boolean","desc":"status"}],"desc":"Gets whether the map is locked or not.\n\nA locked map may not be explored further.","ret":""}],"desc":"Represents a map item."},{"FQCN":"org.bukkit.GameEvent","methods":[{"name":"getByKey","params":[{"name":"namespacedKey","type":"NamespacedKey","desc":"the key"}],"desc":"Returns a {@link GameEvent} by a {@link NamespacedKey}.","ret":"the event or null"},{"name":"values","params":[],"desc":"Returns the set of all GameEvents.","ret":"the memoryKeys"}],"desc":"Represents a generic Mojang game event."},{"FQCN":"org.bukkit.profile.PlayerProfile","methods":[{"name":"getUniqueId","params":[],"desc":"Gets the player's unique id.","ret":"the player's unique id, or <code>null</code> if not available"},{"name":"getName","params":[],"desc":"Gets the player name.","ret":"the player name, or <code>null</code> if not available"},{"name":"getTextures","params":[],"desc":"Gets the {@link PlayerTextures} of this profile.","ret":"the textures, not <code>null</code>"},{"name":"setTextures","params":[{"name":"textures","type":"PlayerTextures","desc":"the textures to copy, or <code>null</code> to clear the\ntextures"}],"desc":"Copies the given textures.","ret":""},{"name":"isComplete","params":[],"desc":"Checks whether this profile is complete.\n<p>\nA profile is currently considered complete if it has a name, a unique id,\nand textures.","ret":"<code>true</code> if this profile is complete"},{"name":"update","params":[],"desc":"Produces an updated player profile based on this profile.\n<p>\nThis tries to produce a completed profile by filling in missing\nproperties (name, unique id, textures, etc.), and updates existing\nproperties (e.g. name, textures, etc.) to their official and up-to-date\nvalues. This operation does not alter the current profile, but produces a\nnew updated {@link PlayerProfile}.\n<p>\nIf no player exists for the unique id or name of this profile, this\noperation yields a profile that is equal to the current profile, which\nmight not be complete.\n<p>\nThis is an asynchronous operation: Updating the profile can result in an\noutgoing connection in another thread in order to fetch the latest\nprofile properties. The returned {@link CompletableFuture} will be\ncompleted once the updated profile is available. In order to not block\nthe server's main thread, you should not wait for the result of the\nreturned CompletableFuture on the server's main thread. Instead, if you\nwant to do something with the updated player profile on the server's main\nthread once it is available, you could do something like this:\n<pre>\nprofile.update().thenAcceptAsync(updatedProfile -> {\n    // Do something with the updated profile:\n    // ...\n}, runnable -> Bukkit.getScheduler().runTask(plugin, runnable));\n</pre>","ret":"a completable future that gets completed with the updated\nPlayerProfile once it is available"}],"desc":"A player profile.\n<p>\nA player profile always provides a unique id, a non-empty name, or both. Its\nunique id and name are immutable, but other properties (such as its textures)\ncan be altered.\n<p>\nNew profiles can be created via\n{@link Server#createPlayerProfile(UUID, String)}."},{"FQCN":"org.bukkit.profile.PlayerTextures","methods":[{"name":"isEmpty","params":[],"desc":"Checks if the profile stores no textures.","ret":"<code>true</code> if the profile stores no textures"},{"name":"clear","params":[],"desc":"Clears the textures.","ret":""},{"name":"getSkin","params":[],"desc":"Gets the URL that points to the player's skin.","ret":"the URL of the player's skin, or <code>null</code> if not set"},{"name":"setSkin","params":[{"name":"skinUrl","type":"URL","desc":"the URL of the player's skin, or <code>null</code> to\nunset it"}],"desc":"Sets the player's skin to the specified URL, and the skin model to\n{@link SkinModel#CLASSIC}.\n<p>\nThe URL <b>must</b> point to the Minecraft texture server. Example URL:\n<pre>\nhttp://textures.minecraft.net/texture/b3fbd454b599df593f57101bfca34e67d292a8861213d2202bb575da7fd091ac\n</pre>","ret":""},{"name":"setSkin","params":[{"name":"skinUrl","type":"URL","desc":"the URL of the player's skin, or <code>null</code> to\nunset it"},{"name":"skinModel","type":"SkinModel","desc":"the skin model, ignored if the skin URL is\n<code>null</code>"}],"desc":"Sets the player's skin and {@link SkinModel}.\n<p>\nThe URL <b>must</b> point to the Minecraft texture server. Example URL:\n<pre>\nhttp://textures.minecraft.net/texture/b3fbd454b599df593f57101bfca34e67d292a8861213d2202bb575da7fd091ac\n</pre>\n<p>\nA skin model of <code>null</code> results in {@link SkinModel#CLASSIC} to\nbe used.","ret":""},{"name":"getSkinModel","params":[],"desc":"Gets the model of the player's skin.\n<p>\nThis returns {@link SkinModel#CLASSIC} if no skin is set.","ret":"the model of the player's skin"},{"name":"getCape","params":[],"desc":"Gets the URL that points to the player's cape.","ret":"the URL of the player's cape, or <code>null</code> if not set"},{"name":"setCape","params":[{"name":"capeUrl","type":"URL","desc":"the URL of the player's cape, or <code>null</code> to\nunset it"}],"desc":"Sets the URL that points to the player's cape.\n<p>\nThe URL <b>must</b> point to the Minecraft texture server. Example URL:\n<pre>\nhttp://textures.minecraft.net/texture/2340c0e03dd24a11b15a8b33c2a7e9e32abb2051b2481d0ba7defd635ca7a933\n</pre>","ret":""},{"name":"getTimestamp","params":[],"desc":"Gets the timestamp at which the profile was last updated.","ret":"the timestamp, or <code>0</code> if unknown"},{"name":"isSigned","params":[],"desc":"Checks if the textures are signed and the signature is valid.","ret":"<code>true</code> if the textures are signed and the signature is\nvalid"}],"desc":"Provides access to the textures stored inside a {@link PlayerProfile}.\n<p>\nModifying the textures immediately invalidates and clears any previously\npresent attributes that are specific to official player profiles, such as the\n{@link #getTimestamp() timestamp} and {@link #isSigned() signature}."},{"FQCN":"org.bukkit.scoreboard.Team","methods":[{"name":"getName","params":[],"desc":"Gets the name of this Team","ret":"Objective name"},{"name":"displayName","params":[],"desc":"Gets the display name for this team","ret":"Team display name"},{"name":"displayName","params":[{"name":"displayName","type":"net.kyori.adventure.text.Component","desc":"New display name"}],"desc":"Sets the name displayed to entries for this team","ret":""},{"name":"prefix","params":[],"desc":"Gets the prefix prepended to the display of entries on this team.","ret":"Team prefix"},{"name":"prefix","params":[{"name":"prefix","type":"net.kyori.adventure.text.Component","desc":"New prefix"}],"desc":"Sets the prefix prepended to the display of entries on this team.","ret":""},{"name":"suffix","params":[],"desc":"Gets the suffix appended to the display of entries on this team.","ret":"the team's current suffix"},{"name":"suffix","params":[{"name":"suffix","type":"net.kyori.adventure.text.Component","desc":"the new suffix for this team."}],"desc":"Sets the suffix appended to the display of entries on this team.","ret":""},{"name":"hasColor","params":[],"desc":"Checks if the team has a color specified","ret":"true if it has a <b>color</b>"},{"name":"color","params":[],"desc":"Gets the color of the team.\n<br>\nThis only sets the team outline, other occurrences of colors such as in\nnames are handled by prefixes / suffixes.","ret":"team color"},{"name":"color","params":[{"name":"color","type":"net.kyori.adventure.text.format.NamedTextColor","desc":"new color, null for no color"}],"desc":"Sets the color of the team.\n<br>\nThis only sets the team outline, other occurrences of colors such as in\nnames are handled by prefixes / suffixes.","ret":""},{"name":"getDisplayName","params":[],"desc":"Gets the name displayed to entries for this team","ret":"Team display name"},{"name":"setDisplayName","params":[{"name":"displayName","type":"String","desc":"New display name"}],"desc":"Sets the name displayed to entries for this team","ret":""},{"name":"getPrefix","params":[],"desc":"Gets the prefix prepended to the display of entries on this team.","ret":"Team prefix"},{"name":"setPrefix","params":[{"name":"prefix","type":"String","desc":"New prefix"}],"desc":"Sets the prefix prepended to the display of entries on this team.","ret":""},{"name":"getSuffix","params":[],"desc":"Gets the suffix appended to the display of entries on this team.","ret":"the team's current suffix"},{"name":"setSuffix","params":[{"name":"suffix","type":"String","desc":"the new suffix for this team."}],"desc":"Sets the suffix appended to the display of entries on this team.","ret":""},{"name":"getColor","params":[],"desc":"Gets the color of the team.\n<br>\nThis only sets the team outline, other occurrences of colors such as in\nnames are handled by prefixes / suffixes.","ret":"team color, defaults to {@link ChatColor#RESET}"},{"name":"setColor","params":[{"name":"color","type":"ChatColor","desc":"new color, must be non-null. Use {@link ChatColor#RESET} for\nno color"}],"desc":"Sets the color of the team.\n<br>\nThis only sets the team outline, other occurrences of colors such as in\nnames are handled by prefixes / suffixes.","ret":""},{"name":"allowFriendlyFire","params":[],"desc":"Gets the team friendly fire state","ret":"true if friendly fire is enabled"},{"name":"setAllowFriendlyFire","params":[{"name":"enabled","type":"boolean","desc":"true if friendly fire is to be allowed"}],"desc":"Sets the team friendly fire state","ret":""},{"name":"canSeeFriendlyInvisibles","params":[],"desc":"Gets the team's ability to see {@link PotionEffectType#INVISIBILITY\ninvisible} teammates.","ret":"true if team members can see invisible members"},{"name":"setCanSeeFriendlyInvisibles","params":[{"name":"enabled","type":"boolean","desc":"true if invisible teammates are to be visible"}],"desc":"Sets the team's ability to see {@link PotionEffectType#INVISIBILITY\ninvisible} teammates.","ret":""},{"name":"getNameTagVisibility","params":[],"desc":"Gets the team's ability to see name tags","ret":"the current name tag visibility for the team"},{"name":"setNameTagVisibility","params":[{"name":"visibility","type":"NameTagVisibility","desc":"The nameTagVisibility to set"}],"desc":"Set's the team's ability to see name tags","ret":""},{"name":"getPlayers","params":[],"desc":"Gets the Set of players on the team","ret":"players on the team"},{"name":"getEntries","params":[],"desc":"Gets the Set of entries on the team","ret":"entries on the team"},{"name":"getSize","params":[],"desc":"Gets the size of the team","ret":"number of entries on the team"},{"name":"getScoreboard","params":[],"desc":"Gets the Scoreboard to which this team is attached","ret":"Owning scoreboard, or null if this team has been {@link\n    #unregister() unregistered}"},{"name":"addEntry","params":[{"name":"entry","type":"String","desc":"the entry to add"}],"desc":"This puts the specified entry onto this team for the scoreboard.\n<p>\nThis will remove the entry from any other team on the scoreboard.","ret":""},{"name":"addEntities","params":[{"name":"entities","type":"org.bukkit.entity.Entity","desc":"the entities to add"}],"desc":"This puts a collection of entities onto this team for the scoreboard which results in one\npacket for the updates rather than a packet-per-entity.\n<p>\nEntities on other teams will be removed from their respective teams.","ret":""},{"name":"addEntities","params":[{"name":"entities","type":"java.util.Collection<org.bukkit.entity.Entity>","desc":"the entities to add"}],"desc":"This puts a collection of entities onto this team for the scoreboard which results in one\npacket for the updates rather than a packet-per-entity.\n<p>\nEntities on other teams will be removed from their respective teams.","ret":""},{"name":"addEntries","params":[{"name":"entries","type":"String","desc":"the entries to add"}],"desc":"This puts a collection of entries onto this team for the scoreboard which results in one\npacket for the updates rather than a packet-per-entry.\n<p>\nEntries on other teams will be removed from their respective teams.","ret":""},{"name":"addEntries","params":[{"name":"entries","type":"java.util.Collection<String>","desc":"the entries to add"}],"desc":"This puts a collection of entries onto this team for the scoreboard which results in one\npacket for the updates rather than a packet-per-entry.\n<p>\nEntries on other teams will be removed from their respective teams.","ret":""},{"name":"removeEntry","params":[{"name":"entry","type":"String","desc":"the entry to remove"}],"desc":"Removes the entry from this team.","ret":"if the entry was a part of this team"},{"name":"removeEntities","params":[{"name":"entities","type":"org.bukkit.entity.Entity","desc":"the entries to remove"}],"desc":"Removes a collection of entities from this team which results in one\npacket for the updates rather than a packet-per-entity.","ret":"if any of the entities were a part of this team"},{"name":"removeEntities","params":[{"name":"entities","type":"java.util.Collection<org.bukkit.entity.Entity>","desc":"the entries to remove"}],"desc":"Removes a collection of entities from this team which results in one\npacket for the updates rather than a packet-per-entity.","ret":"if any of the entities were a part of this team"},{"name":"removeEntries","params":[{"name":"entries","type":"String","desc":"the entries to remove"}],"desc":"Removes a collection of entries from this team which results in one\npacket for the updates rather than a packet-per-entry.","ret":"if any of the entries were a part of this team"},{"name":"removeEntries","params":[{"name":"entries","type":"java.util.Collection<String>","desc":"the entries to remove"}],"desc":"Removes a collection of entries from this team which results in one\npacket for the updates rather than a packet-per-entry.","ret":"if any of the entries were a part of this team"},{"name":"unregister","params":[],"desc":"Unregisters this team from the Scoreboard","ret":""},{"name":"hasEntry","params":[{"name":"entry","type":"String","desc":"the entry to search for"}],"desc":"Checks to see if the specified entry is a member of this team.","ret":"true if the entry is a member of this team"},{"name":"getOption","params":[{"name":"option","type":"Option","desc":"the option to get"}],"desc":"Get an option for this team","ret":"the option status"},{"name":"setOption","params":[{"name":"option","type":"Option","desc":"the option to set"},{"name":"status","type":"OptionStatus","desc":"the new option status"}],"desc":"Set an option for this team","ret":""},{"name":"addEntity","params":[{"name":"entity","type":"org.bukkit.entity.Entity","desc":"the entity to add"}],"desc":"This puts the specified entity onto this team for the scoreboard.\n<p>\nThis will remove the entity from any other team on the scoreboard.","ret":""},{"name":"removeEntity","params":[{"name":"entity","type":"org.bukkit.entity.Entity","desc":"the entity to remove"}],"desc":"Removes the entity from this team.","ret":"if the entity was on this team"},{"name":"hasEntity","params":[{"name":"entity","type":"org.bukkit.entity.Entity","desc":"the entity to search for"}],"desc":"Checks to see if the specified entity is a member of this team.","ret":"true if the entity is a member of this team"}],"desc":"A team on a scoreboard that has a common display theme and other\nproperties. This team is only relevant to the display of the associated\n{@link #getScoreboard() scoreboard}."},{"FQCN":"org.bukkit.scoreboard.DisplaySlot","methods":[{"name":"getId","params":[],"desc":"Get the string id of this display slot.","ret":"the string id"}],"desc":"Locations for displaying objectives to the player"},{"FQCN":"org.bukkit.scoreboard.Criterias","methods":[],"desc":"Criteria names which trigger an objective to be modified by actions in-game"},{"FQCN":"org.bukkit.scoreboard.Scoreboard","methods":[{"name":"registerNewObjective","params":[{"name":"name","type":"String","desc":"Name of the Objective"},{"name":"criteria","type":"String","desc":"Criteria for the Objective"}],"desc":"Registers an Objective on this Scoreboard","ret":"The registered Objective"},{"name":"registerNewObjective","params":[{"name":"name","type":"String","desc":"Name of the Objective"},{"name":"criteria","type":"String","desc":"Criteria for the Objective"},{"name":"displayName","type":"net.kyori.adventure.text.Component","desc":"display name for the Objective."}],"desc":"Registers an Objective on this Scoreboard","ret":"The registered Objective"},{"name":"registerNewObjective","params":[{"name":"name","type":"String","desc":"Name of the Objective"},{"name":"criteria","type":"String","desc":"Criteria for the Objective"},{"name":"displayName","type":"net.kyori.adventure.text.Component","desc":"Name displayed to players for the Objective."},{"name":"renderType","type":"RenderType","desc":"Manner of rendering the Objective"}],"desc":"Registers an Objective on this Scoreboard","ret":"The registered Objective"},{"name":"registerNewObjective","params":[{"name":"name","type":"String","desc":"Name of the Objective"},{"name":"criteria","type":"Criteria","desc":"Criteria for the Objective"},{"name":"displayName","type":"net.kyori.adventure.text.Component","desc":"Name displayed to players for the Objective."}],"desc":"Registers an Objective on this Scoreboard","ret":"The registered Objective"},{"name":"registerNewObjective","params":[{"name":"name","type":"String","desc":"Name of the Objective"},{"name":"criteria","type":"Criteria","desc":"Criteria for the Objective"},{"name":"displayName","type":"net.kyori.adventure.text.Component","desc":"Name displayed to players for the Objective."},{"name":"renderType","type":"RenderType","desc":"Manner of rendering the Objective"}],"desc":"Registers an Objective on this Scoreboard","ret":"The registered Objective"},{"name":"registerNewObjective","params":[{"name":"name","type":"String","desc":"Name of the Objective"},{"name":"criteria","type":"String","desc":"Criteria for the Objective"},{"name":"displayName","type":"String","desc":"Name displayed to players for the Objective."}],"desc":"Registers an Objective on this Scoreboard","ret":"The registered Objective"},{"name":"registerNewObjective","params":[{"name":"name","type":"String","desc":"Name of the Objective"},{"name":"criteria","type":"String","desc":"Criteria for the Objective"},{"name":"displayName","type":"String","desc":"Name displayed to players for the Objective."},{"name":"renderType","type":"RenderType","desc":"Manner of rendering the Objective"}],"desc":"Registers an Objective on this Scoreboard","ret":"The registered Objective"},{"name":"registerNewObjective","params":[{"name":"name","type":"String","desc":"Name of the Objective"},{"name":"criteria","type":"Criteria","desc":"Criteria for the Objective"},{"name":"displayName","type":"String","desc":"Name displayed to players for the Objective."}],"desc":"Registers an Objective on this Scoreboard","ret":"The registered Objective"},{"name":"registerNewObjective","params":[{"name":"name","type":"String","desc":"Name of the Objective"},{"name":"criteria","type":"Criteria","desc":"Criteria for the Objective"},{"name":"displayName","type":"String","desc":"Name displayed to players for the Objective."},{"name":"renderType","type":"RenderType","desc":"Manner of rendering the Objective"}],"desc":"Registers an Objective on this Scoreboard","ret":"The registered Objective"},{"name":"getObjective","params":[{"name":"name","type":"String","desc":"Name of the Objective"}],"desc":"Gets an Objective on this Scoreboard by name","ret":"the Objective or null if it does not exist"},{"name":"getObjectivesByCriteria","params":[{"name":"criteria","type":"String","desc":"Criteria to search by"}],"desc":"Gets all Objectives of a Criteria on the Scoreboard","ret":"an immutable set of Objectives using the specified Criteria"},{"name":"getObjectivesByCriteria","params":[{"name":"criteria","type":"Criteria","desc":"Criteria to search by"}],"desc":"Gets all Objectives of a Criteria on the Scoreboard","ret":"an immutable set of Objectives using the specified Criteria"},{"name":"getObjectives","params":[],"desc":"Gets all Objectives on this Scoreboard","ret":"An immutable set of all Objectives on this Scoreboard"},{"name":"getObjective","params":[{"name":"slot","type":"DisplaySlot","desc":"The DisplaySlot"}],"desc":"Gets the Objective currently displayed in a DisplaySlot on this\nScoreboard","ret":"the Objective currently displayed or null if nothing is\n    displayed in that DisplaySlot"},{"name":"getScores","params":[{"name":"entry","type":"String","desc":"the entry whose scores are being retrieved"}],"desc":"Gets all scores for an entry on this Scoreboard","ret":"immutable set of all scores tracked for the entry"},{"name":"resetScores","params":[{"name":"entry","type":"String","desc":"the entry to drop all current scores for"}],"desc":"Removes all scores for an entry on this Scoreboard","ret":""},{"name":"getEntryTeam","params":[{"name":"entry","type":"String","desc":"the entry to search for"}],"desc":"Gets a entries Team on this Scoreboard","ret":"the entries Team or null if the entry is not on a team"},{"name":"getTeam","params":[{"name":"teamName","type":"String","desc":"Team name"}],"desc":"Gets a Team by name on this Scoreboard","ret":"the matching Team or null if no matches"},{"name":"getTeams","params":[],"desc":"Gets all teams on this Scoreboard","ret":"an immutable set of Teams"},{"name":"registerNewTeam","params":[{"name":"name","type":"String","desc":"Team name"}],"desc":"Registers a Team on this Scoreboard","ret":"registered Team"},{"name":"getPlayers","params":[],"desc":"Gets all players tracked by this Scoreboard","ret":"immutable set of all tracked players"},{"name":"getEntries","params":[],"desc":"Gets all entries tracked by this Scoreboard","ret":"immutable set of all tracked entries"},{"name":"clearSlot","params":[{"name":"slot","type":"DisplaySlot","desc":"the slot to remove objectives"}],"desc":"Clears any objective in the specified slot.","ret":""},{"name":"getScoresFor","params":[{"name":"entity","type":"org.bukkit.entity.Entity","desc":"the entity whose scores are being retrieved"}],"desc":"Gets all scores for an entity on this Scoreboard","ret":"immutable set of all scores tracked for the entity"},{"name":"resetScoresFor","params":[{"name":"entity","type":"org.bukkit.entity.Entity","desc":"the entity to drop all current scores for"}],"desc":"Removes all scores for an entity on this Scoreboard","ret":""},{"name":"getEntityTeam","params":[{"name":"entity","type":"org.bukkit.entity.Entity","desc":"the entity to search for"}],"desc":"Gets an entity's Team on this Scoreboard","ret":"the entity's Team or null if the entity is not on a team"}],"desc":"A scoreboard"},{"FQCN":"org.bukkit.scoreboard.RenderType","methods":[],"desc":"Controls the way in which an {@link Objective} is rendered client side."},{"FQCN":"org.bukkit.scoreboard.NameTagVisibility","methods":[],"desc":""},{"FQCN":"org.bukkit.scoreboard.ScoreboardManager","methods":[{"name":"getMainScoreboard","params":[],"desc":"Gets the primary Scoreboard controlled by the server.\n<p>\nThis Scoreboard is saved by the server, is affected by the /scoreboard\ncommand, and is the scoreboard shown by default to players.","ret":"the default server scoreboard"},{"name":"getNewScoreboard","params":[],"desc":"Gets a new Scoreboard to be tracked by the server. This scoreboard will\nbe tracked as long as a reference is kept, either by a player or by a\nplugin.","ret":"the registered Scoreboard"}],"desc":"Manager of Scoreboards"},{"FQCN":"org.bukkit.scoreboard.Score","methods":[{"name":"getPlayer","params":[],"desc":"Gets the OfflinePlayer being tracked by this Score","ret":"this Score's tracked player"},{"name":"getEntry","params":[],"desc":"Gets the entry being tracked by this Score","ret":"this Score's tracked entry"},{"name":"getObjective","params":[],"desc":"Gets the Objective being tracked by this Score","ret":"this Score's tracked objective"},{"name":"getScore","params":[],"desc":"Gets the current score","ret":"the current score"},{"name":"setScore","params":[{"name":"score","type":"int","desc":"New score"}],"desc":"Sets the current score.","ret":""},{"name":"isScoreSet","params":[],"desc":"Shows if this score has been set at any point in time.","ret":"if this score has been set before"},{"name":"getScoreboard","params":[],"desc":"Gets the scoreboard for the associated objective.","ret":"the owning objective's scoreboard, or null if it has been\n    {@link Objective#unregister() unregistered}"},{"name":"resetScore","params":[],"desc":"Resets this score, if a value has been set.","ret":""},{"name":"isTriggerable","params":[],"desc":"Gets if this score is triggerable and cannot\nbe used by the {@code /trigger} command executed\nby the owner of this score.","ret":"true if triggerable, false if not triggerable, score isn't set, or the objective isn't {@link Criteria#TRIGGER}"},{"name":"setTriggerable","params":[{"name":"triggerable","type":"boolean","desc":"true to enable trigger, false to disable"}],"desc":"Sets if this score is triggerable and can\nbe used by the {@code /trigger} command\nexecuted by the owner of this score. Can\nonly be set on {@link Criteria#TRIGGER} objectives.\n<p>\nIf the score doesn't exist (aka {@link #isScoreSet()} returns false),\nthis will create the score with a 0 value.","ret":""},{"name":"customName","params":[],"desc":"Get the custom name for this entry.","ret":"the custom name or null if not set (or score isn't set)"},{"name":"customName","params":[{"name":"customName","type":"net.kyori.adventure.text.Component","desc":"the custom name or null to reset"}],"desc":"Sets the custom name for this entry.\n<p>\nIf the score doesn't exist (aka {@link #isScoreSet()} returns false),\nthis will create the score with a 0 value.","ret":""},{"name":"numberFormat","params":[],"desc":"Gets the number format for this score or null if the score has not been set yet\nor the objective's default is being used.","ret":"this score's number format, or null if the objective's default is used or the score doesn't exist"},{"name":"numberFormat","params":[{"name":"format","type":"io.papermc.paper.scoreboard.numbers.NumberFormat","desc":"the number format to set, pass null to reset format to default"}],"desc":"Sets the number format for this score. If this score has not been set yet {@link #isScoreSet()}, it will be created","ret":""}],"desc":"A score entry for an {@link #getEntry() entry} on an {@link\n#getObjective() objective}. Changing this will not affect any other\nobjective or scoreboard."},{"FQCN":"org.bukkit.scoreboard.Objective","methods":[{"name":"getName","params":[],"desc":"Gets the name of this Objective","ret":"this objective's name"},{"name":"displayName","params":[],"desc":"Gets the display name for this objective","ret":"this objective's display name"},{"name":"displayName","params":[{"name":"displayName","type":"net.kyori.adventure.text.Component","desc":"Display name to set"}],"desc":"Sets the name displayed to players for this objective.","ret":""},{"name":"getDisplayName","params":[],"desc":"Gets the name displayed to players for this objective","ret":"this objective's display name"},{"name":"setDisplayName","params":[{"name":"displayName","type":"String","desc":"Display name to set"}],"desc":"Sets the name displayed to players for this objective.","ret":""},{"name":"getCriteria","params":[],"desc":"Gets the criteria this objective tracks.","ret":"this objective's criteria"},{"name":"getTrackedCriteria","params":[],"desc":"Gets the criteria this objective tracks.","ret":"this objective's criteria"},{"name":"isModifiable","params":[],"desc":"Gets if the objective's scores can be modified directly by a plugin.","ret":"true if scores are modifiable"},{"name":"getScoreboard","params":[],"desc":"Gets the scoreboard to which this objective is attached.","ret":"Owning scoreboard, or null if it has been {@link #unregister()\n    unregistered}"},{"name":"unregister","params":[],"desc":"Unregisters this objective from the {@link Scoreboard scoreboard.}","ret":""},{"name":"setDisplaySlot","params":[{"name":"slot","type":"DisplaySlot","desc":"display slot to change, or null to not display"}],"desc":"Sets this objective to display on the specified slot for the\nscoreboard, removing it from any other display slot.","ret":""},{"name":"getDisplaySlot","params":[],"desc":"Gets the display slot this objective is displayed at.","ret":"the display slot for this objective, or null if not displayed"},{"name":"setRenderType","params":[{"name":"renderType","type":"RenderType","desc":"new render type"}],"desc":"Sets manner in which this objective will be rendered.","ret":""},{"name":"getRenderType","params":[],"desc":"Sets manner in which this objective will be rendered.","ret":"the render type"},{"name":"getScore","params":[{"name":"entry","type":"String","desc":"Entry for the Score"}],"desc":"Gets an entry's Score for an Objective on this Scoreboard.","ret":"Score tracking the Objective and entry specified"},{"name":"getScoreFor","params":[{"name":"entity","type":"org.bukkit.entity.Entity","desc":"Entity for the Score"}],"desc":"Gets an entity's Score for an Objective on this Scoreboard.","ret":"Score tracking the Objective and entity specified"},{"name":"willAutoUpdateDisplay","params":[],"desc":"Gets if this objective will auto update score\ndisplays on changes.","ret":"true if auto updating"},{"name":"setAutoUpdateDisplay","params":[{"name":"autoUpdateDisplay","type":"boolean","desc":"true to auto update"}],"desc":"Sets if this objective will auto update\nscore displays on changes.","ret":""},{"name":"numberFormat","params":[],"desc":"Gets the number format for this objective's scores or null if the client default is used.","ret":"this objective's number format, or null if the client default is used"},{"name":"numberFormat","params":[{"name":"format","type":"io.papermc.paper.scoreboard.numbers.NumberFormat","desc":"the number format to set, pass null to reset format to default"}],"desc":"Sets the number format for this objective's scores.","ret":""}],"desc":"An objective on a scoreboard that can show scores specific to entries. This\nobjective is only relevant to the display of the associated {@link\n#getScoreboard() scoreboard}."},{"FQCN":"org.bukkit.scoreboard.Criteria","methods":[{"name":"getName","params":[],"desc":"Get the name of this criteria (its unique id).","ret":"the name"},{"name":"isReadOnly","params":[],"desc":"Get whether or not this criteria is read only. If read only, scoreboards with this criteria\ncannot have their scores changed.","ret":"true if read only, false otherwise"},{"name":"getDefaultRenderType","params":[],"desc":"Get the {@link RenderType} used by default for this criteria.","ret":"the default render type"},{"name":"statistic","params":[{"name":"statistic","type":"Statistic","desc":"the statistic for which to get a criteria"},{"name":"material","type":"Material","desc":"the relevant material"}],"desc":"Get a {@link Criteria} for the specified statistic pertaining to blocks or items.\n<p>\nThis method expects a {@link Statistic} of {@link Type#BLOCK} or {@link Type#ITEM} and the\n{@link Material} matching said type (e.g. BLOCK statistics require materials where\n{@link Material#isBlock()} is true). This acts as a convenience to create more complex\ncompound criteria such as those that increment on block breaks, or item uses. An example\nwould be {@code Criteria.statistic(Statistic.CRAFT_ITEM, Material.STICK)}, returning a\nCriteria representing \"minecraft.crafted:minecraft.stick\" which will increment when the\nplayer crafts a stick.\n<p>\nIf the provided statistic does not require additional data, {@link #statistic(Statistic)}\nis called and returned instead.\n<p>\nThis method provides no guarantee that any given criteria exists on the vanilla server.","ret":"the criteria"},{"name":"statistic","params":[{"name":"statistic","type":"Statistic","desc":"the statistic for which to get a criteria"},{"name":"entityType","type":"EntityType","desc":"the relevant entity type"}],"desc":"Get a {@link Criteria} for the specified statistic pertaining to an entity type.\n<p>\nThis method expects a {@link Statistic} of {@link Type#ENTITY}. This acts as a convenience\nto create more complex compound criteria such as being killed by a specific entity type.\nAn example would be {@code Criteria.statistic(Statistic.KILL_ENTITY, EntityType.CREEPER)},\nreturning a Criteria representing \"minecraft.killed:minecraft.creeper\" which will increment\nwhen the player kills a creepers.\n<p>\nIf the provided statistic does not require additional data, {@link #statistic(Statistic)}\nis called and returned instead.\n<p>\nThis method provides no guarantee that any given criteria exists on the vanilla server.","ret":"the criteria"},{"name":"statistic","params":[{"name":"statistic","type":"Statistic","desc":"the statistic for which to get a criteria"}],"desc":"Get a {@link Criteria} for the specified statistic.\n<p>\nAn example would be {@code Criteria.statistic(Statistic.FLY_ONE_CM)}, returning a Criteria\nrepresenting \"minecraft.custom:minecraft.aviate_one_cm\" which will increment when the player\nflies with an elytra.\n<p>\nThis method provides no guarantee that any given criteria exists on the vanilla server. All\nstatistics are accepted, however some may not operate as expected if additional data is\nrequired. For block/item-related statistics, see {@link #statistic(Statistic, Material)},\nand for entity-related statistics, see {@link #statistic(Statistic, EntityType)}","ret":"the criteria"},{"name":"create","params":[{"name":"name","type":"String","desc":"the criteria name"}],"desc":"Get (or create) a new {@link Criteria} by its name.","ret":"the created criteria"}],"desc":"Represents a scoreboard criteria, either custom or built-in to the Minecraft server, used to\nkeep track of and manually or automatically change scores on a scoreboard.\n<p>\nWhile this class outlines constants for standard criteria, see {@link #statistic(Statistic)}\n(and its overloads) to create instances for statistically-backed criteria."},{"FQCN":"org.bukkit.conversations.PlayerNamePrompt","methods":[{"name":"acceptValidatedInput","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."},{"name":"input","type":"Player","desc":"The user's player name response."}],"desc":"Override this method to perform some action with the user's player name\nresponse.","ret":"The next {@link Prompt} in the prompt graph."}],"desc":"PlayerNamePrompt is the base class for any prompt that requires the player\nto enter another player's name."},{"FQCN":"org.bukkit.conversations.ConversationPrefix","methods":[{"name":"getPrefix","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."}],"desc":"Gets the prefix to use before each message to the player.","ret":"The prefix text."}],"desc":"A ConversationPrefix implementation prepends all output from the\nconversation to the player. The ConversationPrefix can be used to display\nthe plugin name or conversation status as the conversation evolves."},{"FQCN":"org.bukkit.conversations.ManuallyAbandonedConversationCanceller","methods":[],"desc":"The ManuallyAbandonedConversationCanceller is only used as part of a {@link\nConversationAbandonedEvent} to indicate that the conversation was manually\nabandoned by programmatically calling the abandon() method on it."},{"FQCN":"org.bukkit.conversations.PluginNameConversationPrefix","methods":[{"name":"getPrefix","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."}],"desc":"Prepends each conversation message with the plugin name.","ret":"An empty string."}],"desc":"PluginNameConversationPrefix is a {@link ConversationPrefix} implementation\nthat displays the plugin name in front of conversation output."},{"FQCN":"org.bukkit.conversations.RegexPrompt","methods":[],"desc":"RegexPrompt is the base class for any prompt that requires an input\nvalidated by a regular expression."},{"FQCN":"org.bukkit.conversations.ConversationFactory","methods":[{"name":"withModality","params":[{"name":"modal","type":"boolean","desc":"The modality of all conversations to be created."}],"desc":"Sets the modality of all {@link Conversation}s created by this factory.\nIf a conversation is modal, all messages directed to the player are\nsuppressed for the duration of the conversation.\n<p>\nThe default is True.","ret":"This object."},{"name":"withLocalEcho","params":[{"name":"localEchoEnabled","type":"boolean","desc":"The status of local echo."}],"desc":"Sets the local echo status for all {@link Conversation}s created by\nthis factory. If local echo is enabled, any text submitted to a\nconversation gets echoed back into the submitter's chat window.","ret":"This object."},{"name":"withPrefix","params":[{"name":"prefix","type":"ConversationPrefix","desc":"The ConversationPrefix to use."}],"desc":"Sets the {@link ConversationPrefix} that prepends all output from all\ngenerated conversations.\n<p>\nThe default is a {@link NullConversationPrefix};","ret":"This object."},{"name":"withTimeout","params":[{"name":"timeoutSeconds","type":"int","desc":"The number of seconds to wait."}],"desc":"Sets the number of inactive seconds to wait before automatically\nabandoning all generated conversations.\n<p>\nThe default is 600 seconds (5 minutes).","ret":"This object."},{"name":"withFirstPrompt","params":[{"name":"firstPrompt","type":"Prompt","desc":"The first prompt."}],"desc":"Sets the first prompt to use in all generated conversations.\n<p>\nThe default is Prompt.END_OF_CONVERSATION.","ret":"This object."},{"name":"withInitialSessionData","params":[{"name":"initialSessionData","type":"Map<Object,Object>","desc":"The conversation context's initial\n    sessionData."}],"desc":"Sets any initial data with which to populate the conversation context\nsessionData map.","ret":"This object."},{"name":"withEscapeSequence","params":[{"name":"escapeSequence","type":"String","desc":"Input to terminate the conversation."}],"desc":"Sets the player input that, when received, will immediately terminate\nthe conversation.","ret":"This object."},{"name":"withConversationCanceller","params":[{"name":"canceller","type":"ConversationCanceller","desc":"The {@link ConversationCanceller} to add."}],"desc":"Adds a {@link ConversationCanceller} to constructed conversations.","ret":"This object."},{"name":"thatExcludesNonPlayersWithMessage","params":[{"name":"playerOnlyMessage","type":"String","desc":"The message to return to a non-play in lieu of\n    starting a conversation."}],"desc":"Prevents this factory from creating a conversation for non-player\n{@link Conversable} objects.","ret":"This object."},{"name":"addConversationAbandonedListener","params":[{"name":"listener","type":"ConversationAbandonedListener","desc":"The listener to add."}],"desc":"Adds a {@link ConversationAbandonedListener} to all conversations\nconstructed by this factory.","ret":"This object."},{"name":"buildConversation","params":[{"name":"forWhom","type":"Conversable","desc":"The entity for whom the new conversation is mediating."}],"desc":"Constructs a {@link Conversation} in accordance with the defaults set\nfor this factory.","ret":"A new conversation."}],"desc":"A ConversationFactory is responsible for creating a {@link Conversation}\nfrom a predefined template. A ConversationFactory is typically created when\na plugin is instantiated and builds a Conversation each time a user\ninitiates a conversation with the plugin. Each Conversation maintains its\nown state and calls back as needed into the plugin.\n<p>\nThe ConversationFactory implements a fluid API, allowing parameters to be\nset as an extension to the constructor."},{"FQCN":"org.bukkit.conversations.StringPrompt","methods":[{"name":"blocksForInput","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."}],"desc":"Ensures that the prompt waits for the user to provide input.","ret":"True."}],"desc":"StringPrompt is the base class for any prompt that accepts an arbitrary\nstring from the user."},{"FQCN":"org.bukkit.conversations.NumericPrompt","methods":[{"name":"isNumberValid","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."},{"name":"input","type":"Number","desc":"The number the player provided."}],"desc":"Override this method to do further validation on the numeric player\ninput after the input has been determined to actually be a number.","ret":"The validity of the player's input."},{"name":"acceptValidatedInput","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."},{"name":"input","type":"Number","desc":"The user's response as a {@link Number}."}],"desc":"Override this method to perform some action with the user's integer\nresponse.","ret":"The next {@link Prompt} in the prompt graph."},{"name":"getInputNotNumericText","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."},{"name":"invalidInput","type":"String","desc":"The invalid input provided by the user."}],"desc":"Optionally override this method to display an additional message if the\nuser enters an invalid number.","ret":"A message explaining how to correct the input."},{"name":"getFailedValidationText","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."},{"name":"invalidInput","type":"Number","desc":"The invalid input provided by the user."}],"desc":"Optionally override this method to display an additional message if the\nuser enters an invalid numeric input.","ret":"A message explaining how to correct the input."}],"desc":"NumericPrompt is the base class for any prompt that requires a {@link\nNumber} response from the user."},{"FQCN":"org.bukkit.conversations.ConversationContext","methods":[{"name":"getPlugin","params":[],"desc":"Gets the plugin that owns this conversation.","ret":"The owning plugin."},{"name":"getForWhom","params":[],"desc":"Gets the subject of the conversation.","ret":"The subject of the conversation."},{"name":"getAllSessionData","params":[],"desc":"Gets the underlying sessionData map.\n\nMay be directly modified to manipulate session data.","ret":"The full sessionData map."},{"name":"getSessionData","params":[{"name":"key","type":"Object","desc":"The session data key."}],"desc":"Gets session data shared between all {@link Prompt} invocations. Use\nthis as a way to pass data through each Prompt as the conversation\ndevelops.","ret":"The requested session data."},{"name":"setSessionData","params":[{"name":"key","type":"Object","desc":"The session data key."},{"name":"value","type":"Object","desc":"The session data value."}],"desc":"Sets session data shared between all {@link Prompt} invocations. Use\nthis as a way to pass data through each prompt as the conversation\ndevelops.","ret":""}],"desc":"A ConversationContext provides continuity between nodes in the prompt graph\nby giving the developer access to the subject of the conversation and a\ngeneric map for storing values that are shared between all {@link Prompt}\ninvocations."},{"FQCN":"org.bukkit.conversations.ValidatingPrompt","methods":[{"name":"acceptInput","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."},{"name":"input","type":"String","desc":"The input text from the user."}],"desc":"Accepts and processes input from the user and validates it. If\nvalidation fails, this prompt is returned for re-execution, otherwise\nthe next Prompt in the prompt graph is returned.","ret":"This prompt or the next Prompt in the prompt graph."},{"name":"blocksForInput","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."}],"desc":"Ensures that the prompt waits for the user to provide input.","ret":"True."},{"name":"isInputValid","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."},{"name":"input","type":"String","desc":"The player's raw console input."}],"desc":"Override this method to check the validity of the player's input.","ret":"True or false depending on the validity of the input."},{"name":"acceptValidatedInput","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."},{"name":"input","type":"String","desc":"The validated input text from the user."}],"desc":"Override this method to accept and processes the validated input from\nthe user. Using the input, the next Prompt in the prompt graph should\nbe returned.","ret":"The next Prompt in the prompt graph."},{"name":"getFailedValidationText","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."},{"name":"invalidInput","type":"String","desc":"The invalid input provided by the user."}],"desc":"Optionally override this method to display an additional message if the\nuser enters an invalid input.","ret":"A message explaining how to correct the input."}],"desc":"ValidatingPrompt is the base class for any prompt that requires validation.\nValidatingPrompt will keep replaying the prompt text until the user enters\na valid response."},{"FQCN":"org.bukkit.conversations.BooleanPrompt","methods":[{"name":"acceptValidatedInput","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."},{"name":"input","type":"boolean","desc":"The user's boolean response."}],"desc":"Override this method to perform some action with the user's boolean\nresponse.","ret":"The next {@link Prompt} in the prompt graph."}],"desc":"BooleanPrompt is the base class for any prompt that requires a boolean\nresponse from the user."},{"FQCN":"org.bukkit.conversations.FixedSetPrompt","methods":[{"name":"formatFixedSet","params":[],"desc":"Utility function to create a formatted string containing all the\noptions declared in the constructor.","ret":"the options formatted like \"[bar, cheese, panda]\" if bar,\n    cheese, and panda were the options used"}],"desc":"FixedSetPrompt is the base class for any prompt that requires a fixed set\nresponse from the user."},{"FQCN":"org.bukkit.conversations.MessagePrompt","methods":[{"name":"blocksForInput","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."}],"desc":"Message prompts never wait for user input before continuing.","ret":"Always false."},{"name":"acceptInput","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."},{"name":"input","type":"String","desc":"Ignored."}],"desc":"Accepts and ignores any user input, returning the next prompt in the\nprompt graph instead.","ret":"The next prompt in the prompt graph."},{"name":"getNextPrompt","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."}],"desc":"Override this method to return the next prompt in the prompt graph.","ret":"The next prompt in the prompt graph."}],"desc":"MessagePrompt is the base class for any prompt that only displays a message\nto the user and requires no input."},{"FQCN":"org.bukkit.conversations.Conversable","methods":[{"name":"isConversing","params":[],"desc":"Tests to see of a Conversable object is actively engaged in a\nconversation.","ret":"True if a conversation is in progress"},{"name":"acceptConversationInput","params":[{"name":"input","type":"String","desc":"The input message into the conversation"}],"desc":"Accepts input into the active conversation. If no conversation is in\nprogress, this method does nothing.","ret":""},{"name":"beginConversation","params":[{"name":"conversation","type":"Conversation","desc":"The conversation to begin"}],"desc":"Enters into a dialog with a Conversation object.","ret":"True if the conversation should proceed, false if it has been\n    enqueued"},{"name":"abandonConversation","params":[{"name":"conversation","type":"Conversation","desc":"The conversation to abandon"}],"desc":"Abandons an active conversation.","ret":""},{"name":"abandonConversation","params":[{"name":"conversation","type":"Conversation","desc":"The conversation to abandon"},{"name":"details","type":"ConversationAbandonedEvent","desc":"Details about why the conversation was abandoned"}],"desc":"Abandons an active conversation.","ret":""},{"name":"sendRawMessage","params":[{"name":"message","type":"String","desc":"Message to be displayed"}],"desc":"Sends this sender a message raw","ret":""},{"name":"sendRawMessage","params":[{"name":"sender","type":"UUID","desc":"The sender of this message"},{"name":"message","type":"String","desc":"Message to be displayed"}],"desc":"Sends this sender a message raw","ret":""}],"desc":"The Conversable interface is used to indicate objects that can have\nconversations."},{"FQCN":"org.bukkit.conversations.ExactMatchConversationCanceller","methods":[],"desc":"An ExactMatchConversationCanceller cancels a conversation if the user\nenters an exact input string"},{"FQCN":"org.bukkit.conversations.Conversation","methods":[{"name":"getForWhom","params":[],"desc":"Gets the entity for whom this conversation is mediating.","ret":"The entity."},{"name":"isModal","params":[],"desc":"Gets the modality of this conversation. If a conversation is modal, all\nmessages directed to the player are suppressed for the duration of the\nconversation.","ret":"The conversation modality."},{"name":"setModal","params":[{"name":"modal","type":"boolean","desc":"The new conversation modality."}],"desc":"Sets the modality of this conversation.  If a conversation is modal,\nall messages directed to the player are suppressed for the duration of\nthe conversation.","ret":""},{"name":"isLocalEchoEnabled","params":[],"desc":"Gets the status of local echo for this conversation. If local echo is\nenabled, any text submitted to a conversation gets echoed back into the\nsubmitter's chat window.","ret":"The status of local echo."},{"name":"setLocalEchoEnabled","params":[{"name":"localEchoEnabled","type":"boolean","desc":"The status of local echo."}],"desc":"Sets the status of local echo for this conversation. If local echo is\nenabled, any text submitted to a conversation gets echoed back into the\nsubmitter's chat window.","ret":""},{"name":"getPrefix","params":[],"desc":"Gets the {@link ConversationPrefix} that prepends all output from this\nconversation.","ret":"The ConversationPrefix in use."},{"name":"setPrefix","params":[{"name":"prefix","type":"ConversationPrefix","desc":"The ConversationPrefix to use."}],"desc":"Sets the {@link ConversationPrefix} that prepends all output from this\nconversation.","ret":""},{"name":"addConversationCanceller","params":[{"name":"canceller","type":"ConversationCanceller","desc":"The {@link ConversationCanceller} to add."}],"desc":"Adds a {@link ConversationCanceller} to the cancellers collection.","ret":""},{"name":"getCancellers","params":[],"desc":"Gets the list of {@link ConversationCanceller}s","ret":"The list."},{"name":"getContext","params":[],"desc":"Returns the Conversation's {@link ConversationContext}.","ret":"The ConversationContext."},{"name":"begin","params":[],"desc":"Displays the first prompt of this conversation and begins redirecting\nthe user's chat responses.","ret":""},{"name":"getState","params":[],"desc":"Returns Returns the current state of the conversation.","ret":"The current state of the conversation."},{"name":"acceptInput","params":[{"name":"input","type":"String","desc":"The user's chat text."}],"desc":"Passes player input into the current prompt. The next prompt (as\ndetermined by the current prompt) is then displayed to the user.","ret":""},{"name":"addConversationAbandonedListener","params":[{"name":"listener","type":"ConversationAbandonedListener","desc":"The listener to add."}],"desc":"Adds a {@link ConversationAbandonedListener}.","ret":""},{"name":"removeConversationAbandonedListener","params":[{"name":"listener","type":"ConversationAbandonedListener","desc":"The listener to remove."}],"desc":"Removes a {@link ConversationAbandonedListener}.","ret":""},{"name":"abandon","params":[],"desc":"Abandons and resets the current conversation. Restores the user's\nnormal chat behavior.","ret":""},{"name":"abandon","params":[{"name":"details","type":"ConversationAbandonedEvent","desc":"Details about why the conversation was abandoned"}],"desc":"Abandons and resets the current conversation. Restores the user's\nnormal chat behavior.","ret":""},{"name":"outputNextPrompt","params":[],"desc":"Displays the next user prompt and abandons the conversation if the next\nprompt is null.","ret":""}],"desc":"The Conversation class is responsible for tracking the current state of a\nconversation, displaying prompts to the user, and dispatching the user's\nresponse to the appropriate place. Conversation objects are not typically\ninstantiated directly. Instead a {@link ConversationFactory} is used to\nconstruct identical conversations on demand.\n<p>\nConversation flow consists of a directed graph of {@link Prompt} objects.\nEach time a prompt gets input from the user, it must return the next prompt\nin the graph. Since each Prompt chooses the next Prompt, complex\nconversation trees can be implemented where the nature of the player's\nresponse directs the flow of the conversation.\n<p>\nEach conversation has a {@link ConversationPrefix} that prepends all output\nfrom the conversation to the player. The ConversationPrefix can be used to\ndisplay the plugin name or conversation status as the conversation evolves.\n<p>\nEach conversation has a timeout measured in the number of inactive seconds\nto wait before abandoning the conversation. If the inactivity timeout is\nreached, the conversation is abandoned and the user's incoming and outgoing\nchat is returned to normal.\n<p>\nYou should not construct a conversation manually. Instead, use the {@link\nConversationFactory} for access to all available options."},{"FQCN":"org.bukkit.conversations.Prompt","methods":[{"name":"getPromptText","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."}],"desc":"Gets the text to display to the user when this prompt is first\npresented.","ret":"The text to display."},{"name":"blocksForInput","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."}],"desc":"Checks to see if this prompt implementation should wait for user input\nor immediately display the next prompt.","ret":"If true, the {@link Conversation} will wait for input before\n    continuing. If false, {@link #acceptInput(ConversationContext, String)} will be called immediately with {@code null} input."},{"name":"acceptInput","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."},{"name":"input","type":"String","desc":"The input text from the user."}],"desc":"Accepts and processes input from the user. Using the input, the next\nPrompt in the prompt graph is returned.","ret":"The next Prompt in the prompt graph."}],"desc":"A Prompt is the main constituent of a {@link Conversation}. Each prompt\ndisplays text to the user and optionally waits for a user's response.\nPrompts are chained together into a directed graph that represents the\nconversation flow. To halt a conversation, END_OF_CONVERSATION is returned\nin liu of another Prompt object."},{"FQCN":"org.bukkit.conversations.ConversationCanceller","methods":[{"name":"setConversation","params":[{"name":"conversation","type":"Conversation","desc":"A conversation."}],"desc":"Sets the conversation this ConversationCanceller can optionally cancel.","ret":""},{"name":"cancelBasedOnInput","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."},{"name":"input","type":"String","desc":"The input text from the user."}],"desc":"Cancels a conversation based on user input.","ret":"True to cancel the conversation, False otherwise."},{"name":"clone","params":[],"desc":"Allows the {@link ConversationFactory} to duplicate this\nConversationCanceller when creating a new {@link Conversation}.\n<p>\nImplementing this method should reset any internal object state.","ret":"A clone."}],"desc":"A ConversationCanceller is a class that cancels an active {@link\nConversation}. A Conversation can have more than one ConversationCanceller."},{"FQCN":"org.bukkit.conversations.ConversationAbandonedListener","methods":[{"name":"conversationAbandoned","params":[{"name":"abandonedEvent","type":"ConversationAbandonedEvent","desc":"Contains details about the abandoned\n    conversation."}],"desc":"Called whenever a {@link Conversation} is abandoned.","ret":""}],"desc":""},{"FQCN":"org.bukkit.conversations.NullConversationPrefix","methods":[{"name":"getPrefix","params":[{"name":"context","type":"ConversationContext","desc":"Context information about the conversation."}],"desc":"Prepends each conversation message with an empty string.","ret":"An empty string."}],"desc":"NullConversationPrefix is a {@link ConversationPrefix} implementation that\ndisplays nothing in front of conversation output."},{"FQCN":"org.bukkit.conversations.ConversationAbandonedEvent","methods":[{"name":"getCanceller","params":[],"desc":"Gets the object that caused the conversation to be abandoned.","ret":"The object that abandoned the conversation."},{"name":"getContext","params":[],"desc":"Gets the abandoned conversation's conversation context.","ret":"The abandoned conversation's conversation context."},{"name":"gracefulExit","params":[],"desc":"Indicates how the conversation was abandoned - naturally as part of the\nprompt chain or prematurely via a {@link ConversationCanceller}.","ret":"True if the conversation is abandoned gracefully by a {@link\n    Prompt} returning null or the next prompt. False of the\n    conversations is abandoned prematurely by a ConversationCanceller."}],"desc":"ConversationAbandonedEvent contains information about an abandoned\nconversation."},{"FQCN":"org.bukkit.conversations.InactivityConversationCanceller","methods":[{"name":"startTimer","params":[],"desc":"Starts an inactivity timer.","ret":""},{"name":"stopTimer","params":[],"desc":"Stops the active inactivity timer.","ret":""},{"name":"cancelling","params":[{"name":"conversation","type":"Conversation","desc":"The conversation being abandoned."}],"desc":"Subclasses of InactivityConversationCanceller can override this method\nto take additional actions when the inactivity timer abandons the\nconversation.","ret":""}],"desc":"An InactivityConversationCanceller will cancel a {@link Conversation} after\na period of inactivity by the user."},{"FQCN":"org.bukkit.RegionAccessor","methods":[{"name":"getBiome","params":[{"name":"location","type":"Location","desc":"the location of the biome"}],"desc":"Gets the {@link Biome} at the given {@link Location}.","ret":"Biome at the given location"},{"name":"getBiome","params":[{"name":"x","type":"int","desc":"X-coordinate of the block"},{"name":"y","type":"int","desc":"Y-coordinate of the block"},{"name":"z","type":"int","desc":"Z-coordinate of the block"}],"desc":"Gets the {@link Biome} at the given coordinates.","ret":"Biome at the given coordinates"},{"name":"getComputedBiome","params":[{"name":"x","type":"int","desc":"X-coordinate of the block"},{"name":"y","type":"int","desc":"Y-coordinate of the block"},{"name":"z","type":"int","desc":"Z-coordinate of the block"}],"desc":"Gets the computed {@link Biome} at the given coordinates.\n\n<p>The computed Biome is the Biome as seen by clients for rendering\npurposes and in the \"F3\" debug menu. This is computed by looking at the noise biome\nat this and surrounding quarts and applying complex math operations.</p>\n\n<p>Most other Biome-related methods named getBiome, setBiome, and similar\noperate on the \"noise biome\", which is stored per-quart, or in other words,\n1 Biome per 4x4x4 block region. This is how Biomes are currently generated and\nstored on disk.</p>","ret":"Biome at the given coordinates"},{"name":"setBiome","params":[{"name":"location","type":"Location","desc":"the location of the biome"},{"name":"biome","type":"Biome","desc":"New Biome type for this block"}],"desc":"Sets the {@link Biome} at the given {@link Location}.","ret":""},{"name":"setBiome","params":[{"name":"x","type":"int","desc":"X-coordinate of the block"},{"name":"y","type":"int","desc":"Y-coordinate of the block"},{"name":"z","type":"int","desc":"Z-coordinate of the block"},{"name":"biome","type":"Biome","desc":"New Biome type for this block"}],"desc":"Sets the {@link Biome} for the given block coordinates","ret":""},{"name":"getBlockState","params":[{"name":"location","type":"Location","desc":"The location of the block state"}],"desc":"Gets the {@link BlockState} at the given {@link Location}.","ret":"Block state at the given location"},{"name":"getBlockState","params":[{"name":"x","type":"int","desc":"X-coordinate of the block state"},{"name":"y","type":"int","desc":"Y-coordinate of the block state"},{"name":"z","type":"int","desc":"Z-coordinate of the block state"}],"desc":"Gets the {@link BlockState} at the given coordinates.","ret":"Block state at the given coordinates"},{"name":"getFluidData","params":[{"name":"x","type":"int","desc":"The x-coordinate of the position"},{"name":"y","type":"int","desc":"The y-coordinate of the position"},{"name":"z","type":"int","desc":"The z-coordinate of the position"}],"desc":"Gets the {@link io.papermc.paper.block.fluid.FluidData} at the specified position.","ret":"The {@link io.papermc.paper.block.fluid.FluidData} at the specified position"},{"name":"getFluidData","params":[{"name":"position","type":"io.papermc.paper.math.Position","desc":"The position of the fluid"}],"desc":"Gets the {@link io.papermc.paper.block.fluid.FluidData} at the given position","ret":"The fluid data at the given position"},{"name":"getFluidData","params":[{"name":"location","type":"Location","desc":"The location of the fluid"}],"desc":"Gets the {@link io.papermc.paper.block.fluid.FluidData} at the given position","ret":"The fluid data at the given position"},{"name":"getBlockData","params":[{"name":"location","type":"Location","desc":"The location of the block data"}],"desc":"Gets the {@link BlockData} at the given {@link Location}.","ret":"Block data at the given location"},{"name":"getBlockData","params":[{"name":"x","type":"int","desc":"X-coordinate of the block data"},{"name":"y","type":"int","desc":"Y-coordinate of the block data"},{"name":"z","type":"int","desc":"Z-coordinate of the block data"}],"desc":"Gets the {@link BlockData} at the given coordinates.","ret":"Block data at the given coordinates"},{"name":"getType","params":[{"name":"location","type":"Location","desc":"The location of the block"}],"desc":"Gets the type of the block at the given {@link Location}.","ret":"Material at the given coordinates"},{"name":"getType","params":[{"name":"x","type":"int","desc":"X-coordinate of the block"},{"name":"y","type":"int","desc":"Y-coordinate of the block"},{"name":"z","type":"int","desc":"Z-coordinate of the block"}],"desc":"Gets the type of the block at the given coordinates.","ret":"Material at the given coordinates"},{"name":"setBlockData","params":[{"name":"location","type":"Location","desc":"The location of the block"},{"name":"blockData","type":"BlockData","desc":"The block data to set the block to"}],"desc":"Sets the {@link BlockData} at the given {@link Location}.","ret":""},{"name":"setBlockData","params":[{"name":"x","type":"int","desc":"X-coordinate of the block"},{"name":"y","type":"int","desc":"Y-coordinate of the block"},{"name":"z","type":"int","desc":"Z-coordinate of the block"},{"name":"blockData","type":"BlockData","desc":"The block data to set the block to"}],"desc":"Sets the {@link BlockData} at the given coordinates.","ret":""},{"name":"setType","params":[{"name":"location","type":"Location","desc":"The location of the block"},{"name":"material","type":"Material","desc":"The type to set the block to"}],"desc":"Sets the {@link Material} at the given {@link Location}.","ret":""},{"name":"setType","params":[{"name":"x","type":"int","desc":"X-coordinate of the block"},{"name":"y","type":"int","desc":"Y-coordinate of the block"},{"name":"z","type":"int","desc":"Z-coordinate of the block"},{"name":"material","type":"Material","desc":"The type to set the block to"}],"desc":"Sets the {@link Material} at the given coordinates.","ret":""},{"name":"generateTree","params":[{"name":"location","type":"Location","desc":"Location to spawn the tree"},{"name":"random","type":"Random","desc":"Random to use to generate the tree"},{"name":"type","type":"TreeType","desc":"Type of the tree to create"}],"desc":"Creates a tree at the given {@link Location}","ret":"true if the tree was created successfully, otherwise false"},{"name":"generateTree","params":[{"name":"location","type":"Location","desc":"Location to spawn the tree"},{"name":"random","type":"Random","desc":"Random to use to generate the tree"},{"name":"type","type":"TreeType","desc":"Type of the tree to create"},{"name":"stateConsumer","type":"Consumer<? super BlockState>","desc":"The consumer which should get called for every block which gets changed"}],"desc":"Creates a tree at the given {@link Location}\n<p>\nThe provided consumer gets called for every block which gets changed\nas a result of the tree generation. When the consumer gets called no\nmodifications to the world are done yet. Which means, that calling\n{@link #getBlockState(Location)} in the consumer will return the state\nof the block before the generation.\n<p>\nModifications done to the {@link BlockState} in the consumer are respected,\nwhich means that it is not necessary to call {@link BlockState#update()}","ret":"true if the tree was created successfully, otherwise false"},{"name":"generateTree","params":[{"name":"location","type":"Location","desc":"Location to spawn the tree"},{"name":"random","type":"Random","desc":"Random to use to generate the tree"},{"name":"type","type":"TreeType","desc":"Type of the tree to create"},{"name":"statePredicate","type":"Predicate<? super BlockState>","desc":"The predicate which should get used to test if a block should be set or not."}],"desc":"Creates a tree at the given {@link Location}\n<p>\nThe provided predicate gets called for every block which gets changed\nas a result of the tree generation. When the predicate gets called no\nmodifications to the world are done yet. Which means, that calling\n{@link #getBlockState(Location)} in the predicate will return the state\nof the block before the generation.\n<p>\nIf the predicate returns {@code true} the block gets set in the world.\nIf it returns {@code false} the block won't get set in the world.","ret":"true if the tree was created successfully, otherwise false"},{"name":"spawnEntity","params":[{"name":"location","type":"Location","desc":"The location to spawn the entity"},{"name":"type","type":"EntityType","desc":"The entity to spawn"}],"desc":"Creates a entity at the given {@link Location}","ret":"Resulting Entity of this method"},{"name":"spawnEntity","params":[{"name":"loc","type":"Location","desc":"the location at which the entity will be spawned."},{"name":"type","type":"EntityType","desc":"the entity type that determines the entity to spawn."},{"name":"randomizeData","type":"boolean","desc":"whether or not the entity's data should be randomised\n                     before spawning. By default entities are randomised\n                     before spawning in regards to their equipment, age,\n                     attributes, etc.\n                     An example of this randomization would be the color of\n                     a sheep, random enchantments on the equipment of mobs\n                     or even a zombie becoming a chicken jockey.\n                     If set to false, the entity will not be randomised\n                     before spawning, meaning all their data will remain\n                     in their default state and not further modifications\n                     to the entity will be made.\n                     Notably only entities that extend the\n                     {@link org.bukkit.entity.Mob} interface provide\n                     randomisation logic for their spawn.\n                     This parameter is hence useless for any other type\n                     of entity."}],"desc":"Creates a new entity at the given {@link Location}.","ret":"the spawned entity instance."},{"name":"getEntities","params":[],"desc":"Get a list of all entities in this RegionAccessor","ret":"A List of all Entities currently residing in this world accessor"},{"name":"getLivingEntities","params":[],"desc":"Get a list of all living entities in this RegionAccessor","ret":"A List of all LivingEntities currently residing in this world accessor"},{"name":"getEntitiesByClass","params":[{"name":"cls","type":"Class<T>","desc":"The class representing the type of entity to match"}],"desc":"Get a collection of all entities in this RegionAccessor matching the given\nclass/interface","ret":"A List of all Entities currently residing in this world accessor\n    that match the given class/interface"},{"name":"getEntitiesByClasses","params":[{"name":"classes","type":"Class<?>","desc":"The classes representing the types of entity to match"}],"desc":"Get a collection of all entities in this RegionAccessor matching any of the\ngiven classes/interfaces","ret":"A List of all Entities currently residing in this world accessor\n    that match one or more of the given classes/interfaces"},{"name":"createEntity","params":[{"name":"location","type":"Location","desc":"the {@link Location} to create the entity at"},{"name":"clazz","type":"Class<T>","desc":"the class of the {@link Entity} to spawn"}],"desc":"Creates an entity of a specific class at the given {@link Location} but\ndoes not spawn it in the world.\n<p>\n<b>Note:</b> The created entity keeps a reference to the world it was\ncreated in, care should be taken that the entity does not outlive the\nworld instance as this will lead to memory leaks.","ret":"an instance of the created {@link Entity}"},{"name":"spawn","params":[{"name":"location","type":"Location","desc":"the {@link Location} to spawn the entity at"},{"name":"clazz","type":"Class<T>","desc":"the class of the {@link Entity} to spawn"}],"desc":"Spawn an entity of a specific class at the given {@link Location}","ret":"an instance of the spawned {@link Entity}"},{"name":"spawn","params":[{"name":"location","type":"Location","desc":"the location at which the entity will be spawned."},{"name":"clazz","type":"Class<T>","desc":"the class of the {@link Entity} that is to be spawned."},{"name":"randomizeData","type":"boolean","desc":"whether or not the entity's data should be randomised\n                     before spawning. By default entities are randomised\n                     before spawning in regards to their equipment, age,\n                     attributes, etc.\n                     An example of this randomization would be the color of\n                     a sheep, random enchantments on the equipment of mobs\n                     or even a zombie becoming a chicken jockey.\n                     If set to false, the entity will not be randomised\n                     before spawning, meaning all their data will remain\n                     in their default state and not further modifications\n                     to the entity will be made.\n                     Notably only entities that extend the\n                     {@link org.bukkit.entity.Mob} interface provide\n                     randomisation logic for their spawn.\n                     This parameter is hence useless for any other type\n                     of entity."},{"name":"function","type":"Consumer<? super T>","desc":"the function to be run before the entity is spawned."}],"desc":"Creates a new entity at the given {@link Location} with the supplied\nfunction run before the entity is added to the world.\n<br>\nNote that when the function is run, the entity will not be actually in\nthe world. Any operation involving such as teleporting the entity is undefined\nuntil after this function returns.\nThe passed function however is run after the potential entity's spawn\nrandomization and hence already allows access to the values of the mob,\nwhether or not those were randomized, such as attributes or the entity\nequipment.","ret":"the spawned entity instance."},{"name":"getHighestBlockYAt","params":[{"name":"x","type":"int","desc":"X-coordinate of the blocks"},{"name":"z","type":"int","desc":"Z-coordinate of the blocks"}],"desc":"Gets the highest non-empty (impassable) coordinate at the given\ncoordinates.","ret":"Y-coordinate of the highest non-empty block"},{"name":"getHighestBlockYAt","params":[{"name":"location","type":"Location","desc":"Location of the blocks"}],"desc":"Gets the highest non-empty (impassable) coordinate at the given\n{@link Location}.","ret":"Y-coordinate of the highest non-empty block"},{"name":"getHighestBlockYAt","params":[{"name":"x","type":"int","desc":"X-coordinate of the blocks"},{"name":"z","type":"int","desc":"Z-coordinate of the blocks"},{"name":"heightMap","type":"HeightMap","desc":"the heightMap that is used to determine the highest\npoint"}],"desc":"Gets the highest coordinate corresponding to the {@link HeightMap} at the\ngiven coordinates.","ret":"Y-coordinate of the highest block corresponding to the\n{@link HeightMap}"},{"name":"getHighestBlockYAt","params":[{"name":"location","type":"Location","desc":"Location of the blocks"},{"name":"heightMap","type":"HeightMap","desc":"the heightMap that is used to determine the highest\npoint"}],"desc":"Gets the highest coordinate corresponding to the {@link HeightMap} at the\ngiven {@link Location}.","ret":"Y-coordinate of the highest block corresponding to the\n{@link HeightMap}"},{"name":"addEntity","params":[{"name":"entity","type":"T","desc":"the entity to add"}],"desc":"Spawns a previously created entity in the world. <br>\nThe provided entity must not have already been spawned in a world.","ret":"the entity now in the world"},{"name":"getMoonPhase","params":[],"desc":"","ret":"the current moon phase at the current time in the world"},{"name":"getKey","params":[],"desc":"Get the world's key","ret":"the world's key"},{"name":"lineOfSightExists","params":[{"name":"from","type":"Location","desc":"Location to start at"},{"name":"to","type":"Location","desc":"target Location"}],"desc":"Tell whether a line of sight exists between the given locations","ret":"whether a line of sight exists between {@code from} and {@code to}"},{"name":"hasCollisionsIn","params":[{"name":"boundingBox","type":"org.bukkit.util.BoundingBox","desc":"the box to check collisions in"}],"desc":"Checks if the world collides with the given boundingbox.\nThis will check for any colliding hard entities (boats, shulkers) / worldborder / blocks.\nDoes not load chunks that are within the bounding box.","ret":"collides or not"}],"desc":"A RegionAccessor gives access to getting, modifying and spawning {@link Biome}, {@link BlockState} and {@link Entity},\nas well as generating some basic structures."},{"FQCN":"org.bukkit.Keyed","methods":[{"name":"getKey","params":[],"desc":"Return the namespaced identifier for this object.","ret":"this object's key"},{"name":"key","params":[],"desc":"Returns the unique identifier for this object.","ret":"this object's key"}],"desc":"Represents an object which has a {@link NamespacedKey} attached to it."},{"FQCN":"org.bukkit.inventory.JukeboxInventory","methods":[{"name":"setRecord","params":[{"name":"item","type":"ItemStack","desc":"the new record"}],"desc":"Set the record in the jukebox.\n<p>\nThis will immediately start playing the inserted item or stop playing if the\nitem provided is null. If the provided item is not a record (according to\n{@link Tag#ITEMS_MUSIC_DISCS}), this method will do nothing and not set the\nitem in the inventory.","ret":""},{"name":"getRecord","params":[],"desc":"Get the record in the jukebox.","ret":"the current record"}],"desc":"Interface to the inventory of a Jukebox."},{"FQCN":"org.bukkit.inventory.ChiseledBookshelfInventory","methods":[],"desc":"Interface to the inventory of a chiseled bookshelf."},{"FQCN":"org.bukkit.inventory.MerchantRecipe","methods":[{"name":"getAdjustedIngredient1","params":[],"desc":"Gets the {@link #adjust(ItemStack) adjusted} first ingredient.","ret":"the adjusted first ingredient, or <code>null</code> if this\nrecipe has no ingredients"},{"name":"adjust","params":[{"name":"itemStack","type":"ItemStack","desc":"the item to adjust"}],"desc":"Modifies the amount of the given {@link ItemStack} in the same way as\nMerchantRecipe dynamically adjusts the amount of the first ingredient\nduring trading.\n<br>\nThis is calculated by adding up the original amount of the item, the\ndemand scaled by the recipe's\n{@link #getPriceMultiplier price multiplier} and truncated to the next\nlowest integer value greater than or equal to 0, and the special price,\nand then constraining the resulting value between <code>1</code> and the\n{@link ItemStack}'s {@link ItemStack#getMaxStackSize()\nmaximum stack size}.","ret":""},{"name":"getDemand","params":[],"desc":"Get the demand for this trade.","ret":"the demand"},{"name":"setDemand","params":[{"name":"demand","type":"int","desc":"the new demand"}],"desc":"Set the demand for this trade.","ret":""},{"name":"getSpecialPrice","params":[],"desc":"Get the special price for this trade.","ret":"special price value"},{"name":"setSpecialPrice","params":[{"name":"specialPrice","type":"int","desc":"special price value"}],"desc":"Set the special price for this trade.","ret":""},{"name":"getUses","params":[],"desc":"Get the number of times this trade has been used.","ret":"the number of uses"},{"name":"setUses","params":[{"name":"uses","type":"int","desc":"the number of uses"}],"desc":"Set the number of times this trade has been used.","ret":""},{"name":"getMaxUses","params":[],"desc":"Get the maximum number of uses this trade has.","ret":"the maximum number of uses"},{"name":"setMaxUses","params":[{"name":"maxUses","type":"int","desc":"the maximum number of time this trade can be used"}],"desc":"Set the maximum number of uses this trade has.","ret":""},{"name":"hasExperienceReward","params":[],"desc":"Whether to reward experience to the player for the trade.","ret":"whether to reward experience to the player for completing this\ntrade"},{"name":"setExperienceReward","params":[{"name":"flag","type":"boolean","desc":"whether to reward experience to the player for completing\nthis trade"}],"desc":"Set whether to reward experience to the player for the trade.","ret":""},{"name":"getVillagerExperience","params":[],"desc":"Gets the amount of experience the villager earns from this trade.","ret":"villager experience"},{"name":"setVillagerExperience","params":[{"name":"villagerExperience","type":"int","desc":"new experience amount"}],"desc":"Sets the amount of experience the villager earns from this trade.","ret":""},{"name":"getPriceMultiplier","params":[],"desc":"Gets the price multiplier for the cost of this trade.","ret":"price multiplier"},{"name":"setPriceMultiplier","params":[{"name":"priceMultiplier","type":"float","desc":"new price multiplier"}],"desc":"Sets the price multiplier for the cost of this trade.","ret":""},{"name":"shouldIgnoreDiscounts","params":[],"desc":"","ret":"Whether all discounts on this trade should be ignored."},{"name":"setIgnoreDiscounts","params":[{"name":"ignoreDiscounts","type":"boolean","desc":"Whether all discounts on this trade should be ignored."}],"desc":"","ret":""}],"desc":"Represents a merchant's trade.\n<p>\nTrades can take one or two ingredients, and provide one result. The\ningredients' ItemStack amounts are respected in the trade.\n<p>\nA trade has a maximum number of uses. A {@link Villager} may periodically\nreplenish its trades by resetting the {@link #getUses uses} of its merchant\nrecipes to <code>0</code>, allowing them to be used again.\n<p>\nA trade may or may not reward experience for being completed.\n<p>\nDuring trades, the {@link MerchantRecipe} dynamically adjusts the amount of\nits first ingredient based on the following criteria:\n<ul>\n<li>{@link #getDemand() Demand}: This value is periodically updated by the\nvillager that owns this merchant recipe based on how often the recipe has\nbeen used since it has been last restocked in relation to its\n{@link #getMaxUses maximum uses}. The amount by which the demand influences\nthe amount of the first ingredient is scaled by the recipe's\n{@link #getPriceMultiplier price multiplier}, and can never be below zero.\n<li>{@link #getSpecialPrice() Special price}: This value is dynamically\nupdated whenever a player starts and stops trading with a villager that owns\nthis merchant recipe. It is based on the player's individual reputation with\nthe villager, and the player's currently active status effects (see\n{@link PotionEffectType#HERO_OF_THE_VILLAGE}). The influence of the player's\nreputation on the special price is scaled by the recipe's\n{@link #getPriceMultiplier price multiplier}.\n</ul>\nThe adjusted amount of the first ingredient is calculated by adding up the\noriginal amount of the first ingredient, the demand scaled by the recipe's\n{@link #getPriceMultiplier price multiplier} and truncated to the next lowest\ninteger value greater than or equal to 0, and the special price, and then\nconstraining the resulting value between <code>1</code> and the item stack's\n{@link ItemStack#getMaxStackSize() maximum stack size}."},{"FQCN":"org.bukkit.inventory.InventoryHolder","methods":[{"name":"getInventory","params":[],"desc":"Get the object's inventory.","ret":"The inventory."}],"desc":""},{"FQCN":"org.bukkit.inventory.ItemFactory","methods":[{"name":"getItemMeta","params":[{"name":"material","type":"Material","desc":"The material to consider as base for the meta"}],"desc":"This creates a new item meta for the material.","ret":"a new ItemMeta that could be applied to an item stack of the\n    specified material"},{"name":"isApplicable","params":[{"name":"meta","type":"ItemMeta","desc":"Meta to check"},{"name":"stack","type":"ItemStack","desc":"Item that meta will be applied to"}],"desc":"This method checks the item meta to confirm that it is applicable (no\ndata lost if applied) to the specified ItemStack.\n<p>\nA {@link SkullMeta} would not be valid for a sword, but a normal {@link\nItemMeta} from an enchanted dirt block would.","ret":"true if the meta can be applied without losing data, false\n    otherwise"},{"name":"isApplicable","params":[{"name":"meta","type":"ItemMeta","desc":"Meta to check"},{"name":"material","type":"Material","desc":"Material that meta will be applied to"}],"desc":"This method checks the item meta to confirm that it is applicable (no\ndata lost if applied) to the specified Material.\n<p>\nA {@link SkullMeta} would not be valid for a sword, but a normal {@link\nItemMeta} from an enchanted dirt block would.","ret":"true if the meta can be applied without losing data, false\n    otherwise"},{"name":"equals","params":[{"name":"meta1","type":"ItemMeta","desc":"First meta to compare, and may be null to indicate no data"},{"name":"meta2","type":"ItemMeta","desc":"Second meta to compare, and may be null to indicate no\n    data"}],"desc":"This method is used to compare two item meta data objects.","ret":"false if one of the meta has data the other does not, otherwise\n    true"},{"name":"asMetaFor","params":[{"name":"meta","type":"ItemMeta","desc":"the meta to convert"},{"name":"stack","type":"ItemStack","desc":"the stack to convert the meta for"}],"desc":"Returns an appropriate item meta for the specified stack.\n<p>\nThe item meta returned will always be a valid meta for a given\nItemStack of the specified material. It may be a more or less specific\nmeta, and could also be the same meta or meta type as the parameter.\nThe item meta returned will also always be the most appropriate meta.\n<p>\nExample, if a {@link SkullMeta} is being applied to a book, this method\nwould return a {@link BookMeta} containing all information in the\nspecified meta that is applicable to an {@link ItemMeta}, the highest\ncommon interface.","ret":"An appropriate item meta for the specified item stack. No\n    guarantees are made as to if a copy is returned. This will be null\n    for a stack of air."},{"name":"asMetaFor","params":[{"name":"meta","type":"ItemMeta","desc":"the meta to convert"},{"name":"material","type":"Material","desc":"the material to convert the meta for"}],"desc":"Returns an appropriate item meta for the specified material.\n<p>\nThe item meta returned will always be a valid meta for a given\nItemStack of the specified material. It may be a more or less specific\nmeta, and could also be the same meta or meta type as the parameter.\nThe item meta returned will also always be the most appropriate meta.\n<p>\nExample, if a {@link SkullMeta} is being applied to a book, this method\nwould return a {@link BookMeta} containing all information in the\nspecified meta that is applicable to an {@link ItemMeta}, the highest\ncommon interface.","ret":"An appropriate item meta for the specified item material. No\n    guarantees are made as to if a copy is returned. This will be null for air."},{"name":"getDefaultLeatherColor","params":[],"desc":"Returns the default color for all leather armor.","ret":"the default color for leather armor"},{"name":"createItemStack","params":[{"name":"input","type":"String","desc":"the item input string"}],"desc":"Create a new {@link ItemStack} given the supplied input.\n<p>\nThe input should match the same input as expected by Minecraft's {@code /give}\ncommand. For example, \"minecraft:diamond_sword{Enchantments:[{id:\"minecraft:sharpness\", lvl:3}]}\"\nwould yield an ItemStack of {@link Material#DIAMOND_SWORD} with an {@link ItemMeta}\ncontaining a level 3 {@link Enchantment#DAMAGE_ALL}\nenchantment.","ret":"the created ItemStack"},{"name":"updateMaterial","params":[{"name":"meta","type":"ItemMeta","desc":"meta"},{"name":"material","type":"Material","desc":"material"}],"desc":"Apply a material change for an item meta. Do not use under any\ncircumstances.","ret":"updated material"},{"name":"getSpawnEgg","params":[{"name":"type","type":"EntityType","desc":"the entity type"}],"desc":"Gets a {@link Material} representing the spawn egg for the provided\n{@link EntityType}. <br>\nWill return null for EntityTypes that do not have a corresponding spawn egg.","ret":"the Material of this EntityTypes spawn egg or null"},{"name":"enchantItem","params":[{"name":"entity","type":"Entity","desc":"the entity to use as a source of randomness"},{"name":"item","type":"ItemStack","desc":"the item to enchant"},{"name":"level","type":"int","desc":"the level to use, which is the level in the enchantment table"},{"name":"allowTreasures","type":"boolean","desc":"allows treasure enchants, e.g. mending, if true."}],"desc":"Enchants the given item at the provided level.\n<br>\nIf an item that is air is passed through an error is thrown.","ret":"a new ItemStack containing the result of the Enchantment"},{"name":"enchantItem","params":[{"name":"world","type":"World","desc":"the world to use as a source of randomness"},{"name":"item","type":"ItemStack","desc":"the item to enchant"},{"name":"level","type":"int","desc":"the level to use, which is the level in the enchantment table"},{"name":"allowTreasures","type":"boolean","desc":"allow the treasure enchants, e.g. mending, if true."}],"desc":"Enchants the given item at the provided level.\n<br>\nIf an item that is air is passed through an error is thrown.","ret":"a new ItemStack containing the result of the Enchantment"},{"name":"enchantItem","params":[{"name":"item","type":"ItemStack","desc":"the item to enchant"},{"name":"level","type":"int","desc":"the level to use, which is the level in the enchantment table"},{"name":"allowTreasures","type":"boolean","desc":"allow treasure enchantments, e.g. mending, if true."}],"desc":"Enchants the given item at the provided level.\n<br>\nIf an item that is air is passed through an error is thrown.","ret":"a new ItemStack containing the result of the Enchantment"},{"name":"asHoverEvent","params":[{"name":"item","type":"ItemStack","desc":"The item"},{"name":"op","type":"java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem>","desc":""}],"desc":"Creates a hover event for the given item.","ret":"A hover event"},{"name":"displayName","params":[{"name":"itemStack","type":"ItemStack","desc":"the {@link ItemStack}"}],"desc":"Get the formatted display name of the {@link ItemStack}.","ret":"display name of the {@link ItemStack}"},{"name":"getI18NDisplayName","params":[{"name":"item","type":"ItemStack","desc":"Item to return Display name of"}],"desc":"Gets the Display name as seen in the Client.\nCurrently, the server only supports the English language. To override this,\nYou must replace the language file embedded in the server jar.","ret":"Display name of Item"},{"name":"ensureServerConversions","params":[{"name":"item","type":"ItemStack","desc":"The item to process conversions on"}],"desc":"Minecraft's updates are converting simple item stacks into more complex NBT oriented Item Stacks.\n\nUse this method to ensure any desired data conversions are processed.\nThe input itemstack will not be the same as the returned itemstack.","ret":"A potentially Data-Converted-ItemStack"},{"name":"hoverContentOf","params":[{"name":"itemStack","type":"ItemStack","desc":"the itemstack"}],"desc":"Creates a {@link net.md_5.bungee.api.chat.hover.content.Content} of that ItemStack for displaying.","ret":"the {@link net.md_5.bungee.api.chat.hover.content.Content} of that ItemStack"},{"name":"hoverContentOf","params":[{"name":"entity","type":"org.bukkit.entity.Entity","desc":"Entity to create the HoverEvent for"}],"desc":"Creates a {@link net.md_5.bungee.api.chat.hover.content.Content} of that {@link org.bukkit.entity.Entity} for displaying.\nUses the display name of the entity, if present.","ret":"the {@link net.md_5.bungee.api.chat.hover.content.Content} of that {@link org.bukkit.entity.Entity}"},{"name":"hoverContentOf","params":[{"name":"entity","type":"org.bukkit.entity.Entity","desc":"Entity to create the HoverEvent for"},{"name":"customName","type":"String","desc":"a custom name that should be displayed, if not passed entity name will be displayed"}],"desc":"Creates a {@link net.md_5.bungee.api.chat.hover.content.Content} of that {@link org.bukkit.entity.Entity} for displaying.","ret":"the {@link net.md_5.bungee.api.chat.hover.content.Content} of that {@link org.bukkit.entity.Entity}"},{"name":"hoverContentOf","params":[{"name":"entity","type":"org.bukkit.entity.Entity","desc":"Entity to create the HoverEvent for"},{"name":"customName","type":"net.md_5.bungee.api.chat.BaseComponent","desc":"a custom name that should be displayed, if not passed entity name will be displayed"}],"desc":"Creates a {@link net.md_5.bungee.api.chat.hover.content.Content} of that {@link org.bukkit.entity.Entity} for displaying.","ret":"the {@link net.md_5.bungee.api.chat.hover.content.Content} of that {@link org.bukkit.entity.Entity}"},{"name":"hoverContentOf","params":[{"name":"entity","type":"org.bukkit.entity.Entity","desc":"Entity to create the HoverEvent for"},{"name":"customName","type":"net.md_5.bungee.api.chat.BaseComponent[]","desc":"a custom name that should be displayed, if not passed entity name will be displayed"}],"desc":"Creates a {@link net.md_5.bungee.api.chat.hover.content.Content} of that {@link org.bukkit.entity.Entity} for displaying.","ret":"the {@link net.md_5.bungee.api.chat.hover.content.Content} of that {@link org.bukkit.entity.Entity}"},{"name":"enchantWithLevels","params":[{"name":"itemStack","type":"ItemStack","desc":"ItemStack to enchant"},{"name":"levels","type":"int","desc":"levels to use for enchanting"},{"name":"allowTreasure","type":"boolean","desc":"whether to allow enchantments where {@link org.bukkit.enchantments.Enchantment#isTreasure()} returns true"},{"name":"random","type":"java.util.Random","desc":"{@link java.util.Random} instance to use for enchanting"}],"desc":"Randomly enchants a copy of the provided {@link ItemStack} using the given experience levels.\n\n<p>If the provided ItemStack is already enchanted, the existing enchants will be removed before enchanting.</p>\n\n<p>Levels must be in range {@code [1, 30]}.</p>","ret":"enchanted copy of the provided ItemStack"}],"desc":"An instance of the ItemFactory can be obtained with {@link\nServer#getItemFactory()}.\n<p>\nThe ItemFactory is solely responsible for creating item meta containers to\napply on item stacks."},{"FQCN":"org.bukkit.inventory.StonecuttingRecipe","methods":[{"name":"setInput","params":[{"name":"input","type":"Material","desc":"The input material."}],"desc":"Sets the input of this Stonecutting recipe.","ret":"The changed recipe, so you can chain calls."},{"name":"getInput","params":[],"desc":"Get the input material.","ret":"The input material."},{"name":"setInputChoice","params":[{"name":"input","type":"RecipeChoice","desc":"The input choice."}],"desc":"Sets the input of this Stonecutting recipe.","ret":"The changed recipe, so you can chain calls."},{"name":"getInputChoice","params":[],"desc":"Get the input choice.","ret":"The input choice."},{"name":"getResult","params":[],"desc":"Get the result of this recipe.","ret":"The resulting stack."},{"name":"getGroup","params":[],"desc":"Get the group of this recipe. Recipes with the same group may be grouped\ntogether when displayed in the client.","ret":"recipe group. An empty string denotes no group. May not be null."},{"name":"setGroup","params":[{"name":"group","type":"String","desc":"recipe group. An empty string denotes no group. May not be\nnull."}],"desc":"Set the group of this recipe. Recipes with the same group may be grouped\ntogether when displayed in the client.","ret":""}],"desc":"Represents a Stonecutting recipe."},{"FQCN":"org.bukkit.inventory.CartographyInventory","methods":[],"desc":"Interface to the inventory of a Cartography table."},{"FQCN":"org.bukkit.inventory.CrafterInventory","methods":[],"desc":"Interface to the inventory of a Crafter."},{"FQCN":"org.bukkit.inventory.ArmoredHorseInventory","methods":[{"name":"getArmor","params":[],"desc":"Gets the item in the horse's armor slot.","ret":"the armor item"},{"name":"setArmor","params":[{"name":"stack","type":"ItemStack","desc":"the new item"}],"desc":"Sets the item in the horse's armor slot.","ret":""}],"desc":""},{"FQCN":"org.bukkit.inventory.MainHand","methods":[],"desc":"Represents the chosen main hand of a player"},{"FQCN":"org.bukkit.inventory.BlastingRecipe","methods":[],"desc":"Represents a campfire recipe."},{"FQCN":"org.bukkit.inventory.Inventory","methods":[{"name":"getSize","params":[],"desc":"Returns the size of the inventory","ret":"The size of the inventory"},{"name":"getMaxStackSize","params":[],"desc":"Returns the maximum stack size for an ItemStack in this inventory.","ret":"The maximum size for an ItemStack in this inventory."},{"name":"setMaxStackSize","params":[{"name":"size","type":"int","desc":"The new maximum stack size for items in this inventory."}],"desc":"This method allows you to change the maximum stack size for an\ninventory.\n<p>\n<b>Caveats:</b>\n<ul>\n<li>Not all inventories respect this value.\n<li>Stacks larger than 127 may be clipped when the world is saved.\n<li>This value is not guaranteed to be preserved; be sure to set it\n    before every time you want to set a slot over the max stack size.\n<li>Stacks larger than the default max size for this type of inventory\n    may not display correctly in the client.\n</ul>","ret":""},{"name":"getItem","params":[{"name":"index","type":"int","desc":"The index of the Slot's ItemStack to return"}],"desc":"Returns the ItemStack found in the slot at the given index","ret":"The ItemStack in the slot"},{"name":"setItem","params":[{"name":"index","type":"int","desc":"The index where to put the ItemStack"},{"name":"item","type":"ItemStack","desc":"The ItemStack to set"}],"desc":"Stores the ItemStack at the given index of the inventory.","ret":""},{"name":"addItem","params":[{"name":"items","type":"ItemStack","desc":"The ItemStacks to add"}],"desc":"Stores the given ItemStacks in the inventory. This will try to fill\nexisting stacks and empty slots as well as it can.\n<p>\nThe returned HashMap contains what it couldn't store, where the key is\nthe index of the parameter, and the value is the ItemStack at that\nindex of the varargs parameter. If all items are stored, it will return\nan empty HashMap.\n<p>\nIf you pass in ItemStacks which exceed the maximum stack size for the\nMaterial, first they will be added to partial stacks where\nMaterial.getMaxStackSize() is not exceeded, up to\nMaterial.getMaxStackSize(). When there are no partial stacks left\nstacks will be split on Inventory.getMaxStackSize() allowing you to\nexceed the maximum stack size for that material.\n<p>\nIt is known that in some implementations this method will also set\nthe inputted argument amount to the number of that item not placed in\nslots.","ret":"A HashMap containing items that didn't fit."},{"name":"removeItem","params":[{"name":"items","type":"ItemStack","desc":"The ItemStacks to remove"}],"desc":"Removes the given ItemStacks from the storage contents of the inventory.\nFor removing ItemStacks from the inventories that have other content groups,\nlike Player inventories, see {@link #removeItemAnySlot(ItemStack...)}.\n<p>\nIt will try to remove 'as much as possible' from the types and amounts\nyou give as arguments.\n<p>\nThe returned HashMap contains what it couldn't remove, where the key is\nthe index of the parameter, and the value is the ItemStack at that\nindex of the varargs parameter. If all the given ItemStacks are\nremoved, it will return an empty HashMap.\n<p>\nIt is known that in some implementations this method will also set the\ninputted argument amount to the number of that item not removed from\nslots.","ret":"A HashMap containing items that couldn't be removed."},{"name":"removeItemAnySlot","params":[{"name":"items","type":"ItemStack","desc":"The ItemStacks to remove"}],"desc":"Searches all possible inventory slots in order to remove the given ItemStacks.\n<p>\nSimilar to {@link Inventory#removeItem(ItemStack...)} in behavior, except this\nmethod will check all possible slots in the inventory, rather than just the main\nstorage contents.\n<p>\nIt will try to remove 'as much as possible' from the types and amounts\nyou give as arguments.\n<p>\nThe returned HashMap contains what it couldn't remove, where the key is\nthe index of the parameter, and the value is the ItemStack at that\nindex of the varargs parameter. If all the given ItemStacks are\nremoved, it will return an empty HashMap.\n<p>\nIt is known that in some implementations this method will also set the\ninputted argument amount to the number of that item not removed from\nslots.","ret":"A HashMap containing items that couldn't be removed."},{"name":"contains","params":[{"name":"material","type":"Material","desc":"The material to check for"}],"desc":"Checks if the inventory contains any ItemStacks with the given\nmaterial.","ret":"true if an ItemStack is found with the given Material"},{"name":"contains","params":[{"name":"item","type":"ItemStack","desc":"The ItemStack to match against"}],"desc":"Checks if the inventory contains any ItemStacks matching the given\nItemStack.\n<p>\nThis will only return true if both the type and the amount of the stack\nmatch.","ret":"false if item is null, true if any exactly matching ItemStacks\n    were found"},{"name":"contains","params":[{"name":"material","type":"Material","desc":"The material to check for"},{"name":"amount","type":"int","desc":"The minimum amount"}],"desc":"Checks if the inventory contains any ItemStacks with the given\nmaterial, adding to at least the minimum amount specified.","ret":"true if amount is less than 1, true if enough ItemStacks were\n    found to add to the given amount"},{"name":"contains","params":[{"name":"item","type":"ItemStack","desc":"the ItemStack to match against"},{"name":"amount","type":"int","desc":"how many identical stacks to check for"}],"desc":"Checks if the inventory contains at least the minimum amount specified\nof exactly matching ItemStacks.\n<p>\nAn ItemStack only counts if both the type and the amount of the stack\nmatch.","ret":"false if item is null, true if amount less than 1, true if\n    amount of exactly matching ItemStacks were found"},{"name":"containsAtLeast","params":[{"name":"item","type":"ItemStack","desc":"the ItemStack to match against"},{"name":"amount","type":"int","desc":"the minimum amount"}],"desc":"Checks if the inventory contains ItemStacks matching the given\nItemStack whose amounts sum to at least the minimum amount specified.","ret":"false if item is null, true if amount less than 1, true if\n    enough ItemStacks were found to add to the given amount"},{"name":"all","params":[{"name":"material","type":"Material","desc":"The material to look for"}],"desc":"Returns a HashMap with all slots and ItemStacks in the inventory with\nthe given Material.\n<p>\nThe HashMap contains entries where, the key is the slot index, and the\nvalue is the ItemStack in that slot. If no matching ItemStack with the\ngiven Material is found, an empty map is returned.","ret":"A HashMap containing the slot index, ItemStack pairs"},{"name":"all","params":[{"name":"item","type":"ItemStack","desc":"The ItemStack to match against"}],"desc":"Finds all slots in the inventory containing any ItemStacks with the\ngiven ItemStack. This will only match slots if both the type and the\namount of the stack match\n<p>\nThe HashMap contains entries where, the key is the slot index, and the\nvalue is the ItemStack in that slot. If no matching ItemStack with the\ngiven Material is found, an empty map is returned.","ret":"A map from slot indexes to item at index"},{"name":"first","params":[{"name":"material","type":"Material","desc":"The material to look for"}],"desc":"Finds the first slot in the inventory containing an ItemStack with the\ngiven material","ret":"The slot index of the given Material or -1 if not found"},{"name":"first","params":[{"name":"item","type":"ItemStack","desc":"The ItemStack to match against"}],"desc":"Returns the first slot in the inventory containing an ItemStack with\nthe given stack. This will only match a slot if both the type and the\namount of the stack match","ret":"The slot index of the given ItemStack or -1 if not found"},{"name":"firstEmpty","params":[],"desc":"Returns the first empty Slot.","ret":"The first empty Slot found, or -1 if no empty slots."},{"name":"isEmpty","params":[],"desc":"Check whether or not this inventory is empty. An inventory is considered\nto be empty if there are no ItemStacks in any slot of this inventory.","ret":"true if empty, false otherwise"},{"name":"remove","params":[{"name":"material","type":"Material","desc":"The material to remove"}],"desc":"Removes all stacks in the inventory matching the given material.","ret":""},{"name":"remove","params":[{"name":"item","type":"ItemStack","desc":"The ItemStack to match against"}],"desc":"Removes all stacks in the inventory matching the given stack.\n<p>\nThis will only match a slot if both the type and the amount of the\nstack match","ret":""},{"name":"clear","params":[{"name":"index","type":"int","desc":"The index to empty."}],"desc":"Clears out a particular slot in the index.","ret":""},{"name":"clear","params":[],"desc":"Clears out the whole Inventory.","ret":""},{"name":"close","params":[],"desc":"Closes the inventory for all viewers.","ret":"the number of viewers the inventory was closed for"},{"name":"getViewers","params":[],"desc":"Gets a list of players viewing the inventory. Note that a player is\nconsidered to be viewing their own inventory and internal crafting\nscreen even when said inventory is not open. They will normally be\nconsidered to be viewing their inventory even when they have a\ndifferent inventory screen open, but it's possible for customized\ninventory screens to exclude the viewer's inventory, so this should\nnever be assumed to be non-empty.","ret":"A list of HumanEntities who are viewing this Inventory."},{"name":"getType","params":[],"desc":"Returns what type of inventory this is.","ret":"The InventoryType representing the type of inventory."},{"name":"getHolder","params":[],"desc":"Gets the block or entity belonging to the open inventory","ret":"The holder of the inventory; null if it has no holder."},{"name":"getHolder","params":[{"name":"useSnapshot","type":"boolean","desc":"Create a snapshot if the holder is a tile entity"}],"desc":"Gets the block or entity belonging to the open inventory","ret":"The holder of the inventory; null if it has no holder."},{"name":"iterator","params":[{"name":"index","type":"int","desc":"The index."}],"desc":"Returns an iterator starting at the given index. If the index is\npositive, then the first call to next() will return the item at that\nindex; if it is negative, the first call to previous will return the\nitem at index (getSize() + index).","ret":"An iterator."},{"name":"getLocation","params":[],"desc":"Get the location of the block or entity which corresponds to this inventory. May return null if this container\nwas custom created or is a virtual / subcontainer.","ret":"location or null if not applicable."}],"desc":"Interface to the various inventories. Behavior relating to {@link\nMaterial#AIR} is unspecified.\n\n<br>\n<b>Note that whilst {@link #iterator()} deals with the entire inventory, add\n/ contains / remove methods deal only with the storage contents.</b>\n<br>\n<b>Consider using {@link #getContents()} and {@link #getStorageContents()} for\nspecific iteration.</b>"},{"FQCN":"org.bukkit.inventory.recipe.CraftingBookCategory","methods":[],"desc":"Represents categories within the crafting recipe book."},{"FQCN":"org.bukkit.inventory.recipe.CookingBookCategory","methods":[],"desc":"Represents categories within the cooking recipe book."},{"FQCN":"org.bukkit.inventory.CampfireRecipe","methods":[],"desc":"Represents a campfire recipe."},{"FQCN":"org.bukkit.inventory.LlamaInventory","methods":[{"name":"getDecor","params":[],"desc":"Gets the item in the llama's decor slot.","ret":"the decor item"},{"name":"setDecor","params":[{"name":"stack","type":"ItemStack","desc":"the new item"}],"desc":"Sets the item in the llama's decor slot.","ret":""}],"desc":"An interface to the inventory of a {@link Llama}."},{"FQCN":"org.bukkit.inventory.DoubleChestInventory","methods":[{"name":"getLeftSide","params":[],"desc":"Get the left half of this double chest.","ret":"The left side inventory"},{"name":"getRightSide","params":[],"desc":"Get the right side of this double chest.","ret":"The right side inventory"}],"desc":"Interface to the inventory of a Double Chest."},{"FQCN":"org.bukkit.inventory.BeaconInventory","methods":[{"name":"setItem","params":[{"name":"item","type":"ItemStack","desc":"The new item"}],"desc":"Set the item powering the beacon.","ret":""},{"name":"getItem","params":[],"desc":"Get the item powering the beacon.","ret":"The current item."}],"desc":"Interface to the inventory of a Beacon."},{"FQCN":"org.bukkit.inventory.meta.Damageable","methods":[{"name":"hasDamage","params":[],"desc":"Checks to see if this item has damage","ret":"true if this has damage"},{"name":"getDamage","params":[],"desc":"Gets the damage","ret":"the damage"},{"name":"setDamage","params":[{"name":"damage","type":"int","desc":"item damage"}],"desc":"Sets the damage","ret":""}],"desc":"Represents an item that has durability and can take damage."},{"FQCN":"org.bukkit.inventory.meta.BookMeta","methods":[{"name":"hasTitle","params":[],"desc":"Checks for the existence of a title in the book.","ret":"true if the book has a title"},{"name":"getTitle","params":[],"desc":"Gets the title of the book.\n<p>\nPlugins should check that hasTitle() returns true before calling this\nmethod.","ret":"the title of the book"},{"name":"setTitle","params":[{"name":"title","type":"String","desc":"the title to set"}],"desc":"Sets the title of the book.\n<p>\nLimited to 32 characters. Removes title when given null.","ret":"true if the title was successfully set"},{"name":"hasAuthor","params":[],"desc":"Checks for the existence of an author in the book.","ret":"true if the book has an author"},{"name":"getAuthor","params":[],"desc":"Gets the author of the book.\n<p>\nPlugins should check that hasAuthor() returns true before calling this\nmethod.","ret":"the author of the book"},{"name":"setAuthor","params":[{"name":"author","type":"String","desc":"the author to set"}],"desc":"Sets the author of the book. Removes author when given null.","ret":""},{"name":"hasGeneration","params":[],"desc":"Checks for the existence of generation level in the book.","ret":"true if the book has a generation level"},{"name":"getGeneration","params":[],"desc":"Gets the generation of the book.\n<p>\nPlugins should check that hasGeneration() returns true before calling\nthis method.","ret":"the generation of the book"},{"name":"setGeneration","params":[{"name":"generation","type":"Generation","desc":"the generation to set"}],"desc":"Sets the generation of the book. Removes generation when given null.","ret":""},{"name":"hasPages","params":[],"desc":"Checks for the existence of pages in the book.","ret":"true if the book has pages"},{"name":"title","params":[],"desc":"Gets the title of the book.\n<p>\nPlugins should check that hasTitle() returns true before calling this\nmethod.","ret":"the title of the book"},{"name":"title","params":[{"name":"title","type":"net.kyori.adventure.text.Component","desc":"the title to set"}],"desc":"Sets the title of the book.\n<p>\nLimited to 32 characters. Removes title when given null.","ret":"the same {@link BookMeta} instance"},{"name":"author","params":[],"desc":"Gets the author of the book.\n<p>\nPlugins should check that hasAuthor() returns true before calling this\nmethod.","ret":"the author of the book"},{"name":"author","params":[{"name":"author","type":"net.kyori.adventure.text.Component","desc":"the author to set"}],"desc":"Sets the author of the book. Removes author when given null.","ret":"the same {@link BookMeta} instance"},{"name":"page","params":[{"name":"page","type":"int","desc":"the page number to get, in range [1, getPageCount()]"}],"desc":"Gets the specified page in the book. The page must exist.\n<p>\nPages are 1-indexed.","ret":"the page from the book"},{"name":"page","params":[{"name":"page","type":"int","desc":"the page number to set, in range [1, getPageCount()]"},{"name":"data","type":"net.kyori.adventure.text.Component","desc":"the data to set for that page"}],"desc":"Sets the specified page in the book. Pages of the book must be\ncontiguous.\n<p>\nThe data can be up to 256 characters in length, additional characters\nare truncated.\n<p>\nPages are 1-indexed.","ret":""},{"name":"addPages","params":[{"name":"pages","type":"net.kyori.adventure.text.Component","desc":"A list of strings, each being a page"}],"desc":"Adds new pages to the end of the book. Up to a maximum of 50 pages with\n256 characters per page.","ret":""},{"name":"getPage","params":[{"name":"page","type":"int","desc":"the page number to get, in range [1, getPageCount()]"}],"desc":"Gets the specified page in the book. The given page must exist.\n<p>\nPages are 1-indexed.","ret":"the page from the book"},{"name":"setPage","params":[{"name":"page","type":"int","desc":"the page number to set, in range [1, getPageCount()]"},{"name":"data","type":"String","desc":"the data to set for that page"}],"desc":"Sets the specified page in the book. Pages of the book must be\ncontiguous.\n<p>\nThe data can be up to 256 characters in length, additional characters\nare truncated.\n<p>\nPages are 1-indexed.","ret":""},{"name":"getPages","params":[],"desc":"Gets all the pages in the book.","ret":"list of all the pages in the book"},{"name":"setPages","params":[{"name":"pages","type":"List<String>","desc":"A list of pages to set the book to use"}],"desc":"Clears the existing book pages, and sets the book to use the provided\npages. Maximum 100 pages with 256 characters per page.","ret":""},{"name":"setPages","params":[{"name":"pages","type":"String","desc":"A list of strings, each being a page"}],"desc":"Clears the existing book pages, and sets the book to use the provided\npages. Maximum 50 pages with 256 characters per page.","ret":""},{"name":"addPage","params":[{"name":"pages","type":"String","desc":"A list of strings, each being a page"}],"desc":"Adds new pages to the end of the book. Up to a maximum of 50 pages with\n256 characters per page.","ret":""},{"name":"getPageCount","params":[],"desc":"Gets the number of pages in the book.","ret":"the number of pages in the book"}],"desc":"Represents a book ({@link Material#WRITABLE_BOOK} or {@link\nMaterial#WRITTEN_BOOK}) that can have a title, an author, and pages."},{"FQCN":"org.bukkit.inventory.meta.EnchantmentStorageMeta","methods":[{"name":"hasStoredEnchants","params":[],"desc":"Checks for the existence of any stored enchantments.","ret":"true if an enchantment exists on this meta"},{"name":"hasStoredEnchant","params":[{"name":"ench","type":"Enchantment","desc":"enchantment to check"}],"desc":"Checks for storage of the specified enchantment.","ret":"true if this enchantment is stored in this meta"},{"name":"getStoredEnchantLevel","params":[{"name":"ench","type":"Enchantment","desc":"enchantment to check"}],"desc":"Checks for the level of the stored enchantment.","ret":"The level that the specified stored enchantment has, or 0 if\n    none"},{"name":"getStoredEnchants","params":[],"desc":"Gets a copy the stored enchantments in this ItemMeta.","ret":"An immutable copy of the stored enchantments"},{"name":"addStoredEnchant","params":[{"name":"ench","type":"Enchantment","desc":"Enchantment to store"},{"name":"level","type":"int","desc":"Level for the enchantment"},{"name":"ignoreLevelRestriction","type":"boolean","desc":"this indicates the enchantment should be\n    applied, ignoring the level limit"}],"desc":"Stores the specified enchantment in this item meta.","ret":"true if the item meta changed as a result of this call, false\n    otherwise"},{"name":"removeStoredEnchant","params":[{"name":"ench","type":"Enchantment","desc":"Enchantment to remove"}],"desc":"Remove the specified stored enchantment from this item meta.","ret":"true if the item meta changed as a result of this call, false\n    otherwise"},{"name":"hasConflictingStoredEnchant","params":[{"name":"ench","type":"Enchantment","desc":"enchantment to test"}],"desc":"Checks if the specified enchantment conflicts with any enchantments in\nthis ItemMeta.","ret":"true if the enchantment conflicts, false otherwise"}],"desc":"EnchantmentMeta is specific to items that can <i>store</i> enchantments, as\nopposed to being enchanted. {@link Material#ENCHANTED_BOOK} is an example\nof an item with enchantment storage."},{"FQCN":"org.bukkit.inventory.meta.MusicInstrumentMeta","methods":[{"name":"setInstrument","params":[{"name":"instrument","type":"MusicInstrument","desc":"the instrument to set"}],"desc":"Sets the goat horn's instrument.","ret":""},{"name":"getInstrument","params":[],"desc":"Gets the instrument of the goat horn.","ret":"The instrument of the goat horn"}],"desc":""},{"FQCN":"org.bukkit.inventory.meta.BundleMeta","methods":[{"name":"hasItems","params":[],"desc":"Returns whether the item has any items.","ret":"whether items are present"},{"name":"getItems","params":[],"desc":"Returns an immutable list of the items stored in this item.","ret":"items"},{"name":"setItems","params":[{"name":"items","type":"List<ItemStack>","desc":"the items to set"}],"desc":"Sets the items stored in this item.\n<br>\nRemoves all items when given null.","ret":""},{"name":"addItem","params":[{"name":"item","type":"ItemStack","desc":"item to add"}],"desc":"Adds an item to this item.","ret":""}],"desc":""},{"FQCN":"org.bukkit.inventory.meta.BannerMeta","methods":[{"name":"getBaseColor","params":[],"desc":"Returns the base color for this banner","ret":"the base color"},{"name":"setBaseColor","params":[{"name":"color","type":"DyeColor","desc":"the base color"}],"desc":"Sets the base color for this banner","ret":""},{"name":"getPatterns","params":[],"desc":"Returns a list of patterns on this banner","ret":"the patterns"},{"name":"setPatterns","params":[{"name":"patterns","type":"List<Pattern>","desc":"the new list of patterns"}],"desc":"Sets the patterns used on this banner","ret":""},{"name":"addPattern","params":[{"name":"pattern","type":"Pattern","desc":"the new pattern to add"}],"desc":"Adds a new pattern on top of the existing\npatterns","ret":""},{"name":"getPattern","params":[{"name":"i","type":"int","desc":"the index"}],"desc":"Returns the pattern at the specified index","ret":"the pattern"},{"name":"removePattern","params":[{"name":"i","type":"int","desc":"the index"}],"desc":"Removes the pattern at the specified index","ret":"the removed pattern"},{"name":"setPattern","params":[{"name":"i","type":"int","desc":"the index"},{"name":"pattern","type":"Pattern","desc":"the new pattern"}],"desc":"Sets the pattern at the specified index","ret":""},{"name":"numberOfPatterns","params":[],"desc":"Returns the number of patterns on this\nbanner","ret":"the number of patterns"}],"desc":""},{"FQCN":"org.bukkit.inventory.meta.SpawnEggMeta","methods":[{"name":"getSpawnedType","params":[],"desc":"Get the type of entity this egg will spawn.","ret":"The entity type. May be null for implementation specific default."},{"name":"setSpawnedType","params":[{"name":"type","type":"EntityType","desc":"The entity type. May be null for implementation specific\ndefault."}],"desc":"Set the type of entity this egg will spawn.","ret":""},{"name":"getSpawnedEntity","params":[],"desc":"Gets the {@link EntitySnapshot} that will be spawned by this spawn egg or null if no entity\nhas been set. <br>\n<p>\nAll applicable data from the egg will be copied, such as custom name, health,\nand velocity. <br>","ret":"the entity snapshot or null if no entity has been set"},{"name":"setSpawnedEntity","params":[{"name":"snapshot","type":"EntitySnapshot","desc":"the snapshot"}],"desc":"Sets the {@link EntitySnapshot} that will be spawned by this spawn egg. <br>\n<p>\nAll applicable data from the entity will be copied, such as custom name,\nhealth, and velocity. <br>","ret":""},{"name":"getCustomSpawnedType","params":[],"desc":"Get the custom type of entity this egg will spawn.","ret":"the entity type or null if no custom type is set"},{"name":"setCustomSpawnedType","params":[{"name":"type","type":"EntityType","desc":"the entity type or null to clear the custom type"}],"desc":"Set the custom type of entity this egg will spawn.","ret":""}],"desc":"Represents a spawn egg and it's spawned type."},{"FQCN":"org.bukkit.inventory.meta.CompassMeta","methods":[{"name":"hasLodestone","params":[],"desc":"Checks if this compass has been paired to a lodestone.","ret":"paired status"},{"name":"getLodestone","params":[],"desc":"Gets the location that this compass will point to.\n\nCheck {@link #hasLodestone()} first!","ret":"lodestone location"},{"name":"setLodestone","params":[{"name":"lodestone","type":"Location","desc":"new location or null to clear"}],"desc":"Sets the location this lodestone compass will point to.","ret":""},{"name":"isLodestoneTracked","params":[],"desc":"Gets if this compass is tracking a specific lodestone.\n\nIf true the compass will only work if there is a lodestone at the tracked\nlocation.","ret":"lodestone tracked"},{"name":"setLodestoneTracked","params":[{"name":"tracked","type":"boolean","desc":"new tracked status"}],"desc":"Sets if this compass is tracking a specific lodestone.\n\nIf true the compass will only work if there is a lodestone at the tracked\nlocation.","ret":""}],"desc":"Represents a compass that can track a specific location."},{"FQCN":"org.bukkit.inventory.meta.FireworkEffectMeta","methods":[{"name":"setEffect","params":[{"name":"effect","type":"FireworkEffect","desc":"the effect to set, or null to indicate none."}],"desc":"Sets the firework effect for this meta.","ret":""},{"name":"hasEffect","params":[],"desc":"Checks if this meta has an effect.","ret":"true if this meta has an effect, false otherwise"},{"name":"getEffect","params":[],"desc":"Gets the firework effect for this meta.","ret":"the current effect, or null if none"}],"desc":"Represents a meta that can store a single FireworkEffect. An example\nincludes {@link Material#FIREWORK_STAR}."},{"FQCN":"org.bukkit.inventory.meta.PotionMeta","methods":[{"name":"setBasePotionData","params":[{"name":"data","type":"PotionData","desc":"PotionData to set the base potion state to"}],"desc":"Sets the underlying potion data","ret":""},{"name":"getBasePotionData","params":[],"desc":"Returns the potion data about the base potion","ret":"a PotionData object"},{"name":"setBasePotionType","params":[{"name":"type","type":"PotionType","desc":"PotionType to set the base potion state to"}],"desc":"Sets the underlying potion type","ret":""},{"name":"getBasePotionType","params":[],"desc":"Returns the potion type about the base potion","ret":"a PotionType object"},{"name":"hasCustomEffects","params":[],"desc":"Checks for the presence of custom potion effects.","ret":"true if custom potion effects are applied"},{"name":"getCustomEffects","params":[],"desc":"Gets an immutable list containing all custom potion effects applied to\nthis potion.\n<p>\nPlugins should check that hasCustomEffects() returns true before calling\nthis method.","ret":"the immutable list of custom potion effects"},{"name":"addCustomEffect","params":[{"name":"effect","type":"PotionEffect","desc":"the potion effect to add"},{"name":"overwrite","type":"boolean","desc":"true if any existing effect of the same type should be\noverwritten"}],"desc":"Adds a custom potion effect to this potion.","ret":"true if the potion meta changed as a result of this call"},{"name":"removeCustomEffect","params":[{"name":"type","type":"PotionEffectType","desc":"the potion effect type to remove"}],"desc":"Removes a custom potion effect from this potion.","ret":"true if the potion meta changed as a result of this call"},{"name":"hasCustomEffect","params":[{"name":"type","type":"PotionEffectType","desc":"the potion effect type to check for"}],"desc":"Checks for a specific custom potion effect type on this potion.","ret":"true if the potion has this effect"},{"name":"setMainEffect","params":[{"name":"type","type":"PotionEffectType","desc":"the potion effect type to move"}],"desc":"Moves a potion effect to the top of the potion effect list.\n<p>\nThis causes the client to display the potion effect in the potion's name.","ret":"true if the potion meta changed as a result of this call"},{"name":"clearCustomEffects","params":[],"desc":"Removes all custom potion effects from this potion.","ret":"true if the potion meta changed as a result of this call"},{"name":"hasColor","params":[],"desc":"Checks for existence of a potion color.","ret":"true if this has a custom potion color"},{"name":"getColor","params":[],"desc":"Gets the potion color that is set. A custom potion color will alter the\ndisplay of the potion in an inventory slot.\n<p>\nPlugins should check that hasColor() returns <code>true</code> before\ncalling this method.","ret":"the potion color that is set"},{"name":"setColor","params":[{"name":"color","type":"Color","desc":"the color to set"}],"desc":"Sets the potion color. A custom potion color will alter the display of\nthe potion in an inventory slot.","ret":""}],"desc":"Represents a potion or item that can have custom effects."},{"FQCN":"org.bukkit.inventory.meta.LeatherArmorMeta","methods":[{"name":"getColor","params":[],"desc":"Gets the color of the armor. If it has not been set otherwise, it will\nbe {@link ItemFactory#getDefaultLeatherColor()}.","ret":"the color of the armor, never null"},{"name":"setColor","params":[{"name":"color","type":"Color","desc":"the color to set. Setting it to null is equivalent to\n    setting it to {@link ItemFactory#getDefaultLeatherColor()}."}],"desc":"Sets the color of the armor.","ret":""}],"desc":"Represents leather armor ({@link Material#LEATHER_BOOTS}, {@link\nMaterial#LEATHER_CHESTPLATE}, {@link Material#LEATHER_HELMET}, or {@link\nMaterial#LEATHER_LEGGINGS}) that can be colored."},{"FQCN":"org.bukkit.inventory.meta.FireworkMeta","methods":[{"name":"addEffect","params":[{"name":"effect","type":"FireworkEffect","desc":"The firework effect to add"}],"desc":"Add another effect to this firework.","ret":""},{"name":"addEffects","params":[{"name":"effects","type":"FireworkEffect","desc":"The firework effects to add"}],"desc":"Add several effects to this firework.","ret":""},{"name":"addEffects","params":[{"name":"effects","type":"Iterable<FireworkEffect>","desc":"An iterable object whose iterator yields the desired\n    firework effects"}],"desc":"Add several firework effects to this firework.","ret":""},{"name":"getEffects","params":[],"desc":"Get the effects in this firework.","ret":"An immutable list of the firework effects"},{"name":"getEffectsSize","params":[],"desc":"Get the number of effects in this firework.","ret":"The number of effects"},{"name":"removeEffect","params":[{"name":"index","type":"int","desc":"The index of the effect to remove"}],"desc":"Remove an effect from this firework.","ret":""},{"name":"clearEffects","params":[],"desc":"Remove all effects from this firework.","ret":""},{"name":"hasEffects","params":[],"desc":"Get whether this firework has any effects.","ret":"true if it has effects, false if there are no effects"},{"name":"getPower","params":[],"desc":"Gets the approximate height the firework will fly.","ret":"approximate flight height of the firework."},{"name":"setPower","params":[{"name":"power","type":"int","desc":"the power of the firework, from 0-127"}],"desc":"Sets the approximate power of the firework. Each level of power is half\na second of flight time.","ret":""}],"desc":"Represents a {@link Material#FIREWORK_ROCKET} and its effects."},{"FQCN":"org.bukkit.inventory.meta.MapMeta","methods":[{"name":"setMapId","params":[{"name":"id","type":"int","desc":"the map id to set"}],"desc":"Sets the map ID. This is used to determine what map is displayed.","ret":""},{"name":"hasMapView","params":[],"desc":"Checks for existence of an associated map.","ret":"true if this item has an associated map"},{"name":"getMapView","params":[],"desc":"Gets the map view that is associated with this map item.\n\n<p>\nPlugins should check that hasMapView() returns <code>true</code> before\ncalling this method.","ret":"the map view, or null if the item hasMapView(), but this map does\nnot exist on the server"},{"name":"setMapView","params":[{"name":"map","type":"MapView","desc":"the map to set"}],"desc":"Sets the associated map. This is used to determine what map is displayed.\n\n<p>\nThe implementation <b>may</b> allow null to clear the associated map, but\nthis is not required and is liable to generate a new (undefined) map when\nthe item is first used.","ret":""},{"name":"isScaling","params":[],"desc":"Checks to see if this map is scaling.","ret":"true if this map is scaling"},{"name":"setScaling","params":[{"name":"value","type":"boolean","desc":"true to scale"}],"desc":"Sets if this map is scaling or not.","ret":""},{"name":"hasLocationName","params":[],"desc":"Checks for existence of a location name.","ret":"true if this has a location name"},{"name":"getLocationName","params":[],"desc":"Gets the location name that is set.\n<p>\nPlugins should check that hasLocationName() returns <code>true</code>\nbefore calling this method.","ret":"the location name that is set"},{"name":"setLocationName","params":[{"name":"name","type":"String","desc":"the name to set"}],"desc":"Sets the location name.","ret":""},{"name":"hasColor","params":[],"desc":"Checks for existence of a map color.","ret":"true if this has a custom map color"},{"name":"getColor","params":[],"desc":"Gets the map color that is set. A custom map color will alter the display\nof the map in an inventory slot.\n<p>\nPlugins should check that hasColor() returns <code>true</code> before\ncalling this method.","ret":"the map color that is set"},{"name":"setColor","params":[{"name":"color","type":"Color","desc":"the color to set"}],"desc":"Sets the map color. A custom map color will alter the display of the map\nin an inventory slot.","ret":""}],"desc":"Represents a map that can be scalable."},{"FQCN":"org.bukkit.inventory.meta.Repairable","methods":[{"name":"hasRepairCost","params":[],"desc":"Checks to see if this has a repair penalty","ret":"true if this has a repair penalty"},{"name":"getRepairCost","params":[],"desc":"Gets the repair penalty","ret":"the repair penalty"},{"name":"setRepairCost","params":[{"name":"cost","type":"int","desc":"repair penalty"}],"desc":"Sets the repair penalty","ret":""}],"desc":"Represents an item that can be repaired at an anvil."},{"FQCN":"org.bukkit.inventory.meta.tags.ItemTagAdapterContext","methods":[{"name":"newTagContainer","params":[],"desc":"Creates a new and empty tag container instance.","ret":"the fresh container instance"}],"desc":"This interface represents the context in which the {@link ItemTagType} can\nserialize and deserialize the passed values."},{"FQCN":"org.bukkit.inventory.meta.tags.CustomItemTagContainer","methods":[{"name":"setCustomTag","params":[{"name":"key","type":"NamespacedKey","desc":"the key this value will be stored under"},{"name":"type","type":"ItemTagType<T,Z>","desc":"the type this item tag uses"},{"name":"value","type":"Z","desc":"the value stored in the tag"}],"desc":"Stores a custom value on the {@link ItemMeta}.\n\nThis API cannot be used to manipulate minecraft tags, as the values will\nbe stored using your namespace. This method will override any existing\nvalue the meta may have stored under the provided key.","ret":""},{"name":"hasCustomTag","params":[{"name":"key","type":"NamespacedKey","desc":"the key the value is stored under"},{"name":"type","type":"ItemTagType<T,Z>","desc":"the type which primitive storage type has to match the value"}],"desc":"Returns if the item meta has a custom tag registered matching the\nprovided parameters.\n\nThis method will only return if the found value has the same primitive\ndata type as the provided key.\n\nStoring a value using a custom {@link ItemTagType} implementation will\nnot store the complex data type. Therefore storing a UUID (by storing a\nbyte[]) will match hasCustomTag(\"key\" , {@link ItemTagType#BYTE_ARRAY}).\nLikewise a stored byte[] will always match your UUID {@link ItemTagType}\neven if it is not 16 bytes long.\n\nThis method is only usable for custom object keys. Overwriting existing\ntags, like the the display name, will not work as the values are stored\nusing your namespace.","ret":"if a value"},{"name":"getCustomTag","params":[{"name":"key","type":"NamespacedKey","desc":"the key to look up in the custom tag map"},{"name":"type","type":"ItemTagType<T,Z>","desc":"the type the value must have and will be casted to"}],"desc":"Returns the custom tag's value that is stored on the item.","ret":"the value or {@code null} if no value was mapped under the given\nvalue"},{"name":"removeCustomTag","params":[{"name":"key","type":"NamespacedKey","desc":"the key"}],"desc":"Removes a custom key from the item meta.","ret":""},{"name":"isEmpty","params":[],"desc":"Returns if the container instance is empty, therefore has no entries\ninside it.","ret":"the boolean"},{"name":"getAdapterContext","params":[],"desc":"Returns the adapter context this tag container uses.","ret":"the tag context"}],"desc":"This interface represents a map like object, capable of storing custom tags\nin it."},{"FQCN":"org.bukkit.inventory.meta.tags.ItemTagType","methods":[{"name":"getPrimitiveType","params":[],"desc":"Returns the primitive data type of this tag.","ret":"the class"},{"name":"getComplexType","params":[],"desc":"Returns the complex object type the primitive value resembles.","ret":"the class type"},{"name":"toPrimitive","params":[{"name":"complex","type":"Z","desc":"the complex object instance"},{"name":"context","type":"ItemTagAdapterContext","desc":"the context this operation is running in"}],"desc":"Returns the primitive data that resembles the complex object passed to\nthis method.","ret":"the primitive value"},{"name":"fromPrimitive","params":[{"name":"primitive","type":"T","desc":"the primitive value"},{"name":"context","type":"ItemTagAdapterContext","desc":"the context this operation is running in"}],"desc":"Creates a complex object based of the passed primitive value","ret":"the complex object instance"}],"desc":"This class represents an enum with a generic content type. It defines the\ntypes a custom item tag can have.\n<p>\nThis interface can be used to create your own custom {@link ItemTagType} with\ndifferent complex types. This may be useful for the likes of a\nUUIDItemTagType:\n<pre>\n{@code\npublic class UUIDItemTagType implements ItemTagType<byte[], UUID> {\n\n        {@literal @Override}\n        public Class<byte[]> getPrimitiveType() {\n            return byte[].class;\n        }\n\n        {@literal @Override}\n        public Class<UUID> getComplexType() {\n            return UUID.class;\n        }\n\n        {@literal @Override}\n        public byte[] toPrimitive(UUID complex, ItemTagAdapterContext context) {\n            ByteBuffer bb = ByteBuffer.wrap(new byte[16]);\n            bb.putLong(complex.getMostSignificantBits());\n            bb.putLong(complex.getLeastSignificantBits());\n            return bb.array();\n        }\n\n        {@literal @Override}\n        public UUID fromPrimitive(byte[] primitive, ItemTagAdapterContext context) {\n            ByteBuffer bb = ByteBuffer.wrap(primitive);\n            long firstLong = bb.getLong();\n            long secondLong = bb.getLong();\n            return new UUID(firstLong, secondLong);\n        }\n    }}</pre>"},{"FQCN":"org.bukkit.inventory.meta.trim.TrimPattern","methods":[{"name":"getKey","params":[],"desc":"","ret":""}],"desc":"Represents a pattern that may be used in an {@link ArmorTrim}."},{"FQCN":"org.bukkit.inventory.meta.trim.TrimMaterial","methods":[{"name":"getKey","params":[],"desc":"","ret":""}],"desc":"Represents a material that may be used in an {@link ArmorTrim}."},{"FQCN":"org.bukkit.inventory.meta.trim.ArmorTrim","methods":[{"name":"getMaterial","params":[],"desc":"Get the {@link TrimMaterial} for this armor trim.","ret":"the material"},{"name":"getPattern","params":[],"desc":"Get the {@link TrimPattern} for this armor trim.","ret":"the pattern"}],"desc":"Represents an armor trim that may be applied to an item."},{"FQCN":"org.bukkit.inventory.meta.BlockStateMeta","methods":[{"name":"hasBlockState","params":[],"desc":"Returns whether the item has a block state currently\nattached to it.","ret":"whether a block state is already attached"},{"name":"clearBlockState","params":[],"desc":"Clears the block state currently attached to this item.","ret":""},{"name":"getBlockState","params":[],"desc":"Returns the currently attached block state for this\nitem or creates a new one if one doesn't exist.\n\nThe state is a copy, it must be set back (or to another\nitem) with {@link #setBlockState(org.bukkit.block.BlockState)}","ret":"the attached state or a new state"},{"name":"setBlockState","params":[{"name":"blockState","type":"BlockState","desc":"the block state to attach to the block."}],"desc":"Attaches a copy of the passed block state to the item.","ret":""}],"desc":""},{"FQCN":"org.bukkit.inventory.meta.ColorableArmorMeta","methods":[],"desc":"Represents armor that an entity can equip and can also be colored."},{"FQCN":"org.bukkit.inventory.meta.SkullMeta","methods":[{"name":"getOwner","params":[],"desc":"Gets the owner of the skull.","ret":"the owner if the skull"},{"name":"hasOwner","params":[],"desc":"Checks to see if the skull has an owner.","ret":"true if the skull has an owner"},{"name":"setOwner","params":[{"name":"owner","type":"String","desc":"the new owner of the skull"}],"desc":"Sets the owner of the skull.","ret":"true if the owner was successfully set"},{"name":"setPlayerProfile","params":[{"name":"profile","type":"com.destroystokyo.paper.profile.PlayerProfile","desc":"The profile to set this Skull to use, or null to clear owner"}],"desc":"Sets this skull to use the supplied Player Profile, which can include textures already prefilled.","ret":""},{"name":"getPlayerProfile","params":[],"desc":"If the skull has an owner, per {@link #hasOwner()}, return the owners {@link com.destroystokyo.paper.profile.PlayerProfile}","ret":"The profile of the owner, if set"},{"name":"getOwningPlayer","params":[],"desc":"Gets the owner of the skull.","ret":"the owner if the skull"},{"name":"setOwningPlayer","params":[{"name":"owner","type":"OfflinePlayer","desc":"the new owner of the skull"}],"desc":"Sets the owner of the skull.\n<p>\nPlugins should check that hasOwner() returns true before calling this\nplugin.","ret":"true if the owner was successfully set"},{"name":"getOwnerProfile","params":[],"desc":"Gets the profile of the player who owns the skull. This player profile\nmay appear as the texture depending on skull type.","ret":"the profile of the owning player"},{"name":"setOwnerProfile","params":[{"name":"profile","type":"PlayerProfile","desc":"the profile of the owning player"}],"desc":"Sets the profile of the player who owns the skull. This player profile\nmay appear as the texture depending on skull type.\n<p>\nThe profile must contain both a unique id and a skin texture. If either\nof these is missing, the profile must contain a name by which the server\nwill then attempt to look up the unique id and skin texture.","ret":""},{"name":"setNoteBlockSound","params":[{"name":"noteBlockSound","type":"NamespacedKey","desc":"the key of the sound to be played, or null"}],"desc":"Sets the sound to play if the skull is placed on a note block.\n<br>\n<strong>Note:</strong> This only works for player heads. For other heads,\nsee {@link org.bukkit.Instrument}.","ret":""},{"name":"getNoteBlockSound","params":[],"desc":"Gets the sound to play if the skull is placed on a note block.\n<br>\n<strong>Note:</strong> This only works for player heads. For other heads,\nsee {@link org.bukkit.Instrument}.","ret":"the key of the sound, or null"}],"desc":"Represents a skull that can have an owner."},{"FQCN":"org.bukkit.inventory.meta.ArmorMeta","methods":[{"name":"hasTrim","params":[],"desc":"Check whether or not this item has an armor trim.","ret":"true if has a trim, false otherwise"},{"name":"setTrim","params":[{"name":"trim","type":"ArmorTrim","desc":"the trim to set, or null to remove it"}],"desc":"Set the {@link ArmorTrim}.","ret":""},{"name":"getTrim","params":[],"desc":"Get the {@link ArmorTrim}.","ret":"the armor trim, or null if none"}],"desc":"Represents armor that an entity can equip.\n<p>\n<strong>Note: Armor trims are part of an experimental feature of Minecraft\nand hence subject to change.</strong>"},{"FQCN":"org.bukkit.inventory.meta.CrossbowMeta","methods":[{"name":"hasChargedProjectiles","params":[],"desc":"Returns whether the item has any charged projectiles.","ret":"whether charged projectiles are present"},{"name":"getChargedProjectiles","params":[],"desc":"Returns an immutable list of the projectiles charged on this item.","ret":"charged projectiles"},{"name":"setChargedProjectiles","params":[{"name":"projectiles","type":"List<ItemStack>","desc":"the projectiles to set"}],"desc":"Sets the projectiles charged on this item.\n\nRemoves all projectiles when given null.","ret":""},{"name":"addChargedProjectile","params":[{"name":"item","type":"ItemStack","desc":"projectile"}],"desc":"Adds a charged projectile to this item.","ret":""}],"desc":""},{"FQCN":"org.bukkit.inventory.meta.BlockDataMeta","methods":[{"name":"hasBlockData","params":[],"desc":"Returns whether the item has block data currently attached to it.","ret":"whether block data is already attached"},{"name":"getBlockData","params":[{"name":"material","type":"Material","desc":"the material we wish to get this data in the context of"}],"desc":"Returns the currently attached block data for this item or creates a new\none if one doesn't exist.\n\nThe state is a copy, it must be set back (or to another item) with\n{@link #setBlockData(org.bukkit.block.data.BlockData)}","ret":"the attached data or new data"},{"name":"setBlockData","params":[{"name":"blockData","type":"BlockData","desc":"the block data to attach to the block."}],"desc":"Attaches a copy of the passed block data to the item.","ret":""}],"desc":""},{"FQCN":"org.bukkit.inventory.meta.AxolotlBucketMeta","methods":[{"name":"getVariant","params":[],"desc":"Get the variant of the axolotl in the bucket.\n<p>\nPlugins should check that hasVariant() returns <code>true</code> before\ncalling this method.","ret":"axolotl variant"},{"name":"setVariant","params":[{"name":"variant","type":"Axolotl.Variant","desc":"axolotl variant"}],"desc":"Set the variant of this axolotl in the bucket.","ret":""},{"name":"hasVariant","params":[],"desc":"Checks for existence of a variant tag indicating a specific axolotl will be\nspawned.","ret":"if there is a variant"}],"desc":"Represents a bucket of axolotl."},{"FQCN":"org.bukkit.inventory.meta.TropicalFishBucketMeta","methods":[{"name":"getPatternColor","params":[],"desc":"Gets the color of the fish's pattern.\n<p>\nPlugins should check that hasVariant() returns <code>true</code> before\ncalling this method.","ret":"pattern color"},{"name":"setPatternColor","params":[{"name":"color","type":"DyeColor","desc":"pattern color"}],"desc":"Sets the color of the fish's pattern.\n<p>\nSetting this when hasVariant() returns <code>false</code> will initialize\nall other values to unspecified defaults.","ret":""},{"name":"getBodyColor","params":[],"desc":"Gets the color of the fish's body.\n<p>\nPlugins should check that hasVariant() returns <code>true</code> before\ncalling this method.","ret":"pattern color"},{"name":"setBodyColor","params":[{"name":"color","type":"DyeColor","desc":"body color"}],"desc":"Sets the color of the fish's body.\n<p>\nSetting this when hasVariant() returns <code>false</code> will initialize\nall other values to unspecified defaults.","ret":""},{"name":"getPattern","params":[],"desc":"Gets the fish's pattern.\n<p>\nPlugins should check that hasVariant() returns <code>true</code> before\ncalling this method.","ret":"pattern"},{"name":"setPattern","params":[{"name":"pattern","type":"TropicalFish.Pattern","desc":"new pattern"}],"desc":"Sets the fish's pattern.\n<p>\nSetting this when hasVariant() returns <code>false</code> will initialize\nall other values to unspecified defaults.","ret":""},{"name":"hasVariant","params":[],"desc":"Checks for existence of a variant tag indicating a specific fish will be\nspawned.","ret":"if there is a variant"}],"desc":"Represents a bucket of tropical fish."},{"FQCN":"org.bukkit.inventory.meta.KnowledgeBookMeta","methods":[{"name":"hasRecipes","params":[],"desc":"Checks for the existence of recipes in the book.","ret":"true if the book has recipes"},{"name":"getRecipes","params":[],"desc":"Gets all the recipes in the book.","ret":"list of all the recipes in the book"},{"name":"setRecipes","params":[{"name":"recipes","type":"List<NamespacedKey>","desc":"A list of recipes to set the book to use"}],"desc":"Clears the existing book recipes, and sets the book to use the provided\nrecipes.","ret":""},{"name":"addRecipe","params":[{"name":"recipes","type":"NamespacedKey","desc":"A list of recipe keys"}],"desc":"Adds new recipe to the end of the book.","ret":""}],"desc":""},{"FQCN":"org.bukkit.inventory.meta.SuspiciousStewMeta","methods":[{"name":"hasCustomEffects","params":[],"desc":"Checks for the presence of custom potion effects.","ret":"true if custom potion effects are applied"},{"name":"getCustomEffects","params":[],"desc":"Gets an immutable list containing all custom potion effects applied to\nthis suspicious stew.\n<p>\nPlugins should check that hasCustomEffects() returns true before calling\nthis method.","ret":"the immutable list of custom potion effects"},{"name":"addCustomEffect","params":[{"name":"effect","type":"PotionEffect","desc":"the potion effect to add"},{"name":"overwrite","type":"boolean","desc":"true if any existing effect of the same type should be\noverwritten"}],"desc":"Adds a custom potion effect to this suspicious stew.","ret":"true if the suspicious stew meta changed as a result of this call"},{"name":"addCustomEffect","params":[{"name":"suspiciousEffectEntry","type":"io.papermc.paper.potion.SuspiciousEffectEntry","desc":"the suspicious effect entry to add"},{"name":"overwrite","type":"boolean","desc":"true if any existing effect of the same type should be\noverwritten"}],"desc":"Adds a custom potion effect to this suspicious stew.","ret":"true if the suspicious stew meta changed as a result of this call\nas a result of this call"},{"name":"removeCustomEffect","params":[{"name":"type","type":"PotionEffectType","desc":"the potion effect type to remove"}],"desc":"Removes a custom potion effect from this suspicious stew.","ret":"true if the suspicious stew meta changed as a result of this call"},{"name":"hasCustomEffect","params":[{"name":"type","type":"PotionEffectType","desc":"the potion effect type to check for"}],"desc":"Checks for a specific custom potion effect type on this suspicious stew.","ret":"true if the suspicious stew has this effect"},{"name":"clearCustomEffects","params":[],"desc":"Removes all custom potion effects from this suspicious stew.","ret":"true if the suspicious stew meta changed as a result of this call"}],"desc":"Represents a suspicious stew that can have custom effects."},{"FQCN":"org.bukkit.inventory.meta.ItemMeta","methods":[{"name":"hasDisplayName","params":[],"desc":"Checks for existence of a display name.","ret":"true if this has a display name"},{"name":"displayName","params":[],"desc":"Gets the display name.\n\n<p>Plugins should check that {@link #hasDisplayName()} returns <code>true</code> before calling this method.</p>","ret":"the display name"},{"name":"displayName","params":[{"name":"displayName","type":"net.kyori.adventure.text.Component","desc":"the display name to set"}],"desc":"Sets the display name.","ret":""},{"name":"getDisplayName","params":[],"desc":"Gets the display name that is set.\n<p>\nPlugins should check that hasDisplayName() returns <code>true</code>\nbefore calling this method.","ret":"the display name that is set"},{"name":"getDisplayNameComponent","params":[],"desc":"Gets the display name that is set.\n<p>\nPlugins should check that hasDisplayName() returns <code>true</code>\nbefore calling this method.","ret":"the display name that is set"},{"name":"setDisplayName","params":[{"name":"name","type":"String","desc":"the name to set"}],"desc":"Sets the display name.","ret":""},{"name":"setDisplayNameComponent","params":[{"name":"component","type":"net.md_5.bungee.api.chat.BaseComponent[]","desc":"the name component to set"}],"desc":"Sets the display name.","ret":""},{"name":"hasLocalizedName","params":[],"desc":"Checks for existence of a localized name.","ret":"true if this has a localized name"},{"name":"getLocalizedName","params":[],"desc":"Gets the localized display name that is set.\n<p>\nPlugins should check that hasLocalizedName() returns <code>true</code>\nbefore calling this method.","ret":"the localized name that is set"},{"name":"setLocalizedName","params":[{"name":"name","type":"String","desc":"the name to set"}],"desc":"Sets the localized name.","ret":""},{"name":"hasLore","params":[],"desc":"Checks for existence of lore.","ret":"true if this has lore"},{"name":"lore","params":[],"desc":"Gets the lore.\n\n<p>Plugins should check that {@link #hasLore()} returns <code>true</code> before calling this method.</p>","ret":"the lore"},{"name":"lore","params":[{"name":"lore","type":"List<? extends net.kyori.adventure.text.Component>","desc":"the lore to set"}],"desc":"Sets the lore.","ret":""},{"name":"getLore","params":[],"desc":"Gets the lore that is set.\n<p>\nPlugins should check if hasLore() returns <code>true</code> before\ncalling this method.","ret":"a list of lore that is set"},{"name":"getLoreComponents","params":[],"desc":"Gets the lore that is set.\n<p>\nPlugins should check if hasLore() returns <code>true</code> before\ncalling this method.","ret":"a list of lore that is set"},{"name":"setLore","params":[{"name":"lore","type":"List<String>","desc":"the lore that will be set"}],"desc":"Sets the lore for this item.\nRemoves lore when given null.","ret":""},{"name":"setLoreComponents","params":[{"name":"lore","type":"List<net.md_5.bungee.api.chat.BaseComponent[]>","desc":"the lore that will be set"}],"desc":"Sets the lore for this item.\nRemoves lore when given null.","ret":""},{"name":"hasCustomModelData","params":[],"desc":"Checks for existence of custom model data.\n<p>\nCustomModelData is an integer that may be associated client side with a\ncustom item model.","ret":"true if this has custom model data"},{"name":"getCustomModelData","params":[],"desc":"Gets the custom model data that is set.\n<p>\nCustomModelData is an integer that may be associated client side with a\ncustom item model.\n<p>\nPlugins should check that hasCustomModelData() returns <code>true</code>\nbefore calling this method.","ret":"the custom model data that is set"},{"name":"setCustomModelData","params":[{"name":"data","type":"Integer","desc":"the data to set, or null to clear"}],"desc":"Sets the custom model data.\n<p>\nCustomModelData is an integer that may be associated client side with a\ncustom item model.","ret":""},{"name":"hasEnchants","params":[],"desc":"Checks for the existence of any enchantments.","ret":"true if an enchantment exists on this meta"},{"name":"hasEnchant","params":[{"name":"ench","type":"Enchantment","desc":"enchantment to check"}],"desc":"Checks for existence of the specified enchantment.","ret":"true if this enchantment exists for this meta"},{"name":"getEnchantLevel","params":[{"name":"ench","type":"Enchantment","desc":"enchantment to check"}],"desc":"Checks for the level of the specified enchantment.","ret":"The level that the specified enchantment has, or 0 if none"},{"name":"getEnchants","params":[],"desc":"Returns a copy the enchantments in this ItemMeta. <br>\nReturns an empty map if none.","ret":"An immutable copy of the enchantments"},{"name":"addEnchant","params":[{"name":"ench","type":"Enchantment","desc":"Enchantment to add"},{"name":"level","type":"int","desc":"Level for the enchantment"},{"name":"ignoreLevelRestriction","type":"boolean","desc":"this indicates the enchantment should be\n    applied, ignoring the level limit"}],"desc":"Adds the specified enchantment to this item meta.","ret":"true if the item meta changed as a result of this call, false\n    otherwise"},{"name":"removeEnchant","params":[{"name":"ench","type":"Enchantment","desc":"Enchantment to remove"}],"desc":"Removes the specified enchantment from this item meta.","ret":"true if the item meta changed as a result of this call, false\n    otherwise"},{"name":"removeEnchantments","params":[],"desc":"Removes all enchantments from this item meta.","ret":""},{"name":"hasConflictingEnchant","params":[{"name":"ench","type":"Enchantment","desc":"enchantment to test"}],"desc":"Checks if the specified enchantment conflicts with any enchantments in\nthis ItemMeta.","ret":"true if the enchantment conflicts, false otherwise"},{"name":"addItemFlags","params":[{"name":"itemFlags","type":"ItemFlag","desc":"The hideflags which shouldn't be rendered"}],"desc":"Set itemflags which should be ignored when rendering a ItemStack in the Client. This Method does silently ignore double set itemFlags.","ret":""},{"name":"removeItemFlags","params":[{"name":"itemFlags","type":"ItemFlag","desc":"Hideflags which should be removed"}],"desc":"Remove specific set of itemFlags. This tells the Client it should render it again. This Method does silently ignore double removed itemFlags.","ret":""},{"name":"getItemFlags","params":[],"desc":"Get current set itemFlags. The collection returned is unmodifiable.","ret":"A set of all itemFlags set"},{"name":"hasItemFlag","params":[{"name":"flag","type":"ItemFlag","desc":"the flag to check"}],"desc":"Check if the specified flag is present on this item.","ret":"if it is present"},{"name":"isUnbreakable","params":[],"desc":"Return if the unbreakable tag is true. An unbreakable item will not lose\ndurability.","ret":"true if the unbreakable tag is true"},{"name":"setUnbreakable","params":[{"name":"unbreakable","type":"boolean","desc":"true if set unbreakable"}],"desc":"Sets the unbreakable tag. An unbreakable item will not lose durability.","ret":""},{"name":"hasAttributeModifiers","params":[],"desc":"Checks for the existence of any AttributeModifiers.","ret":"true if any AttributeModifiers exist"},{"name":"getAttributeModifiers","params":[],"desc":"Return an immutable copy of all Attributes and\ntheir modifiers in this ItemMeta.<br>\nReturns null if none exist.","ret":"an immutable {@link Multimap} of Attributes\n        and their AttributeModifiers, or null if none exist"},{"name":"getAttributeModifiers","params":[{"name":"slot","type":"EquipmentSlot","desc":"the {@link EquipmentSlot} to check"}],"desc":"Return an immutable copy of all {@link Attribute}s and their\n{@link AttributeModifier}s for a given {@link EquipmentSlot}.<br>\nAny {@link AttributeModifier} that does have a given\n{@link EquipmentSlot} will be returned. This is because\nAttributeModifiers without a slot are active in any slot.<br>\nIf there are no attributes set for the given slot, an empty map\nwill be returned.","ret":"the immutable {@link Multimap} with the\n        respective Attributes and modifiers, or an empty map\n        if no attributes are set."},{"name":"getAttributeModifiers","params":[{"name":"attribute","type":"Attribute","desc":"the {@link Attribute}"}],"desc":"Return an immutable copy of all {@link AttributeModifier}s\nfor a given {@link Attribute}","ret":"an immutable collection of {@link AttributeModifier}s\n         or null if no AttributeModifiers exist for the Attribute."},{"name":"addAttributeModifier","params":[{"name":"attribute","type":"Attribute","desc":"the {@link Attribute} to modify"},{"name":"modifier","type":"AttributeModifier","desc":"the {@link AttributeModifier} specifying the modification"}],"desc":"Add an Attribute and it's Modifier.\nAttributeModifiers can now support {@link EquipmentSlot}s.\nIf not set, the {@link AttributeModifier} will be active in ALL slots.\n<br>\nTwo {@link AttributeModifier}s that have the same {@link java.util.UUID}\ncannot exist on the same Attribute.","ret":"true if the Attribute and AttributeModifier were\n        successfully added"},{"name":"setAttributeModifiers","params":[{"name":"attributeModifiers","type":"Multimap<Attribute,AttributeModifier>","desc":"the new Multimap containing the Attributes\n                          and their AttributeModifiers"}],"desc":"Set all {@link Attribute}s and their {@link AttributeModifier}s.\nTo clear all currently set Attributes and AttributeModifiers use\nnull or an empty Multimap.\nIf not null nor empty, this will filter all entries that are not-null\nand add them to the ItemStack.","ret":""},{"name":"removeAttributeModifier","params":[{"name":"attribute","type":"Attribute","desc":"attribute to remove"}],"desc":"Remove all {@link AttributeModifier}s associated with the given\n{@link Attribute}.\nThis will return false if nothing was removed.","ret":"true if all modifiers were removed from a given\n                 Attribute. Returns false if no attributes were\n                 removed."},{"name":"removeAttributeModifier","params":[{"name":"slot","type":"EquipmentSlot","desc":"the {@link EquipmentSlot} to clear all Attributes and\n            their modifiers for"}],"desc":"Remove all {@link Attribute}s and {@link AttributeModifier}s for a\ngiven {@link EquipmentSlot}.<br>\nIf the given {@link EquipmentSlot} is null, this will remove all\n{@link AttributeModifier}s that do not have an EquipmentSlot set.","ret":"true if all modifiers were removed that match the given\n        EquipmentSlot."},{"name":"removeAttributeModifier","params":[{"name":"attribute","type":"Attribute","desc":"the {@link Attribute} to remove"},{"name":"modifier","type":"AttributeModifier","desc":"the {@link AttributeModifier} to remove"}],"desc":"Remove a specific {@link Attribute} and {@link AttributeModifier}.\nAttributeModifiers are matched according to their {@link java.util.UUID}.","ret":"if any attribute modifiers were remove"},{"name":"getAsString","params":[],"desc":"Get this ItemMeta as an NBT string.\n<p>\nThis string should not be relied upon as a serializable value. If\nserialization is desired, the {@link ConfigurationSerializable} API\nshould be used instead.","ret":"the NBT string"},{"name":"getCustomTagContainer","params":[],"desc":"Returns a public custom tag container capable of storing tags on the\nitem.\n\nThose tags will be sent to the client with all of their content, so the\nclient is capable of reading them. This will result in the player seeing\na NBT Tag notification on the item.\n\nThese tags can also be modified by the client once in creative mode","ret":"the custom tag container"},{"name":"setVersion","params":[{"name":"version","type":"int","desc":"version"}],"desc":"Internal use only! Do not use under any circumstances!","ret":""},{"name":"getCanDestroy","params":[],"desc":"Gets set of materials what given item can destroy in {@link org.bukkit.GameMode#ADVENTURE}","ret":"Set of materials"},{"name":"setCanDestroy","params":[{"name":"canDestroy","type":"Set<org.bukkit.Material>","desc":"Set of materials"}],"desc":"Sets set of materials what given item can destroy in {@link org.bukkit.GameMode#ADVENTURE}","ret":""},{"name":"getCanPlaceOn","params":[],"desc":"Gets set of materials where given item can be placed on in {@link org.bukkit.GameMode#ADVENTURE}","ret":"Set of materials"},{"name":"setCanPlaceOn","params":[{"name":"canPlaceOn","type":"Set<org.bukkit.Material>","desc":"Set of materials"}],"desc":"Sets set of materials where given item can be placed on in {@link org.bukkit.GameMode#ADVENTURE}","ret":""},{"name":"getDestroyableKeys","params":[],"desc":"Gets the collection of namespaced keys that the item can destroy in {@link org.bukkit.GameMode#ADVENTURE}","ret":"Set of {@link com.destroystokyo.paper.Namespaced}"},{"name":"setDestroyableKeys","params":[{"name":"canDestroy","type":"Collection<com.destroystokyo.paper.Namespaced>","desc":"Collection of {@link com.destroystokyo.paper.Namespaced}"}],"desc":"Sets the collection of namespaced keys that the item can destroy in {@link org.bukkit.GameMode#ADVENTURE}","ret":""},{"name":"getPlaceableKeys","params":[],"desc":"Gets the collection of namespaced keys that the item can be placed on in {@link org.bukkit.GameMode#ADVENTURE}","ret":"Set of {@link com.destroystokyo.paper.Namespaced}"},{"name":"setPlaceableKeys","params":[{"name":"canPlaceOn","type":"Collection<com.destroystokyo.paper.Namespaced>","desc":"Collection of {@link com.destroystokyo.paper.Namespaced}"}],"desc":"Sets the set of namespaced keys that the item can be placed on in {@link org.bukkit.GameMode#ADVENTURE}","ret":""},{"name":"hasPlaceableKeys","params":[],"desc":"Checks for the existence of any keys that the item can be placed on","ret":"true if this item has placeable keys"},{"name":"hasDestroyableKeys","params":[],"desc":"Checks for the existence of any keys that the item can destroy","ret":"true if this item has destroyable keys"}],"desc":"This type represents the storage mechanism for auxiliary item data.\n<p>\nAn implementation will handle the creation and application for ItemMeta.\nThis class should not be implemented by a plugin in a live environment."},{"FQCN":"org.bukkit.inventory.ShapedRecipe","methods":[{"name":"shape","params":[{"name":"shape","type":"String","desc":"The rows of the recipe (up to 3 rows)."}],"desc":"Set the shape of this recipe to the specified rows. Each character\nrepresents a different ingredient; exactly what each character\nrepresents is set separately. The first row supplied corresponds with\nthe upper most part of the recipe on the workbench e.g. if all three\nrows are supplies the first string represents the top row on the\nworkbench.","ret":"The changed recipe, so you can chain calls."},{"name":"setIngredient","params":[{"name":"key","type":"char","desc":"The character that represents the ingredient in the shape."},{"name":"ingredient","type":"MaterialData","desc":"The ingredient."}],"desc":"Sets the material that a character in the recipe shape refers to.\n<p>\nNote that before an ingredient can be set, the recipe's shape must be defined\nwith {@link #shape(String...)}.","ret":"The changed recipe, so you can chain calls."},{"name":"setIngredient","params":[{"name":"key","type":"char","desc":"The character that represents the ingredient in the shape."},{"name":"ingredient","type":"Material","desc":"The ingredient."}],"desc":"Sets the material that a character in the recipe shape refers to.\n<p>\nNote that before an ingredient can be set, the recipe's shape must be defined\nwith {@link #shape(String...)}.","ret":"The changed recipe, so you can chain calls."},{"name":"setIngredient","params":[{"name":"key","type":"char","desc":"The character that represents the ingredient in the shape."},{"name":"ingredient","type":"Material","desc":"The ingredient."},{"name":"raw","type":"int","desc":"The raw material data as an integer."}],"desc":"Sets the material that a character in the recipe shape refers to.\n<p>\nNote that before an ingredient can be set, the recipe's shape must be defined\nwith {@link #shape(String...)}.","ret":"The changed recipe, so you can chain calls."},{"name":"setIngredient","params":[{"name":"key","type":"char","desc":"The character that represents the ingredient in the shape."},{"name":"ingredient","type":"RecipeChoice","desc":"The ingredient."}],"desc":"Sets the {@link RecipeChoice} that a character in the recipe shape refers to.\n<p>\nNote that before an ingredient can be set, the recipe's shape must be defined\nwith {@link #shape(String...)}.","ret":"The changed recipe, so you can chain calls."},{"name":"getIngredientMap","params":[],"desc":"Get a copy of the ingredients map.","ret":"The mapping of character to ingredients."},{"name":"getChoiceMap","params":[],"desc":"Get a copy of the choice map.","ret":"The mapping of character to ingredients."},{"name":"getShape","params":[],"desc":"Get the shape.","ret":"The recipe's shape."}],"desc":"Represents a shaped (ie normal) crafting recipe."},{"FQCN":"org.bukkit.inventory.HorseInventory","methods":[],"desc":"An interface to the inventory of a Horse."},{"FQCN":"org.bukkit.inventory.SmithingTransformRecipe","methods":[{"name":"getTemplate","params":[],"desc":"Get the template recipe item.","ret":"template choice"}],"desc":"Represents a smithing transform recipe."},{"FQCN":"org.bukkit.inventory.BlockInventoryHolder","methods":[{"name":"getBlock","params":[],"desc":"Gets the block associated with this holder.","ret":"the block associated with this holder"}],"desc":"Represents a block inventory holder - either a BlockState, or a regular\nBlock."},{"FQCN":"org.bukkit.inventory.FurnaceRecipe","methods":[{"name":"setInput","params":[{"name":"input","type":"MaterialData","desc":"The input material."}],"desc":"Sets the input of this furnace recipe.","ret":"The changed recipe, so you can chain calls."},{"name":"setInput","params":[{"name":"input","type":"Material","desc":"The input material."},{"name":"data","type":"int","desc":"The data value. (Note: This is currently ignored by the\n    CraftBukkit server.)"}],"desc":"Sets the input of this furnace recipe.","ret":"The changed recipe, so you can chain calls."}],"desc":"Represents a furnace recipe."},{"FQCN":"org.bukkit.inventory.MerchantInventory","methods":[{"name":"getSelectedRecipeIndex","params":[],"desc":"Get the index of the currently selected recipe.","ret":"the index of the currently selected recipe"},{"name":"getSelectedRecipe","params":[],"desc":"Get the currently active recipe.\n<p>\nThis will be <code>null</code> if the items provided by the player do\nnot match the ingredients of the selected recipe. This does not\nnecessarily match the recipe selected by the player: If the player has\nselected the first recipe, the merchant will search all of its offers\nfor a matching recipe to activate.","ret":"the currently active recipe"},{"name":"getMerchant","params":[],"desc":"Gets the Merchant associated with this inventory.","ret":"merchant"}],"desc":"Represents a trading inventory between a player and a merchant.\n<br>\nThe holder of this Inventory is the owning Villager, or null if the player is\ntrading with a merchant created by a plugin."},{"FQCN":"org.bukkit.inventory.CookingRecipe","methods":[{"name":"setInput","params":[{"name":"input","type":"Material","desc":"The input material."}],"desc":"Sets the input of this cooking recipe.","ret":"The changed recipe, so you can chain calls."},{"name":"getInput","params":[],"desc":"Get the input material.","ret":"The input material."},{"name":"setInputChoice","params":[{"name":"input","type":"RecipeChoice","desc":"The input choice."}],"desc":"Sets the input of this cooking recipe.","ret":"The changed recipe, so you can chain calls."},{"name":"getInputChoice","params":[],"desc":"Get the input choice.","ret":"The input choice."},{"name":"getResult","params":[],"desc":"Get the result of this recipe.","ret":"The resulting stack."},{"name":"setExperience","params":[{"name":"experience","type":"float","desc":"the experience level"}],"desc":"Sets the experience given by this recipe.","ret":""},{"name":"getExperience","params":[],"desc":"Get the experience given by this recipe.","ret":"experience level"},{"name":"setCookingTime","params":[{"name":"cookingTime","type":"int","desc":"new cooking time"}],"desc":"Set the cooking time for this recipe in ticks.","ret":""},{"name":"getCookingTime","params":[],"desc":"Get the cooking time for this recipe in ticks.","ret":"cooking time"},{"name":"getGroup","params":[],"desc":"Get the group of this recipe. Recipes with the same group may be grouped\ntogether when displayed in the client.","ret":"recipe group. An empty string denotes no group. May not be null."},{"name":"setGroup","params":[{"name":"group","type":"String","desc":"recipe group. An empty string denotes no group. May not be\nnull."}],"desc":"Set the group of this recipe. Recipes with the same group may be grouped\ntogether when displayed in the client.","ret":""},{"name":"getCategory","params":[],"desc":"Gets the category which this recipe will appear in the recipe book under.\n\nDefaults to {@link CookingBookCategory#MISC} if not set.","ret":"recipe book category"},{"name":"setCategory","params":[{"name":"category","type":"CookingBookCategory","desc":"recipe book category"}],"desc":"Sets the category which this recipe will appear in the recipe book under.\n\nDefaults to {@link CookingBookCategory#MISC} if not set.","ret":""}],"desc":"Represents a cooking recipe."},{"FQCN":"org.bukkit.inventory.FurnaceInventory","methods":[{"name":"getResult","params":[],"desc":"Get the current item in the result slot.","ret":"The item"},{"name":"getFuel","params":[],"desc":"Get the current fuel.","ret":"The item"},{"name":"getSmelting","params":[],"desc":"Get the item currently smelting.","ret":"The item"},{"name":"setFuel","params":[{"name":"stack","type":"ItemStack","desc":"The item"}],"desc":"Set the current fuel.","ret":""},{"name":"setResult","params":[{"name":"stack","type":"ItemStack","desc":"The item"}],"desc":"Set the current item in the result slot.","ret":""},{"name":"setSmelting","params":[{"name":"stack","type":"ItemStack","desc":"The item"}],"desc":"Set the item currently smelting.","ret":""},{"name":"isFuel","params":[{"name":"item","type":"ItemStack","desc":"Item to check"}],"desc":"Check if an item can be used as a fuel source in this furnace container","ret":"True if a valid fuel source"},{"name":"canSmelt","params":[{"name":"item","type":"ItemStack","desc":"Item to check"}],"desc":"Check if an item can be smelted in this furnace container","ret":"True if can be smelt"}],"desc":"Interface to the inventory of a Furnace."},{"FQCN":"org.bukkit.inventory.ShapelessRecipe","methods":[{"name":"addIngredient","params":[{"name":"ingredient","type":"MaterialData","desc":"The ingredient to add."}],"desc":"Adds the specified ingredient.","ret":"The changed recipe, so you can chain calls."},{"name":"addIngredient","params":[{"name":"ingredient","type":"Material","desc":"The ingredient to add."}],"desc":"Adds the specified ingredient.","ret":"The changed recipe, so you can chain calls."},{"name":"addIngredient","params":[{"name":"ingredient","type":"Material","desc":"The ingredient to add."},{"name":"rawdata","type":"int","desc":"The data value, or -1 to allow any data value."}],"desc":"Adds the specified ingredient.","ret":"The changed recipe, so you can chain calls."},{"name":"addIngredient","params":[{"name":"count","type":"int","desc":"How many to add (can't be more than 9!)"},{"name":"ingredient","type":"MaterialData","desc":"The ingredient to add."}],"desc":"Adds multiples of the specified ingredient.","ret":"The changed recipe, so you can chain calls."},{"name":"addIngredient","params":[{"name":"count","type":"int","desc":"How many to add (can't be more than 9!)"},{"name":"ingredient","type":"Material","desc":"The ingredient to add."}],"desc":"Adds multiples of the specified ingredient.","ret":"The changed recipe, so you can chain calls."},{"name":"addIngredient","params":[{"name":"count","type":"int","desc":"How many to add (can't be more than 9!)"},{"name":"ingredient","type":"Material","desc":"The ingredient to add."},{"name":"rawdata","type":"int","desc":"The data value, or -1 to allow any data value."}],"desc":"Adds multiples of the specified ingredient.","ret":"The changed recipe, so you can chain calls."},{"name":"removeIngredient","params":[{"name":"ingredient","type":"RecipeChoice","desc":"The ingredient to remove"}],"desc":"Removes an ingredient from the list.","ret":"The changed recipe."},{"name":"removeIngredient","params":[{"name":"ingredient","type":"Material","desc":"The ingredient to remove"}],"desc":"Removes an ingredient from the list. If the ingredient occurs multiple\ntimes, only one instance of it is removed. Only removes exact matches,\nwith a data value of 0.","ret":"The changed recipe."},{"name":"removeIngredient","params":[{"name":"ingredient","type":"MaterialData","desc":"The ingredient to remove"}],"desc":"Removes an ingredient from the list. If the ingredient occurs multiple\ntimes, only one instance of it is removed. If the data value is -1,\nonly ingredients with a -1 data value will be removed.","ret":"The changed recipe."},{"name":"removeIngredient","params":[{"name":"count","type":"int","desc":"The number of copies to remove."},{"name":"ingredient","type":"Material","desc":"The ingredient to remove"}],"desc":"Removes multiple instances of an ingredient from the list. If there are\nfewer instances than specified, all will be removed. Only removes exact\nmatches, with a data value of 0.","ret":"The changed recipe."},{"name":"removeIngredient","params":[{"name":"count","type":"int","desc":"The number of copies to remove."},{"name":"ingredient","type":"MaterialData","desc":"The ingredient to remove."}],"desc":"Removes multiple instances of an ingredient from the list. If there are\nless instances then specified, all will be removed. If the data value\nis -1, only ingredients with a -1 data value will be removed.","ret":"The changed recipe."},{"name":"removeIngredient","params":[{"name":"ingredient","type":"Material","desc":"The ingredient to remove"},{"name":"rawdata","type":"int","desc":"The data value;"}],"desc":"Removes an ingredient from the list. If the ingredient occurs multiple\ntimes, only one instance of it is removed. If the data value is -1,\nonly ingredients with a -1 data value will be removed.","ret":"The changed recipe."},{"name":"removeIngredient","params":[{"name":"count","type":"int","desc":"The number of copies to remove."},{"name":"ingredient","type":"Material","desc":"The ingredient to remove."},{"name":"rawdata","type":"int","desc":"The data value."}],"desc":"Removes multiple instances of an ingredient from the list. If there are\nless instances then specified, all will be removed. If the data value\nis -1, only ingredients with a -1 data value will be removed.","ret":"The changed recipe."},{"name":"getIngredientList","params":[],"desc":"Get the list of ingredients used for this recipe.","ret":"The input list"}],"desc":"Represents a shapeless recipe, where the arrangement of the ingredients on\nthe crafting grid does not matter."},{"FQCN":"org.bukkit.inventory.SmokingRecipe","methods":[],"desc":"Represents a campfire recipe."},{"FQCN":"org.bukkit.inventory.CraftingRecipe","methods":[{"name":"getResult","params":[],"desc":"Get the result of this recipe.","ret":"The result stack."},{"name":"getGroup","params":[],"desc":"Get the group of this recipe. Recipes with the same group may be grouped\ntogether when displayed in the client.","ret":"recipe group. An empty string denotes no group. May not be null."},{"name":"setGroup","params":[{"name":"group","type":"String","desc":"recipe group. An empty string denotes no group. May not be\nnull."}],"desc":"Set the group of this recipe. Recipes with the same group may be grouped\ntogether when displayed in the client.","ret":""},{"name":"getCategory","params":[],"desc":"Gets the category which this recipe will appear in the recipe book under.\n\nDefaults to {@link CraftingBookCategory#MISC} if not set.","ret":"recipe book category"},{"name":"setCategory","params":[{"name":"category","type":"CraftingBookCategory","desc":"recipe book category"}],"desc":"Sets the category which this recipe will appear in the recipe book under.\n\nDefaults to {@link CraftingBookCategory#MISC} if not set.","ret":""}],"desc":"Represents a shaped or shapeless crafting recipe."},{"FQCN":"org.bukkit.inventory.SmithingRecipe","methods":[{"name":"getBase","params":[],"desc":"Get the base recipe item.","ret":"base choice"},{"name":"getAddition","params":[],"desc":"Get the addition recipe item.","ret":"addition choice"},{"name":"willCopyNbt","params":[],"desc":"Whether or not to copy the NBT of the input base item to the output.","ret":"true to copy the NBT (default for vanilla smithing recipes)"}],"desc":"Represents a smithing recipe."},{"FQCN":"org.bukkit.inventory.CraftingInventory","methods":[{"name":"getResult","params":[],"desc":"Check what item is in the result slot of this crafting inventory.","ret":"The result item."},{"name":"setResult","params":[{"name":"newResult","type":"ItemStack","desc":"The new result item."}],"desc":"Set the item in the result slot of the crafting inventory.","ret":""},{"name":"getRecipe","params":[],"desc":"Get the current recipe formed on the crafting inventory, if any.","ret":"The recipe, or null if the current contents don't match any\n    recipe."}],"desc":"Interface to the crafting inventories"},{"FQCN":"org.bukkit.inventory.SaddledHorseInventory","methods":[],"desc":""},{"FQCN":"org.bukkit.inventory.Recipe","methods":[{"name":"getResult","params":[],"desc":"Get the result of this recipe.","ret":"The result stack"}],"desc":"Represents some type of crafting recipe."},{"FQCN":"org.bukkit.inventory.Merchant","methods":[{"name":"getRecipes","params":[],"desc":"Get a list of trades currently available from this merchant.","ret":"an immutable list of trades"},{"name":"setRecipes","params":[{"name":"recipes","type":"List<MerchantRecipe>","desc":"a list of recipes"}],"desc":"Set the list of trades currently available from this merchant.\n<br>\nThis will not change the selected trades of players currently trading\nwith this merchant.","ret":""},{"name":"getRecipe","params":[{"name":"i","type":"int","desc":"the index"}],"desc":"Get the recipe at a certain index of this merchant's trade list.","ret":"the recipe"},{"name":"setRecipe","params":[{"name":"i","type":"int","desc":"the index"},{"name":"recipe","type":"MerchantRecipe","desc":"the recipe"}],"desc":"Set the recipe at a certain index of this merchant's trade list.","ret":""},{"name":"getRecipeCount","params":[],"desc":"Get the number of trades this merchant currently has available.","ret":"the recipe count"},{"name":"isTrading","params":[],"desc":"Gets whether this merchant is currently trading.","ret":"whether the merchant is trading"},{"name":"getTrader","params":[],"desc":"Gets the player this merchant is trading with, or null if it is not\ncurrently trading.","ret":"the trader, or null"}],"desc":"Represents a merchant. A merchant is a special type of inventory which can\nfacilitate custom trades between items."},{"FQCN":"org.bukkit.inventory.EquipmentSlot","methods":[{"name":"isHand","params":[],"desc":"Checks whether this equipment slot is a hand:\neither {@link #HAND} or {@link #OFF_HAND}","ret":"whether this is a hand slot"},{"name":"isArmor","params":[],"desc":"Checks whether this equipment slot\nis one of the armor slots:\n{@link #HEAD}, {@link #CHEST},\n{@link #LEGS}, or {@link #FEET}","ret":"whether this is an armor slot"}],"desc":""},{"FQCN":"org.bukkit.inventory.InventoryView","methods":[{"name":"getTopInventory","params":[],"desc":"Get the upper inventory involved in this transaction.","ret":"the inventory"},{"name":"getBottomInventory","params":[],"desc":"Get the lower inventory involved in this transaction.","ret":"the inventory"},{"name":"getPlayer","params":[],"desc":"Get the player viewing.","ret":"the player"},{"name":"getType","params":[],"desc":"Determine the type of inventory involved in the transaction. This\nindicates the window style being shown. It will never return PLAYER,\nsince that is common to all windows.","ret":"the inventory type"},{"name":"setItem","params":[{"name":"slot","type":"int","desc":"The ID as returned by InventoryClickEvent.getRawSlot()"},{"name":"item","type":"ItemStack","desc":"The new item to put in the slot, or null to clear it."}],"desc":"Sets one item in this inventory view by its raw slot ID.\n<p>\nNote: If slot ID -999 is chosen, it may be expected that the item is\ndropped on the ground. This is not required behaviour, however.","ret":""},{"name":"getItem","params":[{"name":"slot","type":"int","desc":"The ID as returned by InventoryClickEvent.getRawSlot()"}],"desc":"Gets one item in this inventory view by its raw slot ID.","ret":"The item currently in the slot."},{"name":"setCursor","params":[{"name":"item","type":"ItemStack","desc":"The item to put on the cursor, or null to remove the item\n    on their cursor."}],"desc":"Sets the item on the cursor of one of the viewing players.","ret":""},{"name":"getCursor","params":[],"desc":"Get the item on the cursor of one of the viewing players.","ret":"The item on the player's cursor, or an empty stack\nif they aren't holding one."},{"name":"getInventory","params":[{"name":"rawSlot","type":"int","desc":"The raw slot ID."}],"desc":"Gets the inventory corresponding to the given raw slot ID.\n\nIf the slot ID is {@link #OUTSIDE} null will be returned, otherwise\nbehaviour for illegal and negative slot IDs is undefined.\n\nMay be used with {@link #convertSlot(int)} to directly index an\nunderlying inventory.","ret":"corresponding inventory, or null"},{"name":"convertSlot","params":[{"name":"rawSlot","type":"int","desc":"The raw slot ID."}],"desc":"Converts a raw slot ID into its local slot ID into whichever of the two\ninventories the slot points to.\n<p>\nIf the raw slot refers to the upper inventory, it will be returned\nunchanged and thus be suitable for getTopInventory().getItem(); if it\nrefers to the lower inventory, the output will differ from the input\nand be suitable for getBottomInventory().getItem().","ret":"The converted slot ID."},{"name":"getSlotType","params":[{"name":"slot","type":"int","desc":"The raw slot ID"}],"desc":"Determine the type of the slot by its raw slot ID.\n<p>\nIf the type of the slot is unknown, then\n{@link InventoryType.SlotType#CONTAINER} will be returned.","ret":"the slot type"},{"name":"close","params":[],"desc":"Closes the inventory view.","ret":""},{"name":"countSlots","params":[],"desc":"Check the total number of slots in this view, combining the upper and\nlower inventories.\n<p>\nNote though that it's possible for this to be greater than the sum of\nthe two inventories if for example some slots are not being used.","ret":"The total size"},{"name":"setProperty","params":[{"name":"prop","type":"Property","desc":"the window property to update"},{"name":"value","type":"int","desc":"the new value for the window property"}],"desc":"Sets an extra property of this inventory if supported by that\ninventory, for example the state of a progress bar.","ret":"true if the property was updated successfully, false if the\n    property is not supported by that inventory"},{"name":"title","params":[],"desc":"Get the title of this inventory window.","ret":"The title."},{"name":"getTitle","params":[],"desc":"Get the title of this inventory window.","ret":"The title."},{"name":"getOriginalTitle","params":[],"desc":"Get the original title of this inventory window, before any changes were\nmade using {@link #setTitle(String)}.","ret":"the original title"},{"name":"setTitle","params":[{"name":"title","type":"String","desc":"The new title."}],"desc":"Sets the title of this inventory window to the specified title if the\ninventory window supports it.\n<p>\nNote if the inventory does not support titles that can be changed (ie, it\nis not creatable or viewed by a player), then this method will throw an\nexception.","ret":""}],"desc":"Represents a view linking two inventories and a single player (whose\ninventory may or may not be one of the two).\n<p>\nNote: If you implement this interface but fail to satisfy the expected\ncontracts of certain methods, there's no guarantee that the game will work\nas it should."},{"FQCN":"org.bukkit.inventory.RecipeChoice","methods":[{"name":"getItemStack","params":[],"desc":"Gets a single item stack representative of this stack choice.","ret":"a single representative item"}],"desc":"Represents a potential item match within a recipe. All choices within a\nrecipe must be satisfied for it to be craftable.\n\n<b>This class is not legal for implementation by plugins!</b>"},{"FQCN":"org.bukkit.inventory.SmithingTrimRecipe","methods":[{"name":"getTemplate","params":[],"desc":"Get the template recipe item.","ret":"template choice"}],"desc":"Represents a smithing trim recipe."},{"FQCN":"org.bukkit.inventory.AnvilInventory","methods":[{"name":"getRenameText","params":[],"desc":"Get the name to be applied to the repaired item. An empty string denotes\nthe default item name.","ret":"the rename text"},{"name":"getRepairCostAmount","params":[],"desc":"Get the item cost (in amount) to complete the current repair.","ret":"the amount"},{"name":"setRepairCostAmount","params":[{"name":"amount","type":"int","desc":"the amount"}],"desc":"Set the item cost (in amount) to complete the current repair.","ret":""},{"name":"getRepairCost","params":[],"desc":"Get the experience cost (in levels) to complete the current repair.","ret":"the experience cost"},{"name":"setRepairCost","params":[{"name":"levels","type":"int","desc":"the experience cost"}],"desc":"Set the experience cost (in levels) to complete the current repair.","ret":""},{"name":"getMaximumRepairCost","params":[],"desc":"Get the maximum experience cost (in levels) to be allowed by the current\nrepair. If the result of {@link #getRepairCost()} exceeds the returned\nvalue, the repair result will be air to due being \"too expensive\".\n<p>\nBy default, this level is set to 40. Players in creative mode ignore the\nmaximum repair cost.","ret":"the maximum experience cost"},{"name":"setMaximumRepairCost","params":[{"name":"levels","type":"int","desc":"the maximum experience cost"}],"desc":"Set the maximum experience cost (in levels) to be allowed by the current\nrepair. The default value set by vanilla Minecraft is 40.","ret":""},{"name":"getFirstItem","params":[],"desc":"Gets the item in the left input slot.","ret":"item in the first slot"},{"name":"setFirstItem","params":[{"name":"firstItem","type":"ItemStack","desc":"item to set"}],"desc":"Sets the item in the left input slot.","ret":""},{"name":"getSecondItem","params":[],"desc":"Gets the item in the right input slot.","ret":"item in the second slot"},{"name":"setSecondItem","params":[{"name":"secondItem","type":"ItemStack","desc":"item to set"}],"desc":"Sets the item in the right input slot.","ret":""},{"name":"getResult","params":[],"desc":"Gets the item in the result slot.","ret":"item in the result slot"},{"name":"setResult","params":[{"name":"result","type":"ItemStack","desc":"item to set"}],"desc":"Sets the item in the result slot.\nNote that the client might not be able to take out the item if it does not match the input items.","ret":""}],"desc":"Interface to the inventory of an Anvil."},{"FQCN":"org.bukkit.inventory.ItemCraftResult","methods":[{"name":"getResult","params":[],"desc":"The resulting {@link ItemStack} that was crafted.","ret":"{@link ItemStack} that was crafted."},{"name":"getResultingMatrix","params":[],"desc":"Gets the resulting matrix from the crafting operation.","ret":"resulting matrix"},{"name":"getOverflowItems","params":[],"desc":"Gets the overflowed items for items that don't fit back into the crafting\nmatrix.","ret":"overflow items"}],"desc":"Container class containing the results of a Crafting event.\n<br>\nThis class makes no guarantees about the nature or mutability of the returned\nvalues."},{"FQCN":"org.bukkit.inventory.LecternInventory","methods":[{"name":"getBook","params":[],"desc":"Gets the lectern's held book.","ret":"book set in the lectern"},{"name":"setBook","params":[{"name":"book","type":"ItemStack","desc":"the new book"}],"desc":"Sets the lectern's held book.","ret":""}],"desc":"Interface to the inventory of a Lectern."},{"FQCN":"org.bukkit.inventory.ItemFlag","methods":[],"desc":"A ItemFlag can hide some Attributes from ItemStacks"},{"FQCN":"org.bukkit.inventory.LoomInventory","methods":[],"desc":"Interface to the inventory of a Loom."},{"FQCN":"org.bukkit.inventory.AbstractHorseInventory","methods":[{"name":"getSaddle","params":[],"desc":"Gets the item in the horse's saddle slot.","ret":"the saddle item"},{"name":"setSaddle","params":[{"name":"stack","type":"ItemStack","desc":"the new item"}],"desc":"Sets the item in the horse's saddle slot.","ret":""}],"desc":"An interface to the inventory of an {@link AbstractHorse}."},{"FQCN":"org.bukkit.inventory.DecoratedPotInventory","methods":[{"name":"setItem","params":[{"name":"item","type":"ItemStack","desc":"the new item stack"}],"desc":"Set the item stack in the decorated pot.","ret":""},{"name":"getItem","params":[],"desc":"Get the item stack in the decorated pot.","ret":"the current item stack"}],"desc":"Interface to the inventory of a DecoratedPot."},{"FQCN":"org.bukkit.inventory.PlayerInventory","methods":[{"name":"getHelmet","params":[],"desc":"Return the ItemStack from the helmet slot","ret":"The ItemStack in the helmet slot"},{"name":"getChestplate","params":[],"desc":"Return the ItemStack from the chestplate slot","ret":"The ItemStack in the chestplate slot"},{"name":"getLeggings","params":[],"desc":"Return the ItemStack from the leg slot","ret":"The ItemStack in the leg slot"},{"name":"getBoots","params":[],"desc":"Return the ItemStack from the boots slot","ret":"The ItemStack in the boots slot"},{"name":"setItem","params":[{"name":"index","type":"int","desc":"The index where to put the ItemStack"},{"name":"item","type":"ItemStack","desc":"The ItemStack to set"}],"desc":"Stores the ItemStack at the given index of the inventory.\n<p>\nIndexes 0 through 8 refer to the hotbar. 9 through 35 refer to the main inventory, counting up from 9 at the top\nleft corner of the inventory, moving to the right, and moving to the row below it back on the left side when it\nreaches the end of the row. It follows the same path in the inventory like you would read a book.\n<p>\nIndexes 36 through 39 refer to the armor slots. Though you can set armor with this method using these indexes,\nyou are encouraged to use the provided methods for those slots.\n<p>\nIndex 40 refers to the off hand (shield) item slot. Though you can set off hand with this method using this index,\nyou are encouraged to use the provided method for this slot.\n<p>\nIf you attempt to use this method with an index less than 0 or greater than 40, an ArrayIndexOutOfBounds\nexception will be thrown.","ret":""},{"name":"setItem","params":[{"name":"slot","type":"EquipmentSlot","desc":"the slot to put the ItemStack"},{"name":"item","type":"ItemStack","desc":"the ItemStack to set"}],"desc":"Stores the ItemStack at the given equipment slot in the inventory.","ret":""},{"name":"getItem","params":[{"name":"slot","type":"EquipmentSlot","desc":"the slot to get the ItemStack"}],"desc":"Gets the ItemStack at the given equipment slot in the inventory.","ret":"the ItemStack in the given slot"},{"name":"setArmorContents","params":[{"name":"items","type":"ItemStack[]","desc":"The ItemStacks to use as armour"}],"desc":"Put the given ItemStacks into the armor slots","ret":""},{"name":"setExtraContents","params":[{"name":"items","type":"ItemStack[]","desc":"The ItemStacks to use as extra"}],"desc":"Put the given ItemStacks into the extra slots\n<br>\nSee {@link #getExtraContents()} for an explanation of extra slots.","ret":""},{"name":"setHelmet","params":[{"name":"helmet","type":"ItemStack","desc":"The ItemStack to use as helmet"}],"desc":"Put the given ItemStack into the helmet slot. This does not check if\nthe ItemStack is a helmet","ret":""},{"name":"setChestplate","params":[{"name":"chestplate","type":"ItemStack","desc":"The ItemStack to use as chestplate"}],"desc":"Put the given ItemStack into the chestplate slot. This does not check\nif the ItemStack is a chestplate","ret":""},{"name":"setLeggings","params":[{"name":"leggings","type":"ItemStack","desc":"The ItemStack to use as leggings"}],"desc":"Put the given ItemStack into the leg slot. This does not check if the\nItemStack is a pair of leggings","ret":""},{"name":"setBoots","params":[{"name":"boots","type":"ItemStack","desc":"The ItemStack to use as boots"}],"desc":"Put the given ItemStack into the boots slot. This does not check if the\nItemStack is a boots","ret":""},{"name":"getItemInMainHand","params":[],"desc":"Gets the item the player is currently holding\nin their main hand.","ret":"the currently held item"},{"name":"setItemInMainHand","params":[{"name":"item","type":"ItemStack","desc":"The item to put into the player's hand"}],"desc":"Sets the item the player is holding in their main hand.","ret":""},{"name":"getItemInOffHand","params":[],"desc":"Gets the item the player is currently holding\nin their off hand.","ret":"the currently held item"},{"name":"setItemInOffHand","params":[{"name":"item","type":"ItemStack","desc":"The item to put into the player's hand"}],"desc":"Sets the item the player is holding in their off hand.","ret":""},{"name":"getItemInHand","params":[],"desc":"Gets the item the player is currently holding","ret":"the currently held item"},{"name":"setItemInHand","params":[{"name":"stack","type":"ItemStack","desc":"The item to put into the player's hand"}],"desc":"Sets the item the player is holding","ret":""},{"name":"getHeldItemSlot","params":[],"desc":"Get the slot number of the currently held item","ret":"Held item slot number"},{"name":"setHeldItemSlot","params":[{"name":"slot","type":"int","desc":"The new slot number"}],"desc":"Set the slot number of the currently held item.\n<p>\nThis validates whether the slot is between 0 and 8 inclusive.","ret":""}],"desc":"Interface to the inventory of a Player, including the four armor slots and any extra slots."},{"FQCN":"org.bukkit.inventory.BrewerInventory","methods":[{"name":"getIngredient","params":[],"desc":"Get the current ingredient for brewing.","ret":"The ingredient."},{"name":"setIngredient","params":[{"name":"ingredient","type":"ItemStack","desc":"The ingredient"}],"desc":"Set the current ingredient for brewing.","ret":""},{"name":"getFuel","params":[],"desc":"Get the current fuel for brewing.","ret":"The fuel"},{"name":"setFuel","params":[{"name":"fuel","type":"ItemStack","desc":"The fuel"}],"desc":"Set the current fuel for brewing. Generally only\n{@link Material#BLAZE_POWDER} will be of use.","ret":""}],"desc":"Interface to the inventory of a Brewing Stand."},{"FQCN":"org.bukkit.inventory.SmithingInventory","methods":[{"name":"getResult","params":[],"desc":"Check what item is in the result slot of this smithing table.","ret":"the result item"},{"name":"setResult","params":[{"name":"newResult","type":"ItemStack","desc":"the new result item"}],"desc":"Set the item in the result slot of the smithing table","ret":""},{"name":"getRecipe","params":[],"desc":"Get the current recipe formed on the smithing table, if any.","ret":"the recipe, or null if the current contents don't match any\nrecipe"},{"name":"getInputTemplate","params":[],"desc":"Gets the input template (first slot).","ret":"input template item"},{"name":"setInputTemplate","params":[{"name":"itemStack","type":"ItemStack","desc":"item to set"}],"desc":"Sets the input template (first slot).","ret":""},{"name":"getInputEquipment","params":[],"desc":"Gets the input equipment (second slot).","ret":"input equipment item"},{"name":"setInputEquipment","params":[{"name":"itemStack","type":"ItemStack","desc":"item to set"}],"desc":"Sets the input equipment (second slot).","ret":""},{"name":"getInputMineral","params":[],"desc":"Gets the input mineral (third slot).","ret":"input mineral item"},{"name":"setInputMineral","params":[{"name":"itemStack","type":"ItemStack","desc":"item to set"}],"desc":"Sets the input mineral (third slot).","ret":""}],"desc":"Interface to the inventory of a Smithing table."},{"FQCN":"org.bukkit.inventory.GrindstoneInventory","methods":[{"name":"getUpperItem","params":[],"desc":"Gets the upper input item.","ret":"upper input item"},{"name":"setUpperItem","params":[{"name":"upperItem","type":"ItemStack","desc":"item to set"}],"desc":"Sets the upper input item.","ret":""},{"name":"getLowerItem","params":[],"desc":"Gets the lower input item.","ret":"lower input item"},{"name":"setLowerItem","params":[{"name":"lowerItem","type":"ItemStack","desc":"item to set"}],"desc":"Sets the lower input item.","ret":""},{"name":"getResult","params":[],"desc":"Gets the result.","ret":"result"},{"name":"setResult","params":[{"name":"result","type":"ItemStack","desc":"item to set"}],"desc":"Sets the result.","ret":""}],"desc":"Interface to the inventory of a Grindstone."},{"FQCN":"org.bukkit.inventory.ItemStack","methods":[{"name":"getType","params":[],"desc":"Gets the type of this item","ret":"Type of the items in this stack"},{"name":"setType","params":[{"name":"type","type":"Material","desc":"New type to set the items in this stack to"}],"desc":"Sets the type of this item\n<p>\nNote that in doing so you will reset the MaterialData for this stack.\n<p>\n<b>IMPORTANT: An <i>Item</i>Stack is only designed to contain\n<i>items</i>. Do not use this class to encapsulate Materials for which\n{@link Material#isItem()} returns false.</b>","ret":""},{"name":"getAmount","params":[],"desc":"Gets the amount of items in this stack","ret":"Amount of items in this stack"},{"name":"setAmount","params":[{"name":"amount","type":"int","desc":"New amount of items in this stack"}],"desc":"Sets the amount of items in this stack","ret":""},{"name":"getData","params":[],"desc":"Gets the MaterialData for this stack of items","ret":"MaterialData for this item"},{"name":"setData","params":[{"name":"data","type":"MaterialData","desc":"New MaterialData for this item"}],"desc":"Sets the MaterialData for this stack of items","ret":""},{"name":"setDurability","params":[{"name":"durability","type":"short","desc":"Durability of this item"}],"desc":"Sets the durability of this item","ret":""},{"name":"getDurability","params":[],"desc":"Gets the durability of this item","ret":"Durability of this item"},{"name":"getMaxStackSize","params":[],"desc":"Get the maximum stacksize for the material hold in this ItemStack.\n(Returns -1 if it has no idea)","ret":"The maximum you can stack this material to."},{"name":"isSimilar","params":[{"name":"stack","type":"ItemStack","desc":"the item stack to compare to"}],"desc":"This method is the same as equals, but does not consider stack size\n(amount).","ret":"true if the two stacks are equal, ignoring the amount"},{"name":"containsEnchantment","params":[{"name":"ench","type":"Enchantment","desc":"Enchantment to test"}],"desc":"Checks if this ItemStack contains the given {@link Enchantment}","ret":"True if this has the given enchantment"},{"name":"getEnchantmentLevel","params":[{"name":"ench","type":"Enchantment","desc":"Enchantment to check"}],"desc":"Gets the level of the specified enchantment on this item stack","ret":"Level of the enchantment, or 0"},{"name":"getEnchantments","params":[],"desc":"Gets a map containing all enchantments and their levels on this item.","ret":"Map of enchantments."},{"name":"addEnchantments","params":[{"name":"enchantments","type":"Map<Enchantment,Integer>","desc":"Enchantments to add"}],"desc":"Adds the specified enchantments to this item stack.\n<p>\nThis method is the same as calling {@link\n#addEnchantment(org.bukkit.enchantments.Enchantment, int)} for each\nelement of the map.","ret":""},{"name":"addEnchantment","params":[{"name":"ench","type":"Enchantment","desc":"Enchantment to add"},{"name":"level","type":"int","desc":"Level of the enchantment"}],"desc":"Adds the specified {@link Enchantment} to this item stack.\n<p>\nIf this item stack already contained the given enchantment (at any\nlevel), it will be replaced.","ret":""},{"name":"addUnsafeEnchantments","params":[{"name":"enchantments","type":"Map<Enchantment,Integer>","desc":"Enchantments to add"}],"desc":"Adds the specified enchantments to this item stack in an unsafe manner.\n<p>\nThis method is the same as calling {@link\n#addUnsafeEnchantment(org.bukkit.enchantments.Enchantment, int)} for\neach element of the map.","ret":""},{"name":"addUnsafeEnchantment","params":[{"name":"ench","type":"Enchantment","desc":"Enchantment to add"},{"name":"level","type":"int","desc":"Level of the enchantment"}],"desc":"Adds the specified {@link Enchantment} to this item stack.\n<p>\nIf this item stack already contained the given enchantment (at any\nlevel), it will be replaced.\n<p>\nThis method is unsafe and will ignore level restrictions or item type.\nUse at your own discretion.","ret":""},{"name":"removeEnchantment","params":[{"name":"ench","type":"Enchantment","desc":"Enchantment to remove"}],"desc":"Removes the specified {@link Enchantment} if it exists on this\nItemStack","ret":"Previous level, or 0"},{"name":"removeEnchantments","params":[],"desc":"Removes all enchantments on this ItemStack.","ret":""},{"name":"deserialize","params":[{"name":"args","type":"Map<String,Object>","desc":"map to deserialize"}],"desc":"Required method for configuration serialization","ret":"deserialized item stack"},{"name":"editMeta","params":[{"name":"consumer","type":"java.util.function.Consumer<? super ItemMeta>","desc":"the meta consumer"}],"desc":"Edits the {@link ItemMeta} of this stack.\n<p>\nThe {@link java.util.function.Consumer} must only interact\nwith this stack's {@link ItemMeta} through the provided {@link ItemMeta} instance.\nCalling this method or any other meta-related method of the {@link ItemStack} class\n(such as {@link #getItemMeta()}, {@link #addItemFlags(ItemFlag...)}, {@link #lore()}, etc.)\nfrom inside the consumer is disallowed and will produce undefined results or exceptions.\n</p>","ret":"{@code true} if the edit was successful, {@code false} otherwise"},{"name":"editMeta","params":[{"name":"metaClass","type":"Class<M>","desc":"the type of meta to edit"},{"name":"consumer","type":"java.util.function.Consumer<? super M>","desc":"the meta consumer"}],"desc":"Edits the {@link ItemMeta} of this stack if the meta is of the specified type.\n<p>\nThe {@link java.util.function.Consumer} must only interact\nwith this stack's {@link ItemMeta} through the provided {@link ItemMeta} instance.\nCalling this method or any other meta-related method of the {@link ItemStack} class\n(such as {@link #getItemMeta()}, {@link #addItemFlags(ItemFlag...)}, {@link #lore()}, etc.)\nfrom inside the consumer is disallowed and will produce undefined results or exceptions.\n</p>","ret":"{@code true} if the edit was successful, {@code false} otherwise"},{"name":"getItemMeta","params":[],"desc":"Get a copy of this ItemStack's {@link ItemMeta}.","ret":"a copy of the current ItemStack's ItemData"},{"name":"hasItemMeta","params":[],"desc":"Checks to see if any meta data has been defined.","ret":"Returns true if some meta data has been set for this item"},{"name":"setItemMeta","params":[{"name":"itemMeta","type":"ItemMeta","desc":"new ItemMeta, or null to indicate meta data be cleared."}],"desc":"Set the ItemMeta of this ItemStack.","ret":"True if successfully applied ItemMeta, see {@link\n    ItemFactory#isApplicable(ItemMeta, ItemStack)}"},{"name":"enchantWithLevels","params":[{"name":"levels","type":"int","desc":"levels to use for enchanting"},{"name":"allowTreasure","type":"boolean","desc":"whether to allow enchantments where {@link org.bukkit.enchantments.Enchantment#isTreasure()} returns true"},{"name":"random","type":"java.util.Random","desc":"{@link java.util.Random} instance to use for enchanting"}],"desc":"Randomly enchants a copy of this {@link ItemStack} using the given experience levels.\n\n<p>If this ItemStack is already enchanted, the existing enchants will be removed before enchanting.</p>\n\n<p>Levels must be in range {@code [1, 30]}.</p>","ret":"enchanted copy of the provided ItemStack"},{"name":"displayName","params":[],"desc":"Get the formatted display name of the {@link ItemStack}.","ret":"display name of the {@link ItemStack}"},{"name":"ensureServerConversions","params":[],"desc":"Minecraft updates are converting simple item stacks into more complex NBT oriented Item Stacks.\n\nUse this method to ensure any desired data conversions are processed.\nThe input itemstack will not be the same as the returned itemstack.","ret":"A potentially Data Converted ItemStack"},{"name":"deserializeBytes","params":[{"name":"bytes","type":"byte[]","desc":"bytes representing an item in NBT"}],"desc":"Deserializes this itemstack from raw NBT bytes. NBT is safer for data migrations as it will\nuse the built in data converter instead of bukkits dangerous serialization system.\n\nThis expects that the DataVersion was stored on the root of the Compound, as saved from\nthe {@link #serializeAsBytes()} API returned.","ret":"ItemStack migrated to this version of Minecraft if needed."},{"name":"serializeAsBytes","params":[],"desc":"Serializes this itemstack to raw bytes in NBT. NBT is safer for data migrations as it will\nuse the built in data converter instead of bukkits dangerous serialization system.","ret":"bytes representing this item in NBT."},{"name":"getI18NDisplayName","params":[],"desc":"Gets the Display name as seen in the Client.\nCurrently the server only supports the English language. To override this,\nYou must replace the language file embedded in the server jar.","ret":"Display name of Item"},{"name":"asOne","params":[],"desc":"Clones the itemstack and returns it a single quantity.","ret":"The new itemstack with 1 quantity"},{"name":"asQuantity","params":[{"name":"qty","type":"int","desc":"The quantity of the cloned item"}],"desc":"Clones the itemstack and returns it as the specified quantity","ret":"The new itemstack with specified quantity"},{"name":"add","params":[],"desc":"Adds 1 to this itemstack. Will not go over the items max stack size.","ret":"The same item (not a clone)"},{"name":"add","params":[{"name":"qty","type":"int","desc":"The amount to add"}],"desc":"Adds quantity to this itemstack. Will not go over the items max stack size.","ret":"The same item (not a clone)"},{"name":"subtract","params":[],"desc":"Subtracts 1 to this itemstack.  Going to 0 or less will invalidate the item.","ret":"The same item (not a clone)"},{"name":"subtract","params":[{"name":"qty","type":"int","desc":"The amount to add"}],"desc":"Subtracts quantity to this itemstack. Going to 0 or less will invalidate the item.","ret":"The same item (not a clone)"},{"name":"getLore","params":[],"desc":"If the item has lore, returns it, else it will return null","ret":"The lore, or null"},{"name":"lore","params":[],"desc":"If the item has lore, returns it, else it will return null","ret":"The lore, or null"},{"name":"setLore","params":[{"name":"lore","type":"List<String>","desc":"the lore that will be set"}],"desc":"Sets the lore for this item.\nRemoves lore when given null.","ret":""},{"name":"lore","params":[{"name":"lore","type":"List<? extends net.kyori.adventure.text.Component>","desc":"the lore that will be set"}],"desc":"Sets the lore for this item.\nRemoves lore when given null.","ret":""},{"name":"addItemFlags","params":[{"name":"itemFlags","type":"ItemFlag","desc":"The hideflags which shouldn't be rendered"}],"desc":"Set itemflags which should be ignored when rendering a ItemStack in the Client. This Method does silently ignore double set itemFlags.","ret":""},{"name":"removeItemFlags","params":[{"name":"itemFlags","type":"ItemFlag","desc":"Hideflags which should be removed"}],"desc":"Remove specific set of itemFlags. This tells the Client it should render it again. This Method does silently ignore double removed itemFlags.","ret":""},{"name":"getItemFlags","params":[],"desc":"Get current set itemFlags. The collection returned is unmodifiable.","ret":"A set of all itemFlags set"},{"name":"hasItemFlag","params":[{"name":"flag","type":"ItemFlag","desc":"the flag to check"}],"desc":"Check if the specified flag is present on this item.","ret":"if it is present"},{"name":"translationKey","params":[],"desc":"{@inheritDoc}\n<p>\nThis is not the same as getting the translation key\nfor the material of this itemstack.","ret":""},{"name":"getRarity","params":[],"desc":"Gets the item rarity of the itemstack. The rarity can change based on enchantements.","ret":"the itemstack rarity"},{"name":"isRepairableBy","params":[{"name":"repairMaterial","type":"ItemStack","desc":"the repair material"}],"desc":"Checks if an itemstack can repair this itemstack.\nReturns false if {@code this} or {@code repairMaterial}'s type is not an item ({@link Material#isItem()}).","ret":"true if it is repairable by, false if not"},{"name":"canRepair","params":[{"name":"toBeRepaired","type":"ItemStack","desc":"the itemstack to be repaired"}],"desc":"Checks if this itemstack can repair another.\nReturns false if {@code this} or {@code toBeRepaired}'s type is not an item ({@link Material#isItem()}).","ret":"true if it can repair, false if not"},{"name":"damage","params":[{"name":"amount","type":"int","desc":"the amount of damage to do"},{"name":"livingEntity","type":"org.bukkit.entity.LivingEntity","desc":"the entity related to the damage"}],"desc":"Damages this itemstack by the specified amount. This\nruns all logic associated with damaging an itemstack like\nevents and stat changes.","ret":"the damaged itemstack or an empty one if it broke. May return the same instance of ItemStack"},{"name":"empty","params":[],"desc":"Returns an empty item stack, consists of an air material and a stack size of 0.\n\nAny item stack with a material of air or a stack size of 0 is seen\nas being empty by {@link ItemStack#isEmpty}.","ret":""},{"name":"isEmpty","params":[],"desc":"Returns whether this item stack is empty and contains no item. This means\nit is either air or the stack has a size of 0.","ret":""},{"name":"computeTooltipLines","params":[{"name":"tooltipContext","type":"io.papermc.paper.inventory.tooltip.TooltipContext","desc":"the tooltip context"},{"name":"player","type":"org.bukkit.entity.Player","desc":"a player for player-specific tooltip lines"}],"desc":"Computes the tooltip lines for this stack.\n<p>\n<b>Disclaimer:</b>\nTooltip contents are not guaranteed to be consistent across different\nMinecraft versions.","ret":"an immutable list of components (can be empty)"}],"desc":"Represents a stack of items.\n<p>\n<b>IMPORTANT: An <i>Item</i>Stack is only designed to contain <i>items</i>. Do not\nuse this class to encapsulate Materials for which {@link Material#isItem()}\nreturns false.</b>"},{"FQCN":"org.bukkit.inventory.EnchantingInventory","methods":[{"name":"setItem","params":[{"name":"item","type":"ItemStack","desc":"The new item"}],"desc":"Set the item being enchanted.","ret":""},{"name":"getItem","params":[],"desc":"Get the item being enchanted.","ret":"The current item."},{"name":"setSecondary","params":[{"name":"item","type":"ItemStack","desc":"The new item"}],"desc":"Set the secondary item being used for the enchant.","ret":""},{"name":"getSecondary","params":[],"desc":"Get the secondary item being used for the enchant.","ret":"The second item"}],"desc":"Interface to the inventory of an Enchantment Table."},{"FQCN":"org.bukkit.inventory.EntityEquipment","methods":[{"name":"setItem","params":[{"name":"slot","type":"EquipmentSlot","desc":"the slot to put the ItemStack"},{"name":"item","type":"ItemStack","desc":"the ItemStack to set"}],"desc":"Stores the ItemStack at the given equipment slot in the inventory.","ret":""},{"name":"setItem","params":[{"name":"slot","type":"EquipmentSlot","desc":"the slot to put the ItemStack"},{"name":"item","type":"ItemStack","desc":"the ItemStack to set"},{"name":"silent","type":"boolean","desc":"whether or not the equip sound should be silenced"}],"desc":"Stores the ItemStack at the given equipment slot in the inventory.","ret":""},{"name":"getItem","params":[{"name":"slot","type":"EquipmentSlot","desc":"the slot to get the ItemStack"}],"desc":"Gets the ItemStack at the given equipment slot in the inventory.","ret":"the ItemStack in the given slot"},{"name":"getItemInMainHand","params":[],"desc":"Gets the item the entity is currently holding\nin their main hand.\n\n<p>\nThis returns a copy if this equipment instance is from a non-player,\nor it's an empty stack (has AIR as its type).\nFor non-empty stacks from players, this returns a live mirror. You can check if this\nwill return a mirror with\n<pre>{@code\nEntityEquipment equipment = entity.getEquipment();\nif (equipment instanceof PlayerInventory) {\n    equipment.getItemInMainHand(); // will return a mirror\n} else {\n    equipment.getItemInMainHand(); // will return a copy\n}\n}</pre>","ret":"the currently held item"},{"name":"setItemInMainHand","params":[{"name":"item","type":"ItemStack","desc":"The item to put into the entities hand"}],"desc":"Sets the item the entity is holding in their main hand.","ret":""},{"name":"setItemInMainHand","params":[{"name":"item","type":"ItemStack","desc":"The item to put into the entities hand"},{"name":"silent","type":"boolean","desc":"whether or not the equip sound should be silenced"}],"desc":"Sets the item the entity is holding in their main hand.","ret":""},{"name":"getItemInOffHand","params":[],"desc":"Gets the item the entity is currently holding\nin their off hand.\n\n<p>\nThis returns a copy if this equipment instance is from a non-player,\nor it's an empty stack (has AIR as its type).\nFor non-empty stacks from players, this returns a live mirror. You can check if this\nwill return a mirror with\n<pre>{@code\nEntityEquipment equipment = entity.getEquipment();\nif (equipment instanceof PlayerInventory) {\n    equipment.getItemInOffHand(); // will return a mirror\n} else {\n    equipment.getItemInOffHand(); // will return a copy\n}\n}</pre>","ret":"the currently held item"},{"name":"setItemInOffHand","params":[{"name":"item","type":"ItemStack","desc":"The item to put into the entities hand"}],"desc":"Sets the item the entity is holding in their off hand.","ret":""},{"name":"setItemInOffHand","params":[{"name":"item","type":"ItemStack","desc":"The item to put into the entities hand"},{"name":"silent","type":"boolean","desc":"whether or not the equip sound should be silenced"}],"desc":"Sets the item the entity is holding in their off hand.","ret":""},{"name":"getItemInHand","params":[],"desc":"Gets the item the entity is currently holding\n\n<p>\nThis returns a copy if this equipment instance is from a non-player,\nor it's an empty stack (has AIR as its type).\nFor non-empty stacks from players, this returns a live mirror. You can check if this\nwill return a mirror with\n<pre>{@code\nEntityEquipment equipment = entity.getEquipment();\nif (equipment instanceof PlayerInventory) {\n    equipment.getItemInHand(); // will return a mirror\n} else {\n    equipment.getItemInHand(); // will return a copy\n}\n}</pre>","ret":"the currently held item"},{"name":"setItemInHand","params":[{"name":"stack","type":"ItemStack","desc":"The item to put into the entities hand"}],"desc":"Sets the item the entity is holding","ret":""},{"name":"getHelmet","params":[],"desc":"Gets the helmet currently being worn by the entity\n\n<p>\nThis returns a copy if this equipment instance is from a non-player.\nFor stacks from players, this returns a live mirror (or null). You can check if this\nwill return a mirror with\n<pre>{@code\nEntityEquipment equipment = entity.getEquipment();\nif (equipment instanceof PlayerInventory) {\n    equipment.getHelmet(); // will return a mirror\n} else {\n    equipment.getHelmet(); // will return a copy\n}\n}</pre>","ret":"The helmet being worn"},{"name":"setHelmet","params":[{"name":"helmet","type":"ItemStack","desc":"The helmet to put on the entity"}],"desc":"Sets the helmet worn by the entity","ret":""},{"name":"setHelmet","params":[{"name":"helmet","type":"ItemStack","desc":"The helmet to put on the entity"},{"name":"silent","type":"boolean","desc":"whether or not the equip sound should be silenced"}],"desc":"Sets the helmet worn by the entity","ret":""},{"name":"getChestplate","params":[],"desc":"Gets the chest plate currently being worn by the entity\n\n<p>\nThis returns a copy if this equipment instance is from a non-player.\nFor stacks from players, this returns a live mirror (or null). You can check if this\nwill return a mirror with\n<pre>{@code\nEntityEquipment equipment = entity.getEquipment();\nif (equipment instanceof PlayerInventory) {\n    equipment.getChestplate(); // will return a mirror\n} else {\n    equipment.getChestplate(); // will return a copy\n}\n}</pre>","ret":"The chest plate being worn"},{"name":"setChestplate","params":[{"name":"chestplate","type":"ItemStack","desc":"The chest plate to put on the entity"}],"desc":"Sets the chest plate worn by the entity","ret":""},{"name":"setChestplate","params":[{"name":"chestplate","type":"ItemStack","desc":"The chest plate to put on the entity"},{"name":"silent","type":"boolean","desc":"whether or not the equip sound should be silenced"}],"desc":"Sets the chest plate worn by the entity","ret":""},{"name":"getLeggings","params":[],"desc":"Gets the leggings currently being worn by the entity\n\n<p>\nThis returns a copy if this equipment instance is from a non-player.\nFor stacks from players, this returns a live mirror (or null). You can check if this\nwill return a mirror with\n<pre>{@code\nEntityEquipment equipment = entity.getEquipment();\nif (equipment instanceof PlayerInventory) {\n    equipment.getLeggings(); // will return a mirror\n} else {\n    equipment.getLeggings(); // will return a copy\n}\n}</pre>","ret":"The leggings being worn"},{"name":"setLeggings","params":[{"name":"leggings","type":"ItemStack","desc":"The leggings to put on the entity"}],"desc":"Sets the leggings worn by the entity","ret":""},{"name":"setLeggings","params":[{"name":"leggings","type":"ItemStack","desc":"The leggings to put on the entity"},{"name":"silent","type":"boolean","desc":"whether or not the equip sound should be silenced"}],"desc":"Sets the leggings worn by the entity","ret":""},{"name":"getBoots","params":[],"desc":"Gets the boots currently being worn by the entity\n\n<p>\nThis returns a copy if this equipment instance is from a non-player.\nFor stacks from players, this returns a live mirror (or null). You can check if this\nwill return a mirror with\n<pre>{@code\nEntityEquipment equipment = entity.getEquipment();\nif (equipment instanceof PlayerInventory) {\n    equipment.getBoots(); // will return a mirror\n} else {\n    equipment.getBoots(); // will return a copy\n}\n}</pre>","ret":"The boots being worn"},{"name":"setBoots","params":[{"name":"boots","type":"ItemStack","desc":"The boots to put on the entity"}],"desc":"Sets the boots worn by the entity","ret":""},{"name":"setBoots","params":[{"name":"boots","type":"ItemStack","desc":"The boots to put on the entity"},{"name":"silent","type":"boolean","desc":"whether or not the equip sound should be silenced"}],"desc":"Sets the boots worn by the entity","ret":""},{"name":"setArmorContents","params":[{"name":"items","type":"ItemStack[]","desc":"The items to set the armor as. Individual items may be null."}],"desc":"Sets the entities armor to the provided array of ItemStacks","ret":""},{"name":"clear","params":[],"desc":"Clears the entity of all armor and held items","ret":""},{"name":"getItemInHandDropChance","params":[],"desc":"","ret":"drop chance"},{"name":"setItemInHandDropChance","params":[{"name":"chance","type":"float","desc":"drop chance"}],"desc":"","ret":""},{"name":"getItemInMainHandDropChance","params":[],"desc":"Gets the chance of the main hand item being dropped upon this creature's\ndeath.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of exactly 1.0F will always drop if killed by a player\n<li>A drop chance of greater than 1.0F will always drop killed by anything\n</ul>","ret":"chance of the currently held item being dropped (1 for non-{@link Mob})"},{"name":"setItemInMainHandDropChance","params":[{"name":"chance","type":"float","desc":"the chance of the main hand item being dropped"}],"desc":"Sets the chance of the item this creature is currently holding in their\nmain hand being dropped upon this creature's death.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of exactly 1.0F will always drop if killed by a player\n<li>A drop chance of greater than 1.0F will always drop if killed by anything\n</ul>","ret":""},{"name":"getItemInOffHandDropChance","params":[],"desc":"Gets the chance of the off hand item being dropped upon this creature's\ndeath.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of exactly 1.0F will always drop if killed by a player\n<li>A drop chance of greater than 1.0F will always drop if killed by anything\n</ul>","ret":"chance of the off hand item being dropped (1 for non-{@link Mob})"},{"name":"setItemInOffHandDropChance","params":[{"name":"chance","type":"float","desc":"the chance of off hand item being dropped"}],"desc":"Sets the chance of the off hand item being dropped upon this creature's\ndeath.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of exactly 1.0F will always drop if killed by a player\n<li>A drop chance of greater than 1.0F will always drop if killed by anything\n</ul>","ret":""},{"name":"getHelmetDropChance","params":[],"desc":"Gets the chance of the helmet being dropped upon this creature's death.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of exactly 1.0F will always drop if killed by a player\n<li>A drop chance of greater than 1.0F will always drop if killed by anything\n</ul>","ret":"the chance of the helmet being dropped (1 for non-{@link Mob})"},{"name":"setHelmetDropChance","params":[{"name":"chance","type":"float","desc":"of the helmet being dropped"}],"desc":"Sets the chance of the helmet being dropped upon this creature's death.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of exactly 1.0F will always drop if killed by a player\n<li>A drop chance of greater than 1.0F will always drop if killed by anything\n</ul>","ret":""},{"name":"getChestplateDropChance","params":[],"desc":"Gets the chance of the chest plate being dropped upon this creature's\ndeath.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of exactly 1.0F will always drop if killed by a player\n<li>A drop chance of greater than 1.0F will always drop if killed by anything\n</ul>","ret":"the chance of the chest plate being dropped (1 for non-{@link Mob})"},{"name":"setChestplateDropChance","params":[{"name":"chance","type":"float","desc":"of the chest plate being dropped"}],"desc":"Sets the chance of the chest plate being dropped upon this creature's\ndeath.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of exactly 1.0F will always drop if killed by a player\n<li>A drop chance of greater than 1.0F will always drop if killed by anything\n</ul>","ret":""},{"name":"getLeggingsDropChance","params":[],"desc":"Gets the chance of the leggings being dropped upon this creature's\ndeath.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of exactly 1.0F will always drop if killed by a player\n<li>A drop chance of greater than 1.0F will always drop if killed by anything\n</ul>","ret":"the chance of the leggings being dropped (1 for non-{@link Mob})"},{"name":"setLeggingsDropChance","params":[{"name":"chance","type":"float","desc":"chance of the leggings being dropped"}],"desc":"Sets the chance of the leggings being dropped upon this creature's\ndeath.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of exactly 1.0F will always drop if killed by a player\n<li>A drop chance of greater than 1.0F will always drop if killed by anything\n</ul>","ret":""},{"name":"getBootsDropChance","params":[],"desc":"Gets the chance of the boots being dropped upon this creature's death.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of exactly 1.0F will always drop if killed by a player\n<li>A drop chance of greater than 1.0F will always drop if killed by anything\n</ul>","ret":"the chance of the boots being dropped (1 for non-{@link Mob})"},{"name":"setBootsDropChance","params":[{"name":"chance","type":"float","desc":"of the boots being dropped"}],"desc":"Sets the chance of the boots being dropped upon this creature's death.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of exactly 1.0F will always drop if killed by a player\n<li>A drop chance of greater than 1.0F will always drop if killed by anything\n</ul>","ret":""},{"name":"getHolder","params":[],"desc":"Get the entity this EntityEquipment belongs to","ret":"the entity this EntityEquipment belongs to"},{"name":"getDropChance","params":[{"name":"slot","type":"EquipmentSlot","desc":"the slot to get the drop chance of"}],"desc":"Gets the drop chance of specified slot.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of 1.0F will always drop if killed by a player\n<li>A drop chance of greater than 1.0F will always drop if killed by anything\n</ul>","ret":"the drop chance for the slot"},{"name":"setDropChance","params":[{"name":"slot","type":"EquipmentSlot","desc":"the slot to set the drop chance of"},{"name":"chance","type":"float","desc":"the drop chance for the slot"}],"desc":"Sets the drop chance of the specified slot.\n\n<ul>\n<li>A drop chance of 0.0F will never drop\n<li>A drop chance of 1.0F will always drop if killed by a player\n<li>A drop chance of greater than 1.0F will always drop if killed by anything\n</ul>","ret":""}],"desc":"An interface to a creatures inventory"},{"FQCN":"org.bukkit.inventory.CreativeCategory","methods":[],"desc":"Represents a category in the creative inventory."},{"FQCN":"org.bukkit.inventory.ComplexRecipe","methods":[],"desc":"Represents a complex recipe which has imperative server-defined behavior, eg\narmor dyeing.\n\nNote: Since a complex recipe has dynamic outputs, {@link #getResult()} will\nsometimes return an AIR ItemStack."},{"FQCN":"org.bukkit.inventory.StonecutterInventory","methods":[{"name":"getInputItem","params":[],"desc":"Gets the input item.","ret":"input item"},{"name":"setInputItem","params":[{"name":"itemStack","type":"ItemStack","desc":"item to set"}],"desc":"Sets the input item.","ret":""},{"name":"getResult","params":[],"desc":"Gets the result item.","ret":"result"},{"name":"setResult","params":[{"name":"itemStack","type":"ItemStack","desc":"item to set"}],"desc":"Sets the result item.","ret":""}],"desc":"Interface to the inventory of a Stonecutter."},{"FQCN":"org.bukkit.Raid","methods":[{"name":"isStarted","params":[],"desc":"Get whether this raid started.","ret":"whether raid is started"},{"name":"getActiveTicks","params":[],"desc":"Gets the amount of ticks this raid has existed.","ret":"active ticks"},{"name":"getBadOmenLevel","params":[],"desc":"Gets the Bad Omen level of this raid.","ret":"Bad Omen level (between 0 and 5)"},{"name":"setBadOmenLevel","params":[{"name":"badOmenLevel","type":"int","desc":"new Bad Omen level (from 0-5)"}],"desc":"Sets the Bad Omen level.\n<br>\nIf the level is higher than 1, there will be an additional wave that as\nstrong as the final wave.","ret":""},{"name":"getLocation","params":[],"desc":"Gets the center location where the raid occurs.","ret":"location"},{"name":"getStatus","params":[],"desc":"Gets the current status of the raid.\n<br>\nDo not use this method to check if the raid has been started, call\n{@link #isStarted()} instead.","ret":"Raids status"},{"name":"getSpawnedGroups","params":[],"desc":"Gets the number of raider groups which have spawned.","ret":"total spawned groups"},{"name":"getTotalGroups","params":[],"desc":"Gets the number of raider groups which would spawn.\n<br>\nThis also includes the group which spawns in the additional wave (if\npresent).","ret":"total groups"},{"name":"getTotalWaves","params":[],"desc":"Gets the number of waves in this raid (exclude the additional wave).","ret":"number of waves"},{"name":"getTotalHealth","params":[],"desc":"Gets the sum of all raider's health.","ret":"total raiders health"},{"name":"getHeroes","params":[],"desc":"Get the UUID of all heroes in this raid.","ret":"a set of unique ids"},{"name":"getRaiders","params":[],"desc":"Gets all remaining {@link Raider} in the present wave.","ret":"a list of current raiders"}],"desc":"Represents a raid event."},{"FQCN":"org.bukkit.persistence.PersistentDataType","methods":[{"name":"getPrimitiveType","params":[],"desc":"Returns the primitive data type of this tag.","ret":"the class"},{"name":"getComplexType","params":[],"desc":"Returns the complex object type the primitive value resembles.","ret":"the class type"},{"name":"toPrimitive","params":[{"name":"complex","type":"C","desc":"the complex object instance"},{"name":"context","type":"PersistentDataAdapterContext","desc":"the context this operation is running in"}],"desc":"Returns the primitive data that resembles the complex object passed to\nthis method.","ret":"the primitive value"},{"name":"fromPrimitive","params":[{"name":"primitive","type":"P","desc":"the primitive value"},{"name":"context","type":"PersistentDataAdapterContext","desc":"the context this operation is running in"}],"desc":"Creates a complex object based of the passed primitive value","ret":"the complex object instance"}],"desc":"This class represents an enum with a generic content type. It defines the\ntypes a custom tag can have.\n<p>\nThis interface can be used to create your own custom\n{@link PersistentDataType} with different complex types. This may be useful\nfor the likes of a UUIDTagType:\n<pre>\n{@code\npublic class UUIDTagType implements PersistentDataType<byte[], UUID> {"},{"FQCN":"org.bukkit.persistence.PersistentDataHolder","methods":[{"name":"getPersistentDataContainer","params":[],"desc":"Returns a custom tag container capable of storing tags on the object.\n\nNote that the tags stored on this container are all stored under their\nown custom namespace therefore modifying default tags using this\n{@link PersistentDataHolder} is impossible.","ret":"the persistent metadata container"}],"desc":"The {@link PersistentDataHolder} interface defines an object that can store\ncustom persistent meta data on it."},{"FQCN":"org.bukkit.persistence.ListPersistentDataTypeProvider","methods":[{"name":"bytes","params":[],"desc":"Provides a shared {@link ListPersistentDataType} that is capable of\nstoring lists of bytes.","ret":"the persistent data type."},{"name":"shorts","params":[],"desc":"Provides a shared {@link ListPersistentDataType} that is capable of\nstoring lists of shorts.","ret":"the persistent data type."},{"name":"integers","params":[],"desc":"Provides a shared {@link ListPersistentDataType} that is capable of\nstoring lists of integers.","ret":"the persistent data type."},{"name":"longs","params":[],"desc":"Provides a shared {@link ListPersistentDataType} that is capable of\nstoring lists of longs.","ret":"the persistent data type."},{"name":"floats","params":[],"desc":"Provides a shared {@link ListPersistentDataType} that is capable of\nstoring lists of floats.","ret":"the persistent data type."},{"name":"doubles","params":[],"desc":"Provides a shared {@link ListPersistentDataType} that is capable of\nstoring lists of doubles.","ret":"the persistent data type."},{"name":"booleans","params":[],"desc":"Provides a shared {@link ListPersistentDataType} that is capable of\nstoring lists of booleans.","ret":"the persistent data type."},{"name":"strings","params":[],"desc":"Provides a shared {@link ListPersistentDataType} that is capable of\nstoring lists of strings.","ret":"the persistent data type."},{"name":"byteArrays","params":[],"desc":"Provides a shared {@link ListPersistentDataType} that is capable of\nstoring lists of byte arrays.","ret":"the persistent data type."},{"name":"integerArrays","params":[],"desc":"Provides a shared {@link ListPersistentDataType} that is capable of\nstoring lists of int arrays.","ret":"the persistent data type."},{"name":"longArrays","params":[],"desc":"Provides a shared {@link ListPersistentDataType} that is capable of\nstoring lists of long arrays.","ret":"the persistent data type."},{"name":"dataContainers","params":[],"desc":"Provides a shared {@link ListPersistentDataType} that is capable of\npersistent data containers..","ret":"the persistent data type."},{"name":"listTypeFrom","params":[{"name":"elementType","type":"PersistentDataType<P,C>","desc":"the persistent data type that is capable of\nwriting/reading the elements of the list."}],"desc":"Constructs a new list persistent data type given any persistent data type\nfor its elements.","ret":"the created list persistent data type."}],"desc":"A provider for list persistent data types that represent the known primitive\ntypes exposed by {@link PersistentDataType}."},{"FQCN":"org.bukkit.persistence.PersistentDataContainer","methods":[{"name":"set","params":[{"name":"key","type":"NamespacedKey","desc":"the key this value will be stored under"},{"name":"type","type":"PersistentDataType<P,C>","desc":"the type this tag uses"},{"name":"value","type":"C","desc":"the value to store in the tag"}],"desc":"Stores a metadata value on the {@link PersistentDataHolder} instance.\n<p>\nThis API cannot be used to manipulate minecraft data, as the values will\nbe stored using your namespace. This method will override any existing\nvalue the {@link PersistentDataHolder} may have stored under the provided\nkey.","ret":""},{"name":"has","params":[{"name":"key","type":"NamespacedKey","desc":"the key the value is stored under"},{"name":"type","type":"PersistentDataType<P,C>","desc":"the type the primative stored value has to match"}],"desc":"Returns if the persistent metadata provider has metadata registered\nmatching the provided parameters.\n<p>\nThis method will only return true if the found value has the same primitive\ndata type as the provided key.\n<p>\nStoring a value using a custom {@link PersistentDataType} implementation\nwill not store the complex data type. Therefore storing a UUID (by\nstoring a byte[]) will match has(\"key\" ,\n{@link PersistentDataType#BYTE_ARRAY}). Likewise a stored byte[] will\nalways match your UUID {@link PersistentDataType} even if it is not 16\nbytes long.\n<p>\nThis method is only usable for custom object keys. Overwriting existing\ntags, like the display name, will not work as the values are stored\nusing your namespace.","ret":"if a value with the provided key and type exists"},{"name":"has","params":[{"name":"key","type":"NamespacedKey","desc":"the key the value is stored under"}],"desc":"Returns if the persistent metadata provider has metadata registered matching\nthe provided parameters.\n<p>\nThis method will return true as long as a value with the given key exists,\nregardless of its type.\n<p>\nThis method is only usable for custom object keys. Overwriting existing tags,\nlike the display name, will not work as the values are stored using your\nnamespace.","ret":"if a value with the provided key exists"},{"name":"get","params":[{"name":"key","type":"NamespacedKey","desc":"the key to look up in the custom tag map"},{"name":"type","type":"PersistentDataType<P,C>","desc":"the type the value must have and will be casted to"}],"desc":"Returns the metadata value that is stored on the\n{@link PersistentDataHolder} instance.","ret":"the value or {@code null} if no value was mapped under the given\nvalue"},{"name":"getOrDefault","params":[{"name":"key","type":"NamespacedKey","desc":"the key to look up in the custom tag map"},{"name":"type","type":"PersistentDataType<P,C>","desc":"the type the value must have and will be casted to"},{"name":"defaultValue","type":"C","desc":"the default value to return if no value was found for\nthe provided key"}],"desc":"Returns the metadata value that is stored on the\n{@link PersistentDataHolder} instance. If the value does not exist in the\ncontainer, the default value provided is returned.","ret":"the value or the default value if no value was mapped under the\ngiven key"},{"name":"getKeys","params":[],"desc":"Get the set of keys present on this {@link PersistentDataContainer}\ninstance.\n\nAny changes made to the returned set will not be reflected on the\ninstance.","ret":"the key set"},{"name":"remove","params":[{"name":"key","type":"NamespacedKey","desc":"the key to remove"}],"desc":"Removes a custom key from the {@link PersistentDataHolder} instance.","ret":""},{"name":"isEmpty","params":[],"desc":"Returns if the container instance is empty, therefore has no entries\ninside it.","ret":"the boolean"},{"name":"copyTo","params":[{"name":"other","type":"PersistentDataContainer","desc":"the container to copy to"},{"name":"replace","type":"boolean","desc":"whether to replace any matching values in the target container"}],"desc":"Copies all values from this {@link PersistentDataContainer} to the provided\ncontainer.\n<p>\nThis method only copies custom object keys. Existing tags, like the display\nname, will not be copied as the values are stored using your namespace.","ret":""},{"name":"getAdapterContext","params":[],"desc":"Returns the adapter context this tag container uses.","ret":"the tag context"},{"name":"serializeToBytes","params":[],"desc":"Serialize this {@link PersistentDataContainer} instance to a\nbyte array.","ret":"a binary representation of this container"},{"name":"readFromBytes","params":[{"name":"bytes","type":"byte[]","desc":"the byte array to read from"},{"name":"clear","type":"boolean","desc":"if true, this {@link PersistentDataContainer} instance\n             will be cleared before reading"}],"desc":"Read values from a serialised byte array into this\n{@link PersistentDataContainer} instance.","ret":""},{"name":"readFromBytes","params":[{"name":"bytes","type":"byte[]","desc":"the byte array to read from"}],"desc":"Read values from a serialised byte array into this\n{@link PersistentDataContainer} instance.\nThis method has the same effect as\n<code>PersistentDataContainer#readFromBytes(bytes, true)</code>","ret":""}],"desc":"This interface represents a map like object, capable of storing custom tags\nin it."},{"FQCN":"org.bukkit.persistence.ListPersistentDataType","methods":[{"name":"elementType","params":[],"desc":"Provides the persistent data type of the elements found in the list.","ret":"the persistent data type."}],"desc":"The list persistent data represents a data type that is capable of storing a\nlist of other data types in a {@link PersistentDataContainer}."},{"FQCN":"org.bukkit.persistence.PersistentDataAdapterContext","methods":[{"name":"newPersistentDataContainer","params":[],"desc":"Creates a new and empty meta container instance.","ret":"the fresh container instance"}],"desc":"This interface represents the context in which the {@link PersistentDataType} can\nserialize and deserialize the passed values."},{"FQCN":"org.bukkit.Chunk","methods":[{"name":"getX","params":[],"desc":"Gets the X-coordinate of this chunk","ret":"X-coordinate"},{"name":"getZ","params":[],"desc":"Gets the Z-coordinate of this chunk","ret":"Z-coordinate"},{"name":"getChunkKey","params":[],"desc":"","ret":"The Chunks X and Z coordinates packed into a long"},{"name":"getChunkKey","params":[{"name":"loc","type":"Location","desc":"Location to get chunk key"}],"desc":"","ret":"Location's chunk coordinates packed into a long"},{"name":"getChunkKey","params":[{"name":"x","type":"int","desc":"X Coordinate"},{"name":"z","type":"int","desc":"Z Coordinate"}],"desc":"","ret":"Chunk coordinates packed into a long"},{"name":"getWorld","params":[],"desc":"Gets the world containing this chunk","ret":"Parent World"},{"name":"getBlock","params":[{"name":"x","type":"int","desc":"0-15"},{"name":"y","type":"int","desc":"world minHeight (inclusive) - world maxHeight (exclusive)"},{"name":"z","type":"int","desc":"0-15"}],"desc":"Gets a block from this chunk","ret":"the Block"},{"name":"getChunkSnapshot","params":[],"desc":"Capture thread-safe read-only snapshot of chunk data","ret":"ChunkSnapshot"},{"name":"getChunkSnapshot","params":[{"name":"includeMaxblocky","type":"boolean","desc":"- if true, snapshot includes per-coordinate\n    maximum Y values"},{"name":"includeBiome","type":"boolean","desc":"- if true, snapshot includes per-coordinate biome\n    type"},{"name":"includeBiomeTempRain","type":"boolean","desc":"- if true, snapshot includes per-coordinate\n    raw biome temperature and rainfall"}],"desc":"Capture thread-safe read-only snapshot of chunk data","ret":"ChunkSnapshot"},{"name":"getChunkSnapshot","params":[{"name":"includeMaxblocky","type":"boolean","desc":"if true, snapshot includes per-coordinate\n    maximum Y values"},{"name":"includeBiome","type":"boolean","desc":"if true, snapshot includes per-coordinate biome\n    type"},{"name":"includeBiomeTempRain","type":"boolean","desc":"if true, snapshot includes per-coordinate\n    raw biome temperature and rainfall"},{"name":"includeLightData","type":"boolean","desc":"Whether to include per-coordinate light emitted by blocks and sky light data"}],"desc":"Capture thread-safe read-only snapshot of chunk data","ret":"ChunkSnapshot"},{"name":"isEntitiesLoaded","params":[],"desc":"Checks if entities in this chunk are loaded.","ret":"True if entities are loaded."},{"name":"getEntities","params":[],"desc":"Get a list of all entities in the chunk.\nThis will force load any entities, which are not loaded.","ret":"The entities."},{"name":"getTileEntities","params":[],"desc":"Get a list of all tile entities in the chunk.","ret":"The tile entities."},{"name":"getTileEntities","params":[{"name":"useSnapshot","type":"boolean","desc":"Take snapshots or direct references"}],"desc":"Get a list of all tile entities in the chunk.","ret":"The tile entities."},{"name":"getTileEntities","params":[{"name":"blockPredicate","type":"java.util.function.Predicate<? super Block>","desc":"The predicate of blocks to return tile entities for"},{"name":"useSnapshot","type":"boolean","desc":"Take snapshots or direct references"}],"desc":"Get a list of all tile entities that match a given predicate in the chunk.","ret":"The tile entities."},{"name":"isGenerated","params":[],"desc":"Checks if the chunk is fully generated.","ret":"True if it is fully generated."},{"name":"isLoaded","params":[],"desc":"Checks if the chunk is loaded.","ret":"True if it is loaded."},{"name":"load","params":[{"name":"generate","type":"boolean","desc":"Whether or not to generate a chunk if it doesn't\n    already exist"}],"desc":"Loads the chunk.","ret":"true if the chunk has loaded successfully, otherwise false"},{"name":"load","params":[],"desc":"Loads the chunk.","ret":"true if the chunk has loaded successfully, otherwise false"},{"name":"unload","params":[{"name":"save","type":"boolean","desc":"Controls whether the chunk is saved"}],"desc":"Unloads and optionally saves the Chunk","ret":"true if the chunk has unloaded successfully, otherwise false"},{"name":"unload","params":[],"desc":"Unloads and optionally saves the Chunk","ret":"true if the chunk has unloaded successfully, otherwise false"},{"name":"isSlimeChunk","params":[],"desc":"Checks if this chunk can spawn slimes without being a swamp biome.","ret":"true if slimes are able to spawn in this chunk"},{"name":"isForceLoaded","params":[],"desc":"Gets whether the chunk at the specified chunk coordinates is force\nloaded.\n<p>\nA force loaded chunk will not be unloaded due to lack of player activity.","ret":"force load status"},{"name":"setForceLoaded","params":[{"name":"forced","type":"boolean","desc":"force load status"}],"desc":"Sets whether the chunk at the specified chunk coordinates is force\nloaded.\n<p>\nA force loaded chunk will not be unloaded due to lack of player activity.","ret":""},{"name":"addPluginChunkTicket","params":[{"name":"plugin","type":"Plugin","desc":"Plugin which owns the ticket"}],"desc":"Adds a plugin ticket for this chunk, loading this chunk if it is not\nalready loaded.\n<p>\nA plugin ticket will prevent a chunk from unloading until it is\nexplicitly removed. A plugin instance may only have one ticket per chunk,\nbut each chunk can have multiple plugin tickets.\n</p>","ret":"{@code true} if a plugin ticket was added, {@code false} if the\nticket already exists for the plugin"},{"name":"removePluginChunkTicket","params":[{"name":"plugin","type":"Plugin","desc":"Plugin which owns the ticket"}],"desc":"Removes the specified plugin's ticket for this chunk\n<p>\nA plugin ticket will prevent a chunk from unloading until it is\nexplicitly removed. A plugin instance may only have one ticket per chunk,\nbut each chunk can have multiple plugin tickets.\n</p>","ret":"{@code true} if the plugin ticket was removed, {@code false} if\nthere is no plugin ticket for the chunk"},{"name":"getPluginChunkTickets","params":[],"desc":"Retrieves a collection specifying which plugins have tickets for this\nchunk. This collection is not updated when plugin tickets are added or\nremoved to this chunk.\n<p>\nA plugin ticket will prevent a chunk from unloading until it is\nexplicitly removed. A plugin instance may only have one ticket per chunk,\nbut each chunk can have multiple plugin tickets.\n</p>","ret":"unmodifiable collection containing which plugins have tickets for\nthis chunk"},{"name":"getInhabitedTime","params":[],"desc":"Gets the amount of time in ticks that this chunk has been inhabited.\n\nNote that the time is incremented once per tick per player within mob\nspawning distance of this chunk.","ret":"inhabited time"},{"name":"setInhabitedTime","params":[{"name":"ticks","type":"long","desc":"new inhabited time"}],"desc":"Sets the amount of time in ticks that this chunk has been inhabited.","ret":""},{"name":"contains","params":[{"name":"block","type":"BlockData","desc":"block to test"}],"desc":"Tests if this chunk contains the specified block.","ret":"if the block is contained within"},{"name":"contains","params":[{"name":"biome","type":"Biome","desc":"biome to test"}],"desc":"Tests if this chunk contains the specified biome.","ret":"if the biome is contained within"},{"name":"getLoadLevel","params":[],"desc":"Gets the load level of this chunk, which determines what game logic is\nprocessed.","ret":"the load level"},{"name":"getStructures","params":[],"desc":"Gets all generated structures that intersect this chunk. <br>\nIf no structures are present an empty collection will be returned.","ret":"a collection of placed structures in this chunk"},{"name":"getStructures","params":[{"name":"structure","type":"Structure","desc":"the structure to find"}],"desc":"Gets all generated structures of a given {@link Structure} that intersect\nthis chunk. <br>\nIf no structures are present an empty collection will be returned.","ret":"a collection of placed structures in this chunk"}],"desc":"Represents a chunk of blocks.\n\nIf the chunk is not yet fully generated and data is requested from the chunk,\nthen the chunk will only be generated as far as it needs to provide the\nrequested data."},{"FQCN":"org.bukkit.Location","methods":[{"name":"setWorld","params":[{"name":"world","type":"World","desc":"New world that this location resides in"}],"desc":"Sets the world that this location resides in","ret":""},{"name":"isWorldLoaded","params":[],"desc":"Checks if world in this location is present and loaded.","ret":"true if is loaded, otherwise false"},{"name":"getWorld","params":[],"desc":"Gets the world that this location resides in","ret":"World that contains this location, or {@code null} if it is not set"},{"name":"getChunk","params":[],"desc":"Gets the chunk at the represented location","ret":"Chunk at the represented location"},{"name":"getBlock","params":[],"desc":"Gets the block at the represented location","ret":"Block at the represented location"},{"name":"setX","params":[{"name":"x","type":"double","desc":"X-coordinate"}],"desc":"Sets the x-coordinate of this location","ret":""},{"name":"getX","params":[],"desc":"Gets the x-coordinate of this location","ret":"x-coordinate"},{"name":"getBlockX","params":[],"desc":"Gets the floored value of the X component, indicating the block that\nthis location is contained with.","ret":"block X"},{"name":"setY","params":[{"name":"y","type":"double","desc":"y-coordinate"}],"desc":"Sets the y-coordinate of this location","ret":""},{"name":"getY","params":[],"desc":"Gets the y-coordinate of this location","ret":"y-coordinate"},{"name":"getBlockY","params":[],"desc":"Gets the floored value of the Y component, indicating the block that\nthis location is contained with.","ret":"block y"},{"name":"setZ","params":[{"name":"z","type":"double","desc":"z-coordinate"}],"desc":"Sets the z-coordinate of this location","ret":""},{"name":"getZ","params":[],"desc":"Gets the z-coordinate of this location","ret":"z-coordinate"},{"name":"getBlockZ","params":[],"desc":"Gets the floored value of the Z component, indicating the block that\nthis location is contained with.","ret":"block z"},{"name":"setYaw","params":[{"name":"yaw","type":"float","desc":"new rotation's yaw"}],"desc":"Sets the yaw of this location, measured in degrees.\n<ul>\n<li>A yaw of 0 or 360 represents the positive z direction.\n<li>A yaw of 180 represents the negative z direction.\n<li>A yaw of 90 represents the negative x direction.\n<li>A yaw of 270 represents the positive x direction.\n</ul>\nIncreasing yaw values are the equivalent of turning to your\nright-facing, increasing the scale of the next respective axis, and\ndecreasing the scale of the previous axis.","ret":""},{"name":"getYaw","params":[],"desc":"Gets the yaw of this location, measured in degrees.\n<ul>\n<li>A yaw of 0 or 360 represents the positive z direction.\n<li>A yaw of 180 represents the negative z direction.\n<li>A yaw of 90 represents the negative x direction.\n<li>A yaw of 270 represents the positive x direction.\n</ul>\nIncreasing yaw values are the equivalent of turning to your\nright-facing, increasing the scale of the next respective axis, and\ndecreasing the scale of the previous axis.","ret":"the rotation's yaw"},{"name":"setPitch","params":[{"name":"pitch","type":"float","desc":"new incline's pitch"}],"desc":"Sets the pitch of this location, measured in degrees.\n<ul>\n<li>A pitch of 0 represents level forward facing.\n<li>A pitch of 90 represents downward facing, or negative y\n    direction.\n<li>A pitch of -90 represents upward facing, or positive y direction.\n</ul>\nIncreasing pitch values the equivalent of looking down.","ret":""},{"name":"getPitch","params":[],"desc":"Gets the pitch of this location, measured in degrees.\n<ul>\n<li>A pitch of 0 represents level forward facing.\n<li>A pitch of 90 represents downward facing, or negative y\n    direction.\n<li>A pitch of -90 represents upward facing, or positive y direction.\n</ul>\nIncreasing pitch values the equivalent of looking down.","ret":"the incline's pitch"},{"name":"getDirection","params":[],"desc":"Gets a unit-vector pointing in the direction that this Location is\nfacing.","ret":"a vector pointing the direction of this location's {@link\n    #getPitch() pitch} and {@link #getYaw() yaw}"},{"name":"setDirection","params":[{"name":"vector","type":"Vector","desc":"the direction vector"}],"desc":"Sets the {@link #getYaw() yaw} and {@link #getPitch() pitch} to point\nin the direction of the vector.","ret":"the same location"},{"name":"add","params":[{"name":"vec","type":"Location","desc":"The other location"}],"desc":"Adds the location by another.","ret":"the same location"},{"name":"add","params":[{"name":"vec","type":"Vector","desc":"Vector to use"}],"desc":"Adds the location by a vector.","ret":"the same location"},{"name":"add","params":[{"name":"x","type":"double","desc":"X coordinate"},{"name":"y","type":"double","desc":"Y coordinate"},{"name":"z","type":"double","desc":"Z coordinate"}],"desc":"Adds the location by another. Not world-aware.","ret":"the same location"},{"name":"subtract","params":[{"name":"vec","type":"Location","desc":"The other location"}],"desc":"Subtracts the location by another.","ret":"the same location"},{"name":"subtract","params":[{"name":"vec","type":"Vector","desc":"The vector to use"}],"desc":"Subtracts the location by a vector.","ret":"the same location"},{"name":"subtract","params":[{"name":"x","type":"double","desc":"X coordinate"},{"name":"y","type":"double","desc":"Y coordinate"},{"name":"z","type":"double","desc":"Z coordinate"}],"desc":"Subtracts the location by another. Not world-aware and\norientation independent.","ret":"the same location"},{"name":"length","params":[],"desc":"Gets the magnitude of the location, defined as sqrt(x^2+y^2+z^2). The\nvalue of this method is not cached and uses a costly square-root\nfunction, so do not repeatedly call this method to get the location's\nmagnitude. NaN will be returned if the inner result of the sqrt()\nfunction overflows, which will be caused if the length is too long. Not\nworld-aware and orientation independent.","ret":"the magnitude"},{"name":"lengthSquared","params":[],"desc":"Gets the magnitude of the location squared. Not world-aware and\norientation independent.","ret":"the magnitude"},{"name":"distance","params":[{"name":"o","type":"Location","desc":"The other location"}],"desc":"Get the distance between this location and another. The value of this\nmethod is not cached and uses a costly square-root function, so do not\nrepeatedly call this method to get the location's magnitude. NaN will\nbe returned if the inner result of the sqrt() function overflows, which\nwill be caused if the distance is too long.","ret":"the distance"},{"name":"distanceSquared","params":[{"name":"o","type":"Location","desc":"The other location"}],"desc":"Get the squared distance between this location and another.","ret":"the distance"},{"name":"multiply","params":[{"name":"m","type":"double","desc":"The factor"}],"desc":"Performs scalar multiplication, multiplying all components with a\nscalar. Not world-aware.","ret":"the same location"},{"name":"zero","params":[],"desc":"Zero this location's components. Not world-aware.","ret":"the same location"},{"name":"isGenerated","params":[],"desc":"Checks if a {@link Chunk} has been generated at this location.","ret":"true if a chunk has been generated at this location"},{"name":"set","params":[{"name":"x","type":"double","desc":"X coordinate"},{"name":"y","type":"double","desc":"Y coordinate"},{"name":"z","type":"double","desc":"Z coordinate"}],"desc":"Sets the position of this Location and returns itself\n<p>\nThis mutates this object, clone first.","ret":"self (not cloned)"},{"name":"add","params":[{"name":"base","type":"Location","desc":"The base coordinate to modify"},{"name":"x","type":"double","desc":"X coordinate to add to base"},{"name":"y","type":"double","desc":"Y coordinate to add to base"},{"name":"z","type":"double","desc":"Z coordinate to add to base"}],"desc":"Takes the x/y/z from base and adds the specified x/y/z to it and returns self\n<p>\nThis mutates this object, clone first.","ret":"self (not cloned)"},{"name":"subtract","params":[{"name":"base","type":"Location","desc":"The base coordinate to modify"},{"name":"x","type":"double","desc":"X coordinate to subtract from base"},{"name":"y","type":"double","desc":"Y coordinate to subtract from base"},{"name":"z","type":"double","desc":"Z coordinate to subtract from base"}],"desc":"Takes the x/y/z from base and subtracts the specified x/y/z to it and returns self\n<p>\nThis mutates this object, clone first.","ret":"self (not cloned)"},{"name":"toBlockLocation","params":[],"desc":"","ret":"A new location where X/Y/Z are on the Block location (integer value of X/Y/Z)"},{"name":"toBlockKey","params":[],"desc":"","ret":"The block key for this location's block location."},{"name":"toCenterLocation","params":[],"desc":"","ret":"A new location where X/Y/Z are the center of the block"},{"name":"toHighestLocation","params":[],"desc":"Returns a copy of this location except with y = getWorld().getHighestBlockYAt(this.getBlockX(), this.getBlockZ())","ret":"A copy of this location except with y = getWorld().getHighestBlockYAt(this.getBlockX(), this.getBlockZ())"},{"name":"toHighestLocation","params":[{"name":"heightmap","type":"com.destroystokyo.paper.HeightmapType","desc":"The heightmap to use for finding the highest y location."}],"desc":"Returns a copy of this location except with y = getWorld().getHighestBlockYAt(this.getBlockX(), this.getBlockZ(), heightmap)","ret":"A copy of this location except with y = getWorld().getHighestBlockYAt(this.getBlockX(), this.getBlockZ(), heightmap)"},{"name":"toHighestLocation","params":[{"name":"heightMap","type":"HeightMap","desc":"The heightmap to use for finding the highest y location."}],"desc":"Returns a copy of this location except with y = getWorld().getHighestBlockYAt(this.getBlockX(), this.getBlockZ(), heightMap)","ret":"A copy of this location except with y = getWorld().getHighestBlockYAt(this.getBlockX(), this.getBlockZ(), heightMap)"},{"name":"createExplosion","params":[{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"}],"desc":"Creates explosion at this location with given power\n<p>\nWill break blocks and ignite blocks on fire.","ret":"false if explosion was canceled, otherwise true"},{"name":"createExplosion","params":[{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"},{"name":"setFire","type":"boolean","desc":"Whether to set blocks on fire"}],"desc":"Creates explosion at this location with given power and optionally\nsetting blocks on fire.\n<p>\nWill break blocks.","ret":"false if explosion was canceled, otherwise true"},{"name":"createExplosion","params":[{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"},{"name":"setFire","type":"boolean","desc":"Whether to set blocks on fire"},{"name":"breakBlocks","type":"boolean","desc":"Whether to have blocks be destroyed"}],"desc":"Creates explosion at this location with given power and optionally\nsetting blocks on fire.","ret":"false if explosion was canceled, otherwise true"},{"name":"createExplosion","params":[{"name":"source","type":"Entity","desc":"The source entity of the explosion"},{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"}],"desc":"Creates explosion at this location with given power, with the specified entity as the source.\n<p>\nWill break blocks and ignite blocks on fire.","ret":"false if explosion was canceled, otherwise true"},{"name":"createExplosion","params":[{"name":"source","type":"Entity","desc":"The source entity of the explosion"},{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"},{"name":"setFire","type":"boolean","desc":"Whether to set blocks on fire"}],"desc":"Creates explosion at this location with given power and optionally\nsetting blocks on fire, with the specified entity as the source.\n<p>\nWill break blocks.","ret":"false if explosion was canceled, otherwise true"},{"name":"createExplosion","params":[{"name":"source","type":"Entity","desc":"The source entity of the explosion"},{"name":"power","type":"float","desc":"The power of explosion, where 4F is TNT"},{"name":"setFire","type":"boolean","desc":"Whether to set blocks on fire"},{"name":"breakBlocks","type":"boolean","desc":"Whether to have blocks be destroyed"}],"desc":"Creates explosion at this location with given power and optionally\nsetting blocks on fire, with the specified entity as the source.","ret":"false if explosion was canceled, otherwise true"},{"name":"getNearbyEntities","params":[{"name":"x","type":"double","desc":"1/2 the size of the box along the x-axis"},{"name":"y","type":"double","desc":"1/2 the size of the box along the y-axis"},{"name":"z","type":"double","desc":"1/2 the size of the box along the z-axis"}],"desc":"Returns a list of entities within a bounding box centered around a Location.\n<p>\nSome implementations may impose artificial restrictions on the size of the search bounding box.","ret":"the collection of entities near location. This will always be a non-null collection."},{"name":"getNearbyLivingEntities","params":[{"name":"radius","type":"double","desc":"X Radius"}],"desc":"Gets nearby players within the specified radius (bounding box)","ret":"the collection of entities near location. This will always be a non-null collection."},{"name":"getNearbyLivingEntities","params":[{"name":"xzRadius","type":"double","desc":"X/Z Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"}],"desc":"Gets nearby players within the specified radius (bounding box)","ret":"the collection of living entities near location. This will always be a non-null collection."},{"name":"getNearbyLivingEntities","params":[{"name":"xRadius","type":"double","desc":"X Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"},{"name":"zRadius","type":"double","desc":"Z radius"}],"desc":"Gets nearby players within the specified radius (bounding box)","ret":"the collection of living entities near location. This will always be a non-null collection."},{"name":"getNearbyLivingEntities","params":[{"name":"radius","type":"double","desc":"Radius"},{"name":"predicate","type":"Predicate<? super LivingEntity>","desc":"a predicate used to filter results"}],"desc":"Gets nearby players within the specified radius (bounding box)","ret":"the collection of living entities near location. This will always be a non-null collection."},{"name":"getNearbyLivingEntities","params":[{"name":"xzRadius","type":"double","desc":"X/Z Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"},{"name":"predicate","type":"Predicate<? super LivingEntity>","desc":"a predicate used to filter results"}],"desc":"Gets nearby players within the specified radius (bounding box)","ret":"the collection of living entities near location. This will always be a non-null collection."},{"name":"getNearbyLivingEntities","params":[{"name":"xRadius","type":"double","desc":"X Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"},{"name":"zRadius","type":"double","desc":"Z radius"},{"name":"predicate","type":"Predicate<? super LivingEntity>","desc":"a predicate used to filter results"}],"desc":"Gets nearby players within the specified radius (bounding box)","ret":"the collection of living entities near location. This will always be a non-null collection."},{"name":"getNearbyPlayers","params":[{"name":"radius","type":"double","desc":"X/Y/Z Radius"}],"desc":"Gets nearby players within the specified radius (bounding box)","ret":"the collection of players near location. This will always be a non-null collection."},{"name":"getNearbyPlayers","params":[{"name":"xzRadius","type":"double","desc":"X/Z Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"}],"desc":"Gets nearby players within the specified radius (bounding box)","ret":"the collection of players near location. This will always be a non-null collection."},{"name":"getNearbyPlayers","params":[{"name":"xRadius","type":"double","desc":"X Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"},{"name":"zRadius","type":"double","desc":"Z Radius"}],"desc":"Gets nearby players within the specified radius (bounding box)","ret":"the collection of players near location. This will always be a non-null collection."},{"name":"getNearbyPlayers","params":[{"name":"radius","type":"double","desc":"X/Y/Z Radius"},{"name":"predicate","type":"Predicate<? super Player>","desc":"a predicate used to filter results"}],"desc":"Gets nearby players within the specified radius (bounding box)","ret":"the collection of players near location. This will always be a non-null collection."},{"name":"getNearbyPlayers","params":[{"name":"xzRadius","type":"double","desc":"X/Z Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"},{"name":"predicate","type":"Predicate<? super Player>","desc":"a predicate used to filter results"}],"desc":"Gets nearby players within the specified radius (bounding box)","ret":"the collection of players near location. This will always be a non-null collection."},{"name":"getNearbyPlayers","params":[{"name":"xRadius","type":"double","desc":"X Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"},{"name":"zRadius","type":"double","desc":"Z Radius"},{"name":"predicate","type":"Predicate<? super Player>","desc":"a predicate used to filter results"}],"desc":"Gets nearby players within the specified radius (bounding box)","ret":"the collection of players near location. This will always be a non-null collection."},{"name":"getNearbyEntitiesByType","params":[{"name":"clazz","type":"Class<? extends T>","desc":"Type to filter by"},{"name":"radius","type":"double","desc":"X/Y/Z radius to search within"}],"desc":"Gets all nearby entities of the specified type, within the specified radius (bounding box)","ret":"the collection of entities of type clazz near location. This will always be a non-null collection."},{"name":"getNearbyEntitiesByType","params":[{"name":"clazz","type":"Class<? extends T>","desc":"Type to filter by"},{"name":"xzRadius","type":"double","desc":"X/Z radius to search within"},{"name":"yRadius","type":"double","desc":"Y radius to search within"}],"desc":"Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)","ret":"the collection of entities near location. This will always be a non-null collection."},{"name":"getNearbyEntitiesByType","params":[{"name":"clazz","type":"Class<? extends T>","desc":"Type to filter by"},{"name":"xRadius","type":"double","desc":"X Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"},{"name":"zRadius","type":"double","desc":"Z Radius"}],"desc":"Gets all nearby entities of the specified type, within the specified radius (bounding box)","ret":"the collection of entities near location. This will always be a non-null collection."},{"name":"getNearbyEntitiesByType","params":[{"name":"clazz","type":"Class<? extends T>","desc":"Type to filter by"},{"name":"radius","type":"double","desc":"X/Y/Z radius to search within"},{"name":"predicate","type":"Predicate<? super T>","desc":"a predicate used to filter results"}],"desc":"Gets all nearby entities of the specified type, within the specified radius (bounding box)","ret":"the collection of entities near location. This will always be a non-null collection."},{"name":"getNearbyEntitiesByType","params":[{"name":"clazz","type":"Class<? extends T>","desc":"Type to filter by"},{"name":"xzRadius","type":"double","desc":"X/Z radius to search within"},{"name":"yRadius","type":"double","desc":"Y radius to search within"},{"name":"predicate","type":"Predicate<? super T>","desc":"a predicate used to filter results"}],"desc":"Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)","ret":"the collection of entities near location. This will always be a non-null collection."},{"name":"getNearbyEntitiesByType","params":[{"name":"clazz","type":"Class<? extends Entity>","desc":"Type to filter by"},{"name":"xRadius","type":"double","desc":"X Radius"},{"name":"yRadius","type":"double","desc":"Y Radius"},{"name":"zRadius","type":"double","desc":"Z Radius"},{"name":"predicate","type":"Predicate<? super T>","desc":"a predicate used to filter results"}],"desc":"Gets all nearby entities of the specified type, within the specified radius (bounding box)","ret":"the collection of entities near location. This will always be a non-null collection."},{"name":"toVector","params":[],"desc":"Constructs a new {@link Vector} based on this Location","ret":"New Vector containing the coordinates represented by this\n    Location"},{"name":"checkFinite","params":[],"desc":"Check if each component of this Location is finite.","ret":""},{"name":"locToBlock","params":[{"name":"loc","type":"double","desc":"Precise coordinate"}],"desc":"Safely converts a double (location coordinate) to an int (block\ncoordinate)","ret":"Block coordinate"},{"name":"deserialize","params":[{"name":"args","type":"Map<String,Object>","desc":"map to deserialize"}],"desc":"Required method for deserialization","ret":"deserialized location"},{"name":"normalizeYaw","params":[{"name":"yaw","type":"float","desc":"the yaw in degrees"}],"desc":"Normalizes the given yaw angle to a value between <code>+/-180</code>\ndegrees.","ret":"the normalized yaw in degrees"},{"name":"normalizePitch","params":[{"name":"pitch","type":"float","desc":"the pitch in degrees"}],"desc":"Normalizes the given pitch angle to a value between <code>+/-90</code>\ndegrees.","ret":"the normalized pitch in degrees"}],"desc":"Represents a 3-dimensional position in a world.\n<br>\nNo constraints are placed on any angular values other than that they be\nspecified in degrees. This means that negative angles or angles of greater\nmagnitude than 360 are valid, but may be normalized to any other equivalent\nrepresentation by the implementation."},{"FQCN":"org.bukkit.BanEntry","methods":[{"name":"getTarget","params":[],"desc":"Gets the target involved. This may be in the form of an IP or a player\nname.","ret":"the target name or IP address"},{"name":"getBanTarget","params":[],"desc":"Gets the target involved.","ret":"the target profile or IP address"},{"name":"getCreated","params":[],"desc":"Gets the date this ban entry was created.","ret":"the creation date"},{"name":"setCreated","params":[{"name":"created","type":"Date","desc":"the new created date, cannot be null"}],"desc":"Sets the date this ban entry was created.","ret":""},{"name":"getSource","params":[],"desc":"Gets the source of this ban.\n<p>\nNote: A source is considered any String, although this is generally a\nplayer name.","ret":"the source of the ban"},{"name":"setSource","params":[{"name":"source","type":"String","desc":"the new source where null values become empty strings"}],"desc":"Sets the source of this ban.\n<p>\nNote: A source is considered any String, although this is generally a\nplayer name.","ret":""},{"name":"getExpiration","params":[],"desc":"Gets the date this ban expires on, or null for no defined end date.","ret":"the expiration date"},{"name":"setExpiration","params":[{"name":"expiration","type":"Date","desc":"the new expiration date, or null to indicate an\n    eternity"}],"desc":"Sets the date this ban expires on. Null values are considered\n\"infinite\" bans.","ret":""},{"name":"getReason","params":[],"desc":"Gets the reason for this ban.","ret":"the ban reason, or null if not set"},{"name":"setReason","params":[{"name":"reason","type":"String","desc":"the new reason, null values assume the implementation\n    default"}],"desc":"Sets the reason for this ban. Reasons must not be null.","ret":""},{"name":"save","params":[],"desc":"Saves the ban entry, overwriting any previous data in the ban list.\n<p>\nSaving the ban entry of an unbanned player will cause the player to be\nbanned once again.","ret":""},{"name":"remove","params":[],"desc":"Removes this ban entry from the appropriate ban list.","ret":""}],"desc":"A single entry from a ban list. This may represent either a player ban or\nan IP ban.\n<p>\nBan entries include the following properties:\n<table border=1>\n<caption>Property information</caption>\n<tr>\n    <th>Property</th>\n    <th>Description</th>\n</tr><tr>\n    <td>Target Profile / IP Address</td>\n    <td>The target profile or IP address</td>\n</tr><tr>\n    <td>Creation Date</td>\n    <td>The creation date of the ban</td>\n</tr><tr>\n    <td>Source</td>\n    <td>The source of the ban, such as a player, console, plugin, etc</td>\n</tr><tr>\n    <td>Expiration Date</td>\n    <td>The expiration date of the ban</td>\n</tr><tr>\n    <td>Reason</td>\n    <td>The reason for the ban</td>\n</tr>\n</table>\n<p>\nUnsaved information is not automatically written to the implementation's\nban list, instead, the {@link #save()} method must be called to write the\nchanges to the ban list. If this ban entry has expired (such as from an\nunban) and is no longer found in the list, the {@link #save()} call will\nre-add it to the list, therefore banning the victim specified.\n<p>\nLikewise, changes to the associated {@link BanList} or other entries may or\nmay not be reflected in this entry."},{"FQCN":"org.bukkit.HeightMap","methods":[],"desc":"Further information regarding heightmaps."},{"FQCN":"org.bukkit.Utility","methods":[],"desc":"This annotation indicates a method (and sometimes constructor) will chain\nits internal operations.\n<p>\nThis is solely meant for identifying methods that don't need to be\noverridden / handled manually."},{"FQCN":"org.bukkit.SandstoneType","methods":[{"name":"getData","params":[],"desc":"Gets the associated data value representing this type of sandstone","ret":"A byte containing the data value of this sandstone type"},{"name":"getByData","params":[{"name":"data","type":"byte","desc":"Data value to fetch"}],"desc":"Gets the type of sandstone with the given data value","ret":"The {@link SandstoneType} representing the given value, or null\n    if it doesn't exist"}],"desc":"Represents the three different types of Sandstone"},{"FQCN":"org.bukkit.command.SimpleCommandMap","methods":[{"name":"registerAll","params":[{"name":"fallbackPrefix","type":"String","desc":""},{"name":"commands","type":"List<Command>","desc":""}],"desc":"{@inheritDoc}","ret":""},{"name":"register","params":[{"name":"fallbackPrefix","type":"String","desc":""},{"name":"command","type":"Command","desc":""}],"desc":"{@inheritDoc}","ret":""},{"name":"register","params":[{"name":"label","type":"String","desc":""},{"name":"fallbackPrefix","type":"String","desc":""},{"name":"command","type":"Command","desc":""}],"desc":"{@inheritDoc}","ret":""},{"name":"register","params":[{"name":"label","type":"String","desc":"the name of the command, without the '/'-prefix."},{"name":"command","type":"Command","desc":"the command to register"},{"name":"isAlias","type":"boolean","desc":"whether the command is an alias"},{"name":"fallbackPrefix","type":"String","desc":"a prefix which is prepended to the command for a\n    unique address"}],"desc":"Registers a command with the given name is possible. Also uses\nfallbackPrefix to create a unique name.","ret":"true if command was registered, false otherwise."},{"name":"dispatch","params":[{"name":"sender","type":"CommandSender","desc":""},{"name":"commandLine","type":"String","desc":""}],"desc":"{@inheritDoc}","ret":""}],"desc":""},{"FQCN":"org.bukkit.command.ConsoleCommandSender","methods":[],"desc":""},{"FQCN":"org.bukkit.command.BufferedCommandSender","methods":[],"desc":""},{"FQCN":"org.bukkit.command.CommandException","methods":[],"desc":"Thrown when an unhandled exception occurs during the execution of a Command"},{"FQCN":"org.bukkit.command.ProxiedCommandSender","methods":[{"name":"getCaller","params":[],"desc":"Returns the CommandSender which triggered this proxied command","ret":"the caller which triggered the command"},{"name":"getCallee","params":[],"desc":"Returns the CommandSender which is being used to call the command","ret":"the caller which the command is being run as"}],"desc":""},{"FQCN":"org.bukkit.command.BlockCommandSender","methods":[{"name":"getBlock","params":[],"desc":"Returns the block this command sender belongs to","ret":"Block for the command sender"}],"desc":""},{"FQCN":"org.bukkit.command.TabExecutor","methods":[],"desc":"This class is provided as a convenience to implement both TabCompleter and\nCommandExecutor."},{"FQCN":"org.bukkit.command.PluginCommand","methods":[{"name":"execute","params":[{"name":"sender","type":"CommandSender","desc":"Source object which is executing this command"},{"name":"commandLabel","type":"String","desc":"The alias of the command used"},{"name":"args","type":"String[]","desc":"All arguments passed to the command, split via ' '"}],"desc":"Executes the command, returning its success","ret":"true if the command was successful, otherwise false"},{"name":"setExecutor","params":[{"name":"executor","type":"CommandExecutor","desc":"New executor to run"}],"desc":"Sets the {@link CommandExecutor} to run when parsing this command","ret":""},{"name":"getExecutor","params":[],"desc":"Gets the {@link CommandExecutor} associated with this command","ret":"CommandExecutor object linked to this command"},{"name":"setTabCompleter","params":[{"name":"completer","type":"TabCompleter","desc":"New tab completer"}],"desc":"Sets the {@link TabCompleter} to run when tab-completing this command.\n<p>\nIf no TabCompleter is specified, and the command's executor implements\nTabCompleter, then the executor will be used for tab completion.","ret":""},{"name":"getTabCompleter","params":[],"desc":"Gets the {@link TabCompleter} associated with this command.","ret":"TabCompleter object linked to this command"},{"name":"getPlugin","params":[],"desc":"Gets the owner of this PluginCommand","ret":"Plugin that owns this command"},{"name":"tabComplete","params":[{"name":"sender","type":"CommandSender","desc":""},{"name":"alias","type":"String","desc":""},{"name":"args","type":"String[]","desc":""}],"desc":"{@inheritDoc}\n<p>\nDelegates to the tab completer if present.\n<p>\nIf it is not present or returns null, will delegate to the current\ncommand executor if it implements {@link TabCompleter}. If a non-null\nlist has not been found, will default to standard player name\ncompletion in {@link\nCommand#tabComplete(CommandSender, String, String[])}.\n<p>\nThis method does not consider permissions.","ret":""}],"desc":"Represents a {@link Command} belonging to a plugin"},{"FQCN":"org.bukkit.command.CommandExecutor","methods":[{"name":"onCommand","params":[{"name":"sender","type":"CommandSender","desc":"Source of the command"},{"name":"command","type":"Command","desc":"Command which was executed"},{"name":"label","type":"String","desc":"Alias of the command which was used"},{"name":"args","type":"String[]","desc":"Passed command arguments"}],"desc":"Executes the given command, returning its success.\n<br>\nIf false is returned, then the \"usage\" plugin.yml entry for this command\n(if defined) will be sent to the player.","ret":"true if a valid command, otherwise false"}],"desc":"Represents a class which contains a single method for executing commands"},{"FQCN":"org.bukkit.command.Command","methods":[{"name":"execute","params":[{"name":"sender","type":"CommandSender","desc":"Source object which is executing this command"},{"name":"commandLabel","type":"String","desc":"The alias of the command used"},{"name":"args","type":"String[]","desc":"All arguments passed to the command, split via ' '"}],"desc":"Executes the command, returning its success","ret":"true if the command was successful, otherwise false"},{"name":"tabComplete","params":[{"name":"sender","type":"CommandSender","desc":"Source object which is executing this command"},{"name":"alias","type":"String","desc":"the alias being used"},{"name":"args","type":"String[]","desc":"All arguments passed to the command, split via ' '"}],"desc":"Executed on tab completion for this command, returning a list of\noptions the player can tab through.","ret":"a list of tab-completions for the specified arguments. This\n    will never be null. List may be immutable."},{"name":"tabComplete","params":[{"name":"sender","type":"CommandSender","desc":"Source object which is executing this command"},{"name":"alias","type":"String","desc":"the alias being used"},{"name":"args","type":"String[]","desc":"All arguments passed to the command, split via ' '"},{"name":"location","type":"Location","desc":"The position looked at by the sender, or null if none"}],"desc":"Executed on tab completion for this command, returning a list of\noptions the player can tab through.","ret":"a list of tab-completions for the specified arguments. This\n    will never be null. List may be immutable."},{"name":"getName","params":[],"desc":"Returns the name of this command","ret":"Name of this command"},{"name":"setName","params":[{"name":"name","type":"String","desc":"New command name"}],"desc":"Sets the name of this command.\n<p>\nMay only be used before registering the command.\nWill return true if the new name is set, and false\nif the command has already been registered.","ret":"returns true if the name change happened instantly or false if\n    the command was already registered"},{"name":"getPermission","params":[],"desc":"Gets the permission required by users to be able to perform this\ncommand","ret":"Permission name, or null if none"},{"name":"setPermission","params":[{"name":"permission","type":"String","desc":"Permission name or null"}],"desc":"Sets the permission required by users to be able to perform this\ncommand","ret":""},{"name":"testPermission","params":[{"name":"target","type":"CommandSender","desc":"User to test"}],"desc":"Tests the given {@link CommandSender} to see if they can perform this\ncommand.\n<p>\nIf they do not have permission, they will be informed that they cannot\ndo this.","ret":"true if they can use it, otherwise false"},{"name":"testPermissionSilent","params":[{"name":"target","type":"CommandSender","desc":"User to test"}],"desc":"Tests the given {@link CommandSender} to see if they can perform this\ncommand.\n<p>\nNo error is sent to the sender.","ret":"true if they can use it, otherwise false"},{"name":"getLabel","params":[],"desc":"Returns the label for this command","ret":"Label of this command"},{"name":"setLabel","params":[{"name":"name","type":"String","desc":"The command's name"}],"desc":"Sets the label of this command.\n<p>\nMay only be used before registering the command.\nWill return true if the new name is set, and false\nif the command has already been registered.","ret":"returns true if the name change happened instantly or false if\n    the command was already registered"},{"name":"register","params":[{"name":"commandMap","type":"CommandMap","desc":"the CommandMap to register this command to"}],"desc":"Registers this command to a CommandMap.\nOnce called it only allows changes the registered CommandMap","ret":"true if the registration was successful (the current registered\n    CommandMap was the passed CommandMap or null) false otherwise"},{"name":"unregister","params":[{"name":"commandMap","type":"CommandMap","desc":"the CommandMap to unregister"}],"desc":"Unregisters this command from the passed CommandMap applying any\noutstanding changes","ret":"true if the unregistration was successful (the current\n    registered CommandMap was the passed CommandMap or null) false\n    otherwise"},{"name":"isRegistered","params":[],"desc":"Returns the current registered state of this command","ret":"true if this command is currently registered false otherwise"},{"name":"getAliases","params":[],"desc":"Returns a list of active aliases of this command","ret":"List of aliases"},{"name":"getPermissionMessage","params":[],"desc":"Returns a message to be displayed on a failed permission check for this\ncommand","ret":"Permission check failed message"},{"name":"getDescription","params":[],"desc":"Gets a brief description of this command","ret":"Description of this command"},{"name":"getUsage","params":[],"desc":"Gets an example usage of this command","ret":"One or more example usages"},{"name":"setAliases","params":[{"name":"aliases","type":"List<String>","desc":"aliases to register to this command"}],"desc":"Sets the list of aliases to request on registration for this command.\nThis is not effective outside of defining aliases in the {@link\nPluginDescriptionFile#getCommands()} (under the\n`<code>aliases</code>' node) is equivalent to this method.","ret":"this command object, for chaining"},{"name":"setDescription","params":[{"name":"description","type":"String","desc":"new command description"}],"desc":"Sets a brief description of this command. Defining a description in the\n{@link PluginDescriptionFile#getCommands()} (under the\n`<code>description</code>' node) is equivalent to this method.","ret":"this command object, for chaining"},{"name":"setPermissionMessage","params":[{"name":"permissionMessage","type":"String","desc":"new permission message, null to indicate\n    default message, or an empty string to indicate no message"}],"desc":"Sets the message sent when a permission check fails","ret":"this command object, for chaining"},{"name":"setUsage","params":[{"name":"usage","type":"String","desc":"new example usage"}],"desc":"Sets the example usage of this command","ret":"this command object, for chaining"},{"name":"permissionMessage","params":[],"desc":"Gets the permission message.","ret":"the permission message"},{"name":"permissionMessage","params":[{"name":"permissionMessage","type":"net.kyori.adventure.text.Component","desc":"the permission message"}],"desc":"Sets the permission message.","ret":""}],"desc":"Represents a Command, which executes various tasks upon user input"},{"FQCN":"org.bukkit.command.CommandSender","methods":[{"name":"sendMessage","params":[{"name":"message","type":"String","desc":"Message to be displayed"}],"desc":"Sends this sender a message","ret":""},{"name":"sendMessage","params":[{"name":"messages","type":"String","desc":"An array of messages to be displayed"}],"desc":"Sends this sender multiple messages","ret":""},{"name":"sendMessage","params":[{"name":"sender","type":"UUID","desc":"The sender of this message"},{"name":"message","type":"String","desc":"Message to be displayed"}],"desc":"Sends this sender a message","ret":""},{"name":"sendMessage","params":[{"name":"sender","type":"UUID","desc":"The sender of this message"},{"name":"messages","type":"String","desc":"An array of messages to be displayed"}],"desc":"Sends this sender multiple messages","ret":""},{"name":"getServer","params":[],"desc":"Returns the server instance that this command is running on","ret":"Server instance"},{"name":"getName","params":[],"desc":"Gets the name of this command sender","ret":"Name of the sender"},{"name":"name","params":[],"desc":"Gets the name of this command sender","ret":"Name of the sender"},{"name":"sendRichMessage","params":[{"name":"message","type":"String","desc":"MiniMessage content"}],"desc":"Sends a message with the MiniMessage format to the command sender.\n<p>\nSee <a href=\"https://docs.advntr.dev/minimessage/\">MiniMessage docs</a>\nfor more information on the format.","ret":""},{"name":"sendRichMessage","params":[{"name":"message","type":"String","desc":"MiniMessage content"},{"name":"resolvers","type":"net.kyori.adventure.text.minimessage.tag.resolver.TagResolver","desc":"resolvers to use"}],"desc":"Sends a message with the MiniMessage format to the command sender.\n<p>\nSee <a href=\"https://docs.advntr.dev/minimessage/\">MiniMessage docs</a> and <a href=\"https://docs.advntr.dev/minimessage/dynamic-replacements\">MiniMessage Placeholders docs</a>\nfor more information on the format.","ret":""},{"name":"sendPlainMessage","params":[{"name":"message","type":"String","desc":"plain message"}],"desc":"Sends a plain message to the command sender.","ret":""},{"name":"sendMessage","params":[{"name":"component","type":"net.md_5.bungee.api.chat.BaseComponent","desc":"the component to send"}],"desc":"Sends the component to the sender\n\n<p>If this sender does not support sending full components then\nthe component will be sent as legacy text.</p>","ret":""},{"name":"sendMessage","params":[{"name":"components","type":"net.md_5.bungee.api.chat.BaseComponent","desc":"the components to send"}],"desc":"Sends an array of components as a single message to the sender\n\n<p>If this sender does not support sending full components then\nthe components will be sent as legacy text.</p>","ret":""}],"desc":""},{"FQCN":"org.bukkit.command.defaults.ReloadCommand","methods":[],"desc":""},{"FQCN":"org.bukkit.command.defaults.BukkitCommand","methods":[],"desc":""},{"FQCN":"org.bukkit.command.defaults.PluginsCommand","methods":[],"desc":""},{"FQCN":"org.bukkit.command.defaults.HelpCommand","methods":[{"name":"damerauLevenshteinDistance","params":[{"name":"s1","type":"String","desc":"The first string being compared."},{"name":"s2","type":"String","desc":"The second string being compared."}],"desc":"Computes the Dameraur-Levenshtein Distance between two strings. Adapted\nfrom the algorithm at <a href=\"http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\">Wikipedia: Damerau–Levenshtein distance</a>","ret":"The number of substitutions, deletions, insertions, and\ntranspositions required to get from s1 to s2."}],"desc":""},{"FQCN":"org.bukkit.command.defaults.VersionCommand","methods":[],"desc":""},{"FQCN":"org.bukkit.command.MultipleCommandAlias","methods":[{"name":"getCommands","params":[],"desc":"Gets the commands associated with the multi-command alias.","ret":"commands associated with alias"}],"desc":"Represents a command that delegates to one or more other commands"},{"FQCN":"org.bukkit.command.RemoteConsoleCommandSender","methods":[{"name":"getAddress","params":[],"desc":"Gets the socket address of this remote sender.","ret":"the remote sender's address"}],"desc":""},{"FQCN":"org.bukkit.command.TabCompleter","methods":[{"name":"onTabComplete","params":[{"name":"sender","type":"CommandSender","desc":"Source of the command.  For players tab-completing a\n    command inside of a command block, this will be the player, not\n    the command block."},{"name":"command","type":"Command","desc":"Command which was executed"},{"name":"label","type":"String","desc":"Alias of the command which was used"},{"name":"args","type":"String[]","desc":"The arguments passed to the command, including final\n    partial argument to be completed"}],"desc":"Requests a list of possible completions for a command argument.","ret":"A List of possible completions for the final argument, or null\n    to default to the command executor"}],"desc":"Represents a class which can suggest tab completions for commands."},{"FQCN":"org.bukkit.command.FormattedCommandAlias","methods":[],"desc":""},{"FQCN":"org.bukkit.command.PluginIdentifiableCommand","methods":[{"name":"getPlugin","params":[],"desc":"Gets the owner of this PluginIdentifiableCommand.","ret":"Plugin that owns this PluginIdentifiableCommand."}],"desc":"This interface is used by the help system to group commands into\nsub-indexes based on the {@link Plugin} they are a part of. Custom command\nimplementations will need to implement this interface to have a sub-index\nautomatically generated on the plugin's behalf."},{"FQCN":"org.bukkit.command.CommandMap","methods":[{"name":"registerAll","params":[{"name":"fallbackPrefix","type":"String","desc":"a prefix which is prepended to each command with\n    a ':' one or more times to make the command unique"},{"name":"commands","type":"List<Command>","desc":"a list of commands to register"}],"desc":"Registers all the commands belonging to a certain plugin.\n<p>\nCaller can use:-\n<ul>\n<li>command.getName() to determine the label registered for this\n    command\n<li>command.getAliases() to determine the aliases which where\n    registered\n</ul>","ret":""},{"name":"register","params":[{"name":"label","type":"String","desc":"the label of the command, without the '/'-prefix."},{"name":"fallbackPrefix","type":"String","desc":"a prefix which is prepended to the command with a\n    ':' one or more times to make the command unique"},{"name":"command","type":"Command","desc":"the command to register"}],"desc":"Registers a command. Returns true on success; false if name is already\ntaken and fallback had to be used.\n<p>\nCaller can use:-\n<ul>\n<li>command.getName() to determine the label registered for this\n    command\n<li>command.getAliases() to determine the aliases which where\n    registered\n</ul>","ret":"true if command was registered with the passed in label, false\n    otherwise, which indicates the fallbackPrefix was used one or more\n    times"},{"name":"register","params":[{"name":"fallbackPrefix","type":"String","desc":"a prefix which is prepended to the command with a\n    ':' one or more times to make the command unique"},{"name":"command","type":"Command","desc":"the command to register, from which label is determined\n    from the command name"}],"desc":"Registers a command. Returns true on success; false if name is already\ntaken and fallback had to be used.\n<p>\nCaller can use:-\n<ul>\n<li>command.getName() to determine the label registered for this\n    command\n<li>command.getAliases() to determine the aliases which where\n    registered\n</ul>","ret":"true if command was registered with the passed in label, false\n    otherwise, which indicates the fallbackPrefix was used one or more\n    times"},{"name":"dispatch","params":[{"name":"sender","type":"CommandSender","desc":"The command's sender"},{"name":"cmdLine","type":"String","desc":"command + arguments. Example: \"/test abc 123\""}],"desc":"Looks for the requested command and executes it if found.","ret":"returns false if no target is found, true otherwise."},{"name":"clearCommands","params":[],"desc":"Clears all registered commands.","ret":""},{"name":"getCommand","params":[{"name":"name","type":"String","desc":"Name of the command to retrieve"}],"desc":"Gets the command registered to the specified name","ret":"Command with the specified name or null if a command with that\n    label doesn't exist"},{"name":"tabComplete","params":[{"name":"sender","type":"CommandSender","desc":"The command's sender."},{"name":"cmdLine","type":"String","desc":"The entire command string to tab-complete, excluding\n    initial slash."}],"desc":"Looks for the requested command and executes an appropriate\ntab-completer if found. This method will also tab-complete partial\ncommands.","ret":"a list of possible tab-completions. This list may be immutable.\n    Will be null if no matching command of which sender has permission."},{"name":"tabComplete","params":[{"name":"sender","type":"CommandSender","desc":"The command's sender."},{"name":"cmdLine","type":"String","desc":"The entire command string to tab-complete, excluding\n    initial slash."},{"name":"location","type":"Location","desc":"The position looked at by the sender, or null if none"}],"desc":"Looks for the requested command and executes an appropriate\ntab-completer if found. This method will also tab-complete partial\ncommands.","ret":"a list of possible tab-completions. This list may be immutable.\n    Will be null if no matching command of which sender has permission."},{"name":"getKnownCommands","params":[],"desc":"Return a Map of known commands","ret":"known commands"}],"desc":""},{"FQCN":"org.bukkit.command.PluginCommandYamlParser","methods":[],"desc":""},{"FQCN":"org.bukkit.command.MessageCommandSender","methods":[],"desc":"For when all you care about is just messaging"},{"FQCN":"org.bukkit.Server","methods":[{"name":"getPluginsFolder","params":[],"desc":"Returns the de facto plugins directory, generally used for storing plugin jars to be loaded,\nas well as their {@link org.bukkit.plugin.Plugin#getDataFolder() data folders}.\n\n<p>Plugins should use {@link org.bukkit.plugin.Plugin#getDataFolder()} rather than traversing this\ndirectory manually when determining the location in which to store their data and configuration files.</p>","ret":"plugins directory"},{"name":"getName","params":[],"desc":"Gets the name of this server implementation.","ret":"name of this server implementation"},{"name":"getVersion","params":[],"desc":"Gets the version string of this server implementation.","ret":"version of this server implementation"},{"name":"getBukkitVersion","params":[],"desc":"Gets the Bukkit version that this server is running.","ret":"version of Bukkit"},{"name":"getMinecraftVersion","params":[],"desc":"Gets the version of game this server implements","ret":"version of game"},{"name":"getOnlinePlayers","params":[],"desc":"Gets a view of all currently logged in players. This {@linkplain\nCollections#unmodifiableCollection(Collection) view} is a reused\nobject, making some operations like {@link Collection#size()}\nzero-allocation.\n<p>\nThe collection is a view backed by the internal representation, such\nthat, changes to the internal state of the server will be reflected\nimmediately. However, the reuse of the returned collection (identity)\nis not strictly guaranteed for future or all implementations. Casting\nthe collection, or relying on interface implementations (like {@link\nSerializable} or {@link List}), is deprecated.\n<p>\nIteration behavior is undefined outside of self-contained main-thread\nuses. Normal and immediate iterator use without consequences that\naffect the collection are fully supported. The effects following\n(non-exhaustive) {@link Entity#teleport(Location) teleportation},\n{@link Player#setHealth(double) death}, and {@link Player#kickPlayer(\nString) kicking} are undefined. Any use of this collection from\nasynchronous threads is unsafe.\n<p>\nFor safe consequential iteration or mimicking the old array behavior,\nusing {@link Collection#toArray(Object[])} is recommended. For making\nsnapshots, {@link ImmutableList#copyOf(Collection)} is recommended.","ret":"a view of currently online players."},{"name":"getMaxPlayers","params":[],"desc":"Get the maximum amount of players which can login to this server.","ret":"the amount of players this server allows"},{"name":"setMaxPlayers","params":[{"name":"maxPlayers","type":"int","desc":"The maximum amount of concurrent players"}],"desc":"Set the maximum amount of players allowed to be logged in at once.","ret":""},{"name":"getPort","params":[],"desc":"Get the game port that the server runs on.","ret":"the port number of this server"},{"name":"getViewDistance","params":[],"desc":"Get the view distance from this server.","ret":"the view distance from this server."},{"name":"getSimulationDistance","params":[],"desc":"Get the simulation distance from this server.","ret":"the simulation distance from this server."},{"name":"getIp","params":[],"desc":"Get the IP that this server is bound to, or empty string if not\nspecified.","ret":"the IP string that this server is bound to, otherwise empty\n    string"},{"name":"getWorldType","params":[],"desc":"Get world type (level-type setting) for default world.","ret":"the value of level-type (e.g. DEFAULT, FLAT, DEFAULT_1_1)"},{"name":"getGenerateStructures","params":[],"desc":"Get generate-structures setting.","ret":"true if structure generation is enabled, false otherwise"},{"name":"getMaxWorldSize","params":[],"desc":"Get max world size.","ret":"the maximum world size as specified for the server"},{"name":"getAllowEnd","params":[],"desc":"Gets whether this server allows the End or not.","ret":"whether this server allows the End or not"},{"name":"getAllowNether","params":[],"desc":"Gets whether this server allows the Nether or not.","ret":"whether this server allows the Nether or not"},{"name":"isLoggingIPs","params":[],"desc":"Gets whether the server is logging the IP addresses of players.","ret":"whether the server is logging the IP addresses of players"},{"name":"getInitialEnabledPacks","params":[],"desc":"Gets a list of packs to be enabled.","ret":"a list of packs names"},{"name":"getInitialDisabledPacks","params":[],"desc":"Gets a list of packs that will not be enabled automatically.","ret":"a list of packs names"},{"name":"getDataPackManager","params":[],"desc":"Get the DataPack Manager.","ret":"the manager"},{"name":"getServerTickManager","params":[],"desc":"Get the ServerTick Manager.","ret":"the manager"},{"name":"getServerResourcePack","params":[],"desc":"Gets the resource pack configured to be sent to clients by the server.","ret":"the resource pack"},{"name":"getResourcePack","params":[],"desc":"Gets the server resource pack uri, or empty string if not specified.","ret":"the server resource pack uri, otherwise empty string"},{"name":"getResourcePackHash","params":[],"desc":"Gets the SHA-1 digest of the server resource pack, or empty string if\nnot specified.","ret":"the SHA-1 digest of the server resource pack, otherwise empty\n    string"},{"name":"getResourcePackPrompt","params":[],"desc":"Gets the custom prompt message to be shown when the server resource\npack is required, or empty string if not specified.","ret":"the custom prompt message to be shown when the server resource,\n    otherwise empty string"},{"name":"isResourcePackRequired","params":[],"desc":"Gets whether the server resource pack is enforced.","ret":"whether the server resource pack is enforced"},{"name":"hasWhitelist","params":[],"desc":"Gets whether this server has a whitelist or not.","ret":"whether this server has a whitelist or not"},{"name":"setWhitelist","params":[{"name":"value","type":"boolean","desc":"true for whitelist on, false for off"}],"desc":"Sets if the server is whitelisted.","ret":""},{"name":"isWhitelistEnforced","params":[],"desc":"Gets whether the server whitelist is enforced.\n\nIf the whitelist is enforced, non-whitelisted players will be\ndisconnected when the server whitelist is reloaded.","ret":"whether the server whitelist is enforced"},{"name":"setWhitelistEnforced","params":[{"name":"value","type":"boolean","desc":"true for enforced, false for not"}],"desc":"Sets if the server whitelist is enforced.\n\nIf the whitelist is enforced, non-whitelisted players will be\ndisconnected when the server whitelist is reloaded.","ret":""},{"name":"getWhitelistedPlayers","params":[],"desc":"Gets a list of whitelisted players.","ret":"a set containing all whitelisted players"},{"name":"reloadWhitelist","params":[],"desc":"Reloads the whitelist from disk.","ret":""},{"name":"broadcastMessage","params":[{"name":"message","type":"String","desc":"the message"}],"desc":"Broadcast a message to all players.\n<p>\nThis is the same as calling {@link #broadcast(java.lang.String,\njava.lang.String)} to {@link #BROADCAST_CHANNEL_USERS}","ret":"the number of players"},{"name":"broadcast","params":[{"name":"component","type":"net.md_5.bungee.api.chat.BaseComponent","desc":"the component to send"}],"desc":"Sends the component to all online players.","ret":""},{"name":"broadcast","params":[{"name":"components","type":"net.md_5.bungee.api.chat.BaseComponent","desc":"the components to send"}],"desc":"Sends an array of components as a single message to all online players.","ret":""},{"name":"getUpdateFolder","params":[],"desc":"Gets the name of the update folder. The update folder is used to safely\nupdate plugins at the right moment on a plugin load.\n<p>\nThe update folder name is relative to the plugins folder.","ret":"the name of the update folder"},{"name":"getUpdateFolderFile","params":[],"desc":"Gets the update folder. The update folder is used to safely update\nplugins at the right moment on a plugin load.","ret":"the update folder"},{"name":"getConnectionThrottle","params":[],"desc":"Gets the value of the connection throttle setting.","ret":"the value of the connection throttle setting"},{"name":"getTicksPerAnimalSpawns","params":[],"desc":"Gets default ticks per animal spawns value.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn monsters\n    every tick.\n<li>A value of 400 will mean the server will attempt to spawn monsters\n    every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b> If set to 0, animal spawning will be disabled. We\nrecommend using spawn-animals to control this instead.\n<p>\nMinecraft default: 400.","ret":"the default ticks per animal spawns value"},{"name":"getTicksPerMonsterSpawns","params":[],"desc":"Gets the default ticks per monster spawns value.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn monsters\n    every tick.\n<li>A value of 400 will mean the server will attempt to spawn monsters\n    every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b> If set to 0, monsters spawning will be disabled. We\nrecommend using spawn-monsters to control this instead.\n<p>\nMinecraft default: 1.","ret":"the default ticks per monsters spawn value"},{"name":"getTicksPerWaterSpawns","params":[],"desc":"Gets the default ticks per water mob spawns value.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn water mobs\n    every tick.\n<li>A value of 400 will mean the server will attempt to spawn water mobs\n    every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b> If set to 0, water mobs spawning will be disabled.\n<p>\nMinecraft default: 1.","ret":"the default ticks per water mobs spawn value"},{"name":"getTicksPerWaterAmbientSpawns","params":[],"desc":"Gets the default ticks per water ambient mob spawns value.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn water ambient mobs\n    every tick.\n<li>A value of 400 will mean the server will attempt to spawn water ambient mobs\n    every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b> If set to 0, ambient mobs spawning will be disabled.\n<p>\nMinecraft default: 1.","ret":"the default ticks per water ambient mobs spawn value"},{"name":"getTicksPerWaterUndergroundCreatureSpawns","params":[],"desc":"Gets the default ticks per water underground creature spawns value.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn water underground creature\n    every tick.\n<li>A value of 400 will mean the server will attempt to spawn water underground creature\n    every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b> If set to 0, water underground creature spawning will be disabled.\n<p>\nMinecraft default: 1.","ret":"the default ticks per water underground creature spawn value"},{"name":"getTicksPerAmbientSpawns","params":[],"desc":"Gets the default ticks per ambient mob spawns value.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn ambient mobs\n    every tick.\n<li>A value of 400 will mean the server will attempt to spawn ambient mobs\n    every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b> If set to 0, ambient mobs spawning will be disabled.\n<p>\nMinecraft default: 1.","ret":"the default ticks per ambient mobs spawn value"},{"name":"getTicksPerSpawns","params":[{"name":"spawnCategory","type":"SpawnCategory","desc":"the category of spawn"}],"desc":"Gets the default ticks per {@link SpawnCategory} spawns value.\n<p>\n<b>Example Usage:</b>\n<ul>\n<li>A value of 1 will mean the server will attempt to spawn {@link SpawnCategory} mobs\n    every tick.\n<li>A value of 400 will mean the server will attempt to spawn {@link SpawnCategory} mobs\n    every 400th tick.\n<li>A value below 0 will be reset back to Minecraft's default.\n</ul>\n<p>\n<b>Note:</b> If set to 0, {@link SpawnCategory} mobs spawning will be disabled.","ret":"the default ticks per {@link SpawnCategory} mobs spawn value"},{"name":"getPlayer","params":[{"name":"name","type":"String","desc":"the name to look up"}],"desc":"Gets a player object by the given username.\n<p>\nThis method may not return objects for offline players.","ret":"a player if one was found, null otherwise"},{"name":"getPlayerExact","params":[{"name":"name","type":"String","desc":"Exact name of the player to retrieve"}],"desc":"Gets the player with the exact given name, case insensitive.","ret":"a player object if one was found, null otherwise"},{"name":"matchPlayer","params":[{"name":"name","type":"String","desc":"the (partial) name to match"}],"desc":"Attempts to match any players with the given name, and returns a list\nof all possibly matches.\n<p>\nThis list is not sorted in any particular order. If an exact match is\nfound, the returned list will only contain a single result.","ret":"list of all possible players"},{"name":"getPlayer","params":[{"name":"id","type":"UUID","desc":"UUID of the player to retrieve"}],"desc":"Gets the player with the given UUID.","ret":"a player object if one was found, null otherwise"},{"name":"getPlayerUniqueId","params":[{"name":"playerName","type":"String","desc":"the player name to look up the unique ID for"}],"desc":"Gets the unique ID of the player currently known as the specified player name\nIn Offline Mode, will return an Offline UUID","ret":"A UUID, or null if that player name is not registered with Minecraft and the server is in online mode"},{"name":"getPluginManager","params":[],"desc":"Gets the plugin manager for interfacing with plugins.","ret":"a plugin manager for this Server instance"},{"name":"getScheduler","params":[],"desc":"Gets the scheduler for managing scheduled events.","ret":"a scheduling service for this server"},{"name":"getServicesManager","params":[],"desc":"Gets a services manager.","ret":"s services manager"},{"name":"getWorlds","params":[],"desc":"Gets a list of all worlds on this server.","ret":"a list of worlds"},{"name":"isTickingWorlds","params":[],"desc":"Gets whether the worlds are being ticked right now.","ret":"true if the worlds are being ticked, false otherwise."},{"name":"createWorld","params":[{"name":"creator","type":"WorldCreator","desc":"the options to use when creating the world"}],"desc":"Creates or loads a world with the given name using the specified\noptions.\n<p>\nIf the world is already loaded, it will just return the equivalent of\ngetWorld(creator.name()).\n<p>\nDo note that un/loading worlds mid-tick may have potential side effects, we strongly recommend\nensuring that you're not un/loading worlds midtick by checking {@link Bukkit#isTickingWorlds()}","ret":"newly created or loaded world"},{"name":"unloadWorld","params":[{"name":"name","type":"String","desc":"Name of the world to unload"},{"name":"save","type":"boolean","desc":"whether to save the chunks before unloading"}],"desc":"Unloads a world with the given name.\n<p>\nDo note that un/loading worlds mid-tick may have potential side effects, we strongly recommend\nensuring that you're not un/loading worlds midtick by checking {@link Bukkit#isTickingWorlds()}","ret":"true if successful, false otherwise"},{"name":"unloadWorld","params":[{"name":"world","type":"World","desc":"the world to unload"},{"name":"save","type":"boolean","desc":"whether to save the chunks before unloading"}],"desc":"Unloads the given world.\n<p>\nDo note that un/loading worlds mid-tick may have potential side effects, we strongly recommend\nensuring that you're not un/loading worlds midtick by checking {@link Bukkit#isTickingWorlds()}","ret":"true if successful, false otherwise"},{"name":"getWorld","params":[{"name":"name","type":"String","desc":"the name of the world to retrieve"}],"desc":"Gets the world with the given name.","ret":"a world with the given name, or null if none exists"},{"name":"getWorld","params":[{"name":"uid","type":"UUID","desc":"a unique-id of the world to retrieve"}],"desc":"Gets the world from the given Unique ID.","ret":"a world with the given Unique ID, or null if none exists"},{"name":"getWorld","params":[{"name":"worldKey","type":"NamespacedKey","desc":"the NamespacedKey of the world to retrieve"}],"desc":"Gets the world from the given NamespacedKey","ret":"a world with the given NamespacedKey, or null if none exists"},{"name":"createWorldBorder","params":[],"desc":"Create a new virtual {@link WorldBorder}.\n<p>\nNote that world borders created by the server will not respect any world\nscaling effects (i.e. coordinates are not divided by 8 in the nether).","ret":"the created world border instance"},{"name":"createMap","params":[{"name":"world","type":"World","desc":"the world the map will belong to"}],"desc":"Create a new map with an automatically assigned ID.","ret":"a newly created map view"},{"name":"createExplorerMap","params":[{"name":"world","type":"World","desc":"the world the map will belong to"},{"name":"location","type":"Location","desc":"the origin location to find the nearest structure"},{"name":"structureType","type":"StructureType","desc":"the type of structure to find"}],"desc":"Create a new explorer map targeting the closest nearby structure of a\ngiven {@link StructureType}.\n<br>\nThis method uses implementation default values for radius and\nfindUnexplored (usually 100, true).","ret":"a newly created item stack"},{"name":"createExplorerMap","params":[{"name":"world","type":"World","desc":"the world the map will belong to"},{"name":"location","type":"Location","desc":"the origin location to find the nearest structure"},{"name":"structureType","type":"StructureType","desc":"the type of structure to find"},{"name":"radius","type":"int","desc":"radius to search, see World#locateNearestStructure for more\n              information"},{"name":"findUnexplored","type":"boolean","desc":"whether to find unexplored structures"}],"desc":"Create a new explorer map targeting the closest nearby structure of a\ngiven {@link StructureType}.","ret":"the newly created item stack"},{"name":"createExplorerMap","params":[{"name":"world","type":"World","desc":"the world the map will belong to"},{"name":"location","type":"Location","desc":"the origin location to find the nearest structure"},{"name":"structureType","type":"org.bukkit.generator.structure.StructureType","desc":"the type of structure to find"},{"name":"mapIcon","type":"org.bukkit.map.MapCursor.Type","desc":"the map icon to use on the map"}],"desc":"Create a new explorer map targeting the closest nearby structure of a\ngiven {@link org.bukkit.generator.structure.StructureType}.\n<br>\nThis method uses implementation default values for radius and\nfindUnexplored (usually 100, true).","ret":"a newly created item stack or null if it can't find a location"},{"name":"createExplorerMap","params":[{"name":"world","type":"World","desc":"the world the map will belong to"},{"name":"location","type":"Location","desc":"the origin location to find the nearest structure"},{"name":"structureType","type":"org.bukkit.generator.structure.StructureType","desc":"the type of structure to find"},{"name":"mapIcon","type":"org.bukkit.map.MapCursor.Type","desc":"the map icon to use on the map"},{"name":"radius","type":"int","desc":"radius to search, see World#locateNearestStructure for more\n              information"},{"name":"findUnexplored","type":"boolean","desc":"whether to find unexplored structures"}],"desc":"Create a new explorer map targeting the closest nearby structure of a\ngiven {@link org.bukkit.generator.structure.StructureType}.","ret":"the newly created item stack or null if it can't find a location"},{"name":"reload","params":[],"desc":"Reloads the server, refreshing settings and plugin information.","ret":""},{"name":"reloadData","params":[],"desc":"Reload only the Minecraft data for the server. This includes custom\nadvancements and loot tables.","ret":""},{"name":"updateResources","params":[],"desc":"Updates all advancement, tag, and recipe data to all connected clients.\nUseful for updating clients to new advancements/recipes/tags.","ret":""},{"name":"updateRecipes","params":[],"desc":"Updates recipe data and the recipe book to each player. Useful for\nupdating clients to new recipes.","ret":""},{"name":"getLogger","params":[],"desc":"Returns the primary logger associated with this server instance.","ret":"Logger associated with this server"},{"name":"getPluginCommand","params":[{"name":"name","type":"String","desc":"the name of the command to retrieve"}],"desc":"Gets a {@link PluginCommand} with the given name or alias.","ret":"a plugin command if found, null otherwise"},{"name":"savePlayers","params":[],"desc":"Writes loaded players to disk.","ret":""},{"name":"dispatchCommand","params":[{"name":"sender","type":"CommandSender","desc":"the apparent sender of the command"},{"name":"commandLine","type":"String","desc":"the command + arguments. Example: <code>test abc\n    123</code>"}],"desc":"Dispatches a command on this server, and executes it if found.","ret":"returns false if no target is found"},{"name":"addRecipe","params":[{"name":"recipe","type":"Recipe","desc":"the recipe to add"}],"desc":"Adds a recipe to the crafting manager. Recipes added with\nthis method won't be sent to the client automatically. Use\n{@link #updateRecipes()} or {@link #updateResources()} to\nupdate clients to new recipes added.\n<p>\nPlayer's still have to discover recipes via {@link Player#discoverRecipe(NamespacedKey)}\nbefore seeing them in their recipe book.","ret":"true if the recipe was added, false if it wasn't for some\n    reason"},{"name":"addRecipe","params":[{"name":"recipe","type":"Recipe","desc":"the recipe to add"},{"name":"resendRecipes","type":"boolean","desc":"true to update the client with the full set of recipes"}],"desc":"Adds a recipe to the crafting manager.","ret":"true if the recipe was added, false if it wasn't for some reason"},{"name":"getRecipesFor","params":[{"name":"result","type":"ItemStack","desc":"the item to match against recipe results"}],"desc":"Get a list of all recipes for a given item. The stack size is ignored\nin comparisons. If the durability is -1, it will match any data value.","ret":"a list of recipes with the given result"},{"name":"getRecipe","params":[{"name":"recipeKey","type":"NamespacedKey","desc":"the key of the recipe to return"}],"desc":"Get the {@link Recipe} for the given key.","ret":"the recipe for the given key or null."},{"name":"getCraftingRecipe","params":[{"name":"craftingMatrix","type":"ItemStack[]","desc":"list of items to be crafted from.\n                      Must not contain more than 9 items."},{"name":"world","type":"World","desc":"The world the crafting takes place in."}],"desc":"Get the {@link Recipe} for the list of ItemStacks provided.\n\n<p>The list is formatted as a crafting matrix where the index follow\nthe pattern below:</p>\n\n<pre>\n[ 0 1 2 ]\n[ 3 4 5 ]\n[ 6 7 8 ]\n</pre>\n\n<p>NOTE: This method will not modify the provided ItemStack array, for that, use\n{@link #craftItem(ItemStack[], World, Player)}.</p>","ret":"the {@link Recipe} resulting from the given crafting matrix."},{"name":"craftItem","params":[{"name":"craftingMatrix","type":"ItemStack[]","desc":"list of items to be crafted from.\n                      Must not contain more than 9 items."},{"name":"world","type":"World","desc":"The world the crafting takes place in."},{"name":"player","type":"Player","desc":"The player to imitate the crafting event on."}],"desc":"Get the crafted item using the list of {@link ItemStack} provided.\n\n<p>The list is formatted as a crafting matrix where the index follow\nthe pattern below:</p>\n\n<pre>\n[ 0 1 2 ]\n[ 3 4 5 ]\n[ 6 7 8 ]\n</pre>\n\n<p>The {@link World} and {@link Player} arguments are required to fulfill the Bukkit Crafting\nevents.</p>\n\n<p>Calls {@link org.bukkit.event.inventory.PrepareItemCraftEvent} to imitate the {@link Player}\ninitiating the crafting event.</p>","ret":"the {@link ItemStack} resulting from the given crafting matrix, if no recipe is found\nan ItemStack of {@link Material#AIR} is returned."},{"name":"craftItem","params":[{"name":"craftingMatrix","type":"ItemStack[]","desc":"list of items to be crafted from.\n                      Must not contain more than 9 items."},{"name":"world","type":"World","desc":"The world the crafting takes place in."}],"desc":"Get the crafted item using the list of {@link ItemStack} provided.\n\n<p>The list is formatted as a crafting matrix where the index follow\nthe pattern below:</p>\n\n<pre>\n[ 0 1 2 ]\n[ 3 4 5 ]\n[ 6 7 8 ]\n</pre>","ret":"the {@link ItemStack} resulting from the given crafting matrix, if no recipe is found\nan ItemStack of {@link Material#AIR} is returned."},{"name":"craftItemResult","params":[{"name":"craftingMatrix","type":"ItemStack[]","desc":"list of items to be crafted from.\n                      Must not contain more than 9 items."},{"name":"world","type":"World","desc":"The world the crafting takes place in."},{"name":"player","type":"Player","desc":"The player to imitate the crafting event on."}],"desc":"Get the crafted item using the list of {@link ItemStack} provided.\n\n<p>The list is formatted as a crafting matrix where the index follow\nthe pattern below:</p>\n\n<pre>\n[ 0 1 2 ]\n[ 3 4 5 ]\n[ 6 7 8 ]\n</pre>\n\n<p>The {@link World} and {@link Player} arguments are required to fulfill the Bukkit Crafting\nevents.</p>\n\n<p>Calls {@link org.bukkit.event.inventory.PrepareItemCraftEvent} to imitate the {@link Player}\ninitiating the crafting event.</p>","ret":"resulting {@link ItemCraftResult} containing the resulting item, matrix and any overflow items."},{"name":"craftItemResult","params":[{"name":"craftingMatrix","type":"ItemStack[]","desc":"list of items to be crafted from.\n                      Must not contain more than 9 items."},{"name":"world","type":"World","desc":"The world the crafting takes place in."}],"desc":"Get the crafted item using the list of {@link ItemStack} provided.\n\n<p>The list is formatted as a crafting matrix where the index follow\nthe pattern below:</p>\n\n<pre>\n[ 0 1 2 ]\n[ 3 4 5 ]\n[ 6 7 8 ]\n</pre>","ret":"resulting {@link ItemCraftResult} containing the resulting item, matrix and any overflow items."},{"name":"recipeIterator","params":[],"desc":"Get an iterator through the list of crafting recipes.","ret":"an iterator"},{"name":"clearRecipes","params":[],"desc":"Clears the list of crafting recipes.","ret":""},{"name":"resetRecipes","params":[],"desc":"Resets the list of crafting recipes to the default.","ret":""},{"name":"removeRecipe","params":[{"name":"key","type":"NamespacedKey","desc":"NamespacedKey of recipe to remove."}],"desc":"Remove a recipe from the server.\n\n<b>Note that removing a recipe may cause permanent loss of data\nassociated with that recipe (eg whether it has been discovered by\nplayers).</b>","ret":"True if recipe was removed"},{"name":"removeRecipe","params":[{"name":"key","type":"NamespacedKey","desc":"NamespacedKey of recipe to remove."},{"name":"resendRecipes","type":"boolean","desc":"true to update all clients on the new recipe list.\n                     Will only update if a recipe was actually removed"}],"desc":"Remove a recipe from the server.\n<p>\n<b>Note that removing a recipe may cause permanent loss of data\nassociated with that recipe (eg whether it has been discovered by\nplayers).</b>","ret":"True if recipe was removed"},{"name":"getCommandAliases","params":[],"desc":"Gets a list of command aliases defined in the server properties.","ret":"a map of aliases to command names"},{"name":"getSpawnRadius","params":[],"desc":"Gets the radius, in blocks, around each worlds spawn point to protect.","ret":"spawn radius, or 0 if none"},{"name":"setSpawnRadius","params":[{"name":"value","type":"int","desc":"new spawn radius, or 0 if none"}],"desc":"Sets the radius, in blocks, around each worlds spawn point to protect.","ret":""},{"name":"shouldSendChatPreviews","params":[],"desc":"Gets whether the server should send a preview of the player's chat\nmessage to the client when the player types a message","ret":"true if the server should send a preview, false otherwise"},{"name":"isEnforcingSecureProfiles","params":[],"desc":"Gets whether the server only allow players with Mojang-signed public key\nto join","ret":"true if only Mojang-signed players can join, false otherwise"},{"name":"getHideOnlinePlayers","params":[],"desc":"Gets whether the Server hide online players in server status.","ret":"true if the server hide online players, false otherwise"},{"name":"getOnlineMode","params":[],"desc":"Gets whether the Server is in online mode or not.","ret":"true if the server authenticates clients, false otherwise"},{"name":"getAllowFlight","params":[],"desc":"Gets whether this server allows flying or not.","ret":"true if the server allows flight, false otherwise"},{"name":"isHardcore","params":[],"desc":"Gets whether the server is in hardcore mode or not.","ret":"true if the server mode is hardcore, false otherwise"},{"name":"shutdown","params":[],"desc":"Shutdowns the server, stopping everything.","ret":""},{"name":"broadcast","params":[{"name":"message","type":"String","desc":"message to broadcast"},{"name":"permission","type":"String","desc":"the required permission {@link Permissible\n    permissibles} must have to receive the broadcast"}],"desc":"Broadcasts the specified message to every user with the given\npermission name.","ret":"number of message recipients"},{"name":"broadcast","params":[{"name":"message","type":"net.kyori.adventure.text.Component","desc":"the message"}],"desc":"Broadcast a message to all players.\n<p>\nThis is the same as calling {@link #broadcast(net.kyori.adventure.text.Component,\njava.lang.String)} with the {@link #BROADCAST_CHANNEL_USERS} permission.","ret":"the number of players"},{"name":"broadcast","params":[{"name":"message","type":"net.kyori.adventure.text.Component","desc":"message to broadcast"},{"name":"permission","type":"String","desc":"the required permission {@link Permissible\n    permissibles} must have to receive the broadcast"}],"desc":"Broadcasts the specified message to every user with the given\npermission name.","ret":"number of message recipients"},{"name":"getOfflinePlayerIfCached","params":[{"name":"name","type":"String","desc":"the name of the player to retrieve"}],"desc":"Gets the player by the given name, regardless if they are offline or\nonline.\n<p>\nThis will not make a web request to get the UUID for the given name,\nthus this method will not block. However this method will return\n{@code null} if the player is not cached.\n</p>","ret":"an offline player if cached, {@code null} otherwise"},{"name":"getOfflinePlayer","params":[{"name":"id","type":"UUID","desc":"the UUID of the player to retrieve"}],"desc":"Gets the player by the given UUID, regardless if they are offline or\nonline.\n<p>\nThis will return an object even if the player does not exist. To this\nmethod, all players will exist.","ret":"an offline player"},{"name":"createPlayerProfile","params":[{"name":"uniqueId","type":"UUID","desc":"the unique id"},{"name":"name","type":"String","desc":"the name"}],"desc":"Creates a new {@link PlayerProfile}.","ret":"the new PlayerProfile"},{"name":"createPlayerProfile","params":[{"name":"uniqueId","type":"UUID","desc":"the unique id"}],"desc":"Creates a new {@link PlayerProfile}.","ret":"the new PlayerProfile"},{"name":"createPlayerProfile","params":[{"name":"name","type":"String","desc":"the name"}],"desc":"Creates a new {@link PlayerProfile}.","ret":"the new PlayerProfile"},{"name":"getIPBans","params":[],"desc":"Gets a set containing all current IPs that are banned.","ret":"a set containing banned IP addresses"},{"name":"banIP","params":[{"name":"address","type":"String","desc":"the IP address to ban"}],"desc":"Bans the specified address from the server.","ret":""},{"name":"unbanIP","params":[{"name":"address","type":"String","desc":"the IP address to unban"}],"desc":"Unbans the specified address from the server.","ret":""},{"name":"banIP","params":[{"name":"address","type":"InetAddress","desc":"the IP address to ban"}],"desc":"Bans the specified address from the server.","ret":""},{"name":"unbanIP","params":[{"name":"address","type":"InetAddress","desc":"the IP address to unban"}],"desc":"Unbans the specified address from the server.","ret":""},{"name":"getBannedPlayers","params":[],"desc":"Gets a set containing all banned players.","ret":"a set containing banned players"},{"name":"getBanList","params":[{"name":"type","type":"BanList.Type","desc":"the type of list to fetch, cannot be null"}],"desc":"Gets a ban list for the supplied type.","ret":"a ban list of the specified type"},{"name":"getBanList","params":[{"name":"type","type":"io.papermc.paper.ban.BanListType<B>","desc":"the type of list to fetch, cannot be null"}],"desc":"Gets a ban list for the supplied type.","ret":"a ban list of the specified type"},{"name":"getOperators","params":[],"desc":"Gets a set containing all player operators.","ret":"a set containing player operators"},{"name":"getDefaultGameMode","params":[],"desc":"Gets the default {@link GameMode} for new players.","ret":"the default game mode"},{"name":"setDefaultGameMode","params":[{"name":"mode","type":"GameMode","desc":"the new game mode"}],"desc":"Sets the default {@link GameMode} for new players.","ret":""},{"name":"getConsoleSender","params":[],"desc":"Gets a {@link ConsoleCommandSender} that may be used as an input source\nfor this server.","ret":"a console command sender"},{"name":"createCommandSender","params":[{"name":"feedback","type":"java.util.function.Consumer<? super net.kyori.adventure.text.Component>","desc":"feedback listener"}],"desc":"Creates a special {@link CommandSender} which redirects command feedback (in the form of chat messages) to the\nspecified listener. The returned sender will have the same effective permissions as {@link #getConsoleSender()}.","ret":"a command sender"},{"name":"getWorldContainer","params":[],"desc":"Gets the folder that contains all of the various {@link World}s.","ret":"folder that contains all worlds"},{"name":"getOfflinePlayers","params":[],"desc":"Gets every player that has ever played on this server.\n<p>\n<b>This method can be expensive as it loads all the player data files from the disk.</b>","ret":"an array containing all previous players"},{"name":"getMessenger","params":[],"desc":"Gets the {@link Messenger} responsible for this server.","ret":"messenger responsible for this server"},{"name":"getHelpMap","params":[],"desc":"Gets the {@link HelpMap} providing help topics for this server.","ret":"a help map for this server"},{"name":"createInventory","params":[{"name":"owner","type":"InventoryHolder","desc":"the holder of the inventory, or null to indicate no holder"},{"name":"type","type":"InventoryType","desc":"the type of inventory to create"}],"desc":"Creates an empty inventory with the specified type. If the type\nis {@link InventoryType#CHEST}, the new inventory has a size of 27;\notherwise the new inventory has the normal size for its type.\n<br>\n{@link InventoryType#WORKBENCH} will not process crafting recipes if\ncreated with this method. Use\n{@link Player#openWorkbench(Location, boolean)} instead.\n<br>\n{@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\nfor possible enchanting results. Use\n{@link Player#openEnchanting(Location, boolean)} instead.","ret":"a new inventory"},{"name":"createInventory","params":[{"name":"owner","type":"InventoryHolder","desc":"The holder of the inventory; can be null if there's no holder."},{"name":"type","type":"InventoryType","desc":"The type of inventory to create."},{"name":"title","type":"net.kyori.adventure.text.Component","desc":"The title of the inventory, to be displayed when it is viewed."}],"desc":"Creates an empty inventory with the specified type and title. If the type\nis {@link InventoryType#CHEST}, the new inventory has a size of 27;\notherwise the new inventory has the normal size for its type.<br>\nIt should be noted that some inventory types do not support titles and\nmay not render with said titles on the Minecraft client.\n<br>\n{@link InventoryType#WORKBENCH} will not process crafting recipes if\ncreated with this method. Use\n{@link Player#openWorkbench(Location, boolean)} instead.\n<br>\n{@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\nfor possible enchanting results. Use\n{@link Player#openEnchanting(Location, boolean)} instead.","ret":"The new inventory."},{"name":"createInventory","params":[{"name":"owner","type":"InventoryHolder","desc":"The holder of the inventory; can be null if there's no holder."},{"name":"type","type":"InventoryType","desc":"The type of inventory to create."},{"name":"title","type":"String","desc":"The title of the inventory, to be displayed when it is viewed."}],"desc":"Creates an empty inventory with the specified type and title. If the type\nis {@link InventoryType#CHEST}, the new inventory has a size of 27;\notherwise the new inventory has the normal size for its type.<br>\nIt should be noted that some inventory types do not support titles and\nmay not render with said titles on the Minecraft client.\n<br>\n{@link InventoryType#WORKBENCH} will not process crafting recipes if\ncreated with this method. Use\n{@link Player#openWorkbench(Location, boolean)} instead.\n<br>\n{@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\nfor possible enchanting results. Use\n{@link Player#openEnchanting(Location, boolean)} instead.","ret":"The new inventory."},{"name":"createInventory","params":[{"name":"owner","type":"InventoryHolder","desc":"the holder of the inventory, or null to indicate no holder"},{"name":"size","type":"int","desc":"a multiple of 9 as the size of inventory to create"}],"desc":"Creates an empty inventory of type {@link InventoryType#CHEST} with the\nspecified size.","ret":"a new inventory"},{"name":"createInventory","params":[{"name":"owner","type":"InventoryHolder","desc":"the holder of the inventory, or null to indicate no holder"},{"name":"size","type":"int","desc":"a multiple of 9 as the size of inventory to create"},{"name":"title","type":"net.kyori.adventure.text.Component","desc":"the title of the inventory, displayed when inventory is\n    viewed"}],"desc":"Creates an empty inventory of type {@link InventoryType#CHEST} with the\nspecified size and title.","ret":"a new inventory"},{"name":"createInventory","params":[{"name":"owner","type":"InventoryHolder","desc":"the holder of the inventory, or null to indicate no holder"},{"name":"size","type":"int","desc":"a multiple of 9 as the size of inventory to create"},{"name":"title","type":"String","desc":"the title of the inventory, displayed when inventory is\n    viewed"}],"desc":"Creates an empty inventory of type {@link InventoryType#CHEST} with the\nspecified size and title.","ret":"a new inventory"},{"name":"createMerchant","params":[{"name":"title","type":"net.kyori.adventure.text.Component","desc":"the title of the corresponding merchant inventory, displayed\nwhen the merchant inventory is viewed"}],"desc":"Creates an empty merchant.","ret":"a new merchant"},{"name":"createMerchant","params":[{"name":"title","type":"String","desc":"the title of the corresponding merchant inventory, displayed\nwhen the merchant inventory is viewed"}],"desc":"Creates an empty merchant.","ret":"a new merchant"},{"name":"getMaxChainedNeighborUpdates","params":[],"desc":"Gets the amount of consecutive neighbor updates before skipping\nadditional ones.","ret":"the amount of consecutive neighbor updates, if the value is\nnegative then the limit it's not used"},{"name":"getMonsterSpawnLimit","params":[],"desc":"Gets user-specified limit for number of monsters that can spawn in a\nchunk.","ret":"the monster spawn limit"},{"name":"getAnimalSpawnLimit","params":[],"desc":"Gets user-specified limit for number of animals that can spawn in a\nchunk.","ret":"the animal spawn limit"},{"name":"getWaterAnimalSpawnLimit","params":[],"desc":"Gets user-specified limit for number of water animals that can spawn in\na chunk.","ret":"the water animal spawn limit"},{"name":"getWaterAmbientSpawnLimit","params":[],"desc":"Gets user-specified limit for number of water ambient mobs that can spawn\nin a chunk.","ret":"the water ambient spawn limit"},{"name":"getWaterUndergroundCreatureSpawnLimit","params":[],"desc":"Get user-specified limit for number of water creature underground that can spawn\nin a chunk.","ret":"the water underground creature limit"},{"name":"getAmbientSpawnLimit","params":[],"desc":"Gets user-specified limit for number of ambient mobs that can spawn in\na chunk.","ret":"the ambient spawn limit"},{"name":"getSpawnLimit","params":[{"name":"spawnCategory","type":"SpawnCategory","desc":"the category spawn"}],"desc":"Gets user-specified limit for number of {@link SpawnCategory} mobs that can spawn in\na chunk.\n\n<b>Note: the {@link SpawnCategory#MISC} are not consider.</b>","ret":"the {@link SpawnCategory} spawn limit"},{"name":"isPrimaryThread","params":[],"desc":"Checks the current thread against the expected primary thread for the\nserver.\n<p>\n<b>Note:</b> this method should not be used to indicate the current\nsynchronized state of the runtime. A current thread matching the main\nthread indicates that it is synchronized, but a mismatch <b>does not\npreclude</b> the same assumption.","ret":"true if the current thread matches the expected primary thread,\n    false otherwise"},{"name":"motd","params":[],"desc":"Gets the message that is displayed on the server list.","ret":"the server's MOTD"},{"name":"motd","params":[{"name":"motd","type":"net.kyori.adventure.text.Component","desc":"The message to be displayed"}],"desc":"Set the message that is displayed on the server list.","ret":""},{"name":"shutdownMessage","params":[],"desc":"Gets the default message that is displayed when the server is stopped.","ret":"the shutdown message"},{"name":"getMotd","params":[],"desc":"Gets the message that is displayed on the server list.","ret":"the servers MOTD"},{"name":"setMotd","params":[{"name":"motd","type":"String","desc":"The message to be displayed"}],"desc":"Set the message that is displayed on the server list.","ret":""},{"name":"getShutdownMessage","params":[],"desc":"Gets the default message that is displayed when the server is stopped.","ret":"the shutdown message"},{"name":"getWarningState","params":[],"desc":"Gets the current warning state for the server.","ret":"the configured warning state"},{"name":"getItemFactory","params":[],"desc":"Gets the instance of the item factory (for {@link ItemMeta}).","ret":"the item factory"},{"name":"getScoreboardManager","params":[],"desc":"Gets the instance of the scoreboard manager.\n<p>\nThis will only exist after the first world has loaded.","ret":"the scoreboard manager or null if no worlds are loaded."},{"name":"getScoreboardCriteria","params":[{"name":"name","type":"String","desc":"the criteria name"}],"desc":"Get (or create) a new {@link Criteria} by its name.","ret":"the criteria"},{"name":"getServerIcon","params":[],"desc":"Gets an instance of the server's default server-icon.","ret":"the default server-icon; null values may be used by the\n    implementation to indicate no defined icon, but this behavior is\n    not guaranteed"},{"name":"loadServerIcon","params":[{"name":"file","type":"File","desc":"the file to load the from"}],"desc":"Loads an image from a file, and returns a cached image for the specific\nserver-icon.\n<p>\nSize and type are implementation defined. An incompatible file is\nguaranteed to throw an implementation-defined {@link Exception}.","ret":"a cached server-icon that can be used for a {@link\n    ServerListPingEvent#setServerIcon(CachedServerIcon)}"},{"name":"loadServerIcon","params":[{"name":"image","type":"BufferedImage","desc":"the image to use"}],"desc":"Creates a cached server-icon for the specific image.\n<p>\nSize and type are implementation defined. An incompatible file is\nguaranteed to throw an implementation-defined {@link Exception}.","ret":"a cached server-icon that can be used for a {@link\n    ServerListPingEvent#setServerIcon(CachedServerIcon)}"},{"name":"setIdleTimeout","params":[{"name":"threshold","type":"int","desc":"the idle timeout in minutes"}],"desc":"Set the idle kick timeout. Any players idle for the specified amount of\ntime will be automatically kicked.\n<p>\nA value of 0 will disable the idle kick timeout.","ret":""},{"name":"getIdleTimeout","params":[],"desc":"Gets the idle kick timeout.","ret":"the idle timeout in minutes"},{"name":"createChunkData","params":[{"name":"world","type":"World","desc":"the world to create the ChunkData for"}],"desc":"Create a ChunkData for use in a generator.\n\nSee {@link ChunkGenerator#generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)}","ret":"a new ChunkData for the world"},{"name":"createVanillaChunkData","params":[{"name":"world","type":"World","desc":"the world to create the ChunkData for"},{"name":"x","type":"int","desc":"the x coordinate of the chunk"},{"name":"z","type":"int","desc":"the z coordinate of the chunk"}],"desc":"Create a ChunkData for use in a generator, that is populated by the vanilla generator for that world.","ret":"a new ChunkData for the world"},{"name":"createBossBar","params":[{"name":"title","type":"String","desc":"the title of the boss bar"},{"name":"color","type":"BarColor","desc":"the color of the boss bar"},{"name":"style","type":"BarStyle","desc":"the style of the boss bar"},{"name":"flags","type":"BarFlag","desc":"an optional list of flags to set on the boss bar"}],"desc":"Creates a boss bar instance to display to players. The progress\ndefaults to 1.0","ret":"the created boss bar"},{"name":"createBossBar","params":[{"name":"key","type":"NamespacedKey","desc":"the key of the boss bar that is used to access the boss bar"},{"name":"title","type":"String","desc":"the title of the boss bar"},{"name":"color","type":"BarColor","desc":"the color of the boss bar"},{"name":"style","type":"BarStyle","desc":"the style of the boss bar"},{"name":"flags","type":"BarFlag","desc":"an optional list of flags to set on the boss bar"}],"desc":"Creates a boss bar instance to display to players. The progress defaults\nto 1.0.\n<br>\nThis instance is added to the persistent storage of the server and will\nbe editable by commands and restored after restart.","ret":"the created boss bar"},{"name":"getBossBars","params":[],"desc":"Gets an unmodifiable iterator through all persistent bossbars.\n<ul>\n  <li><b>not</b> bound to a {@link org.bukkit.entity.Boss}</li>\n  <li>\n    <b>not</b> created using\n    {@link #createBossBar(String, BarColor, BarStyle, BarFlag...)}\n  </li>\n</ul>\n\ne.g. bossbars created using the bossbar command","ret":"a bossbar iterator"},{"name":"getBossBar","params":[{"name":"key","type":"NamespacedKey","desc":"unique bossbar key"}],"desc":"Gets the {@link KeyedBossBar} specified by this key.\n<ul>\n  <li><b>not</b> bound to a {@link org.bukkit.entity.Boss}</li>\n  <li>\n    <b>not</b> created using\n    {@link #createBossBar(String, BarColor, BarStyle, BarFlag...)}\n  </li>\n</ul>\n\ne.g. bossbars created using the bossbar command","ret":"bossbar or null if not exists"},{"name":"removeBossBar","params":[{"name":"key","type":"NamespacedKey","desc":"unique bossbar key"}],"desc":"Removes a {@link KeyedBossBar} specified by this key.\n<ul>\n  <li><b>not</b> bound to a {@link org.bukkit.entity.Boss}</li>\n  <li>\n    <b>not</b> created using\n    {@link #createBossBar(String, BarColor, BarStyle, BarFlag...)}\n  </li>\n</ul>\n\ne.g. bossbars created using the bossbar command","ret":"true if removal succeeded or false"},{"name":"getEntity","params":[{"name":"uuid","type":"UUID","desc":"the UUID of the entity"}],"desc":"Gets an entity on the server by its UUID","ret":"the entity with the given UUID, or null if it isn't found"},{"name":"getTPS","params":[],"desc":"Gets the current server TPS","ret":"current server TPS (1m, 5m, 15m in Paper-Server)"},{"name":"getTickTimes","params":[],"desc":"Get a sample of the servers last tick times (in nanos)","ret":"A sample of the servers last tick times (in nanos)"},{"name":"getAverageTickTime","params":[],"desc":"Get the average tick time (in millis)","ret":"Average tick time (in millis)"},{"name":"getCommandMap","params":[],"desc":"Gets the active {@link org.bukkit.command.CommandMap}","ret":"the active command map"},{"name":"getAdvancement","params":[{"name":"key","type":"NamespacedKey","desc":"unique advancement key"}],"desc":"Get the advancement specified by this key.","ret":"advancement or null if not exists"},{"name":"advancementIterator","params":[],"desc":"Get an iterator through all advancements. Advancements cannot be removed\nfrom this iterator,","ret":"an advancement iterator"},{"name":"createBlockData","params":[{"name":"material","type":"Material","desc":"the material"}],"desc":"Creates a new {@link BlockData} instance for the specified Material, with\nall properties initialized to unspecified defaults.","ret":"new data instance"},{"name":"createBlockData","params":[{"name":"material","type":"Material","desc":"the material"},{"name":"consumer","type":"Consumer<? super BlockData>","desc":"consumer to run on new instance before returning"}],"desc":"Creates a new {@link BlockData} instance for the specified Material, with\nall properties initialized to unspecified defaults.","ret":"new data instance"},{"name":"createBlockData","params":[{"name":"data","type":"String","desc":"data string"}],"desc":"Creates a new {@link BlockData} instance with material and properties\nparsed from provided data.","ret":"new data instance"},{"name":"createBlockData","params":[{"name":"material","type":"Material","desc":"the material"},{"name":"data","type":"String","desc":"data string"}],"desc":"Creates a new {@link BlockData} instance for the specified Material, with\nall properties initialized to unspecified defaults, except for those\nprovided in data.\n<br>\nIf <code>material</code> is specified, then the data string must not also\ncontain the material.","ret":"new data instance"},{"name":"getTag","params":[{"name":"registry","type":"String","desc":"the tag registry to look at"},{"name":"tag","type":"NamespacedKey","desc":"the name of the tag"},{"name":"clazz","type":"Class<T>","desc":"the class of the tag entries"}],"desc":"Gets a tag which has already been defined within the server. Plugins are\nsuggested to use the concrete tags in {@link Tag} rather than this method\nwhich makes no guarantees about which tags are available, and may also be\nless performant due to lack of caching.\n<br>\nTags will be searched for in an implementation specific manner, but a\npath consisting of namespace/tags/registry/key is expected.\n<br>\nServer implementations are allowed to handle only the registries\nindicated in {@link Tag}.","ret":"the tag or null"},{"name":"getTags","params":[{"name":"registry","type":"String","desc":"the tag registry to look at"},{"name":"clazz","type":"Class<T>","desc":"the class of the tag entries"}],"desc":"Gets a all tags which have been defined within the server.\n<br>\nServer implementations are allowed to handle only the registries\nindicated in {@link Tag}.\n<br>\nNo guarantees are made about the mutability of the returned iterator.","ret":"all defined tags"},{"name":"getLootTable","params":[{"name":"key","type":"NamespacedKey","desc":"the name of the LootTable"}],"desc":"Gets the specified {@link LootTable}.","ret":"the LootTable, or null if no LootTable is found with that name"},{"name":"selectEntities","params":[{"name":"sender","type":"CommandSender","desc":"the sender to execute as, must be provided"},{"name":"selector","type":"String","desc":"the selection string"}],"desc":"Selects entities using the given Vanilla selector.\n<br>\nNo guarantees are made about the selector format, other than they match\nthe Vanilla format for the active Minecraft version.\n<br>\nUsually a selector will start with '@', unless selecting a Player in\nwhich case it may simply be the Player's name or UUID.\n<br>\nNote that in Vanilla, elevated permissions are usually required to use\n'@' selectors, but this method should not check such permissions from the\nsender.","ret":"a list of the selected entities. The list will not be null, but\nno further guarantees are made."},{"name":"getStructureManager","params":[],"desc":"Gets the structure manager for loading and saving structures.","ret":"the structure manager"},{"name":"getRegistry","params":[{"name":"tClass","type":"Class<T>","desc":"of the registry to get"}],"desc":"Returns the registry for the given class.\n<br>\nIf no registry is present for the given class null will be returned.\n<br>\nDepending on the implementation not every registry present in\n{@link Registry} will be returned by this method.","ret":"the corresponding registry or null if not present"},{"name":"getUnsafe","params":[],"desc":"","ret":"the unsafe values instance"},{"name":"suggestPlayerNamesWhenNullTabCompletions","params":[],"desc":"Checks if player names should be suggested when a command returns {@code null} as\ntheir tab completion result.","ret":"true if player names should be suggested"},{"name":"getPermissionMessage","params":[],"desc":"Gets the default no permission message used on the server","ret":"the default message"},{"name":"permissionMessage","params":[],"desc":"Gets the default no permission message used on the server","ret":"the default message"},{"name":"createProfile","params":[{"name":"uuid","type":"UUID","desc":"UUID to create profile for"}],"desc":"Creates a PlayerProfile for the specified uuid, with name as null.\n\nIf a player with the passed uuid exists on the server at the time of creation, the returned player profile will\nbe populated with the properties of said player (including their uuid and name).","ret":"A PlayerProfile object"},{"name":"createProfile","params":[{"name":"name","type":"String","desc":"Name to create profile for"}],"desc":"Creates a PlayerProfile for the specified name, with UUID as null.\n\nIf a player with the passed name exists on the server at the time of creation, the returned player profile will\nbe populated with the properties of said player (including their uuid and name).\n<p>\nE.g. if the player 'jeb_' is currently playing on the server, calling {@code createProfile(\"JEB_\")} will\nyield a profile with the name 'jeb_', their uuid and their textures.\nTo bypass this pre-population on a case-insensitive name match, see {@link #createProfileExact(UUID, String)}.\n<p>","ret":"A PlayerProfile object"},{"name":"createProfile","params":[{"name":"uuid","type":"UUID","desc":"UUID to create profile for"},{"name":"name","type":"String","desc":"Name to create profile for"}],"desc":"Creates a PlayerProfile for the specified name/uuid\n\nBoth UUID and Name can not be null at same time. One must be supplied.\nIf a player with the passed uuid or name exists on the server at the time of creation, the returned player\nprofile will be populated with the properties of said player (including their uuid and name).\n<p>\nE.g. if the player 'jeb_' is currently playing on the server, calling {@code createProfile(null, \"JEB_\")} will\nyield a profile with the name 'jeb_', their uuid and their textures.\nTo bypass this pre-population on an case-insensitive name match, see {@link #createProfileExact(UUID, String)}.\n<p>\n\nThe name comparison will compare the {@link String#toLowerCase()} version of both the passed name parameter and\na players name to honour the case-insensitive nature of a mojang profile lookup.","ret":"A PlayerProfile object"},{"name":"createProfileExact","params":[{"name":"uuid","type":"UUID","desc":"UUID to create profile for"},{"name":"name","type":"String","desc":"Name to create profile for"}],"desc":"Creates an exact PlayerProfile for the specified name/uuid\n\nBoth UUID and Name can not be null at same time. One must be supplied.\nIf a player with the passed uuid or name exists on the server at the time of creation, the returned player\nprofile will be populated with the properties of said player.\n<p>\nCompared to {@link #createProfile(UUID, String)}, this method will never mutate the passed uuid or name.\nIf a player with either the same uuid or a matching name (case-insensitive) is found on the server, their\nproperties, such as textures, will be pre-populated in the profile, however the passed uuid and name stay intact.","ret":"A PlayerProfile object"},{"name":"getCurrentTick","params":[],"desc":"Get the current internal server tick","ret":"Current tick"},{"name":"isStopping","params":[],"desc":"Checks if the server is in the process of being shutdown.","ret":"true if server is in the process of being shutdown"},{"name":"getMobGoals","params":[],"desc":"Returns the {@link com.destroystokyo.paper.entity.ai.MobGoals} manager","ret":"the mob goals manager"},{"name":"getDatapackManager","params":[],"desc":"","ret":"the datapack manager"},{"name":"getPotionBrewer","params":[],"desc":"Gets the potion brewer.","ret":"the potion brewer"},{"name":"getRegionScheduler","params":[],"desc":"Returns the Folia region task scheduler. The region task scheduler can be used to schedule\ntasks by location to be executed on the region which owns the location.\n<p>\n<b>Note</b>: It is entirely inappropriate to use the region scheduler to schedule tasks for entities.\nIf you wish to schedule tasks to perform actions on entities, you should be using {@link Entity#getScheduler()}\nas the entity scheduler will \"follow\" an entity if it is teleported, whereas the region task scheduler\nwill not.\n</p>\n<p><b>If you do not need/want to make your plugin run on Folia, use {@link #getScheduler()} instead.</b></p>","ret":"the region task scheduler"},{"name":"getAsyncScheduler","params":[],"desc":"Returns the Folia async task scheduler. The async task scheduler can be used to schedule tasks\nthat execute asynchronously from the server tick process.","ret":"the async task scheduler"},{"name":"getGlobalRegionScheduler","params":[],"desc":"Returns the Folia global region task scheduler. The global task scheduler can be used to schedule\ntasks to execute on the global region.\n<p>\nThe global region is responsible for maintaining world day time, world game time, weather cycle,\nsleep night skipping, executing commands for console, and other misc. tasks that do not belong to any specific region.\n</p>\n<p><b>If you do not need/want to make your plugin run on Folia, use {@link #getScheduler()} instead.</b></p>","ret":"the global region scheduler"},{"name":"isOwnedByCurrentRegion","params":[{"name":"world","type":"World","desc":"Specified world."},{"name":"position","type":"io.papermc.paper.math.Position","desc":"Specified block position."}],"desc":"Returns whether the current thread is ticking a region and that the region being ticked\nowns the chunk at the specified world and block position.","ret":""},{"name":"isOwnedByCurrentRegion","params":[{"name":"world","type":"World","desc":"Specified world."},{"name":"position","type":"io.papermc.paper.math.Position","desc":"Specified block position."},{"name":"squareRadiusChunks","type":"int","desc":"Specified square radius. Must be >= 0. Note that this parameter is <i>not</i> a <i>squared</i>\n                          radius, but rather a <i>Chebyshev Distance</i>."}],"desc":"Returns whether the current thread is ticking a region and that the region being ticked\nowns the chunks centered at the specified block position within the specified square radius.\nSpecifically, this function checks that every chunk with position x in [centerX - radius, centerX + radius] and\nposition z in [centerZ - radius, centerZ + radius] is owned by the current ticking region.","ret":""},{"name":"isOwnedByCurrentRegion","params":[{"name":"location","type":"Location","desc":"Specified location, must have a non-null world."}],"desc":"Returns whether the current thread is ticking a region and that the region being ticked\nowns the chunk at the specified world and block position as included in the specified location.","ret":""},{"name":"isOwnedByCurrentRegion","params":[{"name":"location","type":"Location","desc":"Specified location, must have a non-null world."},{"name":"squareRadiusChunks","type":"int","desc":"Specified square radius. Must be >= 0. Note that this parameter is <i>not</i> a <i>squared</i>\n                          radius, but rather a <i>Chebyshev Distance</i>."}],"desc":"Returns whether the current thread is ticking a region and that the region being ticked\nowns the chunks centered at the specified world and block position as included in the specified location\nwithin the specified square radius.\nSpecifically, this function checks that every chunk with position x in [centerX - radius, centerX + radius] and\nposition z in [centerZ - radius, centerZ + radius] is owned by the current ticking region.","ret":""},{"name":"isOwnedByCurrentRegion","params":[{"name":"block","type":"org.bukkit.block.Block","desc":"Specified block position."}],"desc":"Returns whether the current thread is ticking a region and that the region being ticked\nowns the chunk at the specified block position.","ret":""},{"name":"isOwnedByCurrentRegion","params":[{"name":"world","type":"World","desc":"Specified world."},{"name":"chunkX","type":"int","desc":"Specified x-coordinate of the chunk position."},{"name":"chunkZ","type":"int","desc":"Specified z-coordinate of the chunk position."}],"desc":"Returns whether the current thread is ticking a region and that the region being ticked\nowns the chunk at the specified world and chunk position.","ret":""},{"name":"isOwnedByCurrentRegion","params":[{"name":"world","type":"World","desc":"Specified world."},{"name":"chunkX","type":"int","desc":"Specified x-coordinate of the chunk position."},{"name":"chunkZ","type":"int","desc":"Specified z-coordinate of the chunk position."},{"name":"squareRadiusChunks","type":"int","desc":"Specified square radius. Must be >= 0. Note that this parameter is <i>not</i> a <i>squared</i>\n                          radius, but rather a <i>Chebyshev Distance</i>."}],"desc":"Returns whether the current thread is ticking a region and that the region being ticked\nowns the chunks centered at the specified world and chunk position within the specified\nsquare radius.\nSpecifically, this function checks that every chunk with position x in [centerX - radius, centerX + radius] and\nposition z in [centerZ - radius, centerZ + radius] is owned by the current ticking region.","ret":""},{"name":"isOwnedByCurrentRegion","params":[{"name":"entity","type":"Entity","desc":"Specified entity."}],"desc":"Returns whether the current thread is ticking a region and that the region being ticked\nowns the specified entity. Note that this function is the only appropriate method of checking\nfor ownership of an entity, as retrieving the entity's location is undefined unless the entity is owned\nby the current region.","ret":""}],"desc":"Represents a server implementation."},{"FQCN":"org.bukkit.projectiles.BlockProjectileSource","methods":[{"name":"getBlock","params":[],"desc":"Gets the block this projectile source belongs to.","ret":"Block for the projectile source"}],"desc":""},{"FQCN":"org.bukkit.projectiles.ProjectileSource","methods":[{"name":"launchProjectile","params":[{"name":"projectile","type":"Class<? extends T>","desc":"class of the projectile to launch"}],"desc":"Launches a {@link Projectile} from the ProjectileSource.","ret":"the launched projectile"},{"name":"launchProjectile","params":[{"name":"projectile","type":"Class<? extends T>","desc":"class of the projectile to launch"},{"name":"velocity","type":"Vector","desc":"the velocity with which to launch"}],"desc":"Launches a {@link Projectile} from the ProjectileSource with an\ninitial velocity.","ret":"the launched projectile"},{"name":"launchProjectile","params":[{"name":"projectile","type":"Class<? extends T>","desc":"class of the projectile to launch"},{"name":"velocity","type":"Vector","desc":"the velocity with which to launch"},{"name":"function","type":"java.util.function.Consumer<? super T>","desc":"the function to be run before the entity is spawned"}],"desc":"Launches a {@link Projectile} from the ProjectileSource with an\ninitial velocity, with the supplied function run before the\nentity is added to the world.\n<br>\nNote that when the function is run, the entity will not be actually in\nthe world. Any operation involving such as teleporting the entity is undefined\nuntil after this function returns.","ret":"the launched projectile"}],"desc":"Represents a valid source of a projectile."},{"FQCN":"org.bukkit.PortalType","methods":[],"desc":"Represents various types of portals that can be made in a world."},{"FQCN":"org.bukkit.GameMode","methods":[{"name":"getValue","params":[],"desc":"Gets the mode value associated with this GameMode","ret":"An integer value of this gamemode"},{"name":"getByValue","params":[{"name":"value","type":"int","desc":"Value to check"}],"desc":"Gets the GameMode represented by the specified value","ret":"Associative {@link GameMode} with the given value, or null if\n    it doesn't exist"}],"desc":"Represents the various type of game modes that {@link HumanEntity}s may\nhave"},{"FQCN":"org.bukkit.advancement.AdvancementDisplay","methods":[{"name":"getTitle","params":[],"desc":"Gets the title of the advancement.","ret":"The advancement title without colour codes."},{"name":"getDescription","params":[],"desc":"Gets the visible description of the advancement.","ret":"The advancement description without colour codes."},{"name":"getIcon","params":[],"desc":"The icon that is used for this advancement.","ret":"an ItemStack that represents the advancement."},{"name":"shouldShowToast","params":[],"desc":"Whether to show a toast to the player when this advancement has been\ncompleted.","ret":"true if a toast is shown."},{"name":"shouldAnnounceChat","params":[],"desc":"Whether to announce in the chat when this advancement has been completed.","ret":"true if announced in chat."},{"name":"isHidden","params":[],"desc":"Whether to hide this advancement and all its children from the\nadvancement screen until this advancement have been completed.\n\nHas no effect on root advancements themselves, but still affects all\ntheir children.","ret":"true if hidden."},{"name":"getX","params":[],"desc":"The X position of the advancement in the advancement screen.","ret":"the X coordinate as float"},{"name":"getY","params":[],"desc":"The Y position of the advancement in the advancement screen.","ret":"the Y coordinate as float"},{"name":"getType","params":[],"desc":"The display type of this advancement.","ret":"an enum representing the type."}],"desc":"Holds information about how the advancement is displayed by the game."},{"FQCN":"org.bukkit.advancement.Advancement","methods":[{"name":"getCriteria","params":[],"desc":"Get all the criteria present in this advancement.","ret":"a unmodifiable copy of all criteria"},{"name":"getDisplay","params":[],"desc":"Get the display info of this advancement.\n<p>\nWill be {@code null} when totally hidden, for example with crafting\nrecipes.","ret":"the display info"},{"name":"displayName","params":[],"desc":"Gets the formatted display name for this display. This\nis part of the component that would be shown in chat when a player\ncompletes the advancement. Will return the same as\n{@link io.papermc.paper.advancement.AdvancementDisplay#displayName()} when an\n{@link io.papermc.paper.advancement.AdvancementDisplay} is present.","ret":"the display name"},{"name":"getParent","params":[],"desc":"Gets the parent advancement, if any.","ret":"the parent advancement"},{"name":"getChildren","params":[],"desc":"Gets all the direct children advancements.","ret":"the children advancements"},{"name":"getRoot","params":[],"desc":"Gets the root advancement of the tree this is located in.","ret":"the root advancement"}],"desc":"Represents an advancement that may be awarded to a player. This class is not\nreference safe as the underlying advancement may be reloaded."},{"FQCN":"org.bukkit.advancement.AdvancementDisplayType","methods":[{"name":"getColor","params":[],"desc":"The chat color used by Minecraft for this advancement.","ret":"The chat color used by this advancement type."}],"desc":"Advancements are displayed in different ways depending on their display type.\n\nThis enum contains information about these types and how they are\nrepresented."},{"FQCN":"org.bukkit.advancement.AdvancementProgress","methods":[{"name":"getAdvancement","params":[],"desc":"The advancement this progress is concerning.","ret":"the relevant advancement"},{"name":"isDone","params":[],"desc":"Check if all criteria for this advancement have been met.","ret":"true if this advancement is done"},{"name":"awardCriteria","params":[{"name":"criteria","type":"String","desc":"the criteria to mark"}],"desc":"Mark the specified criteria as awarded at the current time.","ret":"true if awarded, false if criteria does not exist or already\nawarded."},{"name":"revokeCriteria","params":[{"name":"criteria","type":"String","desc":"the criteria to mark"}],"desc":"Mark the specified criteria as uncompleted.","ret":"true if removed, false if criteria does not exist or not awarded"},{"name":"getDateAwarded","params":[{"name":"criteria","type":"String","desc":"the criteria to check"}],"desc":"Get the date the specified criteria was awarded.","ret":"date awarded or null if unawarded or criteria does not exist"},{"name":"getRemainingCriteria","params":[],"desc":"Get the criteria which have not been awarded.","ret":"unmodifiable copy of criteria remaining"},{"name":"getAwardedCriteria","params":[],"desc":"Gets the criteria which have been awarded.","ret":"unmodifiable copy of criteria awarded"}],"desc":"The individual status of an advancement for a player. This class is not\nreference safe as the underlying advancement may be reloaded."},{"FQCN":"org.bukkit.ban.IpBanList","methods":[],"desc":"A {@link BanList} targeting IP bans."},{"FQCN":"org.bukkit.ban.ProfileBanList","methods":[{"name":"addBan","params":[{"name":"target","type":"PlayerProfile","desc":"the target of the ban"},{"name":"reason","type":"String","desc":"reason for the ban, null indicates implementation default"},{"name":"expires","type":"Date","desc":"date for the ban's expiration (unban), or null to imply\n    forever"},{"name":"source","type":"String","desc":"source of the ban, null indicates implementation default"}],"desc":"{@inheritDoc}","ret":"the entry for the newly created ban, or the entry for the\n    (updated) previous ban"},{"name":"addBan","params":[{"name":"target","type":"com.destroystokyo.paper.profile.PlayerProfile","desc":""},{"name":"reason","type":"String","desc":""},{"name":"expires","type":"Date","desc":""},{"name":"source","type":"String","desc":""}],"desc":"","ret":""},{"name":"getBanEntry","params":[{"name":"target","type":"PlayerProfile","desc":""}],"desc":"","ret":""},{"name":"isBanned","params":[{"name":"target","type":"PlayerProfile","desc":""}],"desc":"","ret":""},{"name":"pardon","params":[{"name":"target","type":"PlayerProfile","desc":""}],"desc":"","ret":""},{"name":"addBan","params":[{"name":"target","type":"PlayerProfile","desc":""},{"name":"reason","type":"String","desc":""},{"name":"expires","type":"java.time.Instant","desc":""},{"name":"source","type":"String","desc":""}],"desc":"","ret":""},{"name":"addBan","params":[{"name":"target","type":"PlayerProfile","desc":""},{"name":"reason","type":"String","desc":""},{"name":"duration","type":"java.time.Duration","desc":""},{"name":"source","type":"String","desc":""}],"desc":"","ret":""}],"desc":"A {@link BanList} targeting player profile bans."},{"FQCN":"org.bukkit.structure.StructureManager","methods":[{"name":"getStructures","params":[],"desc":"Gets the currently registered structures.\n<p>\nThese are the currently loaded structures that the StructureManager is\naware of. When a structure block refers to a structure, these structures\nare checked first. If the specified structure is not found among the\ncurrently registered structures, the StructureManager may dynamically\nread the structure from the primary world folder, DataPacks, or the\nserver's own resources. Structures can be registered via {@link\n#registerStructure(NamespacedKey, Structure)}","ret":"an unmodifiable shallow copy of the currently registered\nstructures"},{"name":"getStructure","params":[{"name":"structureKey","type":"NamespacedKey","desc":"The key for which to get the structure"}],"desc":"Gets a registered Structure.","ret":"The structure that belongs to the structureKey or\n<code>null</code> if there is none registered for that key."},{"name":"registerStructure","params":[{"name":"structureKey","type":"NamespacedKey","desc":"The key for which to register the structure"},{"name":"structure","type":"Structure","desc":"The structure to register"}],"desc":"Registers the given structure. See {@link #getStructures()}.","ret":"The structure for the specified key, or <code>null</code> if the\nstructure could not be found."},{"name":"unregisterStructure","params":[{"name":"structureKey","type":"NamespacedKey","desc":"The key for which to save the structure for"}],"desc":"Unregisters a structure. Unregisters the specified structure. If the\nstructure still exists in the primary world folder, a DataPack, or is\npart of the server's own resources, it may be loaded and registered again\nwhen it is requested by a plugin or the server itself.","ret":"The structure that was registered for that key or\n<code>null</code> if there was none"},{"name":"loadStructure","params":[{"name":"structureKey","type":"NamespacedKey","desc":"The key for which to load the structure"},{"name":"register","type":"boolean","desc":"<code>true</code> to register the loaded structure."}],"desc":"Loads a structure for the specified key and optionally {@link\n#registerStructure(NamespacedKey, Structure) registers} it.\n<p>\nThis will first check the already loaded {@link #getStructures()\nregistered structures}, and otherwise load the structure from the primary\nworld folder, DataPacks, and the server's own resources (in this order).\n<p>\nWhen loading the structure from the primary world folder, the given key\nis translated to a file as specified by\n{@link #getStructureFile(NamespacedKey)}.","ret":"The structure, or <code>null</code> if no structure was found for\nthe specified key"},{"name":"loadStructure","params":[{"name":"structureKey","type":"NamespacedKey","desc":"The key for which to load the structure"}],"desc":"Loads the structure for the specified key and automatically registers it.\nSee {@link #loadStructure(NamespacedKey, boolean)}.","ret":"The structure for the specified key, or <code>null</code> if the\nstructure could not be found."},{"name":"saveStructure","params":[{"name":"structureKey","type":"NamespacedKey","desc":"The key for which to save the structure for"}],"desc":"Saves the currently {@link #getStructures() registered structure} for the\nspecified {@link NamespacedKey key} to the primary world folder as\nspecified by {#getStructureFile(NamespacedKey}.","ret":""},{"name":"saveStructure","params":[{"name":"structureKey","type":"NamespacedKey","desc":"The key for which to save the structure for"},{"name":"structure","type":"Structure","desc":"The structure to save for this structureKey"}],"desc":"Saves a structure with a given key to the primary world folder.","ret":""},{"name":"deleteStructure","params":[{"name":"structureKey","type":"NamespacedKey","desc":"The key of the structure to remove"}],"desc":"Unregisters the specified structure and deletes its {@link\n#getStructureFile(NamespacedKey) structure file} from the primary world\nfolder. Note that this method cannot be used to delete vanilla Minecraft\nstructures, or structures from DataPacks. Unregistering these structures\nwill however work fine.","ret":""},{"name":"deleteStructure","params":[{"name":"structureKey","type":"NamespacedKey","desc":"The key of the structure to remove"},{"name":"unregister","type":"boolean","desc":"Whether to also unregister the specified structure if\nit is currently loaded."}],"desc":"Deletes the {@link #getStructureFile(NamespacedKey) structure file} for\nthe specified structure from the primary world folder. Note that this\nmethod cannot be used to delete vanilla Minecraft structures, or\nstructures from DataPacks. Unregistering these structures will however\nwork fine.","ret":""},{"name":"getStructureFile","params":[{"name":"structureKey","type":"NamespacedKey","desc":"The key to build the filepath from."}],"desc":"Gets the location where a structure file would exist in the primary world\ndirectory based on the NamespacedKey using the format\nworld/generated/{NAMESPACE}/structures/{KEY}.nbt. This method will always\nreturn a file, even if none exists at the moment.","ret":"The location where a file with this key would be."},{"name":"loadStructure","params":[{"name":"file","type":"File","desc":"The file of the structure"}],"desc":"Reads a Structure from disk.","ret":"The read structure"},{"name":"loadStructure","params":[{"name":"inputStream","type":"InputStream","desc":"The file of the structure"}],"desc":"Reads a Structure from a stream.","ret":"The read Structure"},{"name":"saveStructure","params":[{"name":"file","type":"File","desc":"the target to save to."},{"name":"structure","type":"Structure","desc":"the Structure to save."}],"desc":"Save a structure to a file. This will overwrite a file if it already\nexists.","ret":""},{"name":"saveStructure","params":[{"name":"outputStream","type":"OutputStream","desc":"the stream to write to."},{"name":"structure","type":"Structure","desc":"the Structure to save."}],"desc":"Save a structure to a stream.","ret":""},{"name":"createStructure","params":[],"desc":"Creates a new empty structure.","ret":"an empty structure."},{"name":"copy","params":[{"name":"structure","type":"Structure","desc":"The structure to copy"}],"desc":"Creates a copy of this structure.","ret":"a copy of the structure"}],"desc":""},{"FQCN":"org.bukkit.structure.Palette","methods":[{"name":"getBlocks","params":[],"desc":"Gets a copy of the blocks this Palette is made of.\n\nThe {@link BlockState#getLocation() positions} of the returned block\nstates are offsets relative to the structure's position that is provided\nonce the structure is placed into the world.","ret":"The blocks in this palette"},{"name":"getBlockCount","params":[],"desc":"Gets the number of blocks stored in this palette.","ret":"The number of blocks in this palette"}],"desc":"Represent a variation of a structure.\n\nMost structures, like the ones generated with structure blocks, only have a\nsingle variant."},{"FQCN":"org.bukkit.structure.Structure","methods":[{"name":"getSize","params":[],"desc":"Gets the current size of the structure.\n<p>\nThe size of the structure may not be fixed.","ret":"A new vector that represents the size of the structure along each\naxis."},{"name":"getPalettes","params":[],"desc":"Gets a list of available block palettes.","ret":"a list of available variants of this structure."},{"name":"getPaletteCount","params":[],"desc":"Gets the number of palettes in this structure.","ret":"The number of palettes in this structure"},{"name":"getEntities","params":[],"desc":"Gets a list of entities that have been included in the Structure.\n\nThe entity positions are offsets relative to the structure's position\nthat is provided once the structure is placed into the world.","ret":"a list of Entities included in the Structure."},{"name":"getEntityCount","params":[],"desc":"Gets the number of entities in this structure.","ret":"The number of entities in this structure"},{"name":"place","params":[{"name":"location","type":"Location","desc":"The location to place the structure at."},{"name":"includeEntities","type":"boolean","desc":"If the entities present in the structure should be\nspawned."},{"name":"structureRotation","type":"StructureRotation","desc":"The rotation of the structure."},{"name":"mirror","type":"Mirror","desc":"The mirror settings of the structure."},{"name":"palette","type":"int","desc":"The palette index of the structure to use, starting at\n{@code 0}, or {@code -1} to pick a random palette."},{"name":"integrity","type":"float","desc":"Determines how damaged the building should look by\nrandomly skipping blocks to place. This value can range from 0 to 1. With\n0 removing all blocks and 1 spawning the structure in pristine condition."},{"name":"random","type":"Random","desc":"The randomizer used for setting the structure's\n{@link org.bukkit.loot.LootTable}s and integrity."}],"desc":"Place a structure in the world.","ret":""},{"name":"place","params":[{"name":"location","type":"Location","desc":"The location to place the structure at."},{"name":"includeEntities","type":"boolean","desc":"If the entities present in the structure should be\nspawned."},{"name":"structureRotation","type":"StructureRotation","desc":"The rotation of the structure."},{"name":"mirror","type":"Mirror","desc":"The mirror settings of the structure."},{"name":"palette","type":"int","desc":"The palette index of the structure to use, starting at\n{@code 0}, or {@code -1} to pick a random palette."},{"name":"integrity","type":"float","desc":"Determines how damaged the building should look by\nrandomly skipping blocks to place. This value can range from 0 to 1. With\n0 removing all blocks and 1 spawning the structure in pristine condition."},{"name":"random","type":"Random","desc":"The randomizer used for setting the structure's\n{@link org.bukkit.loot.LootTable}s and integrity."},{"name":"blockTransformers","type":"Collection<BlockTransformer>","desc":"A collection of {@link BlockTransformer}s to apply to the structure."},{"name":"entityTransformers","type":"Collection<EntityTransformer>","desc":"A collection of {@link EntityTransformer}s to apply to the structure."}],"desc":"Place a structure in the world.","ret":""},{"name":"place","params":[{"name":"regionAccessor","type":"RegionAccessor","desc":"The world to place the structure in."},{"name":"location","type":"BlockVector","desc":"The location to place the structure at."},{"name":"includeEntities","type":"boolean","desc":"If the entities present in the structure should be\nspawned."},{"name":"structureRotation","type":"StructureRotation","desc":"The rotation of the structure."},{"name":"mirror","type":"Mirror","desc":"The mirror settings of the structure."},{"name":"palette","type":"int","desc":"The palette index of the structure to use, starting at\n{@code 0}, or {@code -1} to pick a random palette."},{"name":"integrity","type":"float","desc":"Determines how damaged the building should look by\nrandomly skipping blocks to place. This value can range from 0 to 1. With\n0 removing all blocks and 1 spawning the structure in pristine condition."},{"name":"random","type":"Random","desc":"The randomizer used for setting the structure's\n{@link org.bukkit.loot.LootTable}s and integrity."}],"desc":"Place a structure in the world.","ret":""},{"name":"place","params":[{"name":"regionAccessor","type":"RegionAccessor","desc":"The world to place the structure in."},{"name":"location","type":"BlockVector","desc":"The location to place the structure at."},{"name":"includeEntities","type":"boolean","desc":"If the entities present in the structure should be\nspawned."},{"name":"structureRotation","type":"StructureRotation","desc":"The rotation of the structure."},{"name":"mirror","type":"Mirror","desc":"The mirror settings of the structure."},{"name":"palette","type":"int","desc":"The palette index of the structure to use, starting at\n{@code 0}, or {@code -1} to pick a random palette."},{"name":"integrity","type":"float","desc":"Determines how damaged the building should look by\nrandomly skipping blocks to place. This value can range from 0 to 1. With\n0 removing all blocks and 1 spawning the structure in pristine condition."},{"name":"random","type":"Random","desc":"The randomizer used for setting the structure's\n{@link org.bukkit.loot.LootTable}s and integrity."},{"name":"blockTransformers","type":"Collection<BlockTransformer>","desc":"A collection of {@link BlockTransformer}s to apply to the structure."},{"name":"entityTransformers","type":"Collection<EntityTransformer>","desc":"A collection of {@link EntityTransformer}s to apply to the structure."}],"desc":"Place a structure in the world.","ret":""},{"name":"fill","params":[{"name":"corner1","type":"Location","desc":"A corner of the structure."},{"name":"corner2","type":"Location","desc":"The corner opposite from corner1."},{"name":"includeEntities","type":"boolean","desc":"true if entities should be included in the saved\nstructure."}],"desc":"Fills the structure from an area in a world. The origin and size will be\ncalculated automatically from the two corners provided.\n<p>\nBe careful as this will override the current data of the structure.\n<p>\nBe aware that this method allows for creating structures larger than the\n48x48x48 size that Minecraft's Structure blocks support. Any structures\nsaved this way can not be loaded by using a structure block. Using the\nAPI however will still work.","ret":""},{"name":"fill","params":[{"name":"origin","type":"Location","desc":"The origin of the structure."},{"name":"size","type":"BlockVector","desc":"The size of the structure, must be at least 1x1x1."},{"name":"includeEntities","type":"boolean","desc":"true if entities should be included in the saved\nstructure."}],"desc":"Fills the Structure from an area in a world, starting at the specified\norigin and extending in each axis according to the specified size vector.\n<p>\nBe careful as this will override the current data of the structure.\n<p>\nBe aware that this method allows for saving structures larger than the\n48x48x48 size that Minecraft's Structure blocks support. Any structures\nsaved this way can not be loaded by using a structure block. Using the\nAPI however will still work.","ret":""}],"desc":"Represents a structure.\n<p>\nA structure is a mutable template of captured blocks and entities that can be\ncopied back into the world. The {@link StructureManager}, retrieved via\n{@link org.bukkit.Server#getStructureManager()}, allows you to create new\nstructures, load existing structures, and save structures.\n<p>\nIn order for a structure to be usable by structure blocks, it needs to be\nnull {@link StructureManager#registerStructure(org.bukkit.NamespacedKey, Structure)\nregistered} with the {@link StructureManager}, or located in the primary\nworld folder, a DataPack, or the server's own default resources, so that the\nStructureManager can find it."},{"FQCN":"org.bukkit.Registry","methods":[{"name":"get","params":[{"name":"key","type":"NamespacedKey","desc":"non-null key"}],"desc":"Get the object by its key.","ret":"item or null if does not exist"},{"name":"getKeyOrThrow","params":[{"name":"value","type":"T","desc":"the value to get the key of in this registry"}],"desc":"Gets the key for this object or throws if it doesn't exist.\n<p>\nSome types can exist without being in a registry\nand such will have no key associated with them. This\nmethod throw an exception if it isn't in this registry.","ret":"the key for the value"},{"name":"getKey","params":[{"name":"value","type":"T","desc":"the value to get the key of in this registry"}],"desc":"Get the key for this object.\n<p>\nSome types can exist without being in a registry\nand such will have no key associated with them. This\nmethod will return null.","ret":"the key for the value or null if not in the registry"},{"name":"stream","params":[],"desc":"Returns a new stream, which contains all registry items, which are registered to the registry.","ret":"a stream of all registry items"},{"name":"match","params":[{"name":"input","type":"String","desc":"non-null input"}],"desc":"Attempts to match the registered object with the given key.\n<p>\nThis will attempt to find a reasonable match based on the provided input\nand may do so through unspecified means.","ret":"registered object or null if does not exist"}],"desc":"Represents a registry of Bukkit objects that may be retrieved by\n{@link NamespacedKey}."},{"FQCN":"org.bukkit.event.EventException","methods":[{"name":"getCause","params":[],"desc":"If applicable, returns the Exception that triggered this Exception","ret":"Inner exception, or null if one does not exist"}],"desc":""},{"FQCN":"org.bukkit.event.enchantment.EnchantItemEvent","methods":[{"name":"getEnchanter","params":[],"desc":"Gets the player enchanting the item","ret":"enchanting player"},{"name":"getEnchantBlock","params":[],"desc":"Gets the block being used to enchant the item","ret":"the block used for enchanting"},{"name":"getItem","params":[],"desc":"Gets the item to be enchanted (can be modified)","ret":"ItemStack of item"},{"name":"getExpLevelCost","params":[],"desc":"Gets the cost (minimum level) which is displayed as a number on the right\nhand side of the enchantment offer.","ret":"experience level cost"},{"name":"setExpLevelCost","params":[{"name":"level","type":"int","desc":"- cost in levels"}],"desc":"Sets the cost (minimum level) which is displayed as a number on the right\nhand side of the enchantment offer.","ret":""},{"name":"getEnchantsToAdd","params":[],"desc":"Get map of enchantment (levels, keyed by type) to be added to item\n(modify map returned to change values). Note: Any enchantments not\nallowed for the item will be ignored","ret":"map of enchantment levels, keyed by enchantment"},{"name":"getEnchantmentHint","params":[],"desc":"Get the {@link Enchantment} that was displayed as a hint to the player\non the selected enchantment offer.","ret":"the hinted enchantment"},{"name":"getLevelHint","params":[],"desc":"Get the level of the enchantment that was displayed as a hint to the\nplayer on the selected enchantment offer.","ret":"the level of the hinted enchantment"},{"name":"whichButton","params":[],"desc":"Which button was pressed to initiate the enchanting.","ret":"The button index (0, 1, or 2)."}],"desc":"Called when an ItemStack is successfully enchanted (currently at\nenchantment table)"},{"FQCN":"org.bukkit.event.enchantment.PrepareItemEnchantEvent","methods":[{"name":"getEnchanter","params":[],"desc":"Gets the player enchanting the item","ret":"enchanting player"},{"name":"getEnchantBlock","params":[],"desc":"Gets the block being used to enchant the item","ret":"the block used for enchanting"},{"name":"getItem","params":[],"desc":"Gets the item to be enchanted.","ret":"ItemStack of item"},{"name":"getExpLevelCostsOffered","params":[],"desc":"Get a list of offered experience level costs of the enchantment.","ret":"experience level costs offered"},{"name":"getOffers","params":[],"desc":"Get a list of available {@link EnchantmentOffer} for the player. You can\nmodify the values to change the available offers for the player. An offer\nmay be null, if there isn't an enchantment offer at a specific slot. There\nare 3 slots in the enchantment table available to modify.","ret":"list of available enchantment offers"},{"name":"getEnchantmentBonus","params":[],"desc":"Get enchantment bonus in effect - corresponds to number of bookshelves","ret":"enchantment bonus"}],"desc":"Called when an ItemStack is inserted in an enchantment table - can be\ncalled multiple times"},{"FQCN":"org.bukkit.event.vehicle.VehicleDestroyEvent","methods":[{"name":"getAttacker","params":[],"desc":"Gets the Entity that has destroyed the vehicle, potentially null","ret":"the Entity that has destroyed the vehicle, potentially null"}],"desc":"Raised when a vehicle is destroyed, which could be caused by either a\nplayer or the environment. This is not raised if the boat is simply\n'removed' due to other means."},{"FQCN":"org.bukkit.event.vehicle.VehicleEntityCollisionEvent","methods":[],"desc":"Raised when a vehicle collides with an entity."},{"FQCN":"org.bukkit.event.vehicle.VehicleBlockCollisionEvent","methods":[{"name":"getVelocity","params":[],"desc":"Gets velocity at which the vehicle collided with the block","ret":"pre-collision moving velocity"},{"name":"getBlock","params":[],"desc":"Gets the block the vehicle collided with","ret":"the block the vehicle collided with"}],"desc":"Raised when a vehicle collides with a block."},{"FQCN":"org.bukkit.event.vehicle.VehicleDamageEvent","methods":[{"name":"getAttacker","params":[],"desc":"Gets the Entity that is attacking the vehicle","ret":"the Entity that is attacking the vehicle"},{"name":"getDamage","params":[],"desc":"Gets the damage done to the vehicle","ret":"the damage done to the vehicle"},{"name":"setDamage","params":[{"name":"damage","type":"double","desc":"The damage"}],"desc":"Sets the damage done to the vehicle","ret":""}],"desc":"Raised when a vehicle receives damage."},{"FQCN":"org.bukkit.event.vehicle.VehicleEvent","methods":[{"name":"getVehicle","params":[],"desc":"Get the vehicle.","ret":"the vehicle"}],"desc":"Represents a vehicle-related event."},{"FQCN":"org.bukkit.event.vehicle.VehicleEnterEvent","methods":[{"name":"getEntered","params":[],"desc":"Gets the Entity that entered the vehicle.","ret":"the Entity that entered the vehicle"}],"desc":"Raised when an entity enters a vehicle."},{"FQCN":"org.bukkit.event.vehicle.VehicleUpdateEvent","methods":[],"desc":"Called when a vehicle updates"},{"FQCN":"org.bukkit.event.vehicle.VehicleCreateEvent","methods":[],"desc":"Raised when a vehicle is created."},{"FQCN":"org.bukkit.event.vehicle.VehicleExitEvent","methods":[{"name":"getExited","params":[],"desc":"Get the living entity that exited the vehicle.","ret":"The entity."}],"desc":"Raised when a living entity exits a vehicle."},{"FQCN":"org.bukkit.event.vehicle.VehicleMoveEvent","methods":[{"name":"getFrom","params":[],"desc":"Get the previous position.","ret":"Old position."},{"name":"getTo","params":[],"desc":"Get the next position.","ret":"New position."}],"desc":"Raised when a vehicle moves."},{"FQCN":"org.bukkit.event.vehicle.VehicleCollisionEvent","methods":[],"desc":"Raised when a vehicle collides."},{"FQCN":"org.bukkit.event.entity.ProjectileHitEvent","methods":[{"name":"getHitBlock","params":[],"desc":"Gets the block that was hit, if it was a block that was hit.","ret":"hit block or else null"},{"name":"getHitBlockFace","params":[],"desc":"Gets the block face that was hit, if it was a block that was hit and the\nface was provided in the vent.","ret":"hit face or else null"},{"name":"getHitEntity","params":[],"desc":"Gets the entity that was hit, if it was an entity that was hit.","ret":"hit entity or else null"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":"true if you wish to cancel this event"}],"desc":"Whether to cancel the action that occurs when the projectile hits.\n\nIn the case of an entity, it will not collide (unless it's a firework,\nthen use {@link FireworkExplodeEvent}).\n<br>\nIn the case of a block, some blocks (eg target block, bell) will not\nperform the action associated.\n<br>\nThis does NOT prevent block collisions, and explosions will still occur\nunless their respective events are cancelled.","ret":""}],"desc":"Called when a projectile hits an object"},{"FQCN":"org.bukkit.event.entity.EntityDeathEvent","methods":[{"name":"getDroppedExp","params":[],"desc":"Gets how much EXP should be dropped from this death.\n<p>\nThis does not indicate how much EXP should be taken from the entity in\nquestion, merely how much should be created after its death.","ret":"Amount of EXP to drop."},{"name":"setDroppedExp","params":[{"name":"exp","type":"int","desc":"Amount of EXP to drop."}],"desc":"Sets how much EXP should be dropped from this death.\n<p>\nThis does not indicate how much EXP should be taken from the entity in\nquestion, merely how much should be created after its death.","ret":""},{"name":"getDrops","params":[],"desc":"Gets all the items which will drop when the entity dies","ret":"Items to drop when the entity dies"},{"name":"getReviveHealth","params":[],"desc":"Get the amount of health that the entity should revive with after cancelling the event.\nSet to the entity's max health by default.","ret":"The amount of health"},{"name":"setReviveHealth","params":[{"name":"reviveHealth","type":"double","desc":"The amount of health"}],"desc":"Set the amount of health that the entity should revive with after cancelling the event.\nRevive health value must be between 0 (exclusive) and the entity's max health (inclusive).","ret":""},{"name":"shouldPlayDeathSound","params":[],"desc":"Whether or not the death sound should play when the entity dies. If the event is cancelled it does not play!","ret":"Whether or not the death sound should play. Event is called with this set to false if the entity is silent."},{"name":"setShouldPlayDeathSound","params":[{"name":"playDeathSound","type":"boolean","desc":"Enable or disable the death sound"}],"desc":"Set whether or not the death sound should play when the entity dies. If the event is cancelled it does not play!","ret":""},{"name":"getDeathSound","params":[],"desc":"Get the sound that the entity makes when dying","ret":"The sound that the entity makes"},{"name":"setDeathSound","params":[{"name":"sound","type":"org.bukkit.Sound","desc":"The sound that the entity should make when dying"}],"desc":"Set the sound that the entity makes when dying","ret":""},{"name":"getDeathSoundCategory","params":[],"desc":"Get the sound category that the death sound should play in","ret":"The sound category"},{"name":"setDeathSoundCategory","params":[{"name":"soundCategory","type":"org.bukkit.SoundCategory","desc":"The sound category"}],"desc":"Set the sound category that the death sound should play in.","ret":""},{"name":"getDeathSoundVolume","params":[],"desc":"Get the volume that the death sound will play at.","ret":"The volume the death sound will play at"},{"name":"setDeathSoundVolume","params":[{"name":"volume","type":"float","desc":"The volume the death sound should play at"}],"desc":"Set the volume the death sound should play at. If the event is cancelled this will not play the sound!","ret":""},{"name":"getDeathSoundPitch","params":[],"desc":"Get the pitch that the death sound will play with.","ret":"The pitch the death sound will play with"},{"name":"setDeathSoundPitch","params":[{"name":"pitch","type":"float","desc":"The pitch the death sound should play with"}],"desc":"Set the pitch that the death sound should play with.","ret":""}],"desc":"Thrown whenever a LivingEntity dies"},{"FQCN":"org.bukkit.event.entity.EntityCombustEvent","methods":[{"name":"getDuration","params":[],"desc":"","ret":"the amount of time (in seconds) the combustee should be alight\n    for"},{"name":"setDuration","params":[{"name":"duration","type":"int","desc":"the time in seconds to be alight for."}],"desc":"The number of seconds the combustee should be alight for.\n<p>\nThis value will only ever increase the combustion time, not decrease\nexisting combustion times.","ret":""}],"desc":"Called when an entity combusts.\n<p>\nIf an Entity Combust event is cancelled, the entity will not combust."},{"FQCN":"org.bukkit.event.entity.EntitySpellCastEvent","methods":[{"name":"getSpell","params":[],"desc":"Get the spell to be cast in this event.\n\nThis is a convenience method equivalent to\n{@link Spellcaster#getSpell()}.","ret":"the spell to cast"}],"desc":"Called when a {@link Spellcaster} casts a spell."},{"FQCN":"org.bukkit.event.entity.SlimeSplitEvent","methods":[{"name":"getCount","params":[],"desc":"Gets the amount of smaller slimes to spawn","ret":"the amount of slimes to spawn"},{"name":"setCount","params":[{"name":"count","type":"int","desc":"the amount of slimes to spawn"}],"desc":"Sets how many smaller slimes will spawn on the split","ret":""}],"desc":"Called when a Slime splits into smaller Slimes upon death"},{"FQCN":"org.bukkit.event.entity.EntityRegainHealthEvent","methods":[{"name":"isFastRegen","params":[],"desc":"Is this event a result of the fast regeneration mechanic","ret":"Whether the event is the result of a fast regeneration mechanic"},{"name":"getAmount","params":[],"desc":"Gets the amount of regained health","ret":"The amount of health regained"},{"name":"setAmount","params":[{"name":"amount","type":"double","desc":"the amount of health the entity will regain"}],"desc":"Sets the amount of regained health","ret":""},{"name":"getRegainReason","params":[],"desc":"Gets the reason for why the entity is regaining health","ret":"A RegainReason detailing the reason for the entity regaining\n    health"}],"desc":"Stores data for health-regain events"},{"FQCN":"org.bukkit.event.entity.EntityDropItemEvent","methods":[{"name":"getItemDrop","params":[],"desc":"Gets the Item created by the entity","ret":"Item created by the entity"}],"desc":"Thrown when an entity creates an item drop."},{"FQCN":"org.bukkit.event.entity.EntityResurrectEvent","methods":[{"name":"getHand","params":[],"desc":"Get the hand in which the totem of undying was found, or null if the\nentity did not have a totem of undying.","ret":"the hand, or null"}],"desc":"Called when an entity dies and may have the opportunity to be resurrected.\nWill be called in a cancelled state if the entity does not have a totem\nequipped."},{"FQCN":"org.bukkit.event.entity.EntityUnleashEvent","methods":[{"name":"getReason","params":[],"desc":"Returns the reason for the unleashing.","ret":"The reason"},{"name":"isDropLeash","params":[],"desc":"Returns whether a leash item will be dropped.","ret":"Whether the leash item will be dropped"},{"name":"setDropLeash","params":[{"name":"dropLeash","type":"boolean","desc":"Whether the leash item should be dropped"}],"desc":"Sets whether a leash item should be dropped.","ret":""}],"desc":"Called immediately prior to an entity being unleashed.\n<p>\nCancelling this event when either:\n<ul>\n    <li>the leashed entity dies,</li>\n    <li>the entity changes dimension, or</li>\n    <li>the client has disconnected the leash</li>\n</ul>\nwill have no effect."},{"FQCN":"org.bukkit.event.entity.StriderTemperatureChangeEvent","methods":[{"name":"isShivering","params":[],"desc":"Get the Strider's new shivering state.","ret":"the new shivering state"}],"desc":"Called when a {@link Strider}'s temperature has changed as a result of\nentering or exiting blocks it considers warm."},{"FQCN":"org.bukkit.event.entity.SpawnerSpawnEvent","methods":[{"name":"getSpawner","params":[],"desc":"Gets the spawner tile state, or null\nwhen the entity is spawned from a minecart\nspawner.","ret":"the spawner tile state"}],"desc":"Called when an entity is spawned into a world by a spawner.\n<p>\nIf a Spawner Spawn event is cancelled, the entity will not spawn."},{"FQCN":"org.bukkit.event.entity.EntityInteractEvent","methods":[{"name":"getBlock","params":[],"desc":"Returns the involved block","ret":"the block clicked with this item."}],"desc":"Called when an entity interacts with an object"},{"FQCN":"org.bukkit.event.entity.EntityDismountEvent","methods":[{"name":"getDismounted","params":[],"desc":"Gets the entity which will no longer be ridden.","ret":"dismounted entity"}],"desc":"Called when an entity stops riding another entity."},{"FQCN":"org.bukkit.event.entity.EntityTameEvent","methods":[{"name":"getOwner","params":[],"desc":"Gets the owning AnimalTamer","ret":"the owning AnimalTamer"}],"desc":"Thrown when a LivingEntity is tamed"},{"FQCN":"org.bukkit.event.entity.EntityDamageByEntityEvent","methods":[{"name":"isCritical","params":[],"desc":"Shows this damage instance was critical.\nThe damage instance can be critical if the attacking player met the respective conditions.\nFurthermore, arrows may also cause a critical damage event if the arrow {@link org.bukkit.entity.AbstractArrow#isCritical()}.","ret":"if the hit was critical."},{"name":"getDamageSource","params":[],"desc":"{@inheritDoc}\n<p>\nThe {@link DamageSource#getDirectEntity()} may be different from the {@link #getDamager()}\nif the Minecraft damage source did not originally include an damager entity, but one was included\nfor this event {@link #getDamager()}.","ret":""},{"name":"getDamager","params":[],"desc":"Returns the entity that damaged the defender.","ret":"Entity that damaged the defender."}],"desc":"Called when an entity is damaged by an entity"},{"FQCN":"org.bukkit.event.entity.EntityPortalEvent","methods":[{"name":"getPortalType","params":[],"desc":"Get the portal type relating to this event.","ret":"the portal type"},{"name":"getTo","params":[],"desc":"For {@link org.bukkit.PortalType#NETHER}, this is initially just the starting point\nfor the search for a portal to teleport to. It will initially just be the {@link #getFrom()}\nscaled for dimension scaling and clamped to be inside the world border.\n<p>\nFor {@link org.bukkit.PortalType#ENDER}, this will initially be the exact destination\neither, the world spawn for <i>end->any world</i> or end spawn for <i>any world->end</i>.","ret":"starting point for search or exact destination"},{"name":"setTo","params":[{"name":"to","type":"Location","desc":"starting point for search or exact destination\n          or null to cancel"}],"desc":"See the description of {@link #getTo()}.","ret":""},{"name":"setSearchRadius","params":[{"name":"searchRadius","type":"int","desc":"the radius in which to search for a portal from the\nlocation"}],"desc":"Set the Block radius to search in for available portals.","ret":""},{"name":"getSearchRadius","params":[],"desc":"Gets the search radius value for finding an available portal.","ret":"the currently set search radius"}],"desc":"Called when a non-player entity is about to teleport because it is in\ncontact with a portal.\n<p>\nFor players see {@link org.bukkit.event.player.PlayerPortalEvent}"},{"FQCN":"org.bukkit.event.entity.EnderDragonChangePhaseEvent","methods":[{"name":"getCurrentPhase","params":[],"desc":"Gets the current phase that the dragon is in. This method will return null\nwhen a dragon is first spawned and hasn't yet been assigned a phase.","ret":"the current dragon phase"},{"name":"getNewPhase","params":[],"desc":"Gets the new phase that the dragon will switch to.","ret":"the new dragon phase"},{"name":"setNewPhase","params":[{"name":"newPhase","type":"EnderDragon.Phase","desc":"the new dragon phase"}],"desc":"Sets the new phase for the ender dragon.","ret":""}],"desc":"Called when an EnderDragon switches controller phase."},{"FQCN":"org.bukkit.event.entity.PigZombieAngerEvent","methods":[{"name":"getTarget","params":[],"desc":"Gets the entity (if any) which triggered this anger update.","ret":"triggering entity, or null"},{"name":"getNewAnger","params":[],"desc":"Gets the new anger resulting from this event.","ret":"new anger"},{"name":"setNewAnger","params":[{"name":"newAnger","type":"int","desc":"the new anger"}],"desc":"Sets the new anger resulting from this event.","ret":""}],"desc":"Called when a Pig Zombie is angered by another entity.\n<p>\nIf the event is cancelled, the pig zombie will not be angered."},{"FQCN":"org.bukkit.event.entity.EntityKnockbackEvent","methods":[{"name":"getCause","params":[],"desc":"Gets the cause of the knockback.","ret":"the cause of the knockback"},{"name":"getForce","params":[],"desc":"Gets the raw force of the knockback. <br>\nThis value is based on factors such as the {@link Enchantment#KNOCKBACK}\nlevel of an attacker and the\n{@link Attribute#GENERIC_KNOCKBACK_RESISTANCE} of the entity.","ret":"the knockback force"},{"name":"getKnockback","params":[],"desc":"Gets the raw knockback force that will be applied to the entity. <br>\nThis value is read-only, changes made to it <b>will not</b> have any\neffect on the final knockback received.","ret":"the raw knockback"},{"name":"getFinalKnockback","params":[],"desc":"Gets the force that will be applied to the entity. <br>\nIn contrast to {@link EntityKnockbackEvent#getKnockback()} this value is\naffected by the entities current velocity and whether they are touching\nthe ground.\n<p>\n<b>Note:</b> this method returns a copy, changes must be applied with\n{@link #setFinalKnockback(Vector)}.","ret":"the final knockback"},{"name":"setFinalKnockback","params":[{"name":"knockback","type":"Vector","desc":"the force to apply"}],"desc":"Sets the force that will be applied to the entity.","ret":""}],"desc":"Called when a living entity receives knockback."},{"FQCN":"org.bukkit.event.entity.EntityKnockbackByEntityEvent","methods":[{"name":"getSourceEntity","params":[],"desc":"Get the entity that has caused knockback to the defender.","ret":"entity that caused knockback"}],"desc":"Called when an entity receives knockback from another entity."},{"FQCN":"org.bukkit.event.entity.EntityCombustByEntityEvent","methods":[{"name":"getCombuster","params":[],"desc":"Get the entity that caused the combustion event.","ret":"the Entity that set the combustee alight."}],"desc":"Called when an entity causes another entity to combust."},{"FQCN":"org.bukkit.event.entity.EntityEnterLoveModeEvent","methods":[{"name":"getEntity","params":[],"desc":"Gets the animal that is entering love mode.","ret":"The animal that is entering love mode"},{"name":"getHumanEntity","params":[],"desc":"Gets the Human Entity that caused the animal to enter love mode.","ret":"The Human entity that caused the animal to enter love mode, or\nnull if there wasn't one."},{"name":"getTicksInLove","params":[],"desc":"Gets the amount of ticks that the animal will fall in love for.","ret":"The amount of ticks that the animal will fall in love for"},{"name":"setTicksInLove","params":[{"name":"ticksInLove","type":"int","desc":"The amount of ticks that the animal will fall in love\nfor"}],"desc":"Sets the amount of ticks that the animal will fall in love for.","ret":""}],"desc":"Called when an entity enters love mode.\n<br>\nThis can be cancelled but the item will still be consumed that was used to\nmake the entity enter into love mode."},{"FQCN":"org.bukkit.event.entity.EntityPotionEffectEvent","methods":[{"name":"getOldEffect","params":[],"desc":"Gets the old potion effect of the changed type, which will be removed.","ret":"The old potion effect or null if the entity did not have the\nchanged effect type."},{"name":"getNewEffect","params":[],"desc":"Gets new potion effect of the changed type to be applied.","ret":"The new potion effect or null if the effect of the changed type\nwill be removed."},{"name":"getCause","params":[],"desc":"Gets the cause why the effect has changed.","ret":"A Cause value why the effect has changed."},{"name":"getAction","params":[],"desc":"Gets the action which will be performed on the potion effect type.","ret":"An action to be performed on the potion effect type."},{"name":"getModifiedType","params":[],"desc":"Gets the modified potion effect type.","ret":"The effect type which will be modified on the entity."},{"name":"isOverride","params":[],"desc":"Returns if the new potion effect will override the old potion effect\n(Only applicable for the CHANGED Action).","ret":"If the new effect will override the old one."},{"name":"setOverride","params":[{"name":"override","type":"boolean","desc":"If the new effect will override the old one."}],"desc":"Sets if the new potion effect will override the old potion effect (Only\napplicable for the CHANGED action).","ret":""}],"desc":"Called when a potion effect is modified on an entity.\n<p>\nIf the event is cancelled, no change will be made on the entity."},{"FQCN":"org.bukkit.event.entity.EntityExhaustionEvent","methods":[{"name":"getExhaustionReason","params":[],"desc":"Gets the {@link ExhaustionReason} for this event","ret":"the exhaustion reason"},{"name":"getExhaustion","params":[],"desc":"Get the amount of exhaustion to add to the player's current exhaustion.","ret":"amount of exhaustion"},{"name":"setExhaustion","params":[{"name":"exhaustion","type":"float","desc":"new exhaustion to add"}],"desc":"Set the exhaustion to apply to the player.\n\nThe maximum exhaustion that a player can have is 40. No error will be\nthrown if this limit is hit. This value may be negative, but there is\nunknown behavior for when exhaustion is below 0.","ret":""}],"desc":"Called when a human entity experiences exhaustion.\n\nAn exhaustion level greater than 4.0 causes a decrease in saturation by 1."},{"FQCN":"org.bukkit.event.entity.PlayerLeashEntityEvent","methods":[{"name":"getLeashHolder","params":[],"desc":"Returns the entity that is holding the leash.","ret":"The leash holder"},{"name":"getEntity","params":[],"desc":"Returns the entity being leashed.","ret":"The entity"},{"name":"getPlayer","params":[],"desc":"Returns the player involved in this event","ret":"Player who is involved in this event"},{"name":"getHand","params":[],"desc":"Returns the hand used by the player to leash the entity.","ret":"the hand"}],"desc":"Called immediately prior to a creature being leashed by a player."},{"FQCN":"org.bukkit.event.entity.ProjectileLaunchEvent","methods":[],"desc":"Called when a projectile is launched."},{"FQCN":"org.bukkit.event.entity.EntityChangeBlockEvent","methods":[{"name":"getBlock","params":[],"desc":"Gets the block the entity is changing","ret":"the block that is changing"},{"name":"getTo","params":[],"desc":"Gets the Material that the block is changing into","ret":"the material that the block is changing into"},{"name":"getBlockData","params":[],"desc":"Gets the data for the block that would be changed into","ret":"the data for the block that would be changed into"}],"desc":"Called when any Entity changes a block and a more specific event is not available."},{"FQCN":"org.bukkit.event.entity.EntityPickupItemEvent","methods":[{"name":"getItem","params":[],"desc":"Gets the Item picked up by the entity.","ret":"Item"},{"name":"getRemaining","params":[],"desc":"Gets the amount remaining on the ground, if any","ret":"amount remaining on the ground"}],"desc":"Thrown when an entity picks an item up from the ground"},{"FQCN":"org.bukkit.event.entity.EntityDamageByBlockEvent","methods":[{"name":"getDamager","params":[],"desc":"Returns the block that damaged the player.","ret":"Block that damaged the player"},{"name":"getDamagerBlockState","params":[],"desc":"Get a capture of the block that directly caused\nthe damage, like a bed or respawn anchor. This\nblock state is not placed so {@link org.bukkit.block.BlockState#isPlaced}\nwill be false.\n<p>\nCan be null if the block wasn't changed before the event","ret":"the damager block state or null if not applicable"}],"desc":"Called when an entity is damaged by a block\n<p>\nFor explosions, the Block returned by {@link #getDamager()} has\nalready been cleared. See {@link #getDamagerBlockState()} for a snapshot\nof the block if it has already been changed."},{"FQCN":"org.bukkit.event.entity.EntitySpawnEvent","methods":[{"name":"getLocation","params":[],"desc":"Gets the location at which the entity is spawning.","ret":"The location at which the entity is spawning"}],"desc":"Called when an entity is spawned into a world.\n<p>\nIf an Entity Spawn event is cancelled, the entity will not spawn."},{"FQCN":"org.bukkit.event.entity.CreeperPowerEvent","methods":[{"name":"getLightning","params":[],"desc":"Gets the lightning bolt which is striking the Creeper.","ret":"The Entity for the lightning bolt which is striking the Creeper"},{"name":"getCause","params":[],"desc":"Gets the cause of the creeper being (un)powered.","ret":"A PowerCause value detailing the cause of change in power."}],"desc":"Called when a Creeper is struck by lightning.\n<p>\nIf a Creeper Power event is cancelled, the Creeper will not be powered."},{"FQCN":"org.bukkit.event.entity.HorseJumpEvent","methods":[{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":""}],"desc":"","ret":""},{"name":"getPower","params":[],"desc":"Gets the power of the jump.\n<p>\nPower is a value that defines how much of the horse's jump strength\nshould be used for the jump. Power is effectively multiplied times\nthe horse's jump strength to determine how high the jump is; 0\nrepresents no jump strength while 1 represents full jump strength.\nSetting power to a value above 1 will use additional jump strength\nthat the horse does not usually have.\n<p>\nPower does not affect how high the horse is capable of jumping, only\nhow much of its jumping capability will be used in this jump. To set\nthe horse's overall jump strength, see {@link\nAbstractHorse#setJumpStrength(double)}.","ret":"jump strength"},{"name":"setPower","params":[{"name":"power","type":"float","desc":"power of the jump"}],"desc":"Sets the power of the jump.\n<p>\nJump power can be set to a value above 1.0 which will increase the\nstrength of this jump above the horse's actual jump strength.\n<p>\nSetting the jump power to 0 will result in the jump animation still\nplaying, but the horse not leaving the ground. Only canceling this\nevent will result in no jump animation at all.","ret":""}],"desc":"Called when a horse jumps."},{"FQCN":"org.bukkit.event.entity.ExpBottleEvent","methods":[{"name":"getShowEffect","params":[],"desc":"This method indicates if the particle effect should be shown.","ret":"true if the effect will be shown, false otherwise"},{"name":"setShowEffect","params":[{"name":"showEffect","type":"boolean","desc":"true indicates the effect will be shown, false\n    indicates no effect will be shown"}],"desc":"This method sets if the particle effect will be shown.\n<p>\nThis does not change the experience created.","ret":""},{"name":"getExperience","params":[],"desc":"This method retrieves the amount of experience to be created.\n<p>\nThe number indicates a total amount to be divided into orbs.","ret":"the total amount of experience to be created"},{"name":"setExperience","params":[{"name":"exp","type":"int","desc":"the total amount of experience to be created"}],"desc":"This method sets the amount of experience to be created.\n<p>\nThe number indicates a total amount to be divided into orbs.","ret":""}],"desc":"Called when a ThrownExpBottle hits and releases experience."},{"FQCN":"org.bukkit.event.entity.EntityEvent","methods":[{"name":"getEntity","params":[],"desc":"Returns the Entity involved in this event","ret":"Entity who is involved in this event"},{"name":"getEntityType","params":[],"desc":"Gets the EntityType of the Entity involved in this event.","ret":"EntityType of the Entity involved in this event"}],"desc":"Represents an Entity-related event"},{"FQCN":"org.bukkit.event.entity.AreaEffectCloudApplyEvent","methods":[{"name":"getAffectedEntities","params":[],"desc":"Retrieves a mutable list of the effected entities\n<p>\nIt is important to note that not every entity in this list\nis guaranteed to be effected.  The cloud may die during the\napplication of its effects due to the depletion of {@link AreaEffectCloud#getDurationOnUse()}\nor {@link AreaEffectCloud#getRadiusOnUse()}","ret":"the affected entity list"}],"desc":"Called when a lingering potion applies its effects. Happens\nonce every 5 ticks"},{"FQCN":"org.bukkit.event.entity.ItemSpawnEvent","methods":[],"desc":"Called when an item is spawned into a world"},{"FQCN":"org.bukkit.event.entity.CreatureSpawnEvent","methods":[{"name":"getSpawnReason","params":[],"desc":"Gets the reason for why the creature is being spawned.","ret":"A SpawnReason value detailing the reason for the creature being\n    spawned"}],"desc":"Called when a creature is spawned into a world.\n<p>\nIf a Creature Spawn event is cancelled, the creature will not spawn."},{"FQCN":"org.bukkit.event.entity.ItemMergeEvent","methods":[{"name":"getTarget","params":[],"desc":"Gets the Item entity the main Item is being merged into.","ret":"The Item being merged with"}],"desc":""},{"FQCN":"org.bukkit.event.entity.VillagerCareerChangeEvent","methods":[{"name":"getProfession","params":[],"desc":"Gets the future profession of the villager.","ret":"The profession the villager will change to"},{"name":"setProfession","params":[{"name":"profession","type":"Profession","desc":"new profession"}],"desc":"Sets the profession the villager will become from this event.","ret":""},{"name":"getReason","params":[],"desc":"Gets the reason for why the villager's career is changing.","ret":"Reason for villager's profession changing"}],"desc":""},{"FQCN":"org.bukkit.event.entity.BatToggleSleepEvent","methods":[{"name":"isAwake","params":[],"desc":"Get whether or not the bat is attempting to awaken.","ret":"true if trying to awaken, false otherwise"}],"desc":"Called when a bat attempts to sleep or wake up from its slumber.\n<p>\nIf a Bat Toggle Sleep event is cancelled, the Bat will not toggle its sleep\nstate."},{"FQCN":"org.bukkit.event.entity.EntityToggleSwimEvent","methods":[{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":""}],"desc":"","ret":""},{"name":"isSwimming","params":[],"desc":"Returns true if the entity is now swims or\nfalse if the entity stops swimming.","ret":"new swimming state"}],"desc":"Sent when an entity's swimming status is toggled."},{"FQCN":"org.bukkit.event.entity.PiglinBarterEvent","methods":[{"name":"getInput","params":[],"desc":"Gets the input of the barter.","ret":"The item that was used to barter with"},{"name":"getOutcome","params":[],"desc":"Returns a mutable list representing the outcome of the barter.","ret":"A mutable list of the item the player will receive"}],"desc":"Stores all data related to the bartering interaction with a piglin.\n\nCalled when a piglin completes a barter."},{"FQCN":"org.bukkit.event.entity.PigZapEvent","methods":[{"name":"getLightning","params":[],"desc":"Gets the bolt which is striking the pig.","ret":"lightning entity"},{"name":"getPigZombie","params":[],"desc":"Gets the zombie pig that will replace the pig, provided the event is\nnot cancelled first.","ret":"resulting entity"}],"desc":"Stores data for pigs being zapped"},{"FQCN":"org.bukkit.event.entity.EntityRemoveEvent","methods":[{"name":"getCause","params":[],"desc":"Gets the cause why the entity got removed.","ret":"the cause why the entity got removed"}],"desc":"Called when an {@link Entity} is removed.\n<p>\nThis event should only be used for monitoring. The result\nof modifying the entity during or after this event is unspecified.\nThis event is not called for a {@link org.bukkit.entity.Player}."},{"FQCN":"org.bukkit.event.entity.ExplosionPrimeEvent","methods":[{"name":"getRadius","params":[],"desc":"Gets the radius of the explosion","ret":"returns the radius of the explosion"},{"name":"setRadius","params":[{"name":"radius","type":"float","desc":"the radius of the explosion"}],"desc":"Sets the radius of the explosion","ret":""},{"name":"getFire","params":[],"desc":"Gets whether this explosion will create fire or not","ret":"true if this explosion will create fire"},{"name":"setFire","params":[{"name":"fire","type":"boolean","desc":"true if you want this explosion to create fire"}],"desc":"Sets whether this explosion will create fire or not","ret":""}],"desc":"Called when an entity has made a decision to explode."},{"FQCN":"org.bukkit.event.entity.SheepRegrowWoolEvent","methods":[],"desc":"Called when a sheep regrows its wool"},{"FQCN":"org.bukkit.event.entity.EntityPoseChangeEvent","methods":[{"name":"getPose","params":[],"desc":"Gets the entity's new pose.","ret":"the new pose"}],"desc":"Called when an entity changes its pose."},{"FQCN":"org.bukkit.event.entity.LingeringPotionSplashEvent","methods":[{"name":"getAreaEffectCloud","params":[],"desc":"Gets the AreaEffectCloud spawned","ret":"The spawned AreaEffectCloud"},{"name":"allowsEmptyCreation","params":[{"name":"allowEmptyAreaEffectCreation","type":"boolean","desc":"If an Empty AreaEffectCloud may be created"}],"desc":"Sets if an Empty AreaEffectCloud may be created","ret":""},{"name":"allowsEmptyCreation","params":[],"desc":"Gets if an empty AreaEffectCloud may be created","ret":"if an empty AreaEffectCloud may be created"}],"desc":"Called when a splash potion hits an area"},{"FQCN":"org.bukkit.event.entity.EntityTransformEvent","methods":[{"name":"getTransformedEntity","params":[],"desc":"Gets the entity that the original entity was transformed to.\n\nThis returns the first entity in the transformed entity list.","ret":"The transformed entity."},{"name":"getTransformedEntities","params":[],"desc":"Gets the entities that the original entity was transformed to.","ret":"The transformed entities."},{"name":"getTransformReason","params":[],"desc":"Gets the reason for the conversion that has occurred.","ret":"The reason for conversion that has occurred."}],"desc":"Called when an entity is about to be replaced by another entity."},{"FQCN":"org.bukkit.event.entity.EntityShootBowEvent","methods":[{"name":"getBow","params":[],"desc":"Gets the bow ItemStack used to fire the arrow.","ret":"the bow involved in this event"},{"name":"getConsumable","params":[],"desc":"Get the ItemStack to be consumed in this event (if any).\n\nFor instance, bows will consume an arrow ItemStack in a player's\ninventory.","ret":"the consumable item"},{"name":"getProjectile","params":[],"desc":"Gets the projectile which will be launched by this event","ret":"the launched projectile"},{"name":"setProjectile","params":[{"name":"projectile","type":"Entity","desc":"the new projectile"}],"desc":"Replaces the projectile which will be launched","ret":""},{"name":"getHand","params":[],"desc":"Get the hand from which the bow was shot.","ret":"the hand"},{"name":"getForce","params":[],"desc":"Gets the force the arrow was launched with","ret":"bow shooting force, up to 1.0"},{"name":"setConsumeItem","params":[{"name":"consumeItem","type":"boolean","desc":"whether or not to consume the item"}],"desc":"Set whether or not the consumable item should be consumed in this event.\n\nIf set to false, it is recommended that a call to\n{@link Player#updateInventory()} is made as the client may disagree with\nthe server's decision to not consume a consumable item.\n<p>\nThis value is ignored for entities where items are not required\n(skeletons, pillagers, etc.) or with crossbows (as no item is being\nconsumed).","ret":""},{"name":"shouldConsumeItem","params":[],"desc":"Get whether or not the consumable item should be consumed in this event.","ret":"true if consumed, false otherwise"}],"desc":"Called when a LivingEntity shoots a bow firing an arrow"},{"FQCN":"org.bukkit.event.entity.VillagerReplenishTradeEvent","methods":[{"name":"getRecipe","params":[],"desc":"Get the recipe to replenish.","ret":"the replenished recipe"},{"name":"setRecipe","params":[{"name":"recipe","type":"MerchantRecipe","desc":"the replenished recipe"}],"desc":"Set the recipe to replenish.","ret":""},{"name":"getBonus","params":[],"desc":"Get the bonus uses added.","ret":"the extra uses added"},{"name":"setBonus","params":[{"name":"bonus","type":"int","desc":"the extra uses added"}],"desc":"Set the bonus uses added.","ret":""}],"desc":"Called when a {@link Villager} is about to restock one of its trades.\n<p>\nIf this event passes, the villager will reset the\n{@link MerchantRecipe#getUses() uses} of the affected {@link #getRecipe()\nMerchantRecipe} to <code>0</code>."},{"FQCN":"org.bukkit.event.entity.ItemDespawnEvent","methods":[{"name":"getLocation","params":[],"desc":"Gets the location at which the item is despawning.","ret":"The location at which the item is despawning"}],"desc":"This event is called when a {@link org.bukkit.entity.Item} is removed from\nthe world because it has existed for 5 minutes.\n<p>\nCancelling the event results in the item being allowed to exist for 5 more\nminutes. This behavior is not guaranteed and may change in future versions."},{"FQCN":"org.bukkit.event.entity.PlayerDeathEvent","methods":[{"name":"getItemsToKeep","params":[],"desc":"A mutable collection to add items that the player should retain in their inventory on death (Similar to KeepInventory game rule)\n\nYou <b>MUST</b> remove the item from the .getDrops() collection too or it will duplicate!\n<pre>{@code\n   {@literal @EventHandler(ignoreCancelled = true)}\n    public void onPlayerDeath(PlayerDeathEvent event) {\n        for (Iterator<ItemStack> iterator = event.getDrops().iterator(); iterator.hasNext(); ) {\n            ItemStack drop = iterator.next();\n            List<String> lore = drop.getLore();\n            if (lore != null && !lore.isEmpty()) {\n                if (lore.get(0).contains(\"(SOULBOUND)\")) {\n                    iterator.remove();\n                    event.getItemsToKeep().add(drop);\n                }\n            }\n        }\n    }\n}</pre>\n\nAdding an item to this list that the player did not previously have will give them the item on death.\nAn example case could be a \"Note\" that \"You died at X/Y/Z coordinates\"","ret":"The list to hold items to keep"},{"name":"shouldDropExperience","params":[],"desc":"","ret":"should experience be dropped from this death"},{"name":"setShouldDropExperience","params":[{"name":"doExpDrop","type":"boolean","desc":"sets if experience should be dropped from this death"}],"desc":"","ret":""},{"name":"getPlayer","params":[],"desc":"Clarity method for getting the player. Not really needed except\nfor reasons of clarity.","ret":"Player who is involved in this event"},{"name":"deathMessage","params":[{"name":"deathMessage","type":"net.kyori.adventure.text.Component","desc":"Component message to appear to other players on the server."}],"desc":"Set the death message that will appear to everyone on the server.","ret":""},{"name":"deathMessage","params":[],"desc":"Get the death message that will appear to everyone on the server.","ret":"Component message to appear to other players on the server."},{"name":"setDeathMessage","params":[{"name":"deathMessage","type":"String","desc":"Message to appear to other players on the server."}],"desc":"Set the death message that will appear to everyone on the server.","ret":""},{"name":"getDeathMessage","params":[],"desc":"Get the death message that will appear to everyone on the server.","ret":"Message to appear to other players on the server."},{"name":"getNewExp","params":[],"desc":"Gets how much EXP the Player should have at respawn.\n<p>\nThis does not indicate how much EXP should be dropped, please see\n{@link #getDroppedExp()} for that.","ret":"New EXP of the respawned player"},{"name":"setNewExp","params":[{"name":"exp","type":"int","desc":"New EXP of the respawned player"}],"desc":"Sets how much EXP the Player should have at respawn.\n<p>\nThis does not indicate how much EXP should be dropped, please see\n{@link #setDroppedExp(int)} for that.","ret":""},{"name":"getNewLevel","params":[],"desc":"Gets the Level the Player should have at respawn.","ret":"New Level of the respawned player"},{"name":"setNewLevel","params":[{"name":"level","type":"int","desc":"New Level of the respawned player"}],"desc":"Sets the Level the Player should have at respawn.","ret":""},{"name":"getNewTotalExp","params":[],"desc":"Gets the Total EXP the Player should have at respawn.","ret":"New Total EXP of the respawned player"},{"name":"setNewTotalExp","params":[{"name":"totalExp","type":"int","desc":"New Total EXP of the respawned player"}],"desc":"Sets the Total EXP the Player should have at respawn.","ret":""},{"name":"getKeepLevel","params":[],"desc":"Gets if the Player should keep all EXP at respawn.\n<p>\nThis flag overrides other EXP settings","ret":"True if Player should keep all pre-death exp"},{"name":"setKeepLevel","params":[{"name":"keepLevel","type":"boolean","desc":"True to keep all current value levels"}],"desc":"Sets if the Player should keep all EXP at respawn.\n<p>\nThis overrides all other EXP settings\n<p>\n<b>This doesn't prevent the EXP from dropping.\n{@link #setDroppedExp(int)} should be used stop the\nEXP from dropping.</b>","ret":""},{"name":"setKeepInventory","params":[{"name":"keepInventory","type":"boolean","desc":"True to keep the inventory"}],"desc":"Sets if the Player keeps inventory on death.\n<p>\n<b>This doesn't prevent the items from dropping.\n{@code getDrops().clear()} should be used stop the\nitems from dropping.</b>","ret":""},{"name":"getKeepInventory","params":[],"desc":"Gets if the Player keeps inventory on death.","ret":"True if the player keeps inventory on death"}],"desc":"Thrown whenever a {@link Player} dies"},{"FQCN":"org.bukkit.event.entity.EntityDamageEvent","methods":[{"name":"getOriginalDamage","params":[{"name":"type","type":"DamageModifier","desc":"the modifier"}],"desc":"Gets the original damage for the specified modifier, as defined at this\nevent's construction.","ret":"the original damage"},{"name":"setDamage","params":[{"name":"type","type":"DamageModifier","desc":"the damage modifier"},{"name":"damage","type":"double","desc":"the scalar value of the damage's modifier"}],"desc":"Sets the damage for the specified modifier.","ret":""},{"name":"getDamage","params":[{"name":"type","type":"DamageModifier","desc":"the damage modifier"}],"desc":"Gets the damage change for some modifier","ret":"The raw amount of damage caused by the event"},{"name":"isApplicable","params":[{"name":"type","type":"DamageModifier","desc":"the modifier"}],"desc":"This checks to see if a particular modifier is valid for this event's\ncaller, such that, {@link #setDamage(DamageModifier, double)} will not\nthrow an {@link UnsupportedOperationException}.\n<p>\n{@link DamageModifier#BASE} is always applicable.","ret":"true if the modifier is supported by the caller, false otherwise"},{"name":"getDamage","params":[],"desc":"Gets the raw amount of damage caused by the event","ret":"The raw amount of damage caused by the event"},{"name":"getFinalDamage","params":[],"desc":"Gets the amount of damage caused by the event after all damage\nreduction is applied.","ret":"the amount of damage caused by the event"},{"name":"setDamage","params":[{"name":"damage","type":"double","desc":"The raw amount of damage caused by the event"}],"desc":"Sets the raw amount of damage caused by the event.\n<p>\nFor compatibility this also recalculates the modifiers and scales\nthem by the difference between the modifier for the previous damage\nvalue and the new one.","ret":""},{"name":"getCause","params":[],"desc":"Gets the cause of the damage.\n<p>\nWhile a DamageCause may indicate a specific Bukkit-assigned cause of damage,\n{@link #getDamageSource()} may expose additional types of damage such as custom\ndamage types provided by data packs, as well as any direct or indirect entities,\nlocations, or other contributing factors to the damage being inflicted. The\nalternative is generally preferred, but DamageCauses provided to this event\nshould largely encompass most common use cases for developers if a simple cause\nis required.","ret":"a DamageCause value detailing the cause of the damage."},{"name":"getDamageSource","params":[],"desc":"Get the source of damage.","ret":"a DamageSource detailing the source of the damage."}],"desc":"Stores data for damage events"},{"FQCN":"org.bukkit.event.entity.EntityPortalExitEvent","methods":[{"name":"getBefore","params":[],"desc":"Gets a copy of the velocity that the entity has before entering the\nportal.","ret":"velocity of entity before entering the portal"},{"name":"getAfter","params":[],"desc":"Gets a copy of the velocity that the entity will have after exiting the\nportal.","ret":"velocity of entity after exiting the portal"},{"name":"setAfter","params":[{"name":"after","type":"Vector","desc":"the velocity after exiting the portal"}],"desc":"Sets the velocity that the entity will have after exiting the portal.","ret":""}],"desc":"Called before an entity exits a portal.\n<p>\nThis event allows you to modify the velocity of the entity after they have\nsuccessfully exited the portal.\n<p>\nCancelling this event does not prevent the teleport, but it does prevent\nany changes to velocity and location from taking place."},{"FQCN":"org.bukkit.event.entity.EntityTargetEvent","methods":[{"name":"getReason","params":[],"desc":"Returns the reason for the targeting","ret":"The reason"},{"name":"getTarget","params":[],"desc":"Get the entity that this is targeting.\n<p>\nThis will be null in the case that the event is called when the mob\nforgets its target.","ret":"The entity"},{"name":"setTarget","params":[{"name":"target","type":"Entity","desc":"The entity to target"}],"desc":"Set the entity that you want the mob to target instead.\n<p>\nIt is possible to be null, null will cause the entity to be\ntarget-less.\n<p>\nThis is different from cancelling the event. Cancelling the event will\ncause the entity to keep an original target, while setting to be null\nwill cause the entity to be reset.","ret":""}],"desc":"Called when a creature targets or untargets another entity"},{"FQCN":"org.bukkit.event.entity.EntityToggleGlideEvent","methods":[{"name":"isGliding","params":[],"desc":"Returns true if the entity is now gliding or\nfalse if the entity stops gliding.","ret":"new gliding state"}],"desc":"Sent when an entity's gliding status is toggled with an Elytra.\nExamples of when this event would be called:\n<ul>\n    <li>Player presses the jump key while in midair and using an Elytra</li>\n    <li>Player lands on ground while they are gliding (with an Elytra)</li>\n</ul>\nThis can be visually estimated by the animation in which a player turns horizontal."},{"FQCN":"org.bukkit.event.entity.EntityTargetLivingEntityEvent","methods":[{"name":"setTarget","params":[{"name":"target","type":"Entity","desc":"The entity to target"}],"desc":"Set the Entity that you want the mob to target.\n<p>\nIt is possible to be null, null will cause the entity to be\ntarget-less.\n<p>\nMust be a LivingEntity, or null.","ret":""}],"desc":"Called when an Entity targets a {@link LivingEntity} and can only target\nLivingEntity's."},{"FQCN":"org.bukkit.event.entity.PotionSplashEvent","methods":[{"name":"getPotion","params":[],"desc":"Gets the potion which caused this event","ret":"The thrown potion entity"},{"name":"getAffectedEntities","params":[],"desc":"Retrieves a list of all effected entities","ret":"A fresh copy of the affected entity list"},{"name":"getIntensity","params":[{"name":"entity","type":"LivingEntity","desc":"Which entity to get intensity for"}],"desc":"Gets the intensity of the potion's effects for given entity; This\ndepends on the distance to the impact center","ret":"intensity relative to maximum effect; 0.0: not affected; 1.0:\n    fully hit by potion effects"},{"name":"setIntensity","params":[{"name":"entity","type":"LivingEntity","desc":"For which entity to define a new intensity"},{"name":"intensity","type":"double","desc":"relative to maximum effect"}],"desc":"Overwrites the intensity for a given entity","ret":""}],"desc":"Called when a splash potion hits an area"},{"FQCN":"org.bukkit.event.entity.FoodLevelChangeEvent","methods":[{"name":"getItem","params":[],"desc":"Gets the item that triggered this event, if any.","ret":"an ItemStack for the item being consumed"},{"name":"getFoodLevel","params":[],"desc":"Gets the resultant food level that the entity involved in this event\nshould be set to.\n<p>\nWhere 20 is a full food bar and 0 is an empty one.","ret":"The resultant food level"},{"name":"setFoodLevel","params":[{"name":"level","type":"int","desc":"the resultant food level that the entity involved in this\n    event should be set to"}],"desc":"Sets the resultant food level that the entity involved in this event\nshould be set to","ret":""}],"desc":"Called when a human entity's food level changes"},{"FQCN":"org.bukkit.event.entity.EntityMountEvent","methods":[{"name":"getMount","params":[],"desc":"Gets the entity which will be ridden.","ret":"mounted entity"}],"desc":"Called when an entity attempts to ride another entity."},{"FQCN":"org.bukkit.event.entity.EntityCombustByBlockEvent","methods":[{"name":"getCombuster","params":[],"desc":"The combuster can be lava or a block that is on fire.\n<p>\nWARNING: block may be null.","ret":"the Block that set the combustee alight."}],"desc":"Called when a block causes an entity to combust."},{"FQCN":"org.bukkit.event.entity.ArrowBodyCountChangeEvent","methods":[{"name":"isReset","params":[],"desc":"Whether the event was called because the entity was reset.","ret":"was reset"},{"name":"getOldAmount","params":[],"desc":"Gets the old amount of arrows in the entity's body.","ret":"amount of arrows"},{"name":"getNewAmount","params":[],"desc":"Get the new amount of arrows in the entity's body.","ret":"amount of arrows"},{"name":"setNewAmount","params":[{"name":"newAmount","type":"int","desc":"amount of arrows"}],"desc":"Sets the final amount of arrows in the entity's body.","ret":""}],"desc":"Called when an arrow enters or exists an entity's body."},{"FQCN":"org.bukkit.event.entity.EntityBreedEvent","methods":[{"name":"getMother","params":[],"desc":"Gets the parent creating this entity.","ret":"The \"birth\" parent"},{"name":"getFather","params":[],"desc":"Gets the other parent of the newly born entity.","ret":"the other parent"},{"name":"getBreeder","params":[],"desc":"Gets the Entity responsible for breeding. Breeder is null for spontaneous\nconception.","ret":"The Entity who initiated breeding."},{"name":"getBredWith","params":[],"desc":"The ItemStack that was used to initiate breeding, if present.","ret":"ItemStack used to initiate breeding."},{"name":"getExperience","params":[],"desc":"Get the amount of experience granted by breeding.","ret":"experience amount"},{"name":"setExperience","params":[{"name":"experience","type":"int","desc":"experience amount"}],"desc":"Set the amount of experience granted by breeding.","ret":""}],"desc":"Called when one Entity breeds with another Entity."},{"FQCN":"org.bukkit.event.entity.EntityTeleportEvent","methods":[{"name":"getFrom","params":[],"desc":"Gets the location that this entity moved from","ret":"Location this entity moved from"},{"name":"setFrom","params":[{"name":"from","type":"Location","desc":"New location this entity moved from"}],"desc":"Sets the location that this entity moved from","ret":""},{"name":"getTo","params":[],"desc":"Gets the location that this entity moved to","ret":"Location the entity moved to"},{"name":"setTo","params":[{"name":"to","type":"Location","desc":"New Location this entity moved to"}],"desc":"Sets the location that this entity moved to","ret":""}],"desc":"Thrown when a non-player entity is teleported from one location to another.\n<br>\nThis may be as a result of natural causes (Enderman, Shulker), pathfinding\n(Wolf), or commands (/teleport)."},{"FQCN":"org.bukkit.event.entity.EntityCreatePortalEvent","methods":[{"name":"getBlocks","params":[],"desc":"Gets a list of all blocks associated with the portal.","ret":"List of blocks that will be changed."},{"name":"getPortalType","params":[],"desc":"Gets the type of portal that is trying to be created.","ret":"Type of portal."}],"desc":"Thrown when a Living Entity creates a portal in a world."},{"FQCN":"org.bukkit.event.entity.VillagerAcquireTradeEvent","methods":[{"name":"getRecipe","params":[],"desc":"Get the recipe to be acquired.","ret":"the new recipe"},{"name":"setRecipe","params":[{"name":"recipe","type":"MerchantRecipe","desc":"the new recipe"}],"desc":"Set the recipe to be acquired.","ret":""}],"desc":"Called whenever a villager acquires a new trade."},{"FQCN":"org.bukkit.event.entity.EntityPlaceEvent","methods":[{"name":"getPlayer","params":[],"desc":"Returns the player placing the entity","ret":"the player placing the entity"},{"name":"getBlock","params":[],"desc":"Returns the block that the entity was placed on","ret":"the block that the entity was placed on"},{"name":"getBlockFace","params":[],"desc":"Returns the face of the block that the entity was placed on","ret":"the face of the block that the entity was placed on"},{"name":"getHand","params":[],"desc":"Get the hand used to place the entity.","ret":"the hand"}],"desc":"Triggered when an entity is created in the world by a player \"placing\" an item\non a block.\n<br>\nNote that this event is currently only fired for four specific placements:\narmor stands, boats, minecarts, and end crystals."},{"FQCN":"org.bukkit.event.entity.EntityBreakDoorEvent","methods":[],"desc":"Called when an {@link Entity} breaks a door\n<p>\nCancelling the event will cause the event to be delayed"},{"FQCN":"org.bukkit.event.entity.SheepDyeWoolEvent","methods":[],"desc":"Called when a sheep's wool is dyed"},{"FQCN":"org.bukkit.event.entity.EntityEnterBlockEvent","methods":[{"name":"getBlock","params":[],"desc":"Get the block the entity will enter.","ret":"the block"}],"desc":"Called when an {@link Entity} enters a block and is stored in that block.\n<p>\nThis event is called for bees entering a bee hive.\n<br>\nIt is not called when a silverfish \"enters\" a stone block. For that listen to\nthe {@link EntityChangeBlockEvent}."},{"FQCN":"org.bukkit.event.entity.FireworkExplodeEvent","methods":[{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":"whether to cancel or not."}],"desc":"Set the cancelled state of this event. If the firework explosion is\ncancelled, the firework will still be removed, but no particles will be\ndisplayed.","ret":""}],"desc":"Called when a firework explodes."},{"FQCN":"org.bukkit.event.entity.EntityAirChangeEvent","methods":[{"name":"getAmount","params":[],"desc":"Gets the amount of air the entity has left (measured in ticks).","ret":"amount of air remaining"},{"name":"setAmount","params":[{"name":"amount","type":"int","desc":"amount of air remaining"}],"desc":"Sets the amount of air remaining for the entity (measured in ticks.","ret":""}],"desc":"Called when the amount of air an entity has remaining changes."},{"FQCN":"org.bukkit.event.entity.EntityPortalEnterEvent","methods":[{"name":"getLocation","params":[],"desc":"Gets the portal block the entity is touching","ret":"The portal block the entity is touching"}],"desc":"Called when an entity comes into contact with a portal"},{"FQCN":"org.bukkit.event.entity.EntityExplodeEvent","methods":[{"name":"blockList","params":[],"desc":"Returns the list of blocks that would have been removed or were removed\nfrom the explosion event.","ret":"All blown-up blocks"},{"name":"getLocation","params":[],"desc":"Returns the location where the explosion happened.\n<p>\nIt is not possible to get this value from the Entity as the Entity no\nlonger exists in the world.","ret":"The location of the explosion"},{"name":"getYield","params":[],"desc":"Returns the percentage of blocks to drop from this explosion","ret":"The yield."},{"name":"setYield","params":[{"name":"yield","type":"float","desc":"The new yield percentage"}],"desc":"Sets the percentage of blocks to drop from this explosion","ret":""}],"desc":"Called when an entity explodes interacting with blocks. The\nevent isn't called if the {@link org.bukkit.GameRule#MOB_GRIEFING}\nis disabled as no block interaction will occur."},{"FQCN":"org.bukkit.event.EventHandler","methods":[],"desc":"An annotation to mark methods as being event handler methods"},{"FQCN":"org.bukkit.event.world.LootGenerateEvent","methods":[{"name":"getEntity","params":[],"desc":"Get the entity used as context for loot generation (if applicable).\n\nFor inventories where entities are not required to generate loot, such as\nhoppers, null will be returned.\n\nThis is a convenience method for\n{@code getLootContext().getLootedEntity()}.","ret":"the entity"},{"name":"getInventoryHolder","params":[],"desc":"Get the inventory holder in which the loot was generated.\n\nIf the loot was generated as a result of the block being broken, the\ninventory holder will be null as this event is called post block break.","ret":"the inventory holder"},{"name":"getLootTable","params":[],"desc":"Get the loot table used to generate loot.","ret":"the loot table"},{"name":"getLootContext","params":[],"desc":"Get the loot context used to provide context to the loot table's loot\ngeneration.","ret":"the loot context"},{"name":"setLoot","params":[{"name":"loot","type":"Collection<ItemStack>","desc":"the loot to generate, null to clear all loot"}],"desc":"Set the loot to be generated. Null items will be treated as air.\n\nNote: the set collection is not the one which will be returned by\n{@link #getLoot()}.","ret":""},{"name":"getLoot","params":[],"desc":"Get a mutable list of all loot to be generated.\n\nAny items added or removed from the returned list will be reflected in\nthe loot generation. Null items will be treated as air.","ret":"the loot to generate"},{"name":"isPlugin","params":[],"desc":"Check whether or not this event was called as a result of a plugin\ninvoking\n{@link LootTable#fillInventory(org.bukkit.inventory.Inventory, java.util.Random, LootContext)}.","ret":"true if plugin caused, false otherwise"}],"desc":"Called when a {@link LootTable} is generated in the world for an\n{@link InventoryHolder}.\n\nThis event is NOT currently called when an entity's loot table has been\ngenerated (use {@link EntityDeathEvent#getDrops()}, but WILL be called by\nplugins invoking\n{@link LootTable#fillInventory(org.bukkit.inventory.Inventory, java.util.Random, LootContext)}."},{"FQCN":"org.bukkit.event.world.EntitiesLoadEvent","methods":[{"name":"getEntities","params":[],"desc":"Get the entities which are being loaded.","ret":"unmodifiable list of loaded entities."}],"desc":"Called when entities are loaded.\n\nThe provided chunk may or may not be loaded."},{"FQCN":"org.bukkit.event.world.ChunkEvent","methods":[{"name":"getChunk","params":[],"desc":"Gets the chunk being loaded/unloaded","ret":"Chunk that triggered this event"}],"desc":"Represents a Chunk related event"},{"FQCN":"org.bukkit.event.world.ChunkLoadEvent","methods":[{"name":"isNewChunk","params":[],"desc":"Gets if this chunk was newly created or not.\n<p>\n<b>Note:</b> Do not use this to generated blocks in a newly generated chunk.\nUse a {@link BlockPopulator} instead.","ret":"true if the chunk is new, otherwise false"}],"desc":"Called when a chunk is loaded"},{"FQCN":"org.bukkit.event.world.ChunkPopulateEvent","methods":[],"desc":"Thrown when a newly generated chunk has finished being populated.\n<p>\n<b>Note:</b> Do not use this to generated blocks in a newly generated chunk.\nUse a {@link BlockPopulator} instead."},{"FQCN":"org.bukkit.event.world.WorldInitEvent","methods":[],"desc":"Called when a World is initializing.\n<p>\nTo get every world it is recommended to add following to the plugin.yml.\n<pre>load: STARTUP</pre>"},{"FQCN":"org.bukkit.event.world.WorldEvent","methods":[{"name":"getWorld","params":[],"desc":"Gets the world primarily involved with this event","ret":"World which caused this event"}],"desc":"Represents events within a world"},{"FQCN":"org.bukkit.event.world.SpawnChangeEvent","methods":[{"name":"getPreviousLocation","params":[],"desc":"Gets the previous spawn location","ret":"Location that used to be spawn"}],"desc":"An event that is called when a world's spawn changes. The world's previous\nspawn location is included."},{"FQCN":"org.bukkit.event.world.ChunkUnloadEvent","methods":[{"name":"isSaveChunk","params":[],"desc":"Return whether this chunk will be saved to disk.","ret":"chunk save status"},{"name":"setSaveChunk","params":[{"name":"saveChunk","type":"boolean","desc":"chunk save status"}],"desc":"Set whether this chunk will be saved to disk.","ret":""}],"desc":"Called when a chunk is unloaded"},{"FQCN":"org.bukkit.event.world.EntitiesUnloadEvent","methods":[{"name":"getEntities","params":[],"desc":"Get the entities which are being unloaded.","ret":"unmodifiable list of unloaded entities."}],"desc":"Called when entities are unloaded.\n\nThe provided chunk may or may not be loaded."},{"FQCN":"org.bukkit.event.world.AsyncStructureSpawnEvent","methods":[{"name":"getStructure","params":[],"desc":"Get the structure reference that is generated.","ret":"the structure"},{"name":"getBoundingBox","params":[],"desc":"Get the bounding box of the structure.","ret":"the bounding box"},{"name":"getChunkX","params":[],"desc":"Get the x coordinate of the origin chunk of the structure.\n\n<b>Note, it is not safe to attempt to retrieve or interact with this\nchunk. This event is informative only!</b>","ret":"the chunk x coordinate"},{"name":"getChunkZ","params":[],"desc":"Get the z coordinate of the origin chunk of the structure.\n\n<b>Note, it is not safe to attempt to retrieve or interact with this\nchunk. This event is informative only!</b>","ret":"the chunk z coordinate"}],"desc":"Called when a {@link Structure} is naturally generated in the world."},{"FQCN":"org.bukkit.event.world.TimeSkipEvent","methods":[{"name":"getSkipReason","params":[],"desc":"Gets the reason why the time has skipped.","ret":"a SkipReason value detailing why the time has skipped"},{"name":"getSkipAmount","params":[],"desc":"Gets the amount of time that was skipped.","ret":"Amount of time skipped"},{"name":"setSkipAmount","params":[{"name":"skipAmount","type":"long","desc":"Amount of time to skip"}],"desc":"Sets the amount of time to skip.","ret":""}],"desc":"Called when the time skips in a world.\n<p>\nIf the event is cancelled the time will not change."},{"FQCN":"org.bukkit.event.world.WorldSaveEvent","methods":[],"desc":"Called when a World is saved."},{"FQCN":"org.bukkit.event.world.StructureGrowEvent","methods":[{"name":"getLocation","params":[],"desc":"Gets the location of the structure.","ret":"Location of the structure"},{"name":"getSpecies","params":[],"desc":"Gets the species type (birch, normal, pine, red mushroom, brown\nmushroom)","ret":"Structure species"},{"name":"isFromBonemeal","params":[],"desc":"Checks if structure was grown using bonemeal.","ret":"True if the structure was grown using bonemeal."},{"name":"getPlayer","params":[],"desc":"Gets the player that created the structure.","ret":"Player that created the structure, null if was not created\n    manually"},{"name":"getBlocks","params":[],"desc":"Gets a list of all blocks associated with the structure.","ret":"list of all blocks associated with the structure."}],"desc":"Event that is called when an organic structure attempts to grow (Sapling {@literal ->}\nTree), (Mushroom {@literal ->} Huge Mushroom), naturally or using bonemeal."},{"FQCN":"org.bukkit.event.world.PortalCreateEvent","methods":[{"name":"getBlocks","params":[],"desc":"Gets an array list of all the blocks associated with the created portal","ret":"array list of all the blocks associated with the created portal"},{"name":"getEntity","params":[],"desc":"Returns the Entity that triggered this portal creation (if available)","ret":"Entity involved in this event"},{"name":"getReason","params":[],"desc":"Gets the reason for the portal's creation","ret":"CreateReason for the portal's creation"}],"desc":"Called when a portal is created"},{"FQCN":"org.bukkit.event.world.GenericGameEvent","methods":[{"name":"getEvent","params":[],"desc":"Get the underlying event.","ret":"the event"},{"name":"getLocation","params":[],"desc":"Get the location where the event occurred.","ret":"event location"},{"name":"getEntity","params":[],"desc":"Get the entity which triggered this event, if present.","ret":"triggering entity or null"},{"name":"getRadius","params":[],"desc":"Get the block radius to which this event will be broadcast.","ret":"broadcast radius"},{"name":"setRadius","params":[{"name":"radius","type":"int","desc":"radius, must be greater than or equal to 0"}],"desc":"Set the radius to which the event should be broadcast.","ret":""}],"desc":"Represents a generic Mojang game event.\n\nSpecific Bukkit events should be used where possible, this event is mainly\nused internally by Sculk sensors."},{"FQCN":"org.bukkit.event.world.WorldUnloadEvent","methods":[],"desc":"Called when a World is unloaded"},{"FQCN":"org.bukkit.event.world.WorldLoadEvent","methods":[],"desc":"Called when a World is loaded"},{"FQCN":"org.bukkit.event.world.AsyncStructureGenerateEvent","methods":[{"name":"getCause","params":[],"desc":"Gets the event cause.","ret":"the event cause"},{"name":"getBlockTransformer","params":[{"name":"key","type":"NamespacedKey","desc":"the key of the block transformer"}],"desc":"Gets a block transformer by key.","ret":"the block transformer or null"},{"name":"setBlockTransformer","params":[{"name":"key","type":"NamespacedKey","desc":"the key"},{"name":"transformer","type":"BlockTransformer","desc":"the block transformer"}],"desc":"Sets a block transformer to a key.","ret":""},{"name":"removeBlockTransformer","params":[{"name":"key","type":"NamespacedKey","desc":"the key of the block transformer"}],"desc":"Removes a block transformer.","ret":""},{"name":"clearBlockTransformers","params":[],"desc":"Removes all block transformers.","ret":""},{"name":"getBlockTransformers","params":[],"desc":"Gets all block transformers in a unmodifiable map.","ret":"the block transformers in a map"},{"name":"getEntityTransformer","params":[{"name":"key","type":"NamespacedKey","desc":"the key of the entity transformer"}],"desc":"Gets a entity transformer by key.","ret":"the entity transformer or null"},{"name":"setEntityTransformer","params":[{"name":"key","type":"NamespacedKey","desc":"the key"},{"name":"transformer","type":"EntityTransformer","desc":"the entity transformer"}],"desc":"Sets a entity transformer to a key.","ret":""},{"name":"removeEntityTransformer","params":[{"name":"key","type":"NamespacedKey","desc":"the key of the entity transformer"}],"desc":"Removes a entity transformer.","ret":""},{"name":"clearEntityTransformers","params":[],"desc":"Removes all entity transformers.","ret":""},{"name":"getEntityTransformers","params":[],"desc":"Gets all entity transformers in a unmodifiable map.","ret":"the entity transformers in a map"},{"name":"getStructure","params":[],"desc":"Get the structure reference that is generated.","ret":"the structure"},{"name":"getBoundingBox","params":[],"desc":"Get the bounding box of the structure.","ret":"the bounding box"},{"name":"getChunkX","params":[],"desc":"Get the x coordinate of the origin chunk of the structure.","ret":"the chunk x coordinate"},{"name":"getChunkZ","params":[],"desc":"Get the z coordinate of the origin chunk of the structure.","ret":"the chunk z coordinate"}],"desc":"This event will sometimes fire synchronously, depending on how it was\ntriggered.\n<p>\nThe constructor provides a boolean to indicate if the event was fired\nsynchronously or asynchronously. When asynchronous, this event can be called\nfrom any thread, sans the main thread, and has limited access to the API.\n<p>\nIf a {@link Structure} is naturally placed in a chunk of the world, this\nevent will be asynchronous. If a player executes the '/place structure'\ncommand, this event will be synchronous.\n\nAllows to register transformers that can modify the blocks placed and\nentities spawned by the structure.\n<p>\nCare should be taken to check {@link #isAsynchronous()} and treat the event\nappropriately.\n<p>"},{"FQCN":"org.bukkit.event.server.TabCompleteEvent","methods":[{"name":"getSender","params":[],"desc":"Get the sender completing this command.","ret":"the {@link CommandSender} instance"},{"name":"getBuffer","params":[],"desc":"Return the entire buffer which formed the basis of this completion.","ret":"command buffer, as entered"},{"name":"getCompletions","params":[],"desc":"The list of completions which will be offered to the sender, in order.\nThis list is mutable and reflects what will be offered.","ret":"a list of offered completions"},{"name":"isCommand","params":[],"desc":"","ret":"True if it is a command being tab completed, false if it is a chat message."},{"name":"getLocation","params":[],"desc":"","ret":"The position looked at by the sender, or null if none"},{"name":"setCompletions","params":[{"name":"completions","type":"List<String>","desc":"the new completions"}],"desc":"Set the completions offered, overriding any already set.\n\nThe passed collection will be cloned to a new List. You must call {{@link #getCompletions()}} to mutate from here","ret":""}],"desc":"Called when a {@link CommandSender} of any description (ie: player or\nconsole) attempts to tab complete.\n<br>\nNote that due to client changes, if the sender is a Player, this event will\nonly begin to fire once command arguments are specified, not commands\nthemselves. Plugins wishing to remove commands from tab completion are\nadvised to ensure the client does not have permission for the relevant\ncommands, or use {@link PlayerCommandSendEvent}."},{"FQCN":"org.bukkit.event.server.ServerCommandEvent","methods":[{"name":"getCommand","params":[],"desc":"Gets the command that the user is attempting to execute from the\nconsole","ret":"Command the user is attempting to execute"},{"name":"setCommand","params":[{"name":"message","type":"String","desc":"New message that the server will execute"}],"desc":"Sets the command that the server will execute","ret":""},{"name":"getSender","params":[],"desc":"Get the command sender.","ret":"The sender"}],"desc":"This event is called when a command is run by a non-player. It is\ncalled early in the command handling process, and modifications in this\nevent (via {@link #setCommand(String)}) will be shown in the behavior.\n<p>\nMany plugins will have <b>no use for this event</b>, and you should\nattempt to avoid using it if it is not necessary.\n<p>\nSome examples of valid uses for this event are:\n<ul>\n<li>Logging executed commands to a separate file\n<li>Variable substitution. For example, replacing <code>${ip:Steve}</code>\n    with the connection IP of the player named Steve, or simulating the\n    <code>@a</code> and <code>@p</code> decorators used by Command Blocks\n    for plugins that do not handle it.\n<li>Conditionally blocking commands belonging to other plugins.\n<li>Per-sender command aliases. For example, after the console runs the\n    command <code>/calias cr gamemode creative</code>, the next time they\n    run <code>/cr</code>, it gets replaced into\n    <code>/gamemode creative</code>. (Global command aliases should be\n    done by registering the alias.)\n</ul>\n<p>\nExamples of incorrect uses are:\n<ul>\n<li>Using this event to run command logic\n</ul>\n<p>\nIf the event is cancelled, processing of the command will halt.\n<p>\nThe state of whether or not there is a slash (<code>/</code>) at the\nbeginning of the message should be preserved. If a slash is added or\nremoved, unexpected behavior may result."},{"FQCN":"org.bukkit.event.server.ServerListPingEvent","methods":[{"name":"motd","params":[],"desc":"Get the message of the day message.","ret":"the message of the day"},{"name":"motd","params":[{"name":"motd","type":"net.kyori.adventure.text.Component","desc":"the message of the day"}],"desc":"Change the message of the day message.","ret":""},{"name":"getHostname","params":[],"desc":"Gets the hostname that the player used to connect to the server, or\nblank if unknown","ret":"The hostname"},{"name":"getAddress","params":[],"desc":"Get the address the ping is coming from.","ret":"the address"},{"name":"getMotd","params":[],"desc":"Get the message of the day message.","ret":"the message of the day"},{"name":"setMotd","params":[{"name":"motd","type":"String","desc":"the message of the day"}],"desc":"Change the message of the day message.","ret":""},{"name":"getNumPlayers","params":[],"desc":"Get the number of players sent.","ret":"the number of players"},{"name":"getMaxPlayers","params":[],"desc":"Get the maximum number of players sent.","ret":"the maximum number of players"},{"name":"shouldSendChatPreviews","params":[],"desc":"Gets whether the server needs to send a preview of the chat to the\nclient.","ret":"true if chat preview is enabled, false otherwise"},{"name":"setMaxPlayers","params":[{"name":"maxPlayers","type":"int","desc":"the maximum number of player"}],"desc":"Set the maximum number of players sent.","ret":""},{"name":"setServerIcon","params":[{"name":"icon","type":"CachedServerIcon","desc":"the icon to send to the client"}],"desc":"Sets the server-icon sent to the client.","ret":""},{"name":"iterator","params":[],"desc":"{@inheritDoc}\n<p>\nCalling the {@link Iterator#remove()} method will force that particular\nplayer to not be displayed on the player list, decrease the size\nreturned by {@link #getNumPlayers()}, and will not be returned again by\nany new iterator.\n<br>\n<b>Note:</b> The players here will not be shown in the server info if\n{@link Bukkit#getHideOnlinePlayers()} is true.","ret":""}],"desc":"Called when a server list ping is coming in. Displayed players can be\nchecked and removed by {@link #iterator() iterating} over this event.\n<br>\n<b>Note:</b> The players in {@link #iterator()} will not be shown in the\nserver info if {@link Bukkit#getHideOnlinePlayers()} is true."},{"FQCN":"org.bukkit.event.server.ServerEvent","methods":[],"desc":"Miscellaneous server events"},{"FQCN":"org.bukkit.event.server.ServerLoadEvent","methods":[{"name":"getType","params":[],"desc":"Gets the context in which the server was loaded.","ret":"the context in which the server was loaded"}],"desc":"This event is called when either the server startup or reload has completed."},{"FQCN":"org.bukkit.event.server.ServiceRegisterEvent","methods":[],"desc":"This event is called when a service is registered.\n<p>\nWarning: The order in which register and unregister events are called\nshould not be relied upon."},{"FQCN":"org.bukkit.event.server.ServiceUnregisterEvent","methods":[],"desc":"This event is called when a service is unregistered.\n<p>\nWarning: The order in which register and unregister events are called\nshould not be relied upon."},{"FQCN":"org.bukkit.event.server.MapInitializeEvent","methods":[{"name":"getMap","params":[],"desc":"Gets the map initialized in this event.","ret":"Map for this event"}],"desc":"Called when a map is initialized."},{"FQCN":"org.bukkit.event.server.PluginEnableEvent","methods":[],"desc":"Called when a plugin is enabled."},{"FQCN":"org.bukkit.event.server.PluginDisableEvent","methods":[],"desc":"Called when a plugin is disabled."},{"FQCN":"org.bukkit.event.server.BroadcastMessageEvent","methods":[{"name":"message","params":[],"desc":"Get the broadcast message.","ret":"Message to broadcast"},{"name":"message","params":[{"name":"message","type":"net.kyori.adventure.text.Component","desc":"New message to broadcast"}],"desc":"Set the broadcast message.","ret":""},{"name":"getMessage","params":[],"desc":"Get the message to broadcast.","ret":"Message to broadcast"},{"name":"setMessage","params":[{"name":"message","type":"String","desc":"New message to broadcast"}],"desc":"Set the message to broadcast.","ret":""},{"name":"getRecipients","params":[],"desc":"Gets a set of recipients that this chat message will be displayed to.\n<p>\nThe set returned is not guaranteed to be mutable and may auto-populate\non access. Any listener accessing the returned set should be aware that\nit may reduce performance for a lazy set implementation.\n<p>\nListeners should be aware that modifying the list may throw {@link\nUnsupportedOperationException} if the event caller provides an\nunmodifiable set.","ret":"All CommandSenders who will see this chat message"}],"desc":"Event triggered for server broadcast messages such as from\n{@link org.bukkit.Server#broadcast(net.kyori.adventure.text.Component)} (String, String)}.\n\n<b>This event behaves similarly to {@link io.papermc.paper.event.player.AsyncChatEvent} in that it\nshould be async if fired from an async thread. Please see that event for\nfurther information.</b>"},{"FQCN":"org.bukkit.event.server.PluginEvent","methods":[{"name":"getPlugin","params":[],"desc":"Gets the plugin involved in this event","ret":"Plugin for this event"}],"desc":"Used for plugin enable and disable events"},{"FQCN":"org.bukkit.event.server.ServiceEvent","methods":[],"desc":"An event relating to a registered service. This is called in a {@link\norg.bukkit.plugin.ServicesManager}"},{"FQCN":"org.bukkit.event.server.RemoteServerCommandEvent","methods":[],"desc":"This event is called when a command is received over RCON. See the javadocs\nof {@link ServerCommandEvent} for more information."},{"FQCN":"org.bukkit.event.Cancellable","methods":[{"name":"isCancelled","params":[],"desc":"Gets the cancellation state of this event. A cancelled event will not\nbe executed in the server, but will still pass to other plugins","ret":"true if this event is cancelled"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":"true if you wish to cancel this event"}],"desc":"Sets the cancellation state of this event. A cancelled event will not\nbe executed in the server, but will still pass to other plugins.","ret":""}],"desc":"A type characterizing events that may be cancelled by a plugin or the server."},{"FQCN":"org.bukkit.event.Event","methods":[{"name":"callEvent","params":[],"desc":"Calls the event and tests if cancelled.","ret":"false if event was cancelled, if cancellable. otherwise true."},{"name":"getEventName","params":[],"desc":"Convenience method for providing a user-friendly identifier. By\ndefault, it is the event's class's {@linkplain Class#getSimpleName()\nsimple name}.","ret":"name of this event"},{"name":"isAsynchronous","params":[],"desc":"Any custom event that should not by synchronized with other events must\nuse the specific constructor. These are the caveats of using an\nasynchronous event:\n<ul>\n<li>The event is never fired from inside code triggered by a\n    synchronous event. Attempting to do so results in an {@link\n    java.lang.IllegalStateException}.\n<li>However, asynchronous event handlers may fire synchronous or\n    asynchronous events\n<li>The event may be fired multiple times simultaneously and in any\n    order.\n<li>Any newly registered or unregistered handler is ignored after an\n    event starts execution.\n<li>The handlers for this event may block for any length of time.\n<li>Some implementations may selectively declare a specific event use\n    as asynchronous. This behavior should be clearly defined.\n<li>Asynchronous calls are not calculated in the plugin timing system.\n</ul>","ret":"false by default, true if the event fires asynchronously"}],"desc":"Represents an event.\n\nAll events require a static method named getHandlerList() which returns the same {@link HandlerList} as {@link #getHandlers()}."},{"FQCN":"org.bukkit.event.HandlerList","methods":[{"name":"bakeAll","params":[],"desc":"Bake all handler lists. Best used just after all normal event\nregistration is complete, ie just after all plugins are loaded if\nyou're using fevents in a plugin system.","ret":""},{"name":"unregisterAll","params":[],"desc":"Unregister all listeners from all handler lists.","ret":""},{"name":"unregisterAll","params":[{"name":"plugin","type":"Plugin","desc":"plugin to unregister"}],"desc":"Unregister a specific plugin's listeners from all handler lists.","ret":""},{"name":"unregisterAll","params":[{"name":"listener","type":"Listener","desc":"listener to unregister"}],"desc":"Unregister a specific listener from all handler lists.","ret":""},{"name":"register","params":[{"name":"listener","type":"RegisteredListener","desc":"listener to register"}],"desc":"Register a new listener in this handler list","ret":""},{"name":"registerAll","params":[{"name":"listeners","type":"Collection<RegisteredListener>","desc":"listeners to register"}],"desc":"Register a collection of new listeners in this handler list","ret":""},{"name":"unregister","params":[{"name":"listener","type":"RegisteredListener","desc":"listener to remove"}],"desc":"Remove a listener from a specific order slot","ret":""},{"name":"unregister","params":[{"name":"plugin","type":"Plugin","desc":"plugin to remove"}],"desc":"Remove a specific plugin's listeners from this handler","ret":""},{"name":"unregister","params":[{"name":"listener","type":"Listener","desc":"listener to remove"}],"desc":"Remove a specific listener from this handler","ret":""},{"name":"bake","params":[],"desc":"Bake HashMap and ArrayLists to 2d array - does nothing if not necessary","ret":""},{"name":"getRegisteredListeners","params":[],"desc":"Get the baked registered listeners associated with this handler list","ret":"the array of registered listeners"},{"name":"getRegisteredListeners","params":[{"name":"plugin","type":"Plugin","desc":"the plugin to get the listeners of"}],"desc":"Get a specific plugin's registered listeners associated with this\nhandler list","ret":"the list of registered listeners"},{"name":"getHandlerLists","params":[],"desc":"Get a list of all handler lists for every event type","ret":"the list of all handler lists"}],"desc":"A list of event handlers, stored per-event. Based on lahwran's fevents."},{"FQCN":"org.bukkit.event.inventory.InventoryPickupItemEvent","methods":[{"name":"getInventory","params":[],"desc":"Gets the Inventory that picked up the item","ret":"Inventory"},{"name":"getItem","params":[],"desc":"Gets the Item entity that was picked up","ret":"Item"}],"desc":"Called when a hopper or hopper minecart picks up a dropped item."},{"FQCN":"org.bukkit.event.inventory.BrewEvent","methods":[{"name":"getContents","params":[],"desc":"Gets the contents of the Brewing Stand.\n\n<b>Note:</b> The brewer inventory still holds the items found prior to\nthe finalization of the brewing process, e.g. the plain water bottles.","ret":"the contents"},{"name":"getFuelLevel","params":[],"desc":"Gets the remaining fuel level.","ret":"the remaining fuel"},{"name":"getResults","params":[],"desc":"Gets the resulting items in the Brewing Stand.\n\nThe returned list, in case of a server-created event instance, is\nmutable. Any changes in the returned list will reflect in the brewing\nresult if the event is not cancelled. If the size of the list is reduced,\nremaining items will be set to air.","ret":"List of {@link ItemStack} resulting for this operation"}],"desc":"Called when the brewing of the contents inside the Brewing Stand is\ncomplete."},{"FQCN":"org.bukkit.event.inventory.PrepareItemCraftEvent","methods":[{"name":"getRecipe","params":[],"desc":"Get the recipe that has been formed. If this event was triggered by a\ntool repair, this will be a temporary shapeless recipe representing the\nrepair.","ret":"The recipe being crafted."},{"name":"getInventory","params":[],"desc":"","ret":"The crafting inventory on which the recipe was formed."},{"name":"isRepair","params":[],"desc":"Check if this event was triggered by a tool repair operation rather\nthan a crafting recipe.","ret":"True if this is a repair."}],"desc":""},{"FQCN":"org.bukkit.event.inventory.HopperInventorySearchEvent","methods":[{"name":"setInventory","params":[{"name":"inventory","type":"Inventory","desc":"the inventory to use"}],"desc":"Set the {@link Inventory} that the Hopper will use for its\nsource/attached Container.","ret":""},{"name":"getInventory","params":[],"desc":"Gets the {@link Inventory} that the Hopper will use for its\nsource/attached Container.","ret":"the inventory which will be used"},{"name":"getContainerType","params":[],"desc":"Gets the Container type the Hopper is searching for.","ret":"the container type being searched for"},{"name":"getSearchBlock","params":[],"desc":"Gets the Block that is being searched for an inventory.","ret":"block being searched for an inventory"}],"desc":"Event that gets called each time a Hopper attempts to find its\nsource/attached containers."},{"FQCN":"org.bukkit.event.inventory.PrepareSmithingEvent","methods":[],"desc":"Called when an item is put in a slot for upgrade by a Smithing Table."},{"FQCN":"org.bukkit.event.inventory.InventoryType","methods":[{"name":"defaultTitle","params":[],"desc":"Gets the inventory's default title.","ret":"the inventory's default title"},{"name":"isCreatable","params":[],"desc":"Denotes that this InventoryType can be created via the normal\n{@link org.bukkit.Bukkit#createInventory} methods.","ret":"if this InventoryType can be created and shown to a player"}],"desc":"Represents the different kinds of inventories available in Bukkit.\n<br>\nOnly InventoryTypes marked {@link #isCreatable()} can be created.\n<br>\nThe current list of inventories that cannot be created via\n{@link org.bukkit.Bukkit#createInventory} are:<br>\n<blockquote>\n    {@link InventoryType#CREATIVE}, {@link InventoryType#CRAFTING} and\n    {@link InventoryType#MERCHANT}\n</blockquote>\n\nSee {@link org.bukkit.Bukkit#createInventory} for more information."},{"FQCN":"org.bukkit.event.inventory.FurnaceExtractEvent","methods":[{"name":"getPlayer","params":[],"desc":"Get the player that triggered the event","ret":"the relevant player"},{"name":"getItemType","params":[],"desc":"Get the Material of the item being retrieved","ret":"the material of the item"},{"name":"getItemAmount","params":[],"desc":"Get the item count being retrieved","ret":"the amount of the item"}],"desc":"This event is called when a player takes items out of a furnace-like block such as a\n{@link org.bukkit.block.Furnace}, {@link org.bukkit.block.Smoker}, or\n{@link org.bukkit.block.BlastFurnace}."},{"FQCN":"org.bukkit.event.inventory.DragType","methods":[],"desc":"Represents the effect of a drag that will be applied to an Inventory in an\nInventoryDragEvent."},{"FQCN":"org.bukkit.event.inventory.FurnaceStartSmeltEvent","methods":[{"name":"getRecipe","params":[],"desc":"Gets the FurnaceRecipe associated with this event","ret":"the FurnaceRecipe being cooked"},{"name":"getTotalCookTime","params":[],"desc":"Gets the total cook time associated with this event","ret":"the total cook time"},{"name":"setTotalCookTime","params":[{"name":"cookTime","type":"int","desc":"the new total cook time"}],"desc":"Sets the total cook time for this event","ret":""}],"desc":"Called when any of the furnace-like blocks start smelting.\n<p>\nFurnace-like blocks are {@link org.bukkit.block.Furnace},\n{@link org.bukkit.block.Smoker}, and {@link org.bukkit.block.BlastFurnace}."},{"FQCN":"org.bukkit.event.inventory.InventoryOpenEvent","methods":[{"name":"getPlayer","params":[],"desc":"Returns the player involved in this event","ret":"Player who is involved in this event"},{"name":"isCancelled","params":[],"desc":"Gets the cancellation state of this event. A cancelled event will not\nbe executed in the server, but will still pass to other plugins.\n<p>\nIf an inventory open event is cancelled, the inventory screen will not\nshow.","ret":"true if this event is cancelled"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":"true if you wish to cancel this event"}],"desc":"Sets the cancellation state of this event. A cancelled event will not\nbe executed in the server, but will still pass to other plugins.\n<p>\nIf an inventory open event is cancelled, the inventory screen will not\nshow.","ret":""},{"name":"titleOverride","params":[],"desc":"Gets the title override set by another event or null\nif not set.","ret":"the title override or null"},{"name":"titleOverride","params":[{"name":"titleOverride","type":"net.kyori.adventure.text.Component","desc":"the title override or null"}],"desc":"Sets the title override or clears the override.\n<p>\nThis is only the title sent to the client in the open packet, this doesn't change\nthe title returned by {@link InventoryView#title()}, hence \"override\".\n<p>\n<b>NOTE:</b> Horse inventories are a special case where setting this will\nhave no effect. Horse inventory titles are set by the horse display name.","ret":""}],"desc":"Called when a player opens an inventory"},{"FQCN":"org.bukkit.event.inventory.ClickType","methods":[{"name":"isKeyboardClick","params":[],"desc":"Gets whether this ClickType represents the pressing of a key on a\nkeyboard.","ret":"true if this ClickType represents the pressing of a key"},{"name":"isMouseClick","params":[],"desc":"Gets whether this ClickType represents the pressing of a mouse button","ret":"true if this ClickType represents the pressing of a mouse button"},{"name":"isCreativeAction","params":[],"desc":"Gets whether this ClickType represents an action that can only be\nperformed by a Player in creative mode.","ret":"true if this action requires Creative mode"},{"name":"isRightClick","params":[],"desc":"Gets whether this ClickType represents a right click.","ret":"true if this ClickType represents a right click"},{"name":"isLeftClick","params":[],"desc":"Gets whether this ClickType represents a left click.","ret":"true if this ClickType represents a left click"},{"name":"isShiftClick","params":[],"desc":"Gets whether this ClickType indicates that the shift key was pressed\ndown when the click was made.","ret":"true if the action uses Shift."}],"desc":"What the client did to trigger this action (not the result)."},{"FQCN":"org.bukkit.event.inventory.PrepareGrindstoneEvent","methods":[],"desc":"Called when an item is put in a slot for repair or unenchanting in a grindstone."},{"FQCN":"org.bukkit.event.inventory.PrepareAnvilEvent","methods":[{"name":"setResult","params":[{"name":"result","type":"ItemStack","desc":"result item"}],"desc":"{@inheritDoc}\n\n<p>\nNote: by default custom recipes in anvil are disabled\nyou should define a repair cost on the anvil inventory\ngreater or equals to zero in order to allow that.","ret":""}],"desc":"Called when an item is put in a slot for repair by an anvil."},{"FQCN":"org.bukkit.event.inventory.SmithItemEvent","methods":[],"desc":"Called when the recipe of an Item is completed inside a smithing table."},{"FQCN":"org.bukkit.event.inventory.FurnaceBurnEvent","methods":[{"name":"getFuel","params":[],"desc":"Gets the fuel ItemStack for this event","ret":"the fuel ItemStack"},{"name":"getBurnTime","params":[],"desc":"Gets the burn time for this fuel","ret":"the burn time for this fuel"},{"name":"setBurnTime","params":[{"name":"burnTime","type":"int","desc":"the burn time for this fuel"}],"desc":"Sets the burn time for this fuel","ret":""},{"name":"isBurning","params":[],"desc":"Gets whether the furnace's fuel is burning or not.","ret":"whether the furnace's fuel is burning or not."},{"name":"setBurning","params":[{"name":"burning","type":"boolean","desc":"true if the furnace's fuel is burning"}],"desc":"Sets whether the furnace's fuel is burning or not.","ret":""},{"name":"willConsumeFuel","params":[],"desc":"Gets whether the furnace's fuel will be consumed or not.","ret":"whether the furnace's fuel will be consumed"},{"name":"setConsumeFuel","params":[{"name":"consumeFuel","type":"boolean","desc":"true to consume the fuel"}],"desc":"Sets whether the furnace's fuel will be consumed or not.","ret":""}],"desc":"Called when an ItemStack is successfully burned as fuel in a furnace-like block such as a\n{@link org.bukkit.block.Furnace}, {@link org.bukkit.block.Smoker}, or\n{@link org.bukkit.block.BlastFurnace}."},{"FQCN":"org.bukkit.event.inventory.CraftItemEvent","methods":[{"name":"getRecipe","params":[],"desc":"","ret":"A copy of the current recipe on the crafting matrix."}],"desc":"Called when the recipe of an Item is completed inside a crafting matrix."},{"FQCN":"org.bukkit.event.inventory.TradeSelectEvent","methods":[{"name":"getIndex","params":[],"desc":"Used to get the index of the trade the player clicked on.","ret":"The index of the trade clicked by the player"},{"name":"getMerchant","params":[],"desc":"Get the Merchant involved.","ret":"the Merchant"}],"desc":"This event is called whenever a player clicks a new trade on the trades\nsidebar.\n<p>\nThis event allows the user to get the index of the trade, letting them get\nthe MerchantRecipe via the Merchant."},{"FQCN":"org.bukkit.event.inventory.InventoryCloseEvent","methods":[{"name":"getPlayer","params":[],"desc":"Returns the player involved in this event","ret":"Player who is involved in this event"}],"desc":"This event is called when a player closes an inventory.\n<p>\nBecause InventoryCloseEvent occurs within a modification of the Inventory,\nnot all Inventory related methods are safe to use.\n<p>\nMethods that change the view a player is looking at should never be invoked\nby an EventHandler for InventoryCloseEvent using the HumanEntity or\nInventoryView associated with this event.\nExamples of these include:\n<ul>\n<li>{@link HumanEntity#closeInventory()}\n<li>{@link HumanEntity#openInventory(org.bukkit.inventory.Inventory)}\n<li>{@link HumanEntity#openWorkbench(org.bukkit.Location, boolean)}\n<li>{@link HumanEntity#openEnchanting(org.bukkit.Location, boolean)}\n<li>{@link InventoryView#close()}\n</ul>\nTo invoke one of these methods, schedule a task using\n{@link org.bukkit.scheduler.BukkitScheduler#runTask(org.bukkit.plugin.Plugin, Runnable)}, which will run the task\non the next tick. Also be aware that this is not an exhaustive list, and\nother methods could potentially create issues as well."},{"FQCN":"org.bukkit.event.inventory.PrepareInventoryResultEvent","methods":[{"name":"getResult","params":[],"desc":"Get result item, may be null.","ret":"result item"},{"name":"setResult","params":[{"name":"result","type":"ItemStack","desc":"result item"}],"desc":"Set result item, may be null.","ret":""}],"desc":"Called when an item is put in a slot and the result is calculated."},{"FQCN":"org.bukkit.event.inventory.InventoryCreativeEvent","methods":[],"desc":"This event is called when a player in creative mode puts down or picks up\nan item in their inventory / hotbar and when they drop items from their\nInventory while in creative mode."},{"FQCN":"org.bukkit.event.inventory.InventoryEvent","methods":[{"name":"getInventory","params":[],"desc":"Gets the primary Inventory involved in this transaction","ret":"The upper inventory."},{"name":"getViewers","params":[],"desc":"Gets the list of players viewing the primary (upper) inventory involved\nin this event","ret":"A list of people viewing."},{"name":"getView","params":[],"desc":"Gets the view object itself","ret":"InventoryView"}],"desc":"Represents a player related inventory event"},{"FQCN":"org.bukkit.event.inventory.FurnaceSmeltEvent","methods":[],"desc":"Called when an ItemStack is successfully smelted in a furnace-like block\nsuch as a {@link org.bukkit.block.Furnace}, {@link org.bukkit.block.Smoker},\nor {@link org.bukkit.block.BlastFurnace}."},{"FQCN":"org.bukkit.event.inventory.BrewingStandFuelEvent","methods":[{"name":"getFuel","params":[],"desc":"Gets the ItemStack of the fuel before the amount was subtracted.","ret":"the fuel ItemStack"},{"name":"getFuelPower","params":[],"desc":"Gets the fuel power for this fuel. Each unit of power can fuel one\nbrewing operation.","ret":"the fuel power for this fuel"},{"name":"setFuelPower","params":[{"name":"fuelPower","type":"int","desc":"the fuel power for this fuel"}],"desc":"Sets the fuel power for this fuel. Each unit of power can fuel one\nbrewing operation.","ret":""},{"name":"isConsuming","params":[],"desc":"Gets whether the brewing stand's fuel will be reduced / consumed or not.","ret":"whether the fuel will be reduced or not"},{"name":"setConsuming","params":[{"name":"consuming","type":"boolean","desc":"whether the fuel will be reduced or not"}],"desc":"Sets whether the brewing stand's fuel will be reduced / consumed or not.","ret":""}],"desc":"Called when an ItemStack is about to increase the fuel level of a brewing\nstand."},{"FQCN":"org.bukkit.event.inventory.InventoryClickEvent","methods":[{"name":"getSlotType","params":[],"desc":"Gets the type of slot that was clicked.","ret":"the slot type"},{"name":"getCursor","params":[],"desc":"Gets the current ItemStack on the cursor.","ret":"the cursor ItemStack"},{"name":"getCurrentItem","params":[],"desc":"Gets the ItemStack currently in the clicked slot.","ret":"the item in the clicked slot"},{"name":"isRightClick","params":[],"desc":"Gets whether or not the ClickType for this event represents a right\nclick.","ret":"true if the ClickType uses the right mouse button."},{"name":"isLeftClick","params":[],"desc":"Gets whether or not the ClickType for this event represents a left\nclick.","ret":"true if the ClickType uses the left mouse button."},{"name":"isShiftClick","params":[],"desc":"Gets whether the ClickType for this event indicates that the key was\npressed down when the click was made.","ret":"true if the ClickType uses Shift or Ctrl."},{"name":"setCursor","params":[{"name":"stack","type":"ItemStack","desc":"the new cursor item"}],"desc":"Sets the item on the cursor.","ret":""},{"name":"setCurrentItem","params":[{"name":"stack","type":"ItemStack","desc":"the item to be placed in the current slot"}],"desc":"Sets the ItemStack currently in the clicked slot.","ret":""},{"name":"getClickedInventory","params":[],"desc":"Gets the inventory corresponding to the clicked slot.","ret":"inventory, or null if clicked outside"},{"name":"getSlot","params":[],"desc":"The slot number that was clicked, ready for passing to\n{@link Inventory#getItem(int)}. Note that there may be two slots with\nthe same slot number, since a view links two different inventories.","ret":"The slot number."},{"name":"getRawSlot","params":[],"desc":"The raw slot number clicked, ready for passing to {@link InventoryView\n#getItem(int)} This slot number is unique for the view.","ret":"the slot number"},{"name":"getHotbarButton","params":[],"desc":"If the ClickType is NUMBER_KEY, this method will return the index of\nthe pressed key (0-8).","ret":"the number on the key minus 1 (range 0-8); or -1 if not\n    a NUMBER_KEY action"},{"name":"getAction","params":[],"desc":"Gets the InventoryAction that triggered this event.\n<p>\nThis action cannot be changed, and represents what the normal outcome\nof the event will be. To change the behavior of this\nInventoryClickEvent, changes must be manually applied.","ret":"the InventoryAction that triggered this event."},{"name":"getClick","params":[],"desc":"Gets the ClickType for this event.\n<p>\nThis is insulated against changes to the inventory by other plugins.","ret":"the type of inventory click"}],"desc":"This event is called when a player clicks in an inventory.\n<p>\nBecause InventoryClickEvent occurs within a modification of the Inventory,\nnot all Inventory related methods are safe to use.\n<p>\nMethods that change the view a player is looking at should never be invoked\nby an EventHandler for InventoryClickEvent using the HumanEntity or\nInventoryView associated with this event.\nExamples of these include:\n<ul>\n<li>{@link HumanEntity#closeInventory()}\n<li>{@link HumanEntity#openInventory(Inventory)}\n<li>{@link HumanEntity#openWorkbench(Location, boolean)}\n<li>{@link HumanEntity#openEnchanting(Location, boolean)}\n<li>{@link InventoryView#close()}\n</ul>\nTo invoke one of these methods, schedule a task using\n{@link BukkitScheduler#runTask(Plugin, Runnable)}, which will run the task\non the next tick. Also be aware that this is not an exhaustive list, and\nother methods could potentially create issues as well.\n<p>\nAssuming the EntityHuman associated with this event is an instance of a\nPlayer, manipulating the MaxStackSize or contents of an Inventory will\nrequire an Invocation of {@link Player#updateInventory()}.\n<p>\nModifications to slots that are modified by the results of this\nInventoryClickEvent can be overwritten. To change these slots, this event\nshould be cancelled and all desired changes to the inventory applied.\nAlternatively, scheduling a task using {@link BukkitScheduler#runTask(\nPlugin, Runnable)}, which would execute the task on the next tick, would\nwork as well."},{"FQCN":"org.bukkit.event.inventory.InventoryMoveItemEvent","methods":[{"name":"getSource","params":[],"desc":"Gets the Inventory that the ItemStack is being taken from","ret":"Inventory that the ItemStack is being taken from"},{"name":"getItem","params":[],"desc":"Gets the ItemStack being moved; if modified, the original item will not\nbe removed from the source inventory.","ret":"ItemStack"},{"name":"setItem","params":[{"name":"itemStack","type":"ItemStack","desc":"The ItemStack"}],"desc":"Sets the ItemStack being moved; if this is different from the original\nItemStack, the original item will not be removed from the source\ninventory.","ret":""},{"name":"getDestination","params":[],"desc":"Gets the Inventory that the ItemStack is being put into","ret":"Inventory that the ItemStack is being put into"},{"name":"getInitiator","params":[],"desc":"Gets the Inventory that initiated the transfer. This will always be\neither the destination or source Inventory.","ret":"Inventory that initiated the transfer"}],"desc":"Called when some entity or block (e.g. hopper) tries to move items directly\nfrom one inventory to another.\n<p>\nWhen this event is called, the initiator may already have removed the item\nfrom the source inventory and is ready to move it into the destination\ninventory.\n<p>\nIf this event is cancelled, the items will be returned to the source\ninventory, if needed.\n<p>\nIf this event is not cancelled, the initiator will try to put the ItemStack\ninto the destination inventory. If this is not possible and the ItemStack\nhas not been modified, the source inventory slot will be restored to its\nformer state. Otherwise any additional items will be discarded."},{"FQCN":"org.bukkit.event.inventory.InventoryInteractEvent","methods":[{"name":"getWhoClicked","params":[],"desc":"Gets the player who performed the click.","ret":"The clicking player."},{"name":"setResult","params":[{"name":"newResult","type":"Result","desc":"the new {@link org.bukkit.event.Event.Result} for this event"}],"desc":"Sets the result of this event. This will change whether or not this\nevent is considered cancelled.","ret":""},{"name":"getResult","params":[],"desc":"Gets the {@link org.bukkit.event.Event.Result} of this event. The Result describes the\nbehavior that will be applied to the inventory in relation to this\nevent.","ret":"the Result of this event."},{"name":"isCancelled","params":[],"desc":"Gets whether or not this event is cancelled. This is based off of the\nResult value returned by {@link #getResult()}.  Result.ALLOW and\nResult.DEFAULT will result in a returned value of false, but\nResult.DENY will result in a returned value of true.\n<p>\n{@inheritDoc}","ret":"whether the event is cancelled"},{"name":"setCancelled","params":[{"name":"toCancel","type":"boolean","desc":"result becomes DENY if true, ALLOW if false"}],"desc":"Proxy method to {@link #setResult(org.bukkit.event.Event.Result)} for the Cancellable\ninterface. {@link #setResult(org.bukkit.event.Event.Result)} is preferred, as it allows\nyou to specify the Result beyond Result.DENY and Result.ALLOW.\n<p>\n{@inheritDoc}","ret":""}],"desc":"An abstract base class for events that describe an interaction between a\nHumanEntity and the contents of an Inventory."},{"FQCN":"org.bukkit.event.inventory.InventoryAction","methods":[],"desc":"An estimation of what the result will be."},{"FQCN":"org.bukkit.event.inventory.InventoryDragEvent","methods":[{"name":"getNewItems","params":[],"desc":"Gets all items to be added to the inventory in this drag.","ret":"map from raw slot id to new ItemStack"},{"name":"getRawSlots","params":[],"desc":"Gets the raw slot ids to be changed in this drag.","ret":"list of raw slot ids, suitable for getView().getItem(int)"},{"name":"getInventorySlots","params":[],"desc":"Gets the slots to be changed in this drag.","ret":"list of converted slot ids, suitable for {@link\n    org.bukkit.inventory.Inventory#getItem(int)}."},{"name":"getCursor","params":[],"desc":"Gets the result cursor after the drag is done. The returned value is\nmutable.","ret":"the result cursor"},{"name":"setCursor","params":[{"name":"newCursor","type":"ItemStack","desc":"the new cursor ItemStack"}],"desc":"Sets the result cursor after the drag is done.\n<p>\nChanging this item stack changes the cursor item. Note that changing\nthe affected \"dragged\" slots does not change this ItemStack, nor does\nchanging this ItemStack affect the \"dragged\" slots.","ret":""},{"name":"getOldCursor","params":[],"desc":"Gets an ItemStack representing the cursor prior to any modifications\nas a result of this drag.","ret":"the original cursor"},{"name":"getType","params":[],"desc":"Gets the DragType that describes the behavior of ItemStacks placed\nafter this InventoryDragEvent.\n<p>\nThe ItemStacks and the raw slots that they're being applied to can be\nfound using {@link #getNewItems()}.","ret":"the DragType of this InventoryDragEvent"}],"desc":"This event is called when the player drags an item in their cursor across\nthe inventory. The ItemStack is distributed across the slots the\nHumanEntity dragged over. The method of distribution is described by the\nDragType returned by {@link #getType()}.\n<p>\nCanceling this event will result in none of the changes described in\n{@link #getNewItems()} being applied to the Inventory.\n<p>\nBecause InventoryDragEvent occurs within a modification of the Inventory,\nnot all Inventory related methods are safe to use.\n<p>\nThe following should never be invoked by an EventHandler for\nInventoryDragEvent using the HumanEntity or InventoryView associated with\nthis event.\n<ul>\n<li>{@link HumanEntity#closeInventory()}\n<li>{@link HumanEntity#openInventory(Inventory)}\n<li>{@link HumanEntity#openWorkbench(Location, boolean)}\n<li>{@link HumanEntity#openEnchanting(Location, boolean)}\n<li>{@link InventoryView#close()}\n</ul>\nTo invoke one of these methods, schedule a task using\n{@link BukkitScheduler#runTask(Plugin, Runnable)}, which will run the task\non the next tick.  Also be aware that this is not an exhaustive list, and\nother methods could potentially create issues as well.\n<p>\nAssuming the EntityHuman associated with this event is an instance of a\nPlayer, manipulating the MaxStackSize or contents of an Inventory will\nrequire an Invocation of {@link Player#updateInventory()}.\n<p>\nAny modifications to slots that are modified by the results of this\nInventoryDragEvent will be overwritten. To change these slots, this event\nshould be cancelled and the changes applied. Alternatively, scheduling a\ntask using {@link BukkitScheduler#runTask(Plugin, Runnable)}, which would\nexecute the task on the next tick, would work as well."},{"FQCN":"org.bukkit.event.raid.RaidEvent","methods":[{"name":"getRaid","params":[],"desc":"Returns the raid involved with this event.","ret":"Raid"}],"desc":"Represents events related to raids."},{"FQCN":"org.bukkit.event.raid.RaidTriggerEvent","methods":[{"name":"getPlayer","params":[],"desc":"Returns the player who triggered the raid.","ret":"triggering player"}],"desc":"Called when a {@link Raid} is triggered (e.g: a player with Bad Omen effect\nenters a village)."},{"FQCN":"org.bukkit.event.raid.RaidStopEvent","methods":[{"name":"getReason","params":[],"desc":"Returns the stop reason.","ret":"Reason"}],"desc":"Called when a {@link Raid} is stopped."},{"FQCN":"org.bukkit.event.raid.RaidFinishEvent","methods":[{"name":"getWinners","params":[],"desc":"Returns an immutable list contains all winners.\n<br>\n<b>Note: Players who are considered as heroes but were not online at the\nend would not be included in this list.</b>","ret":"winners"}],"desc":"This event is called when a {@link Raid} was complete with a clear result."},{"FQCN":"org.bukkit.event.raid.RaidSpawnWaveEvent","methods":[{"name":"getPatrolLeader","params":[],"desc":"Returns the patrol leader.","ret":"{@link Raider}"},{"name":"getRaiders","params":[],"desc":"Returns all {@link Raider} that spawned in this wave.","ret":"an immutable list of raiders"}],"desc":"Called when a raid wave spawns."},{"FQCN":"org.bukkit.event.weather.WeatherChangeEvent","methods":[{"name":"toWeatherState","params":[],"desc":"Gets the state of weather that the world is being set to","ret":"true if the weather is being set to raining, false otherwise"},{"name":"getCause","params":[],"desc":"Gets the cause of the weather change.","ret":"the weather change cause"}],"desc":"Stores data for weather changing in a world"},{"FQCN":"org.bukkit.event.weather.WeatherEvent","methods":[{"name":"getWorld","params":[],"desc":"Returns the World where this event is occurring","ret":"World this event is occurring in"}],"desc":"Represents a Weather-related event"},{"FQCN":"org.bukkit.event.weather.ThunderChangeEvent","methods":[{"name":"toThunderState","params":[],"desc":"Gets the state of thunder that the world is being set to","ret":"true if the weather is being set to thundering, false otherwise"},{"name":"getCause","params":[],"desc":"Gets the cause of the weather change.","ret":"the weather change cause"}],"desc":"Stores data for thunder state changing in a world"},{"FQCN":"org.bukkit.event.weather.LightningStrikeEvent","methods":[{"name":"getLightning","params":[],"desc":"Gets the bolt which is striking the earth.","ret":"lightning entity"},{"name":"getCause","params":[],"desc":"Gets the cause of this lightning strike.","ret":"strike cause"}],"desc":"Stores data for lightning striking"},{"FQCN":"org.bukkit.event.command.UnknownCommandEvent","methods":[{"name":"getSender","params":[],"desc":"Gets the CommandSender or ConsoleCommandSender","ret":"Sender of the command"},{"name":"getCommandLine","params":[],"desc":"Gets the command that was sent","ret":"Command sent"},{"name":"getMessage","params":[],"desc":"Gets message that will be returned","ret":"Unknown command message"},{"name":"setMessage","params":[{"name":"message","type":"String","desc":"the message to be returned, or {@code null}"}],"desc":"Sets message that will be returned\n<p>\nSet to {@code null} to avoid any message being sent","ret":""},{"name":"message","params":[],"desc":"Gets message that will be returned","ret":"Unknown command message"},{"name":"message","params":[{"name":"message","type":"Component","desc":"the message to be returned, or {@code null}"}],"desc":"Sets message that will be returned\n<p>\nSet to {@code null} to avoid any message being sent","ret":""}],"desc":"Thrown when a player executes a command that is not defined"},{"FQCN":"org.bukkit.event.Listener","methods":[],"desc":"Simple interface for tagging all EventListeners"},{"FQCN":"org.bukkit.event.hanging.HangingBreakByEntityEvent","methods":[{"name":"getRemover","params":[],"desc":"Gets the entity that removed the hanging entity.","ret":"the entity that removed the hanging entity"}],"desc":"Triggered when a hanging entity is removed by an entity"},{"FQCN":"org.bukkit.event.hanging.HangingPlaceEvent","methods":[{"name":"getPlayer","params":[],"desc":"Returns the player placing the hanging entity","ret":"the player placing the hanging entity"},{"name":"getBlock","params":[],"desc":"Returns the block that the hanging entity was placed on","ret":"the block that the hanging entity was placed on"},{"name":"getBlockFace","params":[],"desc":"Returns the face of the block that the hanging entity was placed on","ret":"the face of the block that the hanging entity was placed on"},{"name":"getHand","params":[],"desc":"Returns the hand that was used to place the hanging entity, or null\nif a player did not place the hanging entity.","ret":"the hand"},{"name":"getItemStack","params":[],"desc":"Gets the item from which the hanging entity originated","ret":"the item from which the hanging entity originated"}],"desc":"Triggered when a hanging entity is created in the world"},{"FQCN":"org.bukkit.event.hanging.HangingBreakEvent","methods":[{"name":"getCause","params":[],"desc":"Gets the cause for the hanging entity's removal","ret":"the RemoveCause for the hanging entity's removal"}],"desc":"Triggered when a hanging entity is removed"},{"FQCN":"org.bukkit.event.hanging.HangingEvent","methods":[{"name":"getEntity","params":[],"desc":"Gets the hanging entity involved in this event.","ret":"the hanging entity"}],"desc":"Represents a hanging entity-related event."},{"FQCN":"org.bukkit.event.EventPriority","methods":[],"desc":"Represents an event's priority in execution.\n<p>\nListeners with lower priority are called first\nwill listeners with higher priority are called last.\n<p>\nListeners are called in following order:\n{@link #LOWEST} -> {@link #LOW} -> {@link #NORMAL} -> {@link #HIGH} -> {@link #HIGHEST} -> {@link #MONITOR}"},{"FQCN":"org.bukkit.event.block.BlockDamageAbortEvent","methods":[{"name":"getPlayer","params":[],"desc":"Gets the player that stopped damaging the block involved in this event.","ret":"The player that stopped damaging the block"},{"name":"getItemInHand","params":[],"desc":"Gets the ItemStack for the item currently in the player's hand.","ret":"The ItemStack for the item currently in the player's hand"}],"desc":"Called when a player stops damaging a Block."},{"FQCN":"org.bukkit.event.block.BlockCanBuildEvent","methods":[{"name":"getHand","params":[],"desc":"Gets the hand the player will use to place the block","ret":"the EquipmentSlot representing the players hand."},{"name":"isBuildable","params":[],"desc":"Gets whether or not the block can be built here.\n<p>\nBy default, returns Minecraft's answer on whether the block can be\nbuilt here or not.","ret":"boolean whether or not the block can be built"},{"name":"setBuildable","params":[{"name":"cancel","type":"boolean","desc":"true if you want to allow the block to be built here\n    despite Minecraft's default behaviour"}],"desc":"Sets whether the block can be built here or not.","ret":""},{"name":"getMaterial","params":[],"desc":"Gets the Material that we are trying to place.","ret":"The Material that we are trying to place"},{"name":"getBlockData","params":[],"desc":"Gets the BlockData that we are trying to place.","ret":"The BlockData that we are trying to place"},{"name":"getPlayer","params":[],"desc":"Gets the player who placed the block involved in this event.\n<br>\nMay be null for legacy calls of the event.","ret":"The Player who placed the block involved in this event"}],"desc":"Called when we try to place a block, to see if we can build it here or not.\n<p>\nNote:\n<ul>\n<li>The Block returned by getBlock() is the block we are trying to place\n    on, not the block we are trying to place.\n<li>If you want to figure out what is being placed, use {@link\n    #getMaterial()} instead.\n</ul>"},{"FQCN":"org.bukkit.event.block.BlockPistonRetractEvent","methods":[{"name":"getRetractLocation","params":[],"desc":"Gets the location where the possible moving block might be if the\nretracting piston is sticky.","ret":"The possible location of the possibly moving block."},{"name":"getBlocks","params":[],"desc":"Get an immutable list of the blocks which will be moved by the\nretracting.","ret":"Immutable list of the moved blocks."}],"desc":"Called when a piston retracts"},{"FQCN":"org.bukkit.event.block.SculkBloomEvent","methods":[{"name":"getCharge","params":[],"desc":"Returns the charge of the cursor, &lt; 1000 by default.","ret":"the charge of the cursor"},{"name":"setCharge","params":[{"name":"charge","type":"int","desc":"the charge of the cursor."}],"desc":"Sets the charge of the cursor.\n<p>\nIncreasing the charge of a cursor makes the cursor last longer, giving\nit more time to spread sculk blocks across a larger range.\n<p>\nTypically, charges should be set to the exp reward of a mob\n({@link EntityDeathEvent#getDroppedExp()}), which is usually\n3-5 for animals, and 5-10 for the average mob (up to 50 for\nwither skeletons). Roughly speaking, for each charge, 1 more\nsculk block will be placed.","ret":""}],"desc":"Represents an event triggered when a new cursor is created by a {@link SculkCatalyst}.\n<p>\n<strong>Cursor Definition:</strong>\nA cursor in this context is a dynamic marker or pointer generated by the\nSculkCatalyst. It occupies a block and spreads sculk as it moves. It is\nsimilar to entity, but it is not an entity. Cursors are ticked by the\ntile entity.\n<p>\n<strong>Triggers for Cursor Creation:</strong>\n<ul>\n  <li>An entity, when killed and drops experience, within an 8-block radius of a {@link SculkCatalyst}.</li>\n  <li>An explicit call from a plugin using {@link SculkCatalyst#bloom(Block, int)}.</li>\n</ul>\n\nThe result of {@link #getBlock()} is the location that the cursor is spawning at."},{"FQCN":"org.bukkit.event.block.BlockPlaceEvent","methods":[{"name":"getPlayer","params":[],"desc":"Gets the player who placed the block involved in this event.","ret":"The Player who placed the block involved in this event"},{"name":"getBlockPlaced","params":[],"desc":"Clarity method for getting the placed block. Not really needed except\nfor reasons of clarity.","ret":"The Block that was placed"},{"name":"getBlockReplacedState","params":[],"desc":"Gets the BlockState for the block which was replaced. Material type air\nmostly.","ret":"The BlockState for the block which was replaced."},{"name":"getBlockAgainst","params":[],"desc":"Gets the block that this block was placed against","ret":"Block the block that the new block was placed against"},{"name":"getItemInHand","params":[],"desc":"Gets the item in the player's hand when they placed the block.","ret":"The ItemStack for the item in the player's hand when they\n    placed the block"},{"name":"getHand","params":[],"desc":"Gets the hand which placed the block","ret":"Main or off-hand, depending on which hand was used to place the block"},{"name":"canBuild","params":[],"desc":"Gets the value whether the player would be allowed to build here.\nDefaults to false if the server was going to stop them (such as, the\nplayer is in Spawn). Note that this is an entirely different check\nthan BLOCK_CANBUILD, as this refers to a player, not universe-physics\nrule like cactus on dirt.","ret":"boolean whether the server would allow a player to build here"},{"name":"setBuild","params":[{"name":"canBuild","type":"boolean","desc":"true if you want the player to be able to build"}],"desc":"Sets the canBuild state of this event. Set to true if you want the\nplayer to be able to build.","ret":""}],"desc":"Called when a block is placed by a player.\n<p>\nIf a Block Place event is cancelled, the block will not be placed."},{"FQCN":"org.bukkit.event.block.BlockBreakEvent","methods":[{"name":"getPlayer","params":[],"desc":"Gets the Player that is breaking the block involved in this event.","ret":"The Player that is breaking the block involved in this event"},{"name":"setDropItems","params":[{"name":"dropItems","type":"boolean","desc":"Whether or not the block will attempt to drop items"}],"desc":"Sets whether or not the block will attempt to drop items as it normally\nwould.\n\nIf and only if this is false then {@link BlockDropItemEvent} will not be\ncalled after this event.","ret":""},{"name":"isDropItems","params":[],"desc":"Gets whether or not the block will attempt to drop items.\n\nIf and only if this is false then {@link BlockDropItemEvent} will not be\ncalled after this event.","ret":"Whether or not the block will attempt to drop items"}],"desc":"Called when a block is broken by a player.\n<p>\nIf you wish to have the block drop experience, you must set the experience\nvalue above 0. By default, experience will be set in the event if:\n<ol>\n<li>The player is not in creative or adventure mode\n<li>The player can loot the block (ie: does not destroy it completely, by\n    using the correct tool)\n<li>The player does not have silk touch\n<li>The block drops experience in vanilla Minecraft\n</ol>\n<p>\nNote:\nPlugins wanting to simulate a traditional block drop should set the block\nto air and utilize their own methods for determining what the default drop\nfor the block being broken is and what to do about it, if anything.\n<p>\nIf a Block Break event is cancelled, the block will not break and\nexperience will not drop."},{"FQCN":"org.bukkit.event.block.BlockIgniteEvent","methods":[{"name":"getCause","params":[],"desc":"Gets the cause of block ignite.","ret":"An IgniteCause value detailing the cause of block ignition"},{"name":"getPlayer","params":[],"desc":"Gets the player who ignited this block","ret":"The Player that placed/ignited the fire block, or null if not ignited by a Player."},{"name":"getIgnitingEntity","params":[],"desc":"Gets the entity who ignited this block","ret":"The Entity that placed/ignited the fire block, or null if not ignited by a Entity."},{"name":"getIgnitingBlock","params":[],"desc":"Gets the block which ignited this block","ret":"The Block that placed/ignited the fire block, or null if not ignited by a Block."}],"desc":"Called when a block is ignited. If you want to catch when a Player places\nfire, you need to use {@link BlockPlaceEvent}.\n<p>\nIf a Block Ignite event is cancelled, the block will not be ignited."},{"FQCN":"org.bukkit.event.block.BlockDispenseArmorEvent","methods":[{"name":"getTargetEntity","params":[],"desc":"Get the living entity on which the armor was dispensed.","ret":"the target entity"}],"desc":"Called when an equippable item is dispensed from a block and equipped on a\nnearby entity.\n<p>\nIf a Block Dispense Armor event is cancelled, the equipment will not be\nequipped on the target entity."},{"FQCN":"org.bukkit.event.block.BlockFertilizeEvent","methods":[{"name":"getPlayer","params":[],"desc":"Gets the player that triggered the fertilization.","ret":"triggering player, or null if not applicable"},{"name":"getBlocks","params":[],"desc":"Gets a list of all blocks changed by the fertilization.","ret":"list of all changed blocks"}],"desc":"Called with the block changes resulting from a player fertilizing a given\nblock with bonemeal. Will be called after the applicable\n{@link StructureGrowEvent}."},{"FQCN":"org.bukkit.event.block.BlockEvent","methods":[{"name":"getBlock","params":[],"desc":"Gets the block involved in this event.","ret":"The Block which block is involved in this event"}],"desc":"Represents a block related event."},{"FQCN":"org.bukkit.event.block.BlockSpreadEvent","methods":[{"name":"getSource","params":[],"desc":"Gets the source block involved in this event.","ret":"the Block for the source block involved in this event."}],"desc":"Called when a block spreads based on world conditions.\n<p>\nUse {@link BlockFormEvent} to catch blocks that \"randomly\" form instead of\nactually spread.\n<p>\nExamples:\n<ul>\n<li>Mushrooms spreading.\n<li>Fire spreading.\n</ul>\n<p>\nIf a Block Spread event is cancelled, the block will not spread."},{"FQCN":"org.bukkit.event.block.CampfireStartEvent","methods":[{"name":"getRecipe","params":[],"desc":"Gets the CampfireRecipe associated with this event.","ret":"the CampfireRecipe being cooked"},{"name":"getTotalCookTime","params":[],"desc":"Gets the total cook time associated with this event.","ret":"the total cook time"},{"name":"setTotalCookTime","params":[{"name":"cookTime","type":"int","desc":"the new total cook time"}],"desc":"Sets the total cook time for this event.","ret":""}],"desc":"Called when a Campfire starts to cook."},{"FQCN":"org.bukkit.event.block.EntityBlockFormEvent","methods":[{"name":"getEntity","params":[],"desc":"Get the entity that formed the block.","ret":"Entity involved in event"}],"desc":"Called when a block is formed by entities.\n<p>\nExamples:\n<ul>\n<li>Snow formed by a {@link org.bukkit.entity.Snowman}.\n<li>Frosted Ice formed by the Frost Walker enchantment.\n</ul>"},{"FQCN":"org.bukkit.event.block.SpongeAbsorbEvent","methods":[{"name":"getBlocks","params":[],"desc":"Get a list of all blocks to be removed by the sponge.\n<br>\nThis list is mutable and contains the blocks in their removed state, i.e.\nhaving a type of {@link Material#AIR}.","ret":"list of the to be removed blocks."}],"desc":"Called when a sponge absorbs water from the world.\n<br>\nThe world will be in its previous state, and {@link #getBlocks()} will\nrepresent the changes to be made to the world, if the event is not cancelled.\n<br>\nAs this is a physics based event it may be called multiple times for \"the\nsame\" changes."},{"FQCN":"org.bukkit.event.block.BlockGrowEvent","methods":[{"name":"getNewState","params":[],"desc":"Gets the state of the block where it will form or spread to.","ret":"The block state for this events block"}],"desc":"Called when a block grows naturally in the world.\n<p>\nExamples:\n<ul>\n<li>Wheat\n<li>Sugar Cane\n<li>Cactus\n<li>Watermelon\n<li>Pumpkin\n<li>Turtle Egg\n</ul>\n<p>\nIf a Block Grow event is cancelled, the block will not grow."},{"FQCN":"org.bukkit.event.block.TNTPrimeEvent","methods":[{"name":"getCause","params":[],"desc":"Get the cause of the TNT becoming primed.","ret":"the cause"},{"name":"getPrimingEntity","params":[],"desc":"Get the entity that caused the TNT to be primed.","ret":"the entity that caused the TNT to be primed, or null if it was\nnot caused by an entity."},{"name":"getPrimingBlock","params":[],"desc":"Get the block that caused the TNT to be primed.","ret":"the block that caused the TNT to be primed, or null if it was not\ncaused by a block."}],"desc":"Called when a block of TNT in the world become primed.\n<p>\nIf a TNT Prime event is cancelled, the block of TNT will not become primed."},{"FQCN":"org.bukkit.event.block.BrewingStartEvent","methods":[{"name":"getTotalBrewTime","params":[],"desc":"Gets the total brew time associated with this event.","ret":"the total brew time"},{"name":"setTotalBrewTime","params":[{"name":"brewTime","type":"int","desc":"the new total brew time"}],"desc":"Sets the total brew time for this event.","ret":""}],"desc":"Called when a brewing stand starts to brew."},{"FQCN":"org.bukkit.event.block.BellResonateEvent","methods":[{"name":"getResonatedEntities","params":[],"desc":"Get a mutable list of all {@link LivingEntity LivingEntities} to be\nhighlighted by the bell's resonating. This list can be added to or\nremoved from to change which entities are highlighted, and may be empty\nif no entities were resonated as a result of this event.\n<p>\nWhile the highlighted entities will change, the particles that display\nover a resonated entity and their colors will not. This is handled by the\nclient and cannot be controlled by the server.","ret":"a list of resonated entities"}],"desc":"Called when a bell resonated after being rung and highlights nearby raiders.\nA bell will only resonate if raiders are in the vicinity of the bell."},{"FQCN":"org.bukkit.event.block.InventoryBlockStartEvent","methods":[{"name":"getSource","params":[],"desc":"Gets the source ItemStack for this event.","ret":"the source ItemStack"}],"desc":"Used when:\n<ul>\n<li>A Furnace starts smelting {@link FurnaceStartSmeltEvent}</li>\n<li>A Brewing-Stand starts brewing {@link BrewingStartEvent}</li>\n<li>A Campfire starts cooking {@link CampfireStartEvent}</li>\n</ul>"},{"FQCN":"org.bukkit.event.block.BlockDropItemEvent","methods":[{"name":"getPlayer","params":[],"desc":"Gets the Player that is breaking the block involved in this event.","ret":"The Player that is breaking the block involved in this event"},{"name":"getBlockState","params":[],"desc":"Gets the BlockState of the block involved in this event before it was\nbroken.","ret":"The BlockState of the block involved in this event"},{"name":"getItems","params":[],"desc":"Gets list of the Item drops caused by the block break.\n\nThis list is mutable - removing an item from it will cause it to not\ndrop. Adding to the list is allowed.","ret":"The Item the block caused to drop"}],"desc":"Called after a block is broken by a player and potential drops are computed, even if said blocks loot table\ndoes not define any drops at the point the event is constructed.\n\nIf the block break is cancelled, this event won't be called.\n\nIf isDropItems in {@link org.bukkit.event.block.BlockBreakEvent} is set to false, this event won't be\ncalled.\n\nIf a block is broken and isDropItems is set to true, this event will be called even if the block does\nnot drop any items, for example glass broken by hand. In this case, #getItems() will be empty.\n\nThis event will also be called if the player breaks a multi block structure,\nfor example a torch on top of a stone. Both items will be included in the #getItems() list.\n\nThe Block is already broken as this event is called, so #getBlock() will be\nAIR in most cases. Use #getBlockState() for more Information about the broken\nblock."},{"FQCN":"org.bukkit.event.block.BlockReceiveGameEvent","methods":[{"name":"getEvent","params":[],"desc":"Get the underlying event.","ret":"the event"},{"name":"getEntity","params":[],"desc":"Get the entity which triggered this event, if present.","ret":"triggering entity or null"}],"desc":"Called when a Sculk sensor receives a game event and hence might activate.\n\nWill be called cancelled if the block's default behavior is to ignore the\nevent."},{"FQCN":"org.bukkit.event.block.FluidLevelChangeEvent","methods":[{"name":"getNewData","params":[],"desc":"Gets the new data of the changed block.","ret":"new data"},{"name":"setNewData","params":[{"name":"newData","type":"BlockData","desc":"the new data"}],"desc":"Sets the new data of the changed block. Must be of the same Material as\nthe old one.","ret":""}],"desc":"Called when the fluid level of a block changes due to changes in adjacent\nblocks."},{"FQCN":"org.bukkit.event.block.CauldronLevelChangeEvent","methods":[{"name":"getEntity","params":[],"desc":"Get entity which did this. May be null.","ret":"acting entity"},{"name":"getNewState","params":[],"desc":"Gets the new state of the cauldron.","ret":"The block state of the block that will be changed"},{"name":"getOldLevel","params":[],"desc":"Gets the old level of the cauldron.","ret":"old level"},{"name":"getNewLevel","params":[],"desc":"Gets the new level of the cauldron.","ret":"new level"},{"name":"setNewLevel","params":[{"name":"newLevel","type":"int","desc":"new level"}],"desc":"Sets the new level of the cauldron.","ret":""}],"desc":""},{"FQCN":"org.bukkit.event.block.BlockMultiPlaceEvent","methods":[{"name":"getReplacedBlockStates","params":[],"desc":"Gets a list of blockstates for all blocks which were replaced by the\nplacement of the new blocks. Most of these blocks will just have a\nMaterial type of AIR.","ret":"immutable list of replaced BlockStates"}],"desc":"Fired when a single block placement action of a player triggers the\ncreation of multiple blocks(e.g. placing a bed block). The block returned\nby {@link #getBlockPlaced()} and its related methods is the block where\nthe placed block would exist if the placement only affected a single\nblock."},{"FQCN":"org.bukkit.event.block.BlockDispenseEvent","methods":[{"name":"getItem","params":[],"desc":"Gets the item that is being dispensed. Modifying the returned item will\nhave no effect, you must use {@link\n#setItem(org.bukkit.inventory.ItemStack)} instead.","ret":"An ItemStack for the item being dispensed"},{"name":"setItem","params":[{"name":"item","type":"ItemStack","desc":"the item being dispensed"}],"desc":"Sets the item being dispensed.","ret":""},{"name":"getVelocity","params":[],"desc":"Gets the velocity in meters per tick.\n<p>\nNote: Modifying the returned Vector will not change the velocity, you\nmust use {@link #setVelocity(org.bukkit.util.Vector)} instead.","ret":"A Vector for the dispensed item's velocity"},{"name":"setVelocity","params":[{"name":"vel","type":"Vector","desc":"the velocity of the item being dispensed"}],"desc":"Sets the velocity of the item being dispensed in meters per tick.","ret":""}],"desc":"Called when an item is dispensed from a block.\n<p>\nIf a Block Dispense event is cancelled, the block will not dispense the\nitem."},{"FQCN":"org.bukkit.event.block.NotePlayEvent","methods":[{"name":"getInstrument","params":[],"desc":"Gets the {@link Instrument} to be used.","ret":"the Instrument"},{"name":"getNote","params":[],"desc":"Gets the {@link Note} to be played.","ret":"the Note"},{"name":"setInstrument","params":[{"name":"instrument","type":"Instrument","desc":"the Instrument. Has no effect if null."}],"desc":"Overrides the {@link Instrument} to be used.\n<p>\nOnly works when the note block isn't under a player head.\nFor this specific case the 'note_block_sound' property of the\nplayer head state takes the priority.","ret":""},{"name":"setNote","params":[{"name":"note","type":"Note","desc":"the Note. Has no effect if null."}],"desc":"Overrides the {@link Note} to be played.","ret":""}],"desc":"Called when a note block is being played through player interaction or a\nredstone current."},{"FQCN":"org.bukkit.event.block.SignChangeEvent","methods":[{"name":"getPlayer","params":[],"desc":"Gets the player changing the sign involved in this event.","ret":"the Player involved in this event"},{"name":"lines","params":[],"desc":"Gets all of the lines of text from the sign involved in this event.","ret":"the String array for the sign's lines new text"},{"name":"line","params":[{"name":"index","type":"int","desc":"index of the line to get"}],"desc":"Gets a single line of text from the sign involved in this event.","ret":"the String containing the line of text associated with the\n    provided index"},{"name":"line","params":[{"name":"index","type":"int","desc":"index of the line to set"},{"name":"line","type":"net.kyori.adventure.text.Component","desc":"text to set"}],"desc":"Sets a single line for the sign involved in this event","ret":""},{"name":"getLines","params":[],"desc":"Gets all of the lines of text from the sign involved in this event.","ret":"the String array for the sign's lines new text"},{"name":"getLine","params":[{"name":"index","type":"int","desc":"index of the line to get"}],"desc":"Gets a single line of text from the sign involved in this event.","ret":"the String containing the line of text associated with the\n    provided index"},{"name":"setLine","params":[{"name":"index","type":"int","desc":"index of the line to set"},{"name":"line","type":"String","desc":"text to set"}],"desc":"Sets a single line for the sign involved in this event","ret":""},{"name":"getSide","params":[],"desc":"Returns which side is changed.","ret":"the affected side of the sign"}],"desc":"Called when a sign is changed by a player.\n<p>\nIf a Sign Change event is cancelled, the sign will not be changed."},{"FQCN":"org.bukkit.event.block.LeavesDecayEvent","methods":[],"desc":"Called when leaves are decaying naturally.\n<p>\nIf a Leaves Decay event is cancelled, the leaves will not decay."},{"FQCN":"org.bukkit.event.block.Action","methods":[{"name":"isLeftClick","params":[],"desc":"Gets whether this action is a result of a left click.","ret":"Whether it's a left click"},{"name":"isRightClick","params":[],"desc":"Gets whether this action is a result of a right click.","ret":"Whether it's a right click"}],"desc":""},{"FQCN":"org.bukkit.event.block.BlockCookEvent","methods":[{"name":"getSource","params":[],"desc":"Gets the smelted ItemStack for this event","ret":"smelting source ItemStack"},{"name":"getResult","params":[],"desc":"Gets the resultant ItemStack for this event","ret":"smelting result ItemStack"},{"name":"setResult","params":[{"name":"result","type":"ItemStack","desc":"new result ItemStack"}],"desc":"Sets the resultant ItemStack for this event","ret":""},{"name":"getRecipe","params":[],"desc":"Gets the cooking recipe associated with this event.","ret":"the recipe"}],"desc":"Called when an ItemStack is successfully cooked in a block."},{"FQCN":"org.bukkit.event.block.BlockExpEvent","methods":[{"name":"getExpToDrop","params":[],"desc":"Get the experience dropped by the block after the event has processed","ret":"The experience to drop"},{"name":"setExpToDrop","params":[{"name":"exp","type":"int","desc":"1 or higher to drop experience, else nothing will drop"}],"desc":"Set the amount of experience dropped by the block after the event has\nprocessed","ret":""}],"desc":"An event that's called when a block yields experience."},{"FQCN":"org.bukkit.event.block.BlockBurnEvent","methods":[{"name":"getIgnitingBlock","params":[],"desc":"Gets the block which ignited this block.","ret":"The Block that ignited and burned this block, or null if no\nsource block exists"}],"desc":"Called when a block is destroyed as a result of being burnt by fire.\n<p>\nIf a Block Burn event is cancelled, the block will not be destroyed as a\nresult of being burnt by fire."},{"FQCN":"org.bukkit.event.block.BlockFadeEvent","methods":[{"name":"getNewState","params":[],"desc":"Gets the state of the block that will be fading, melting or\ndisappearing.","ret":"The block state of the block that will be fading, melting or\n    disappearing"}],"desc":"Called when a block fades, melts or disappears based on world conditions\n<p>\nExamples:\n<ul>\n<li>Snow melting due to being near a light source.\n<li>Ice melting due to being near a light source.\n<li>Fire burning out after time, without destroying fuel block.\n<li>Coral fading to dead coral due to lack of water</li>\n<li>Turtle Egg bursting when a turtle hatches</li>\n</ul>\n<p>\nIf a Block Fade event is cancelled, the block will not fade, melt or\ndisappear."},{"FQCN":"org.bukkit.event.block.BlockFormEvent","methods":[],"desc":"Called when a block is formed or spreads based on world conditions.\n<p>\nUse {@link BlockSpreadEvent} to catch blocks that actually spread and don't\njust \"randomly\" form.\n<p>\nExamples:\n<ul>\n<li>Snow forming due to a snow storm.\n<li>Ice forming in a snowy Biome like Taiga or Tundra.\n<li> Obsidian / Cobblestone forming due to contact with water.\n<li> Concrete forming due to mixing of concrete powder and water.\n</ul>\n<p>\nIf a Block Form event is cancelled, the block will not be formed."},{"FQCN":"org.bukkit.event.block.BlockPistonEvent","methods":[{"name":"isSticky","params":[],"desc":"Returns true if the Piston in the event is sticky.","ret":"stickiness of the piston"},{"name":"getDirection","params":[],"desc":"Return the direction in which the piston will operate.","ret":"direction of the piston"}],"desc":"Called when a piston block is triggered"},{"FQCN":"org.bukkit.event.block.BlockPistonExtendEvent","methods":[{"name":"getLength","params":[],"desc":"Get the amount of blocks which will be moved while extending.","ret":"the amount of moving blocks"},{"name":"getBlocks","params":[],"desc":"Get an immutable list of the blocks which will be moved by the\nextending.","ret":"Immutable list of the moved blocks."}],"desc":"Called when a piston extends"},{"FQCN":"org.bukkit.event.block.MoistureChangeEvent","methods":[{"name":"getNewState","params":[],"desc":"Gets the new state of the affected block.","ret":"new block state"}],"desc":"Called when the moisture level of a soil block changes."},{"FQCN":"org.bukkit.event.block.BlockFromToEvent","methods":[{"name":"getFace","params":[],"desc":"Gets the BlockFace that the block is moving to.","ret":"The BlockFace that the block is moving to"},{"name":"getToBlock","params":[],"desc":"Convenience method for getting the faced Block.","ret":"The faced Block"}],"desc":"Represents events with a source block and a destination block, currently\nonly applies to liquid (lava and water) and teleporting dragon eggs.\n<p>\nIf a Block From To event is cancelled, the block will not move (the liquid\nwill not flow)."},{"FQCN":"org.bukkit.event.block.BlockRedstoneEvent","methods":[{"name":"getOldCurrent","params":[],"desc":"Gets the old current of this block","ret":"The previous current"},{"name":"getNewCurrent","params":[],"desc":"Gets the new current of this block","ret":"The new current"},{"name":"setNewCurrent","params":[{"name":"newCurrent","type":"int","desc":"The new current to set"}],"desc":"Sets the new current of this block","ret":""}],"desc":"Called when a redstone current changes"},{"FQCN":"org.bukkit.event.block.BellRingEvent","methods":[{"name":"getDirection","params":[],"desc":"Get the direction in which the bell was rung.","ret":"the direction"},{"name":"getEntity","params":[],"desc":"Get the {@link Entity} that rang the bell (if there was one).","ret":"the entity"}],"desc":"Called when a bell is being rung."},{"FQCN":"org.bukkit.event.block.BlockDamageEvent","methods":[{"name":"getPlayer","params":[],"desc":"Gets the player damaging the block involved in this event.","ret":"The player damaging the block involved in this event"},{"name":"getInstaBreak","params":[],"desc":"Gets if the block is set to instantly break when damaged by the player.","ret":"true if the block should instantly break when damaged by the\n    player"},{"name":"setInstaBreak","params":[{"name":"bool","type":"boolean","desc":"true if you want the block to instantly break when damaged\n    by the player"}],"desc":"Sets if the block should instantly break when damaged by the player.","ret":""},{"name":"getItemInHand","params":[],"desc":"Gets the ItemStack for the item currently in the player's hand.","ret":"The ItemStack for the item currently in the player's hand"},{"name":"getBlockFace","params":[],"desc":"Gets the BlockFace the player is interacting with.","ret":"The BlockFace clicked to damage the block"}],"desc":"Called when a block is damaged by a player.\n<p>\nIf a Block Damage event is cancelled, the block will not be damaged."},{"FQCN":"org.bukkit.event.block.BlockShearEntityEvent","methods":[{"name":"getEntity","params":[],"desc":"Gets the entity that was sheared.","ret":"the entity that was sheared."},{"name":"getTool","params":[],"desc":"Gets the item used to shear this sheep.","ret":"the item used to shear this sheep."},{"name":"getDrops","params":[],"desc":"Get an immutable list of drops for this shearing.","ret":"the shearing drops"},{"name":"setDrops","params":[{"name":"drops","type":"java.util.List<org.bukkit.inventory.ItemStack>","desc":"the shear drops"}],"desc":"Sets the drops for the shearing.","ret":""}],"desc":"Event fired when a dispenser shears a nearby sheep."},{"FQCN":"org.bukkit.event.block.BlockExplodeEvent","methods":[{"name":"getExplodedBlockState","params":[],"desc":"Get a capture of the block that directly caused\nthe explosion, like a bed or respawn anchor. This\nblock state is not placed so {@link org.bukkit.block.BlockState#isPlaced}\nwill be false.\n<p>\nCan be null if no block directly caused the explosion.","ret":"the exploded block state or null if not applicable"},{"name":"blockList","params":[],"desc":"Returns the list of blocks that would have been removed or were removed\nfrom the explosion event.","ret":"All blown-up blocks"},{"name":"getYield","params":[],"desc":"Returns the percentage of blocks to drop from this explosion","ret":"The yield."},{"name":"setYield","params":[{"name":"yield","type":"float","desc":"The new yield percentage"}],"desc":"Sets the percentage of blocks to drop from this explosion","ret":""}],"desc":"Called when a block explodes interacting with blocks. The\nevent isn't called if the {@link org.bukkit.GameRule#MOB_GRIEFING}\nis disabled as no block interaction will occur.\n<p>\nThe {@link Block} returned by this event is not necessarily\nthe block that caused the explosion, just the block at the location where\nthe explosion originated. See {@link #getExplodedBlockState()}"},{"FQCN":"org.bukkit.event.block.BlockPhysicsEvent","methods":[{"name":"getSourceBlock","params":[],"desc":"Gets the source block that triggered this event.\n\nNote: This will default to block if not set.","ret":"The source block"},{"name":"getChangedType","params":[],"desc":"Gets the type of block that changed, causing this event.\nThis is the type of {@link #getBlock()} at the time of the event.","ret":"Changed block's type"},{"name":"getChangedBlockData","params":[],"desc":"Gets the BlockData of the block that changed, causing this event.\nThis is the BlockData of {@link #getBlock()} at the time of the event.","ret":"Changed block's BlockData"}],"desc":"Thrown when a block physics check is called.\n<br>\nThis event is a high frequency event, it may be called thousands of times per\na second on a busy server. Plugins are advised to listen to the event with\ncaution and only perform lightweight checks when using it.\n<br>\nIn addition to this, cancelling the event is liable to leave the world in an\ninconsistent state. For example if you use the event to leave a block\nfloating in mid air when that block has a requirement to be attached to\nsomething, there is no guarantee that the floating block will persist across\nserver restarts or map upgrades.\n<br>\nPlugins should also note that where possible this event may only called for\nthe \"root\" block of physics updates in order to limit event spam. Physics\nupdates that cause other blocks to change their state may not result in an\nevent for each of those blocks (usually adjacent). If you are concerned about\nmonitoring these changes then you should check adjacent blocks yourself."},{"FQCN":"org.bukkit.event.player.PlayerQuitEvent","methods":[{"name":"quitMessage","params":[],"desc":"Gets the quit message to send to all online players","ret":"string quit message"},{"name":"quitMessage","params":[{"name":"quitMessage","type":"net.kyori.adventure.text.Component","desc":"quit message"}],"desc":"Sets the quit message to send to all online players","ret":""},{"name":"getQuitMessage","params":[],"desc":"Gets the quit message to send to all online players","ret":"string quit message"},{"name":"setQuitMessage","params":[{"name":"quitMessage","type":"String","desc":"quit message"}],"desc":"Sets the quit message to send to all online players","ret":""}],"desc":"Called when a player leaves a server"},{"FQCN":"org.bukkit.event.player.PlayerRespawnEvent","methods":[{"name":"getRespawnLocation","params":[],"desc":"Gets the current respawn location","ret":"Location current respawn location"},{"name":"setRespawnLocation","params":[{"name":"respawnLocation","type":"Location","desc":"new location for the respawn"}],"desc":"Sets the new respawn location","ret":""},{"name":"isBedSpawn","params":[],"desc":"Gets whether the respawn location is the player's bed.","ret":"true if the respawn location is the player's bed."},{"name":"isAnchorSpawn","params":[],"desc":"Gets whether the respawn location is the player's respawn anchor.","ret":"true if the respawn location is the player's respawn anchor."},{"name":"getRespawnReason","params":[],"desc":"Gets the reason this respawn event was called.","ret":"the reason the event was called."},{"name":"getRespawnFlags","params":[],"desc":"Get the set of flags that apply to this respawn.","ret":"an immutable set of the flags that apply to this respawn"}],"desc":"Called when a player respawns.\n<p>\nIf changing player state, see {@link com.destroystokyo.paper.event.player.PlayerPostRespawnEvent}\nbecause the player is \"reset\" between this event and that event and some changes won't persist."},{"FQCN":"org.bukkit.event.player.PlayerRecipeBookClickEvent","methods":[{"name":"getOriginalRecipe","params":[],"desc":"Gets the original recipe the player was trying to craft. <br>\nThis <em>will not</em> reflect any changes made with {@link setRecipe}.","ret":"the original recipe"},{"name":"getRecipe","params":[],"desc":"Gets the recipe the player is trying to craft. <br>\nThis <em>will</em> reflect changes made with {@link setRecipe}.","ret":"the recipe"},{"name":"setRecipe","params":[{"name":"recipe","type":"Recipe","desc":"the recipe to be used"}],"desc":"Set the recipe that will be used. <br>\nThe game will attempt to move the ingredients for this recipe into the\nappropriate slots.\n<p>\nIf the original recipe is a {@link CraftingRecipe} the provided recipe\nmust also be a {@link CraftingRecipe}, otherwise the provided recipe must\nbe of the same type as the original recipe.","ret":""},{"name":"isShiftClick","params":[],"desc":"If true the game will attempt to move the ingredients for as many copies\nof this recipe as possible into the appropriate slots, otherwise only 1\ncopy will be moved.","ret":"whether as many copies as possible should be moved"},{"name":"setShiftClick","params":[{"name":"shiftClick","type":"boolean","desc":"whether as many copies as possible should be moved"}],"desc":"Sets if the game will attempt to move the ingredients for as many copies\nof this recipe as possible into the appropriate slots.","ret":""}],"desc":"Called when a player clicks a recipe in the recipe book."},{"FQCN":"org.bukkit.event.player.PlayerBedEnterEvent","methods":[{"name":"getBedEnterResult","params":[],"desc":"This describes the default outcome of this event.","ret":"the bed enter result representing the default outcome of this event"},{"name":"useBed","params":[],"desc":"This controls the action to take with the bed that was clicked on.\n<p>\nIn case of {@link org.bukkit.event.Event.Result#DEFAULT}, the default outcome is described by\n{@link #getBedEnterResult()}.","ret":"the action to take with the interacted bed"},{"name":"setUseBed","params":[{"name":"useBed","type":"Result","desc":"the action to take with the interacted bed"}],"desc":"Sets the action to take with the interacted bed.\n<p>\n{@link org.bukkit.event.Event.Result#ALLOW} will result in the player sleeping, regardless of\nthe default outcome described by {@link #getBedEnterResult()}.\n<br>\n{@link org.bukkit.event.Event.Result#DENY} will prevent the player from sleeping. This has the\nsame effect as canceling the event via {@link #setCancelled(boolean)}.\n<br>\n{@link org.bukkit.event.Event.Result#DEFAULT} will result in the outcome described by\n{@link #getBedEnterResult()}.","ret":""},{"name":"isCancelled","params":[],"desc":"Gets the cancellation state of this event. Set to true if you want to\nprevent the player from sleeping.\n<p>\nCanceling the event has the same effect as setting {@link #useBed()} to\n{@link org.bukkit.event.Event.Result#DENY}.\n<p>\nFor backwards compatibility reasons this also returns true if\n{@link #useBed()} is {@link org.bukkit.event.Event.Result#DEFAULT} and the\n{@link #getBedEnterResult() default action} is to prevent bed entering.","ret":"boolean cancellation state"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":"true if you wish to cancel this event"}],"desc":"Sets the cancellation state of this event. A canceled event will not be\nexecuted in the server, but will still pass to other plugins.\n<p>\nCanceling this event will prevent use of the bed.","ret":""},{"name":"getBed","params":[],"desc":"Returns the bed block involved in this event.","ret":"the bed block involved in this event"}],"desc":"This event is fired when the player is almost about to enter the bed."},{"FQCN":"org.bukkit.event.player.PlayerSignOpenEvent","methods":[{"name":"getSign","params":[],"desc":"Gets the sign that was opened.","ret":"opened sign"},{"name":"getSide","params":[],"desc":"Gets side of the sign opened.","ret":"side of sign opened"},{"name":"getCause","params":[],"desc":"Gets the cause of the sign open.","ret":"sign open cause"}],"desc":"This event is fired when a sign is opened by the player."},{"FQCN":"org.bukkit.event.player.PlayerChatTabCompleteEvent","methods":[{"name":"getChatMessage","params":[],"desc":"Gets the chat message being tab-completed.","ret":"the chat message"},{"name":"getLastToken","params":[],"desc":"Gets the last 'token' of the message being tab-completed.\n<p>\nThe token is the substring starting with the character after the last\nspace in the message.","ret":"The last token for the chat message"},{"name":"getTabCompletions","params":[],"desc":"This is the collection of completions for this event.","ret":"the current completions"}],"desc":"Called when a player attempts to tab-complete a chat message."},{"FQCN":"org.bukkit.event.player.AsyncPlayerChatPreviewEvent","methods":[],"desc":"Used to format chat for chat preview. If this event is used, then the result\nof the corresponding {@link AsyncPlayerChatEvent} <b>must</b> be formatted in\nthe same way."},{"FQCN":"org.bukkit.event.player.PlayerItemConsumeEvent","methods":[{"name":"getItem","params":[],"desc":"Gets the item that is being consumed. Modifying the returned item will\nhave no effect, you must use {@link\n#setItem(org.bukkit.inventory.ItemStack)} instead.","ret":"an ItemStack for the item being consumed"},{"name":"setItem","params":[{"name":"item","type":"ItemStack","desc":"the item being consumed"}],"desc":"Set the item being consumed","ret":""},{"name":"getHand","params":[],"desc":"Get the hand used to consume the item.","ret":"the hand"},{"name":"getReplacement","params":[],"desc":"Return the custom item stack that will replace the consumed item, or null if no\ncustom replacement has been set (which means the default replacement will be used).","ret":"The custom item stack that will replace the consumed item or null"},{"name":"setReplacement","params":[{"name":"replacement","type":"ItemStack","desc":"Replacement item to set, null to clear any custom stack and use default"}],"desc":"Set a custom item stack to replace the consumed item. Pass null to clear any custom\nstack that has been set and use the default replacement.","ret":""}],"desc":"This event will fire when a player is finishing consuming an item (food,\npotion, milk bucket).\n<br>\nIf the ItemStack is modified the server will use the effects of the new\nitem and not remove the original one from the player's inventory.\n<br>\nIf the event is cancelled the effect will not be applied and the item will\nnot be removed from the player's inventory."},{"FQCN":"org.bukkit.event.player.PlayerHarvestBlockEvent","methods":[{"name":"getHarvestedBlock","params":[],"desc":"Gets the block that is being harvested.","ret":"The block that is being harvested"},{"name":"getHand","params":[],"desc":"Get the hand used to harvest the block.","ret":"the hand"},{"name":"getItemsHarvested","params":[],"desc":"Gets a list of items that are being harvested from this block.","ret":"A list of items that are being harvested from this block"}],"desc":"This event is called whenever a player harvests a block.\n<br>\nA 'harvest' is when a block drops an item (usually some sort of crop) and\nchanges state, but is not broken in order to drop the item.\n<br>\nThis event is not called for when a block is broken, to handle that, listen\nfor {@link org.bukkit.event.block.BlockBreakEvent} and\n{@link org.bukkit.event.block.BlockDropItemEvent}."},{"FQCN":"org.bukkit.event.player.PlayerPreLoginEvent","methods":[{"name":"getResult","params":[],"desc":"Gets the current result of the login, as an enum","ret":"Current Result of the login"},{"name":"setResult","params":[{"name":"result","type":"Result","desc":"New result to set"}],"desc":"Sets the new result of the login, as an enum","ret":""},{"name":"kickMessage","params":[],"desc":"Gets the current kick message that will be used if getResult() !=\nResult.ALLOWED","ret":"Current kick message"},{"name":"kickMessage","params":[{"name":"message","type":"net.kyori.adventure.text.Component","desc":"New kick message"}],"desc":"Sets the kick message to display if getResult() != Result.ALLOWED","ret":""},{"name":"disallow","params":[{"name":"result","type":"Result","desc":"New result for disallowing the player"},{"name":"message","type":"net.kyori.adventure.text.Component","desc":"Kick message to display to the user"}],"desc":"Disallows the player from logging in, with the given reason","ret":""},{"name":"getKickMessage","params":[],"desc":"Gets the current kick message that will be used if getResult() !=\nResult.ALLOWED","ret":"Current kick message"},{"name":"setKickMessage","params":[{"name":"message","type":"String","desc":"New kick message"}],"desc":"Sets the kick message to display if getResult() != Result.ALLOWED","ret":""},{"name":"allow","params":[],"desc":"Allows the player to log in","ret":""},{"name":"disallow","params":[{"name":"result","type":"Result","desc":"New result for disallowing the player"},{"name":"message","type":"String","desc":"Kick message to display to the user"}],"desc":"Disallows the player from logging in, with the given reason","ret":""},{"name":"getName","params":[],"desc":"Gets the player's name.","ret":"the player's name"},{"name":"getAddress","params":[],"desc":"Gets the player IP address.","ret":"The IP address"},{"name":"getUniqueId","params":[],"desc":"Gets the player's unique ID.","ret":"The unique ID"}],"desc":"Stores details for players attempting to log in\n<p>\nWhen this event is fired, the player's locale is not\navailable. Therefore, any translatable component will be\nrendered with the default locale, {@link java.util.Locale#US}.\n<p>\nConsider rendering any translatable yourself with {@link net.kyori.adventure.translation.GlobalTranslator#render}\nif the client's language is known."},{"FQCN":"org.bukkit.event.player.PlayerCommandPreprocessEvent","methods":[{"name":"getMessage","params":[],"desc":"Gets the command that the player is attempting to send.\n<p>\nAll commands begin with a special character; implementations do not\nconsider the first character when executing the content.","ret":"Message the player is attempting to send"},{"name":"setMessage","params":[{"name":"command","type":"String","desc":"New message that the player will send"}],"desc":"Sets the command that the player will send.\n<p>\nAll commands begin with a special character; implementations do not\nconsider the first character when executing the content.","ret":""},{"name":"setPlayer","params":[{"name":"player","type":"Player","desc":"New player which this event will execute as"}],"desc":"Sets the player that this command will be executed as.","ret":""},{"name":"getRecipients","params":[],"desc":"Gets a set of recipients that this chat message will be displayed to.\n<p>\nThe set returned is not guaranteed to be mutable and may auto-populate\non access. Any listener accessing the returned set should be aware that\nit may reduce performance for a lazy set implementation. Listeners\nshould be aware that modifying the list may throw {@link\nUnsupportedOperationException} if the event caller provides an\nunmodifiable set.","ret":"All Players who will see this chat message"}],"desc":"This event is called whenever a player runs a command (by placing a slash\nat the start of their message). It is called early in the command handling\nprocess, and modifications in this event (via {@link #setMessage(String)})\nwill be shown in the behavior.\n<p>\nMany plugins will have <b>no use for this event</b>, and you should\nattempt to avoid using it if it is not necessary.\n<p>\nSome examples of valid uses for this event are:\n<ul>\n<li>Logging executed commands to a separate file\n<li>Variable substitution. For example, replacing\n    <code>${nearbyPlayer}</code> with the name of the nearest other\n    player, or simulating the <code>@a</code> and <code>@p</code>\n    decorators used by Command Blocks in plugins that do not handle it.\n<li>Conditionally blocking commands belonging to other plugins. For\n    example, blocking the use of the <code>/home</code> command in a\n    combat arena.\n<li>Per-sender command aliases. For example, after a player runs the\n    command <code>/calias cr gamemode creative</code>, the next time they\n    run <code>/cr</code>, it gets replaced into\n    <code>/gamemode creative</code>. (Global command aliases should be\n    done by registering the alias.)\n</ul>\n<p>\nExamples of incorrect uses are:\n<ul>\n<li>Using this event to run command logic\n</ul>\n<p>\nIf the event is cancelled, processing of the command will halt.\n<p>\nThe state of whether or not there is a slash (<code>/</code>) at the\nbeginning of the message should be preserved. If a slash is added or\nremoved, unexpected behavior may result."},{"FQCN":"org.bukkit.event.player.PlayerCommandSendEvent","methods":[{"name":"getCommands","params":[],"desc":"Returns a mutable collection of all top level commands to be sent.\n<br>\nIt is not legal to add entries to this collection, only remove them.\nBehaviour of adding entries is undefined.","ret":"collection of all commands"}],"desc":"This event is called when the list of available server commands is sent to\nthe player.\n<br>\nCommands may be removed from display using this event, but implementations\nare not required to securely remove all traces of the command. If secure\nremoval of commands is required, then the command should be assigned a\npermission which is not granted to the player."},{"FQCN":"org.bukkit.event.player.PlayerInteractAtEntityEvent","methods":[],"desc":"Represents an event that is called when a player right clicks an entity that\nalso contains the location where the entity was clicked.\n<br>\nNote that the client may sometimes spuriously send this packet in addition to {@link PlayerInteractEntityEvent}.\nUsers are advised to listen to this (parent) class unless specifically required.\n<br>\nNote that interacting with Armor Stands fires this event only and not its parent and as such users are expressly required\nto listen to this event for that scenario."},{"FQCN":"org.bukkit.event.player.PlayerEditBookEvent","methods":[{"name":"getPreviousBookMeta","params":[],"desc":"Gets the book meta currently on the book.\n<p>\nNote: this is a copy of the book meta. You cannot use this object to\nchange the existing book meta.","ret":"the book meta currently on the book"},{"name":"getNewBookMeta","params":[],"desc":"Gets the book meta that the player is attempting to add to the book.\n<p>\nNote: this is a copy of the proposed new book meta. Use {@link\n#setNewBookMeta(BookMeta)} to change what will actually be added to the\nbook.","ret":"the book meta that the player is attempting to add"},{"name":"getSlot","params":[],"desc":"Gets the inventory slot number for the book item that triggered this\nevent.\n<p>\nThis is a slot number on the player's hotbar in the range 0-8, or -1 for\noff hand.","ret":"the inventory slot number that the book item occupies"},{"name":"setNewBookMeta","params":[{"name":"newBookMeta","type":"BookMeta","desc":"new book meta"}],"desc":"Sets the book meta that will actually be added to the book.","ret":""},{"name":"isSigning","params":[],"desc":"Gets whether or not the book is being signed. If a book is signed the\nMaterial changes from BOOK_AND_QUILL to WRITTEN_BOOK.","ret":"true if the book is being signed"},{"name":"setSigning","params":[{"name":"signing","type":"boolean","desc":"whether or not the book is being signed."}],"desc":"Sets whether or not the book is being signed. If a book is signed the\nMaterial changes from BOOK_AND_QUILL to WRITTEN_BOOK.","ret":""}],"desc":"Called when a player edits or signs a book and quill item. If the event is\ncancelled, no changes are made to the BookMeta"},{"FQCN":"org.bukkit.event.player.PlayerRiptideEvent","methods":[{"name":"getItem","params":[],"desc":"Gets the item containing the used enchantment.","ret":"held enchanted item"}],"desc":"This event is fired when the player activates the riptide enchantment, using\ntheir trident to propel them through the air.\n<br>\nN.B. the riptide action is currently performed client side, so manipulating\nthe player in this event may have undesired effects."},{"FQCN":"org.bukkit.event.player.PlayerExpCooldownChangeEvent","methods":[{"name":"getReason","params":[],"desc":"Gets the reason for the change.","ret":"The reason for the change"},{"name":"getNewCooldown","params":[],"desc":"Gets the new cooldown for the player.","ret":"The new cooldown"},{"name":"setNewCooldown","params":[{"name":"newCooldown","type":"int","desc":"The new cooldown to set"}],"desc":"Sets the new cooldown for the player.","ret":""}],"desc":"Called when a player's experience cooldown changes."},{"FQCN":"org.bukkit.event.player.PlayerGameModeChangeEvent","methods":[{"name":"getNewGameMode","params":[],"desc":"Gets the GameMode the player is switched to.","ret":"player's new GameMode"},{"name":"getCause","params":[],"desc":"Gets the cause of this gamemode change.","ret":"the cause"},{"name":"cancelMessage","params":[],"desc":"<b>Only valid if the cause of the gamemode change was directly due to a command.</b>.\nGets the message shown to the command user if the event is cancelled\nas a notification that a player's gamemode was not changed.\n<p>\nThis returns {@code null} if the gamemode change was due to a plugin, or a\nplayer joining the game with a gamemode not equal to the server default gamemode\nand {@code force-gamemode} is set to true.","ret":"the error message shown to the command user, null if not directly caused by a command"},{"name":"cancelMessage","params":[{"name":"message","type":"net.kyori.adventure.text.Component","desc":"the error message shown to the command user, null to show no message."}],"desc":"Sets the message shown to the command user if the event was cancelled.\n<b>The message is only shown to cancelled events that are directly called by a command\nnot by a plugin or a player joining with the wrong gamemode.</b>","ret":""}],"desc":"Called when the GameMode of the player is changed.\n<p>\n<b>NOTE:</b> When {@link #getCause()} is {@link Cause#DEFAULT_GAMEMODE},\nthe Player from {@link #getPlayer()} might not be fully online at\nthe time this event is fired. Plugins should use {@link Player#isOnline()}\nto check before changing player state."},{"FQCN":"org.bukkit.event.player.PlayerResourcePackStatusEvent","methods":[{"name":"getHash","params":[],"desc":"","ret":""},{"name":"getID","params":[],"desc":"Gets the unique ID of this pack.","ret":"unique resource pack ID."},{"name":"getStatus","params":[],"desc":"Gets the status of this pack.","ret":"the current status"}],"desc":"Called when a player takes action on a resource pack request."},{"FQCN":"org.bukkit.event.player.PlayerItemMendEvent","methods":[{"name":"getDurabilityToXpOperation","params":[],"desc":"Get the operation used to calculate xp used based on\nthe set repair amount. Used to calculate how much of\nan XP orb will be consumed by this mend operation.","ret":"the durability-to-xp operation"},{"name":"setDurabilityToXpOperation","params":[{"name":"durabilityToXpOp","type":"java.util.function.IntUnaryOperator","desc":"the durability-to-xp operation"}],"desc":"Sets the operation used to calculate xp used based on\nthe set repair amount. Used to calculate how much of\nan XP orb will be consumed by this mend operation.","ret":""},{"name":"getConsumedExperience","params":[],"desc":"Helper method to get the amount of experience that will be consumed.\nThis method just returns the result of inputting {@link #getRepairAmount()}\ninto the function {@link #getDurabilityToXpOperation()}.","ret":"the amount of xp that will be consumed"},{"name":"getItem","params":[],"desc":"Get the {@link ItemStack} to be repaired.\n\nThis is not necessarily the item the player is holding.","ret":"the item to be repaired"},{"name":"getSlot","params":[],"desc":"Get the {@link EquipmentSlot} in which the repaired {@link ItemStack}\nmay be found.","ret":"the repaired slot"},{"name":"getExperienceOrb","params":[],"desc":"Get the experience orb triggering the event.","ret":"the experience orb"},{"name":"getRepairAmount","params":[],"desc":"Get the amount the item is to be repaired.\n\nThe default value is twice the value of the consumed experience orb\nor the remaining damage left on the item, whichever is smaller.","ret":"how much damage will be repaired by the experience orb"},{"name":"setRepairAmount","params":[{"name":"amount","type":"int","desc":"how much damage will be repaired on the item"}],"desc":"Set the amount the item will be repaired.\n\nHalf of this value will be subtracted from the experience orb which initiated this event.","ret":""}],"desc":"Represents when a player has an item repaired via the Mending enchantment.\n<br>\nThis event is fired directly before the {@link PlayerExpChangeEvent}, and the\nresults of this event directly affect the {@link PlayerExpChangeEvent}."},{"FQCN":"org.bukkit.event.player.PlayerInteractEntityEvent","methods":[{"name":"getRightClicked","params":[],"desc":"Gets the entity that was right-clicked by the player.","ret":"entity right clicked by player"},{"name":"getHand","params":[],"desc":"The hand used to perform this interaction.","ret":"the hand used to interact"}],"desc":"Represents an event that is called when a player right clicks an entity."},{"FQCN":"org.bukkit.event.player.PlayerTakeLecternBookEvent","methods":[{"name":"getLectern","params":[],"desc":"Gets the lectern involved.","ret":"the Lectern"},{"name":"getBook","params":[],"desc":"Gets the current ItemStack on the lectern.","ret":"the ItemStack on the Lectern"}],"desc":"This event is called when a player clicks the button to take a book of a\nLectern. If this event is cancelled the book remains on the lectern."},{"FQCN":"org.bukkit.event.player.PlayerEvent","methods":[{"name":"getPlayer","params":[],"desc":"Returns the player involved in this event","ret":"Player who is involved in this event"}],"desc":"Represents a player related event"},{"FQCN":"org.bukkit.event.player.PlayerDropItemEvent","methods":[{"name":"getItemDrop","params":[],"desc":"Gets the ItemDrop created by the player","ret":"ItemDrop created by the player"}],"desc":"Thrown when a player drops an item from their inventory"},{"FQCN":"org.bukkit.event.player.PlayerExpChangeEvent","methods":[{"name":"getSource","params":[],"desc":"Get the source that provided the experience.","ret":"The source of the experience"},{"name":"getAmount","params":[],"desc":"Get the amount of experience the player will receive","ret":"The amount of experience"},{"name":"setAmount","params":[{"name":"amount","type":"int","desc":"The amount of experience to set"}],"desc":"Set the amount of experience the player will receive","ret":""}],"desc":"Called when a players experience changes naturally"},{"FQCN":"org.bukkit.event.player.PlayerRecipeBookSettingsChangeEvent","methods":[{"name":"getRecipeBookType","params":[],"desc":"Gets the type of recipe book the player is changing the settings for.","ret":"the type of recipe book"},{"name":"isOpen","params":[],"desc":"Checks if the recipe book is being opened or closed.","ret":"true if opening"},{"name":"isFiltering","params":[],"desc":"Checks if the recipe book filter is being enabled or disabled.","ret":"true if enabling"}],"desc":"Called when a player changes recipe book settings."},{"FQCN":"org.bukkit.event.player.AsyncPlayerChatEvent","methods":[{"name":"getMessage","params":[],"desc":"Gets the message that the player is attempting to send. This message\nwill be used with {@link #getFormat()}.","ret":"Message the player is attempting to send"},{"name":"setMessage","params":[{"name":"message","type":"String","desc":"New message that the player will send"}],"desc":"Sets the message that the player will send. This message will be used\nwith {@link #getFormat()}.","ret":""},{"name":"getFormat","params":[],"desc":"Gets the format to use to display this chat message.\n<p>\nWhen this event finishes execution, the first format parameter is the\n{@link Player#getDisplayName()} and the second parameter is {@link\n#getMessage()}","ret":"{@link String#format(String, Object...)} compatible format\n    string"},{"name":"setFormat","params":[{"name":"format","type":"String","desc":"{@link String#format(String, Object...)} compatible\n    format string"}],"desc":"Sets the format to use to display this chat message.\n<p>\nWhen this event finishes execution, the first format parameter is the\n{@link Player#getDisplayName()} and the second parameter is {@link\n#getMessage()}","ret":""},{"name":"getRecipients","params":[],"desc":"Gets a set of recipients that this chat message will be displayed to.\n<p>\nThe set returned is not guaranteed to be mutable and may auto-populate\non access. Any listener accessing the returned set should be aware that\nit may reduce performance for a lazy set implementation.\n<p>\nListeners should be aware that modifying the list may throw {@link\nUnsupportedOperationException} if the event caller provides an\nunmodifiable set.","ret":"All Players who will see this chat message"}],"desc":"This event will sometimes fire synchronously, depending on how it was\ntriggered.\n<p>\nThe constructor provides a boolean to indicate if the event was fired\nsynchronously or asynchronously. When asynchronous, this event can be\ncalled from any thread, sans the main thread, and has limited access to the\nAPI.\n<p>\nIf a player is the direct cause of this event by an incoming packet, this\nevent will be asynchronous. If a plugin triggers this event by compelling a\nplayer to chat, this event will be synchronous.\n<p>\nCare should be taken to check {@link #isAsynchronous()} and treat the event\nappropriately."},{"FQCN":"org.bukkit.event.player.PlayerLevelChangeEvent","methods":[{"name":"getOldLevel","params":[],"desc":"Gets the old level of the player","ret":"The old level of the player"},{"name":"getNewLevel","params":[],"desc":"Gets the new level of the player","ret":"The new (current) level of the player"}],"desc":"Called when a players level changes"},{"FQCN":"org.bukkit.event.player.PlayerRegisterChannelEvent","methods":[],"desc":"This is called immediately after a player registers for a plugin channel."},{"FQCN":"org.bukkit.event.player.PlayerPickupArrowEvent","methods":[{"name":"getArrow","params":[],"desc":"Get the arrow being picked up by the player","ret":"The arrow being picked up"}],"desc":"Thrown when a player picks up an arrow from the ground."},{"FQCN":"org.bukkit.event.player.PlayerJoinEvent","methods":[{"name":"joinMessage","params":[],"desc":"Gets the join message to send to all online players","ret":"string join message. Can be null"},{"name":"joinMessage","params":[{"name":"joinMessage","type":"net.kyori.adventure.text.Component","desc":"join message. If null, no message will be sent"}],"desc":"Sets the join message to send to all online players","ret":""},{"name":"getJoinMessage","params":[],"desc":"Gets the join message to send to all online players","ret":"string join message. Can be null"},{"name":"setJoinMessage","params":[{"name":"joinMessage","type":"String","desc":"join message. If null, no message will be sent"}],"desc":"Sets the join message to send to all online players","ret":""}],"desc":"Called when a player joins a server"},{"FQCN":"org.bukkit.event.player.PlayerInteractEvent","methods":[{"name":"getAction","params":[],"desc":"Returns the action type","ret":"Action returns the type of interaction"},{"name":"isCancelled","params":[],"desc":"Gets the cancellation state of this event. Set to true if you want to\nprevent buckets from placing water and so forth","ret":"boolean cancellation state"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":"true if you wish to cancel this event"}],"desc":"Sets the cancellation state of this event. A canceled event will not be\nexecuted in the server, but will still pass to other plugins\n<p>\nCanceling this event will prevent use of food (player won't lose the\nfood item), prevent bows/snowballs/eggs from firing, etc. (player won't\nlose the ammo)","ret":""},{"name":"getItem","params":[],"desc":"Returns the item in hand represented by this event","ret":"ItemStack the item used"},{"name":"getMaterial","params":[],"desc":"Convenience method. Returns the material of the item represented by\nthis event","ret":"Material the material of the item used"},{"name":"hasBlock","params":[],"desc":"Check if this event involved a block","ret":"boolean true if it did"},{"name":"hasItem","params":[],"desc":"Check if this event involved an item","ret":"boolean true if it did"},{"name":"isBlockInHand","params":[],"desc":"Convenience method to inform the user whether this was a block\nplacement event.","ret":"boolean true if the item in hand was a block"},{"name":"getClickedBlock","params":[],"desc":"Returns the clicked block","ret":"Block returns the block clicked with this item."},{"name":"getBlockFace","params":[],"desc":"Returns the face of the block that was clicked","ret":"BlockFace returns the face of the block that was clicked"},{"name":"useInteractedBlock","params":[],"desc":"This controls the action to take with the block (if any) that was\nclicked on. This event gets processed for all blocks, but most don't\nhave a default action","ret":"the action to take with the interacted block"},{"name":"setUseInteractedBlock","params":[{"name":"useInteractedBlock","type":"Result","desc":"the action to take with the interacted block"}],"desc":"","ret":""},{"name":"useItemInHand","params":[],"desc":"This controls the action to take with the item the player is holding.\nThis includes both blocks and items (such as flint and steel or\nrecords). When this is set to default, it will be allowed if no action\nis taken on the interacted block.","ret":"the action to take with the item in hand"},{"name":"setUseItemInHand","params":[{"name":"useItemInHand","type":"Result","desc":"the action to take with the item in hand"}],"desc":"","ret":""},{"name":"getHand","params":[],"desc":"The hand used to perform this interaction. May be null in the case of\n{@link Action#PHYSICAL}.","ret":"the hand used to interact. May be null."},{"name":"getClickedPosition","params":[],"desc":"Gets the exact position on the block the player interacted with, this will\nbe null outside of {@link Action#RIGHT_CLICK_BLOCK}.\n<p>\nAll vector components are between 0.0 and 1.0 inclusive.","ret":"the clicked position. May be null."},{"name":"getInteractionPoint","params":[],"desc":"The exact point at which the interaction occurred. May be null.","ret":"the exact interaction point. May be null."}],"desc":"Represents an event that is called when a player interacts with an object or\nair, potentially fired once for each hand. The hand can be determined using\n{@link #getHand()}.\n<p>\nThis event will fire as cancelled if the vanilla behavior is to do nothing\n(e.g interacting with air). For the purpose of avoiding doubt, this means\nthat the event will only be in the cancelled state if it is fired as a result\nof some prediction made by the server where no subsequent code will run,\nrather than when the subsequent interaction activity (e.g. placing a block in\nan illegal position ({@link BlockCanBuildEvent}) will fail."},{"FQCN":"org.bukkit.event.player.PlayerShowEntityEvent","methods":[{"name":"getEntity","params":[],"desc":"Gets the entity which has been shown to the player.","ret":"the shown entity"}],"desc":"Called when a hidden entity is shown to a player.\n<br>\nThis event is only called when the entity's visibility status is actually\nchanged.\n<br>\nThis event is called regardless of whether the entity was within tracking\nrange."},{"FQCN":"org.bukkit.event.player.PlayerArmorStandManipulateEvent","methods":[{"name":"getPlayerItem","params":[],"desc":"Returns the item held by the player.\n<p>\nIf this item is empty and the armor stand item is also empty, there will be no\ntransaction between the player and the armor stand. If the player's item is empty\nbut the armor stand item is not, the player's item will be placed on the armor\nstand. If both items are not empty, the items will be swapped.\n<p>\nIn the case that this event is cancelled, the original items will remain the same.","ret":"the item held by the player."},{"name":"getArmorStandItem","params":[],"desc":"Returns the item held by the armor stand.\n<p>\nIf this item is empty and the player's item is also empty, there will be no\ntransaction between the player and the armor stand. If the player's item is empty\nbut the armor stand item is not, then the player will obtain the armor stand item.\nIn the case that the player's item is not empty but the armor stand item is empty,\nthe player's item will be placed on the armor stand. If both items are not empty,\nthe items will be swapped.\n<p>\nIn the case that the event is cancelled the original items will remain the same.","ret":"the item held by the armor stand."},{"name":"getSlot","params":[],"desc":"Returns the raw item slot of the armor stand in this event.","ret":"the index of the item obtained or placed of the armor stand."},{"name":"getHand","params":[],"desc":"{@inheritDoc}\n<p>\nNote that this is not the hand of the armor stand that was changed, but rather\nthe hand used by the player to swap items with the armor stand.","ret":""}],"desc":"Called when a player interacts with an armor stand and will either swap, retrieve or\nplace an item."},{"FQCN":"org.bukkit.event.player.PlayerSpawnChangeEvent","methods":[{"name":"getCause","params":[],"desc":"Gets the cause of spawn change.","ret":"change cause"},{"name":"isForced","params":[],"desc":"Gets if the spawn position will be used regardless of bed obstruction\nrules.","ret":"true if is forced"},{"name":"setForced","params":[{"name":"forced","type":"boolean","desc":"true if forced"}],"desc":"Sets if the spawn position will be used regardless of bed obstruction\nrules.","ret":""},{"name":"getNewSpawn","params":[],"desc":"Gets the new spawn to be set.","ret":"new spawn location"},{"name":"setNewSpawn","params":[{"name":"newSpawn","type":"Location","desc":"new spawn location, with non-null world"}],"desc":"Sets the new spawn location.","ret":""}],"desc":"This event is fired when the spawn point of the player is changed."},{"FQCN":"org.bukkit.event.player.PlayerRecipeDiscoverEvent","methods":[{"name":"getRecipe","params":[],"desc":"Get the namespaced key of the discovered recipe.","ret":"the discovered recipe"}],"desc":"Called when a player discovers a new recipe in the recipe book."},{"FQCN":"org.bukkit.event.player.PlayerChatEvent","methods":[{"name":"getMessage","params":[],"desc":"Gets the message that the player is attempting to send","ret":"Message the player is attempting to send"},{"name":"setMessage","params":[{"name":"message","type":"String","desc":"New message that the player will send"}],"desc":"Sets the message that the player will send","ret":""},{"name":"setPlayer","params":[{"name":"player","type":"Player","desc":"New player which this event will execute as"}],"desc":"Sets the player that this message will display as, or command will be\nexecuted as","ret":""},{"name":"getFormat","params":[],"desc":"Gets the format to use to display this chat message","ret":"String.Format compatible format string"},{"name":"setFormat","params":[{"name":"format","type":"String","desc":"String.Format compatible format string"}],"desc":"Sets the format to use to display this chat message","ret":""},{"name":"getRecipients","params":[],"desc":"Gets a set of recipients that this chat message will be displayed to","ret":"All Players who will see this chat message"}],"desc":"Holds information for player chat and commands"},{"FQCN":"org.bukkit.event.player.PlayerChannelEvent","methods":[],"desc":"This event is called after a player registers or unregisters a new plugin\nchannel."},{"FQCN":"org.bukkit.event.player.PlayerTeleportEvent","methods":[{"name":"getCause","params":[],"desc":"Gets the cause of this teleportation event","ret":"Cause of the event"},{"name":"willDismountPlayer","params":[],"desc":"Gets if the player will be dismounted in this teleportation.","ret":"dismounted or not"},{"name":"getRelativeTeleportationFlags","params":[],"desc":"Returns the relative teleportation flags used in this teleportation.\nThis determines which axis the player will not lose their velocity in.","ret":"an immutable set of relative teleportation flags"}],"desc":"Holds information for player teleport events"},{"FQCN":"org.bukkit.event.player.PlayerBucketEntityEvent","methods":[{"name":"getEntity","params":[],"desc":"Gets the {@link Entity} being put into the bucket.","ret":"The {@link Entity} being put into the bucket"},{"name":"getOriginalBucket","params":[],"desc":"Gets the bucket used to capture the {@link Entity}.\n\nThis refers to the bucket clicked with, eg {@link Material#WATER_BUCKET}.","ret":"The used bucket"},{"name":"getEntityBucket","params":[],"desc":"Gets the bucket that the {@link Entity} will be put into.\n\nThis refers to the bucket with the entity, eg\n{@link Material#PUFFERFISH_BUCKET}.","ret":"The bucket that the {@link Entity} will be put into"},{"name":"getHand","params":[],"desc":"Get the hand that was used to bucket the entity.","ret":"the hand"}],"desc":"This event is called whenever a player captures an entity in a bucket."},{"FQCN":"org.bukkit.event.player.PlayerBucketEmptyEvent","methods":[],"desc":"Called when a player empties a bucket"},{"FQCN":"org.bukkit.event.player.PlayerToggleSneakEvent","methods":[{"name":"isSneaking","params":[],"desc":"Returns whether the player is now sneaking or not.","ret":"sneaking state"}],"desc":"Called when a player toggles their sneaking state"},{"FQCN":"org.bukkit.event.player.PlayerShearEntityEvent","methods":[{"name":"getEntity","params":[],"desc":"Gets the entity the player is shearing","ret":"the entity the player is shearing"},{"name":"getItem","params":[],"desc":"Gets the item used to shear the entity.","ret":"the shears"},{"name":"getHand","params":[],"desc":"Gets the hand used to shear the entity.","ret":"the hand"},{"name":"getDrops","params":[],"desc":"Get an immutable list of drops for this shearing.","ret":"the shearing drops"},{"name":"setDrops","params":[{"name":"drops","type":"java.util.List<org.bukkit.inventory.ItemStack>","desc":"the shear drops"}],"desc":"Sets the drops for the shearing.","ret":""}],"desc":"Called when a player shears an entity"},{"FQCN":"org.bukkit.event.player.PlayerChangedWorldEvent","methods":[{"name":"getFrom","params":[],"desc":"Gets the world the player is switching from.","ret":"player's previous world"}],"desc":"Called when a player switches to another world."},{"FQCN":"org.bukkit.event.player.PlayerUnregisterChannelEvent","methods":[],"desc":"This is called immediately after a player unregisters for a plugin channel."},{"FQCN":"org.bukkit.event.player.PlayerAttemptPickupItemEvent","methods":[{"name":"getItem","params":[],"desc":"Gets the Item attempted by the player.","ret":"Item"},{"name":"getRemaining","params":[],"desc":"Gets the amount that will remain on the ground, if any","ret":"amount that will remain on the ground"},{"name":"setFlyAtPlayer","params":[{"name":"flyAtPlayer","type":"boolean","desc":"{@code true} for item to fly at player"}],"desc":"Set if the item will fly at the player\n<p>Cancelling the event will set this value to false.</p>","ret":""},{"name":"getFlyAtPlayer","params":[],"desc":"Gets if the item will fly at the player","ret":"{@code true} if the item will fly at the player"}],"desc":"Thrown when a player attempts to pick an item up from the ground"},{"FQCN":"org.bukkit.event.player.AsyncPlayerPreLoginEvent","methods":[{"name":"getLoginResult","params":[],"desc":"Gets the current result of the login, as an enum","ret":"Current Result of the login"},{"name":"getResult","params":[],"desc":"Gets the current result of the login, as an enum","ret":"Current Result of the login"},{"name":"setLoginResult","params":[{"name":"result","type":"Result","desc":"New result to set"}],"desc":"Sets the new result of the login, as an enum","ret":""},{"name":"setResult","params":[{"name":"result","type":"PlayerPreLoginEvent.Result","desc":"New result to set"}],"desc":"Sets the new result of the login, as an enum","ret":""},{"name":"kickMessage","params":[],"desc":"Gets the current kick message that will be used if getResult() !=\nResult.ALLOWED","ret":"Current kick message"},{"name":"kickMessage","params":[{"name":"message","type":"net.kyori.adventure.text.Component","desc":"New kick message"}],"desc":"Sets the kick message to display if getResult() != Result.ALLOWED","ret":""},{"name":"disallow","params":[{"name":"result","type":"Result","desc":"New result for disallowing the player"},{"name":"message","type":"net.kyori.adventure.text.Component","desc":"Kick message to display to the user"}],"desc":"Disallows the player from logging in, with the given reason","ret":""},{"name":"disallow","params":[{"name":"result","type":"PlayerPreLoginEvent.Result","desc":"New result for disallowing the player"},{"name":"message","type":"net.kyori.adventure.text.Component","desc":"Kick message to display to the user"}],"desc":"Disallows the player from logging in, with the given reason","ret":""},{"name":"getKickMessage","params":[],"desc":"Gets the current kick message that will be used if getResult() !=\nResult.ALLOWED","ret":"Current kick message"},{"name":"setKickMessage","params":[{"name":"message","type":"String","desc":"New kick message"}],"desc":"Sets the kick message to display if getResult() != Result.ALLOWED","ret":""},{"name":"allow","params":[],"desc":"Allows the player to log in","ret":""},{"name":"disallow","params":[{"name":"result","type":"Result","desc":"New result for disallowing the player"},{"name":"message","type":"String","desc":"Kick message to display to the user"}],"desc":"Disallows the player from logging in, with the given reason","ret":""},{"name":"disallow","params":[{"name":"result","type":"PlayerPreLoginEvent.Result","desc":"New result for disallowing the player"},{"name":"message","type":"String","desc":"Kick message to display to the user"}],"desc":"Disallows the player from logging in, with the given reason","ret":""},{"name":"getName","params":[],"desc":"Gets the player's name.","ret":"the player's name"},{"name":"getAddress","params":[],"desc":"Gets the player IP address.","ret":"The IP address"},{"name":"getUniqueId","params":[],"desc":"Gets the player's unique ID.","ret":"The unique ID"},{"name":"getPlayerProfile","params":[],"desc":"Gets the PlayerProfile of the player logging in","ret":"The Profile"},{"name":"setPlayerProfile","params":[{"name":"profile","type":"PlayerProfile","desc":"The profile to use"}],"desc":"Changes the PlayerProfile the player will login as","ret":""},{"name":"getRawAddress","params":[],"desc":"Gets the raw address of the player logging in","ret":"The address"},{"name":"getHostname","params":[],"desc":"Gets the hostname that the player used to connect to the server, or\nblank if unknown","ret":"The hostname"}],"desc":"Stores details for players attempting to log in.\n<p>\nThis event is asynchronous, and not run using main thread.\n<p>\nWhen this event is fired, the player's locale is not\navailable. Therefore, any translatable component will be\nrendered with the default locale, {@link java.util.Locale#US}.\n<p>\nConsider rendering any translatable yourself with {@link net.kyori.adventure.translation.GlobalTranslator#render}\nif the client's language is known."},{"FQCN":"org.bukkit.event.player.PlayerEggThrowEvent","methods":[{"name":"getEgg","params":[],"desc":"Gets the egg involved in this event.","ret":"the egg involved in this event"},{"name":"isHatching","params":[],"desc":"Gets whether the egg is hatching or not. Will be what the server\nwould've done without interaction.","ret":"boolean Whether the egg is going to hatch or not"},{"name":"setHatching","params":[{"name":"hatching","type":"boolean","desc":"true if you want the egg to hatch, false if you want it\n    not to"}],"desc":"Sets whether the egg will hatch or not.","ret":""},{"name":"getHatchingType","params":[],"desc":"Get the type of the mob being hatched (EntityType.CHICKEN by default)","ret":"The type of the mob being hatched by the egg"},{"name":"setHatchingType","params":[{"name":"hatchType","type":"EntityType","desc":"The type of the mob being hatched by the egg"}],"desc":"Change the type of mob being hatched by the egg","ret":""},{"name":"getNumHatches","params":[],"desc":"Get the number of mob hatches from the egg. By default the number will\nbe the number the server would've done\n<ul>\n<li>7/8 chance of being 0\n<li>31/256 ~= 1/8 chance to be 1\n<li>1/256 chance to be 4\n</ul>","ret":"The number of mobs going to be hatched by the egg"},{"name":"setNumHatches","params":[{"name":"numHatches","type":"byte","desc":"The number of mobs coming out of the egg"}],"desc":"Change the number of mobs coming out of the hatched egg\n<p>\nThe boolean hatching will override this number. Ie. If hatching =\nfalse, this number will not matter","ret":""}],"desc":"Called when a player throws an egg and it might hatch"},{"FQCN":"org.bukkit.event.player.PlayerKickEvent","methods":[{"name":"leaveMessage","params":[],"desc":"Gets the leave message send to all online players","ret":"string kick reason"},{"name":"leaveMessage","params":[{"name":"leaveMessage","type":"net.kyori.adventure.text.Component","desc":"leave message"}],"desc":"Sets the leave message send to all online players","ret":""},{"name":"reason","params":[],"desc":"Gets the reason why the player is getting kicked","ret":"string kick reason"},{"name":"reason","params":[{"name":"kickReason","type":"net.kyori.adventure.text.Component","desc":"kick reason"}],"desc":"Sets the reason why the player is getting kicked","ret":""},{"name":"getReason","params":[],"desc":"Gets the reason why the player is getting kicked","ret":"string kick reason"},{"name":"getLeaveMessage","params":[],"desc":"Gets the leave message send to all online players","ret":"string kick reason"},{"name":"setReason","params":[{"name":"kickReason","type":"String","desc":"kick reason"}],"desc":"Sets the reason why the player is getting kicked","ret":""},{"name":"setLeaveMessage","params":[{"name":"leaveMessage","type":"String","desc":"leave message"}],"desc":"Sets the leave message send to all online players","ret":""},{"name":"getCause","params":[],"desc":"Gets the cause of this kick","ret":""}],"desc":"Called when a player gets kicked from the server"},{"FQCN":"org.bukkit.event.player.PlayerItemBreakEvent","methods":[{"name":"getBrokenItem","params":[],"desc":"Gets the item that broke","ret":"The broken item"}],"desc":"Fired when a player's item breaks (such as a shovel or flint and steel).\n<p>\nAfter this event, the item's amount will be set to {@code item amount - 1}\nand its durability will be reset to 0."},{"FQCN":"org.bukkit.event.player.PlayerStatisticIncrementEvent","methods":[{"name":"getStatistic","params":[],"desc":"Gets the statistic that is being incremented.","ret":"the incremented statistic"},{"name":"getPreviousValue","params":[],"desc":"Gets the previous value of the statistic.","ret":"the previous value of the statistic"},{"name":"getNewValue","params":[],"desc":"Gets the new value of the statistic.","ret":"the new value of the statistic"},{"name":"getEntityType","params":[],"desc":"Gets the EntityType if {@link #getStatistic() getStatistic()} is an\nentity statistic otherwise returns null.","ret":"the EntityType of the statistic"},{"name":"getMaterial","params":[],"desc":"Gets the Material if {@link #getStatistic() getStatistic()} is a block\nor item statistic otherwise returns null.","ret":"the Material of the statistic"}],"desc":"Called when a player statistic is incremented.\n<p>\nThis event is not called for some high frequency statistics, e.g. movement\nbased statistics."},{"FQCN":"org.bukkit.event.player.PlayerHideEntityEvent","methods":[{"name":"getEntity","params":[],"desc":"Gets the entity which has been hidden from the player.","ret":"the hidden entity"}],"desc":"Called when a visible entity is hidden from a player.\n<br>\nThis event is only called when the entity's visibility status is actually\nchanged.\n<br>\nThis event is called regardless of if the entity was within tracking range."},{"FQCN":"org.bukkit.event.player.PlayerItemHeldEvent","methods":[{"name":"getPreviousSlot","params":[],"desc":"Gets the previous held slot index","ret":"Previous slot index"},{"name":"getNewSlot","params":[],"desc":"Gets the new held slot index","ret":"New slot index"}],"desc":"Fired when a player changes their currently held item"},{"FQCN":"org.bukkit.event.player.PlayerAnimationType","methods":[],"desc":"Different types of player animations"},{"FQCN":"org.bukkit.event.player.PlayerBucketEvent","methods":[{"name":"getBucket","params":[],"desc":"Returns the bucket used in this event","ret":"the used bucket"},{"name":"getItemStack","params":[],"desc":"Get the resulting item in hand after the bucket event","ret":"ItemStack hold in hand after the event."},{"name":"setItemStack","params":[{"name":"itemStack","type":"ItemStack","desc":"the new held ItemStack after the bucket event."}],"desc":"Set the item in hand after the event","ret":""},{"name":"getBlock","params":[],"desc":"Gets the block involved in this event.","ret":"The Block which block is involved in this event"},{"name":"getBlockClicked","params":[],"desc":"Return the block clicked","ret":"the clicked block"},{"name":"getBlockFace","params":[],"desc":"Get the face on the clicked block","ret":"the clicked face"},{"name":"getHand","params":[],"desc":"Get the hand that was used in this event.","ret":"the hand"}],"desc":"Called when a player interacts with a Bucket"},{"FQCN":"org.bukkit.event.player.PlayerVelocityEvent","methods":[{"name":"getVelocity","params":[],"desc":"Gets the velocity vector that will be sent to the player","ret":"Vector the player will get"},{"name":"setVelocity","params":[{"name":"velocity","type":"Vector","desc":"The velocity vector that will be sent to the player"}],"desc":"Sets the velocity vector in meters per tick that will be sent to the player","ret":""}],"desc":"Called when the velocity of a player changes."},{"FQCN":"org.bukkit.event.player.PlayerToggleSprintEvent","methods":[{"name":"isSprinting","params":[],"desc":"Gets whether the player is now sprinting or not.","ret":"sprinting state"}],"desc":"Called when a player toggles their sprinting state"},{"FQCN":"org.bukkit.event.player.PlayerAnimationEvent","methods":[{"name":"getAnimationType","params":[],"desc":"Get the type of this animation event","ret":"the animation type"}],"desc":"Represents a player animation event\n<br>Use {@link io.papermc.paper.event.player.PlayerArmSwingEvent} for determining which arm was swung."},{"FQCN":"org.bukkit.event.player.PlayerSwapHandItemsEvent","methods":[{"name":"getMainHandItem","params":[],"desc":"Gets the item switched to the main hand.","ret":"item in the main hand"},{"name":"setMainHandItem","params":[{"name":"mainHandItem","type":"ItemStack","desc":"new item in the main hand"}],"desc":"Sets the item in the main hand.","ret":""},{"name":"getOffHandItem","params":[],"desc":"Gets the item switched to the off hand.","ret":"item in the off hand"},{"name":"setOffHandItem","params":[{"name":"offHandItem","type":"ItemStack","desc":"new item in the off hand"}],"desc":"Sets the item in the off hand.","ret":""}],"desc":"Called when a player swap items between main hand and off hand using the\nhotkey."},{"FQCN":"org.bukkit.event.player.PlayerLocaleChangeEvent","methods":[{"name":"locale","params":[],"desc":"","ret":"the player's new locale"},{"name":"getLocale","params":[],"desc":"","ret":"the player's new locale"}],"desc":"Called when a player changes their locale in the client settings."},{"FQCN":"org.bukkit.event.player.PlayerAdvancementDoneEvent","methods":[{"name":"getAdvancement","params":[],"desc":"Get the advancement which has been completed.","ret":"completed advancement"},{"name":"message","params":[],"desc":"Gets the message to send to all online players.\n<p>\nWill be null if the advancement does not announce to chat, for example if\nit is a recipe unlock or a root advancement.","ret":"The announcement message, or null"},{"name":"message","params":[{"name":"message","type":"Component","desc":"The new message"}],"desc":"Sets the message to send to all online players.\n<p>\nIf set to null the message will not be sent.","ret":""}],"desc":"Called when a player has completed all criteria in an advancement."},{"FQCN":"org.bukkit.event.player.PlayerToggleFlightEvent","methods":[{"name":"isFlying","params":[],"desc":"Returns whether the player is trying to start or stop flying.","ret":"flying state"}],"desc":"Called when a player toggles their flying state"},{"FQCN":"org.bukkit.event.player.PlayerUnleashEntityEvent","methods":[{"name":"getPlayer","params":[],"desc":"Returns the player who is unleashing the entity.","ret":"The player"},{"name":"getHand","params":[],"desc":"Get the hand used by the player to unleash the entity.","ret":"the hand"}],"desc":"Called prior to an entity being unleashed due to a player's action."},{"FQCN":"org.bukkit.event.player.PlayerFishEvent","methods":[{"name":"getCaught","params":[],"desc":"Gets the entity caught by the player.\n<p>\nIf player has fished successfully, the result may be cast to {@link\norg.bukkit.entity.Item}.","ret":"Entity caught by the player, Entity if fishing, and null if\n    bobber has gotten stuck in the ground or nothing has been caught"},{"name":"getHook","params":[],"desc":"Gets the fishing hook.","ret":"the entity representing the fishing hook/bobber."},{"name":"getExpToDrop","params":[],"desc":"Gets the amount of experience received when fishing.\n<p>\nNote: This value has no default effect unless the event state is {@link\nState#CAUGHT_FISH}.","ret":"the amount of experience to drop"},{"name":"setExpToDrop","params":[{"name":"amount","type":"int","desc":"the amount of experience to drop"}],"desc":"Sets the amount of experience received when fishing.\n<p>\nNote: This value has no default effect unless the event state is {@link\nState#CAUGHT_FISH}.","ret":""},{"name":"getHand","params":[],"desc":"Get the hand that was used in this event.\n<p>\nThe hand used is only present for player interactions.\nThis means it will be null if state is set\nto {@link State#BITE} or {@link State#FAILED_ATTEMPT}.","ret":"the hand"},{"name":"getState","params":[],"desc":"Gets the state of the fishing","ret":"A State detailing the state of the fishing"}],"desc":"Thrown when a player is fishing"},{"FQCN":"org.bukkit.event.player.PlayerPortalEvent","methods":[{"name":"getTo","params":[],"desc":"For {@link TeleportCause#NETHER_PORTAL}, this is initially just the starting point\nfor the search for a portal to teleport to. It will initially just be the {@link #getFrom()}\nscaled for dimension scaling and clamped to be inside the world border.\n<p>\nFor {@link TeleportCause#END_PORTAL}, this will initially be the exact destination\neither, the world spawn for <i>end->any world</i> or end spawn for <i>any world->end</i>.","ret":"starting point for search or exact destination"},{"name":"setTo","params":[{"name":"to","type":"Location","desc":"starting point for search or exact destination"}],"desc":"See the description of {@link #getTo()}.","ret":""},{"name":"willDismountPlayer","params":[],"desc":"No effect","ret":"no effect"},{"name":"getRelativeTeleportationFlags","params":[],"desc":"No effect","ret":"no effect"},{"name":"setSearchRadius","params":[{"name":"searchRadius","type":"int","desc":"the radius in which to search for a portal from the\nlocation"}],"desc":"Set the Block radius to search in for available portals.","ret":""},{"name":"getSearchRadius","params":[],"desc":"Gets the search radius value for finding an available portal.","ret":"the currently set search radius"},{"name":"getCanCreatePortal","params":[],"desc":"Returns whether the server will attempt to create a destination portal or\nnot.","ret":"whether there should create be a destination portal created"},{"name":"setCanCreatePortal","params":[{"name":"canCreatePortal","type":"boolean","desc":"Sets whether there should be a destination portal\ncreated"}],"desc":"Sets whether the server should attempt to create a destination portal or\nnot.","ret":""},{"name":"setCreationRadius","params":[{"name":"creationRadius","type":"int","desc":"the radius in which to create a portal from the\nlocation"}],"desc":"Sets the maximum radius the world is searched for a free space from the\ngiven location.\n\nIf enough free space is found then the portal will be created there, if\nnot it will force create with air-space at the target location.\n\nDoes not apply to end portal target platforms which will always appear at\nthe target location.","ret":""},{"name":"getCreationRadius","params":[],"desc":"Gets the maximum radius the world is searched for a free space from the\ngiven location.\n\nIf enough free space is found then the portal will be created there, if\nnot it will force create with air-space at the target location.\n\nDoes not apply to end portal target platforms which will always appear at\nthe target location.","ret":"the currently set creation radius"}],"desc":"Called when a player is about to teleport because it is in contact with a\nportal which will generate an exit portal.\n<p>\nFor other entities see {@link org.bukkit.event.entity.EntityPortalEvent}"},{"FQCN":"org.bukkit.event.player.PlayerPickupItemEvent","methods":[{"name":"getItem","params":[],"desc":"Gets the Item picked up by the player.","ret":"Item"},{"name":"getRemaining","params":[],"desc":"Gets the amount remaining on the ground, if any","ret":"amount remaining on the ground"},{"name":"setFlyAtPlayer","params":[{"name":"flyAtPlayer","type":"boolean","desc":"true for item to fly at player"}],"desc":"Set if the item will fly at the player\n<p>\nCancelling the event will set this value to false.","ret":""},{"name":"getFlyAtPlayer","params":[],"desc":"Gets if the item will fly at the player","ret":"true if the item will fly at the player"}],"desc":"Thrown when a player picks an item up from the ground"},{"FQCN":"org.bukkit.event.player.PlayerItemDamageEvent","methods":[{"name":"getItem","params":[],"desc":"Gets the item being damaged.","ret":"the item"},{"name":"getDamage","params":[],"desc":"Gets the amount of durability damage this item will be taking.","ret":"durability change"},{"name":"getOriginalDamage","params":[],"desc":"Gets the amount of durability damage this item would have taken before\nthe Unbreaking reduction. If the item has no Unbreaking level then\nthis value will be the same as the {@link #getDamage()} value.","ret":"pre-reduction damage amount"}],"desc":"Called when an item used by the player takes durability damage as a result of\nbeing used."},{"FQCN":"org.bukkit.event.player.PlayerBucketFishEvent","methods":[{"name":"getEntity","params":[],"desc":"Gets the fish involved with this event.","ret":"The fish involved with this event"},{"name":"getWaterBucket","params":[],"desc":"Gets the bucket used.\n\nThis refers to the bucket clicked with, ie {@link Material#WATER_BUCKET}.","ret":"The used bucket"},{"name":"getFishBucket","params":[],"desc":"Gets the bucket that the fish will be put into.\n\nThis refers to the bucket with the fish, ie\n{@link Material#PUFFERFISH_BUCKET}.","ret":"The bucket that the fish will be put into"}],"desc":"This event is called whenever a player attempts to put a fish in a bucket."},{"FQCN":"org.bukkit.event.player.PlayerMoveEvent","methods":[{"name":"isCancelled","params":[],"desc":"Gets the cancellation state of this event. A cancelled event will not\nbe executed in the server, but will still pass to other plugins\n<p>\nIf a move or teleport event is cancelled, the player will be moved or\nteleported back to the Location as defined by getFrom(). This will not\nfire an event","ret":"true if this event is cancelled"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":"true if you wish to cancel this event"}],"desc":"Sets the cancellation state of this event. A cancelled event will not\nbe executed in the server, but will still pass to other plugins\n<p>\nIf a move or teleport event is cancelled, the player will be moved or\nteleported back to the Location as defined by getFrom(). This will not\nfire an event","ret":""},{"name":"getFrom","params":[],"desc":"Gets the location this player moved from","ret":"Location the player moved from"},{"name":"setFrom","params":[{"name":"from","type":"Location","desc":"New location to mark as the players previous location"}],"desc":"Sets the location to mark as where the player moved from","ret":""},{"name":"getTo","params":[],"desc":"Gets the location this player moved to","ret":"Location the player moved to"},{"name":"setTo","params":[{"name":"to","type":"Location","desc":"New Location this player will move to"}],"desc":"Sets the location that this player will move to","ret":""},{"name":"hasChangedPosition","params":[],"desc":"Check if the player has changed position (even within the same block) in the event","ret":"whether the player has changed position or not"},{"name":"hasExplicitlyChangedPosition","params":[],"desc":"Check if the player has changed position (even within the same block) in the event, disregarding a possible world change","ret":"whether the player has changed position or not"},{"name":"hasChangedBlock","params":[],"desc":"Check if the player has moved to a new block in the event","ret":"whether the player has moved to a new block or not"},{"name":"hasExplicitlyChangedBlock","params":[],"desc":"Check if the player has moved to a new block in the event, disregarding a possible world change","ret":"whether the player has moved to a new block or not"},{"name":"hasChangedOrientation","params":[],"desc":"Check if the player has changed orientation in the event","ret":"whether the player has changed orientation or not"}],"desc":"Holds information for player movement events"},{"FQCN":"org.bukkit.event.player.PlayerBedLeaveEvent","methods":[{"name":"getBed","params":[],"desc":"Returns the bed block involved in this event.","ret":"the bed block involved in this event"},{"name":"shouldSetSpawnLocation","params":[],"desc":"Get if this event should set the new spawn location for the\n{@link Player}.\n<br>\nThis does not remove any existing spawn location, only prevent it from\nbeing changed (if true).\n<br>\nTo change a {@link Player}'s spawn location, use\n{@link Player#setBedSpawnLocation(Location)}.","ret":"true if the spawn location will be changed"},{"name":"setSpawnLocation","params":[{"name":"setBedSpawn","type":"boolean","desc":"true to change the new spawn location"}],"desc":"Set if this event should set the new spawn location for the\n{@link Player}.\n<br>\nThis will not remove any existing spawn location, only prevent it from\nbeing changed (if true).\n<br>\nTo change a {@link Player}'s spawn location, use\n{@link Player#setBedSpawnLocation(Location)}.","ret":""}],"desc":"This event is fired when the player is leaving a bed."},{"FQCN":"org.bukkit.event.player.PlayerBucketFillEvent","methods":[],"desc":"Called when a player fills a bucket"},{"FQCN":"org.bukkit.event.player.PlayerLoginEvent","methods":[{"name":"kickMessage","params":[],"desc":"Gets the current kick message that will be used if getResult() !=\nResult.ALLOWED","ret":"Current kick message"},{"name":"kickMessage","params":[{"name":"message","type":"net.kyori.adventure.text.Component","desc":"New kick message"}],"desc":"Sets the kick message to display if getResult() != Result.ALLOWED","ret":""},{"name":"getResult","params":[],"desc":"Gets the current result of the login, as an enum","ret":"Current Result of the login"},{"name":"setResult","params":[{"name":"result","type":"Result","desc":"New result to set"}],"desc":"Sets the new result of the login, as an enum","ret":""},{"name":"getKickMessage","params":[],"desc":"Gets the current kick message that will be used if getResult() !=\nResult.ALLOWED","ret":"Current kick message"},{"name":"setKickMessage","params":[{"name":"message","type":"String","desc":"New kick message"}],"desc":"Sets the kick message to display if getResult() != Result.ALLOWED","ret":""},{"name":"getHostname","params":[],"desc":"Gets the hostname that the player used to connect to the server, or\nblank if unknown","ret":"The hostname"},{"name":"allow","params":[],"desc":"Allows the player to log in","ret":""},{"name":"disallow","params":[{"name":"result","type":"Result","desc":"New result for disallowing the player"},{"name":"message","type":"String","desc":"Kick message to display to the user"}],"desc":"Disallows the player from logging in, with the given reason","ret":""},{"name":"disallow","params":[{"name":"result","type":"Result","desc":"New result for disallowing the player"},{"name":"message","type":"net.kyori.adventure.text.Component","desc":"Kick message to display to the user"}],"desc":"Disallows the player from logging in, with the given reason","ret":""},{"name":"getAddress","params":[],"desc":"Gets the {@link InetAddress} for the Player associated with this event.\nThis method is provided as a workaround for player.getAddress()\nreturning null during PlayerLoginEvent.","ret":"The address for this player. For legacy compatibility, this may\n    be null."},{"name":"getRealAddress","params":[],"desc":"Gets the connection address of this player, regardless of whether it has\nbeen spoofed or not.","ret":"the player's connection address"}],"desc":"Stores details for players attempting to log in.\n<br>\nNote that this event is called <i>early</i> in the player initialization\nprocess. It is recommended that most options involving the Player\n<i>entity</i> be postponed to the {@link PlayerJoinEvent} instead."},{"FQCN":"org.bukkit.event.player.PlayerChangedMainHandEvent","methods":[{"name":"getMainHand","params":[],"desc":"Gets the new main hand of the player. The old hand is still momentarily\navailable via {@link Player#getMainHand()}.","ret":"the new {@link MainHand} of the player"}],"desc":"Called when a player changes their main hand in the client settings."},{"FQCN":"org.bukkit.FireworkEffect","methods":[{"name":"builder","params":[],"desc":"Construct a firework effect.","ret":"A utility object for building a firework effect"},{"name":"hasFlicker","params":[],"desc":"Get whether the firework effect flickers.","ret":"true if it flickers, false if not"},{"name":"hasTrail","params":[],"desc":"Get whether the firework effect has a trail.","ret":"true if it has a trail, false if not"},{"name":"getColors","params":[],"desc":"Get the primary colors of the firework effect.","ret":"An immutable list of the primary colors"},{"name":"getFadeColors","params":[],"desc":"Get the fade colors of the firework effect.","ret":"An immutable list of the fade colors"},{"name":"getType","params":[],"desc":"Get the type of the firework effect.","ret":"The effect type"},{"name":"deserialize","params":[{"name":"map","type":"Map<String,Object>","desc":"the map to deserialize"}],"desc":"","ret":"the resulting serializable"}],"desc":"Represents a single firework effect."},{"FQCN":"org.bukkit.metadata.MetadataEvaluationException","methods":[],"desc":"A MetadataEvaluationException is thrown any time a {@link\nLazyMetadataValue} fails to evaluate its value due to an exception. The\noriginating exception will be included as this exception's cause."},{"FQCN":"org.bukkit.metadata.MetadataValueAdapter","methods":[],"desc":"Optional base class for facilitating MetadataValue implementations.\n<p>\nThis provides all the conversion functions for MetadataValue so that\nwriting an implementation of MetadataValue is as simple as implementing\nvalue() and invalidate()."},{"FQCN":"org.bukkit.metadata.Metadatable","methods":[{"name":"setMetadata","params":[{"name":"metadataKey","type":"String","desc":"A unique key to identify this metadata."},{"name":"newMetadataValue","type":"MetadataValue","desc":"The metadata value to apply."}],"desc":"Sets a metadata value in the implementing object's metadata store.","ret":""},{"name":"getMetadata","params":[{"name":"metadataKey","type":"String","desc":"the unique metadata key being sought."}],"desc":"Returns a list of previously set metadata values from the implementing\nobject's metadata store.","ret":"A list of values, one for each plugin that has set the\n    requested value."},{"name":"hasMetadata","params":[{"name":"metadataKey","type":"String","desc":"the unique metadata key being queried."}],"desc":"Tests to see whether the implementing object contains the given\nmetadata value in its metadata store.","ret":"the existence of the metadataKey within subject."},{"name":"removeMetadata","params":[{"name":"metadataKey","type":"String","desc":"the unique metadata key identifying the metadata to\n    remove."},{"name":"owningPlugin","type":"Plugin","desc":"This plugin's metadata value will be removed. All\n    other values will be left untouched."}],"desc":"Removes the given metadata value from the implementing object's\nmetadata store.","ret":""}],"desc":"This interface is implemented by all objects that can provide metadata\nabout themselves."},{"FQCN":"org.bukkit.metadata.LazyMetadataValue","methods":[{"name":"eval","params":[],"desc":"Lazily evaluates the value of this metadata item.","ret":""}],"desc":"The LazyMetadataValue class implements a type of metadata that is not\ncomputed until another plugin asks for it.\n<p>\nBy making metadata values lazy, no computation is done by the providing\nplugin until absolutely necessary (if ever). Additionally,\nLazyMetadataValue objects cache their values internally unless overridden\nby a {@link CacheStrategy} or invalidated at the individual or plugin\nlevel. Once invalidated, the LazyMetadataValue will recompute its value\nwhen asked."},{"FQCN":"org.bukkit.metadata.MetadataStore","methods":[{"name":"setMetadata","params":[{"name":"subject","type":"T","desc":"The object receiving the metadata."},{"name":"metadataKey","type":"String","desc":"A unique key to identify this metadata."},{"name":"newMetadataValue","type":"MetadataValue","desc":"The metadata value to apply."}],"desc":"Adds a metadata value to an object.","ret":""},{"name":"getMetadata","params":[{"name":"subject","type":"T","desc":"the object being interrogated."},{"name":"metadataKey","type":"String","desc":"the unique metadata key being sought."}],"desc":"Returns all metadata values attached to an object. If multiple plugins\nhave attached metadata, each will value will be included.","ret":"A list of values, one for each plugin that has set the\n    requested value."},{"name":"hasMetadata","params":[{"name":"subject","type":"T","desc":"the object upon which the has-metadata test is\n    performed."},{"name":"metadataKey","type":"String","desc":"the unique metadata key being queried."}],"desc":"Tests to see if a metadata attribute has been set on an object.","ret":"the existence of the metadataKey within subject."},{"name":"removeMetadata","params":[{"name":"subject","type":"T","desc":"the object to remove the metadata from."},{"name":"metadataKey","type":"String","desc":"the unique metadata key identifying the metadata to\n    remove."},{"name":"owningPlugin","type":"Plugin","desc":"the plugin attempting to remove a metadata item."}],"desc":"Removes a metadata item owned by a plugin from a subject.","ret":""},{"name":"invalidateAll","params":[{"name":"owningPlugin","type":"Plugin","desc":"the plugin requesting the invalidation."}],"desc":"Invalidates all metadata in the metadata store that originates from the\ngiven plugin. Doing this will force each invalidated metadata item to\nbe recalculated the next time it is accessed.","ret":""}],"desc":""},{"FQCN":"org.bukkit.metadata.MetadataValue","methods":[{"name":"value","params":[],"desc":"Fetches the value of this metadata item.","ret":"the metadata value."},{"name":"asInt","params":[],"desc":"Attempts to convert the value of this metadata item into an int.","ret":"the value as an int."},{"name":"asFloat","params":[],"desc":"Attempts to convert the value of this metadata item into a float.","ret":"the value as a float."},{"name":"asDouble","params":[],"desc":"Attempts to convert the value of this metadata item into a double.","ret":"the value as a double."},{"name":"asLong","params":[],"desc":"Attempts to convert the value of this metadata item into a long.","ret":"the value as a long."},{"name":"asShort","params":[],"desc":"Attempts to convert the value of this metadata item into a short.","ret":"the value as a short."},{"name":"asByte","params":[],"desc":"Attempts to convert the value of this metadata item into a byte.","ret":"the value as a byte."},{"name":"asBoolean","params":[],"desc":"Attempts to convert the value of this metadata item into a boolean.","ret":"the value as a boolean."},{"name":"asString","params":[],"desc":"Attempts to convert the value of this metadata item into a string.","ret":"the value as a string."},{"name":"getOwningPlugin","params":[],"desc":"Returns the {@link Plugin} that created this metadata item.","ret":"the plugin that owns this metadata value. Could be null if the plugin was already unloaded."},{"name":"invalidate","params":[],"desc":"Invalidates this metadata item, forcing it to recompute when next\naccessed.","ret":""}],"desc":""},{"FQCN":"org.bukkit.metadata.MetadataConversionException","methods":[],"desc":"A MetadataConversionException is thrown any time a {@link\nLazyMetadataValue} attempts to convert a metadata value to an inappropriate\ndata type."},{"FQCN":"org.bukkit.metadata.MetadataStoreBase","methods":[{"name":"setMetadata","params":[{"name":"subject","type":"T","desc":"The object receiving the metadata."},{"name":"metadataKey","type":"String","desc":"A unique key to identify this metadata."},{"name":"newMetadataValue","type":"MetadataValue","desc":"The metadata value to apply."}],"desc":"Adds a metadata value to an object. Each metadata value is owned by a\nspecific {@link Plugin}. If a plugin has already added a metadata value\nto an object, that value will be replaced with the value of {@code\nnewMetadataValue}. Multiple plugins can set independent values for the\nsame {@code metadataKey} without conflict.\n<p>\nImplementation note: I considered using a {@link\njava.util.concurrent.locks.ReadWriteLock} for controlling access to\n{@code metadataMap}, but decided that the added overhead wasn't worth\nthe finer grained access control.\n<p>\nBukkit is almost entirely single threaded so locking overhead shouldn't\npose a problem.","ret":""},{"name":"getMetadata","params":[{"name":"subject","type":"T","desc":"the object being interrogated."},{"name":"metadataKey","type":"String","desc":"the unique metadata key being sought."}],"desc":"Returns all metadata values attached to an object. If multiple\nhave attached metadata, each will value will be included.","ret":"A list of values, one for each plugin that has set the\n    requested value."},{"name":"hasMetadata","params":[{"name":"subject","type":"T","desc":"the object upon which the has-metadata test is\n    performed."},{"name":"metadataKey","type":"String","desc":"the unique metadata key being queried."}],"desc":"Tests to see if a metadata attribute has been set on an object.","ret":"the existence of the metadataKey within subject."},{"name":"removeMetadata","params":[{"name":"subject","type":"T","desc":"the object to remove the metadata from."},{"name":"metadataKey","type":"String","desc":"the unique metadata key identifying the metadata to\n    remove."},{"name":"owningPlugin","type":"Plugin","desc":"the plugin attempting to remove a metadata item."}],"desc":"Removes a metadata item owned by a plugin from a subject.","ret":""},{"name":"invalidateAll","params":[{"name":"owningPlugin","type":"Plugin","desc":"the plugin requesting the invalidation."}],"desc":"Invalidates all metadata in the metadata store that originates from the\ngiven plugin. Doing this will force each invalidated metadata item to\nbe recalculated the next time it is accessed.","ret":""},{"name":"removeAll","params":[{"name":"owningPlugin","type":"Plugin","desc":"the plugin requesting the invalidation."}],"desc":"Removes all metadata in the metadata store that originates from the\ngiven plugin.","ret":""},{"name":"disambiguate","params":[{"name":"subject","type":"T","desc":"The object for which this key is being generated."},{"name":"metadataKey","type":"String","desc":"The name identifying the metadata value."}],"desc":"Creates a unique name for the object receiving metadata by combining\nunique data from the subject with a metadataKey.\n<p>\nThe name created must be globally unique for the given object and any\ntwo equivalent objects must generate the same unique name. For example,\ntwo Player objects must generate the same string if they represent the\nsame player, even if the objects would fail a reference equality test.","ret":"a unique metadata key for the given subject."}],"desc":""},{"FQCN":"org.bukkit.metadata.FixedMetadataValue","methods":[],"desc":"A FixedMetadataValue is a special case metadata item that contains the same\nvalue forever after initialization. Invalidating a FixedMetadataValue has\nno effect.\n<p>\nThis class extends LazyMetadataValue for historical reasons, even though it\noverrides all the implementation methods. it is possible that in the future\nthat the inheritance hierarchy may change."},{"FQCN":"org.bukkit.WorldBorder","methods":[{"name":"getWorld","params":[],"desc":"Get the {@link World} in which the border resides.","ret":"the associated world, or null if this world border is not associated\nwith any specific world, such as those created via {@link Server#createWorldBorder()}"},{"name":"reset","params":[],"desc":"Resets the border to default values.","ret":""},{"name":"getSize","params":[],"desc":"Gets the current side length of the border.","ret":"The current side length of the border."},{"name":"setSize","params":[{"name":"newSize","type":"double","desc":"The new size of the border."}],"desc":"Sets the border to a square region with the specified side length in blocks.","ret":""},{"name":"setSize","params":[{"name":"newSize","type":"double","desc":"The new side length of the border."},{"name":"seconds","type":"long","desc":"The time in seconds in which the border grows or shrinks from the previous size to that being set."}],"desc":"Sets the border to a square region with the specified side length in blocks.","ret":""},{"name":"setSize","params":[{"name":"newSize","type":"double","desc":"The new side length of the border."},{"name":"unit","type":"TimeUnit","desc":"The time unit."},{"name":"time","type":"long","desc":"The time in which the border grows or shrinks from the previous size to that being set."}],"desc":"Sets the border to a square region with the specified side length in blocks.","ret":""},{"name":"getCenter","params":[],"desc":"Gets the current border center.","ret":"The current border center."},{"name":"setCenter","params":[{"name":"x","type":"double","desc":"The new center x-coordinate."},{"name":"z","type":"double","desc":"The new center z-coordinate."}],"desc":"Sets the new border center.","ret":""},{"name":"setCenter","params":[{"name":"location","type":"Location","desc":"The new location of the border center. (Only x/z used)"}],"desc":"Sets the new border center.","ret":""},{"name":"getDamageBuffer","params":[],"desc":"Gets the current border damage buffer.","ret":"The current border damage buffer."},{"name":"setDamageBuffer","params":[{"name":"blocks","type":"double","desc":"The amount of blocks. (The default is 5 blocks.)"}],"desc":"Sets the amount of blocks a player may safely be outside the border before taking damage.","ret":""},{"name":"getDamageAmount","params":[],"desc":"Gets the current border damage amount.","ret":"The current border damage amount."},{"name":"setDamageAmount","params":[{"name":"damage","type":"double","desc":"The amount of damage. (The default is 0.2 damage per second per block.)"}],"desc":"Sets the amount of damage a player takes when outside the border plus the border buffer.","ret":""},{"name":"getWarningTime","params":[],"desc":"Gets the current border warning time in seconds.","ret":"The current border warning time in seconds."},{"name":"setWarningTime","params":[{"name":"seconds","type":"int","desc":"The amount of time in seconds. (The default is 15 seconds.)"}],"desc":"Sets the warning time that causes the screen to be tinted red when a contracting border will reach the player within the specified time.","ret":""},{"name":"getWarningDistance","params":[],"desc":"Gets the current border warning distance.","ret":"The current border warning distance."},{"name":"setWarningDistance","params":[{"name":"distance","type":"int","desc":"The distance in blocks. (The default is 5 blocks.)"}],"desc":"Sets the warning distance that causes the screen to be tinted red when the player is within the specified number of blocks from the border.","ret":""},{"name":"isInside","params":[{"name":"location","type":"Location","desc":"the location to check"}],"desc":"Check if the specified location is inside this border.","ret":"if this location is inside the border or not"},{"name":"getMaxSize","params":[],"desc":"Gets the maximum possible size of a WorldBorder.","ret":"The maximum size the WorldBorder"},{"name":"getMaxCenterCoordinate","params":[],"desc":"Gets the absolute value of the maximum x/z center coordinate of a\nWorldBorder.","ret":"The absolute maximum center coordinate of the WorldBorder"},{"name":"isInBounds","params":[{"name":"location","type":"Location","desc":"specific location to check"}],"desc":"Checks if the location is within the boundaries of this border.","ret":"true if the location is within the bounds of this border, false otherwise."}],"desc":""},{"FQCN":"org.bukkit.material.Rails","methods":[{"name":"isOnSlope","params":[],"desc":"","ret":"the whether this track is set on a slope"},{"name":"isCurve","params":[],"desc":"","ret":"the whether this track is set as a curve"},{"name":"getDirection","params":[],"desc":"","ret":"the direction these tracks are set\n    <p>\n    Note that tracks are bidirectional and that the direction returned\n    is the ascending direction if the track is set on a slope. If it is\n    set as a curve, the corner of the track is returned."},{"name":"getConvertedData","params":[],"desc":"Return the data without the extended properties used by {@link\nPoweredRail} and {@link DetectorRail}. Overridden in {@link\nExtendedRails}","ret":"the data without the extended part"},{"name":"setDirection","params":[{"name":"face","type":"BlockFace","desc":"the direction the track should be facing"},{"name":"isOnSlope","type":"boolean","desc":"whether or not the track should be on a slope"}],"desc":"Set the direction of these tracks\n<p>\nNote that tracks are bidirectional and that the direction returned is\nthe ascending direction if the track is set on a slope. If it is set as\na curve, the corner of the track should be supplied.","ret":""}],"desc":"Represents minecart rails."},{"FQCN":"org.bukkit.material.PistonExtensionMaterial","methods":[{"name":"isSticky","params":[],"desc":"Checks if this piston extension is sticky, and returns true if so","ret":"true if this piston is \"sticky\", or false"},{"name":"setSticky","params":[{"name":"sticky","type":"boolean","desc":"true if sticky, otherwise false"}],"desc":"Sets whether or not this extension is sticky","ret":""}],"desc":"Material data for the piston extension block"},{"FQCN":"org.bukkit.material.Tree","methods":[{"name":"getDirection","params":[],"desc":"Get direction of the log","ret":"one of:\n<ul>\n<li>BlockFace.TOP for upright (default)\n<li>BlockFace.NORTH (east-west)\n<li>BlockFace.WEST (north-south)\n<li>BlockFace.SELF (directionless)\n</ul>"},{"name":"setDirection","params":[{"name":"dir","type":"BlockFace","desc":"- direction of end of log (BlockFace.SELF for no direction)"}],"desc":"Set direction of the log","ret":""}],"desc":"Represents the different types of Tree block that face a direction."},{"FQCN":"org.bukkit.material.FlowerPot","methods":[{"name":"getContents","params":[],"desc":"Get the material in the flower pot","ret":"material MaterialData for the block currently in the flower pot\n    or null if empty"},{"name":"setContents","params":[{"name":"materialData","type":"MaterialData","desc":"MaterialData of the block to put in the flower pot."}],"desc":"Set the contents of the flower pot","ret":""}],"desc":"Represents a flower pot."},{"FQCN":"org.bukkit.material.LongGrass","methods":[{"name":"getSpecies","params":[],"desc":"Gets the current species of this grass","ret":"GrassSpecies of this grass"},{"name":"setSpecies","params":[{"name":"species","type":"GrassSpecies","desc":"New species of this grass"}],"desc":"Sets the species of this grass","ret":""}],"desc":"Represents the different types of long grasses."},{"FQCN":"org.bukkit.material.MonsterEggs","methods":[],"desc":"Represents the different types of monster eggs"},{"FQCN":"org.bukkit.material.Door","methods":[{"name":"getWoodDoorOfSpecies","params":[{"name":"species","type":"TreeSpecies","desc":"The species of wood door required."}],"desc":"Returns the item type of a wooden door for the given tree species.","ret":"The item type for the given species."},{"name":"isOpen","params":[],"desc":"Result is undefined if <code>isTopHalf()</code> is true.","ret":""},{"name":"setOpen","params":[{"name":"isOpen","type":"boolean","desc":""}],"desc":"Set whether the door is open. Undefined if <code>isTopHalf()</code> is true.","ret":""},{"name":"isTopHalf","params":[],"desc":"","ret":"whether this is the top half of the door"},{"name":"setTopHalf","params":[{"name":"isTopHalf","type":"boolean","desc":"True to make it the top half."}],"desc":"Configure this part of the door to be either the top or the bottom half","ret":""},{"name":"getHingeCorner","params":[],"desc":"","ret":"BlockFace.SELF"},{"name":"setFacingDirection","params":[{"name":"face","type":"BlockFace","desc":"the direction"}],"desc":"Set the direction that this door should is facing.\n\nUndefined if <code>isTopHalf()</code> is true.","ret":""},{"name":"getFacing","params":[],"desc":"Get the direction that this door is facing.\n\nUndefined if <code>isTopHalf()</code> is true.","ret":"the direction"},{"name":"getHinge","params":[],"desc":"Returns the side of the door the hinge is on.\n\nUndefined if <code>isTopHalf()</code> is false.","ret":"false for left hinge, true for right hinge"},{"name":"setHinge","params":[{"name":"isHingeRight","type":"boolean","desc":"True if the hinge is on the right hand side, false if the hinge is on the left hand side."}],"desc":"Set whether the hinge is on the left or right side. Left is false, right is true.\n\nUndefined if <code>isTopHalf()</code> is false.","ret":""}],"desc":"Represents a door.\n\nThis class was previously deprecated, but has been retrofitted to\nwork with modern doors. Some methods are undefined dependant on <code>isTopHalf()</code>\ndue to Minecraft's internal representation of doors."},{"FQCN":"org.bukkit.material.ExtendedRails","methods":[{"name":"getConvertedData","params":[],"desc":"{@inheritDoc}","ret":""}],"desc":"This is the superclass for the {@link DetectorRail} and {@link PoweredRail}\nclasses"},{"FQCN":"org.bukkit.material.Coal","methods":[{"name":"getType","params":[],"desc":"Gets the current type of this coal","ret":"CoalType of this coal"},{"name":"setType","params":[{"name":"type","type":"CoalType","desc":"New type of this coal"}],"desc":"Sets the type of this coal","ret":""}],"desc":"Represents the different types of coals."},{"FQCN":"org.bukkit.material.Attachable","methods":[{"name":"getAttachedFace","params":[],"desc":"Gets the face that this block is attached on","ret":"BlockFace attached to"}],"desc":"Indicates that a block can be attached to another block"},{"FQCN":"org.bukkit.material.PoweredRail","methods":[{"name":"setPowered","params":[{"name":"isPowered","type":"boolean","desc":"whether or not the rail is powered"}],"desc":"Set whether this PoweredRail should be powered or not.","ret":""}],"desc":"Represents a powered rail"},{"FQCN":"org.bukkit.material.types.MushroomBlockTexture","methods":[{"name":"getData","params":[],"desc":"Gets the associated data value representing this mushroom block face.","ret":"A byte containing the data value of this mushroom block face"},{"name":"getCapFace","params":[],"desc":"Gets the face that has cap texture.","ret":"The cap face"},{"name":"getByData","params":[{"name":"data","type":"byte","desc":"Data value to fetch"}],"desc":"Gets the MushroomBlockType with the given data value.","ret":"The {@link MushroomBlockTexture} representing the given value, or\nnull if it doesn't exist"},{"name":"getCapByFace","params":[{"name":"face","type":"BlockFace","desc":"the required block face with cap texture"}],"desc":"Gets the MushroomBlockType with cap texture on the given block face.","ret":"The {@link MushroomBlockTexture} representing the given block\nface, or null if it doesn't exist"}],"desc":"Represents the different textured blocks of mushroom."},{"FQCN":"org.bukkit.material.Directional","methods":[{"name":"setFacingDirection","params":[{"name":"face","type":"BlockFace","desc":"The facing direction"}],"desc":"Sets the direction that this block is facing in","ret":""},{"name":"getFacing","params":[],"desc":"Gets the direction this block is facing","ret":"the direction this block is facing"}],"desc":""},{"FQCN":"org.bukkit.material.Leaves","methods":[{"name":"isDecaying","params":[],"desc":"Checks if this leaf block is in the process of decaying","ret":"true if the leaf block is in the process of decaying"},{"name":"setDecaying","params":[{"name":"isDecaying","type":"boolean","desc":"whether the block is decaying or not"}],"desc":"Set whether this leaf block is in the process of decaying","ret":""},{"name":"isDecayable","params":[],"desc":"Checks if this leaf block is permanent or can decay when too far from a\nlog","ret":"true if the leaf block is permanent or can decay when too far\nfrom a log"},{"name":"setDecayable","params":[{"name":"isDecayable","type":"boolean","desc":"whether the block is permanent or can disappear"}],"desc":"Set whether this leaf block will disappear when too far from a log","ret":""}],"desc":"Represents the different types of leaf block that may be permanent or can\ndecay when too far from a log."},{"FQCN":"org.bukkit.material.WoodenStep","methods":[{"name":"isInverted","params":[],"desc":"Test if step is inverted","ret":"true if inverted (top half), false if normal (bottom half)"},{"name":"setInverted","params":[{"name":"inv","type":"boolean","desc":"- true if step is inverted (top half), false if step is normal\n(bottom half)"}],"desc":"Set step inverted state","ret":""}],"desc":"Represents the different types of wooden steps."},{"FQCN":"org.bukkit.material.Torch","methods":[{"name":"getAttachedFace","params":[],"desc":"Gets the face that this block is attached on","ret":"BlockFace attached to"}],"desc":"MaterialData for torches"},{"FQCN":"org.bukkit.material.Tripwire","methods":[{"name":"isActivated","params":[],"desc":"Test if tripwire is currently activated","ret":"true if activated, false if not"},{"name":"setActivated","params":[{"name":"act","type":"boolean","desc":"- true if activated, false if not"}],"desc":"Set tripwire activated state","ret":""},{"name":"isObjectTriggering","params":[],"desc":"Test if object triggering this tripwire directly","ret":"true if object activating tripwire, false if not"},{"name":"setObjectTriggering","params":[{"name":"trig","type":"boolean","desc":"- true if object activating tripwire, false if not"}],"desc":"Set object triggering state for this tripwire","ret":""}],"desc":"Represents the tripwire"},{"FQCN":"org.bukkit.material.Redstone","methods":[{"name":"isPowered","params":[],"desc":"Gets the current state of this Material, indicating if it's powered or\nunpowered","ret":"true if powered, otherwise false"}],"desc":"Indicated a Material that may carry or create a Redstone current"},{"FQCN":"org.bukkit.material.Hopper","methods":[{"name":"setActive","params":[{"name":"isActive","type":"boolean","desc":"True if the hopper is active, false if deactivated as if\npowered by redstone"}],"desc":"Sets whether the hopper is active or not.","ret":""},{"name":"isActive","params":[],"desc":"Checks whether the hopper is active or not.","ret":"True if the hopper is active, false if deactivated"},{"name":"setFacingDirection","params":[{"name":"face","type":"BlockFace","desc":"The direction to set this hopper to"}],"desc":"Sets the direction this hopper is facing","ret":""},{"name":"getFacing","params":[],"desc":"Gets the direction this hopper is facing","ret":"The direction this hopper is facing"},{"name":"isPowered","params":[],"desc":"Checks if the hopper is powered.","ret":"true if the hopper is powered"}],"desc":"Represents a hopper in an active or deactivated state and facing in a\nspecific direction."},{"FQCN":"org.bukkit.material.Furnace","methods":[],"desc":"Represents a furnace."},{"FQCN":"org.bukkit.material.Sandstone","methods":[{"name":"getType","params":[],"desc":"Gets the current type of this sandstone","ret":"SandstoneType of this sandstone"},{"name":"setType","params":[{"name":"type","type":"SandstoneType","desc":"New type of this sandstone"}],"desc":"Sets the type of this sandstone","ret":""}],"desc":"Represents the different types of sandstone."},{"FQCN":"org.bukkit.material.PistonBaseMaterial","methods":[{"name":"setPowered","params":[{"name":"powered","type":"boolean","desc":"true if the piston is extended {@literal &} powered, or false"}],"desc":"Sets the current state of this piston","ret":""},{"name":"isSticky","params":[],"desc":"Checks if this piston base is sticky, and returns true if so","ret":"true if this piston is \"sticky\", or false"}],"desc":"Material data for the piston base block"},{"FQCN":"org.bukkit.material.Vine","methods":[{"name":"isOnFace","params":[{"name":"face","type":"BlockFace","desc":"The face to check."}],"desc":"Check if the vine is attached to the specified face of an adjacent\nblock. You can check two faces at once by passing e.g. {@link\nBlockFace#NORTH_EAST}.","ret":"Whether it is attached to that face."},{"name":"putOnFace","params":[{"name":"face","type":"BlockFace","desc":"The face to attach."}],"desc":"Attach the vine to the specified face of an adjacent block.","ret":""},{"name":"removeFromFace","params":[{"name":"face","type":"BlockFace","desc":"The face to detach."}],"desc":"Detach the vine from the specified face of an adjacent block.","ret":""}],"desc":"Represents a vine"},{"FQCN":"org.bukkit.material.Wood","methods":[{"name":"getSpecies","params":[],"desc":"Gets the current species of this wood block","ret":"TreeSpecies of this wood block"},{"name":"getSpeciesType","params":[{"name":"type","type":"Material","desc":"The desired type"},{"name":"species","type":"TreeSpecies","desc":"The required species"}],"desc":"Correct the block type for certain species-type combinations.","ret":"The actual type for this species given the desired type"},{"name":"setSpecies","params":[{"name":"species","type":"TreeSpecies","desc":"New species of this wood block"}],"desc":"Sets the species of this wood block","ret":""}],"desc":"Represents wood blocks of different species."},{"FQCN":"org.bukkit.material.Cake","methods":[{"name":"getSlicesEaten","params":[],"desc":"Gets the number of slices eaten from this cake","ret":"The number of slices eaten"},{"name":"getSlicesRemaining","params":[],"desc":"Gets the number of slices remaining on this cake","ret":"The number of slices remaining"},{"name":"setSlicesEaten","params":[{"name":"n","type":"int","desc":"The number of slices eaten"}],"desc":"Sets the number of slices eaten from this cake","ret":""},{"name":"setSlicesRemaining","params":[{"name":"n","type":"int","desc":"The number of slices remaining"}],"desc":"Sets the number of slices remaining on this cake","ret":""}],"desc":""},{"FQCN":"org.bukkit.material.Sign","methods":[{"name":"isWallSign","params":[],"desc":"Check if this sign is attached to a wall","ret":"true if this sign is attached to a wall, false if set on top of\n    a block"},{"name":"getAttachedFace","params":[],"desc":"Gets the face that this block is attached on","ret":"BlockFace attached to"},{"name":"getFacing","params":[],"desc":"Gets the direction that this sign is currently facing","ret":"BlockFace indicating where this sign is facing"}],"desc":"MaterialData for signs"},{"FQCN":"org.bukkit.material.DirectionalContainer","methods":[],"desc":"Represents a furnace or a dispenser."},{"FQCN":"org.bukkit.material.Button","methods":[{"name":"isPowered","params":[],"desc":"Gets the current state of this Material, indicating if it's powered or\nunpowered","ret":"true if powered, otherwise false"},{"name":"setPowered","params":[{"name":"bool","type":"boolean","desc":"whether or not the button is powered"}],"desc":"Sets the current state of this button","ret":""},{"name":"getAttachedFace","params":[],"desc":"Gets the face that this block is attached on","ret":"BlockFace attached to"},{"name":"setFacingDirection","params":[{"name":"face","type":"BlockFace","desc":""}],"desc":"Sets the direction this button is pointing toward","ret":""}],"desc":"Represents a button"},{"FQCN":"org.bukkit.material.Command","methods":[{"name":"isPowered","params":[],"desc":"Gets the current state of this Material, indicating if it's powered or\nunpowered","ret":"true if powered, otherwise false"},{"name":"setPowered","params":[{"name":"bool","type":"boolean","desc":"whether or not the command block is powered"}],"desc":"Sets the current state of this Material","ret":""}],"desc":"Represents a command block"},{"FQCN":"org.bukkit.material.TripwireHook","methods":[{"name":"isConnected","params":[],"desc":"Test if tripwire is connected","ret":"true if connected, false if not"},{"name":"setConnected","params":[{"name":"connected","type":"boolean","desc":"- true if connected, false if not"}],"desc":"Set tripwire connection state","ret":""},{"name":"isActivated","params":[],"desc":"Test if hook is currently activated","ret":"true if activated, false if not"},{"name":"setActivated","params":[{"name":"act","type":"boolean","desc":"- true if activated, false if not"}],"desc":"Set hook activated state","ret":""}],"desc":"Represents the tripwire hook"},{"FQCN":"org.bukkit.material.DetectorRail","methods":[],"desc":"Represents a detector rail"},{"FQCN":"org.bukkit.material.Sapling","methods":[{"name":"isInstantGrowable","params":[],"desc":"Checks if the Sapling would grow when next ticked with bonemeal","ret":"true if the Sapling would grow when next ticked with bonemeal"},{"name":"setIsInstantGrowable","params":[{"name":"isInstantGrowable","type":"boolean","desc":"true if the Sapling should grow when next ticked\nwith bonemeal"}],"desc":"Set whether this sapling will grow when next ticked with bonemeal","ret":""}],"desc":"Represents the different types of Tree block that face a direction."},{"FQCN":"org.bukkit.material.PressurePlate","methods":[],"desc":"Represents a pressure plate"},{"FQCN":"org.bukkit.material.Skull","methods":[],"desc":"Represents a skull."},{"FQCN":"org.bukkit.material.CocoaPlant","methods":[{"name":"getSize","params":[],"desc":"Get size of plant","ret":"size"},{"name":"setSize","params":[{"name":"sz","type":"CocoaPlantSize","desc":"- size of plant"}],"desc":"Set size of plant","ret":""}],"desc":"Represents the cocoa plant"},{"FQCN":"org.bukkit.material.Ladder","methods":[{"name":"getAttachedFace","params":[],"desc":"Gets the face that this block is attached on","ret":"BlockFace attached to"},{"name":"setFacingDirection","params":[{"name":"face","type":"BlockFace","desc":""}],"desc":"Sets the direction this ladder is facing","ret":""}],"desc":"Represents Ladder data"},{"FQCN":"org.bukkit.material.Openable","methods":[{"name":"isOpen","params":[],"desc":"Check to see if the door is open.","ret":"true if the door has swung counterclockwise around its hinge."},{"name":"setOpen","params":[{"name":"isOpen","type":"boolean","desc":"True to open the door."}],"desc":"Configure this door to be either open or closed;","ret":""}],"desc":""},{"FQCN":"org.bukkit.material.Crops","methods":[{"name":"getState","params":[],"desc":"Gets the current growth state of this crop\n\nFor crops with only four growth states such as beetroot, only the values SEEDED, SMALL, TALL and RIPE will be\nreturned.","ret":"CropState of this crop"},{"name":"setState","params":[{"name":"state","type":"CropState","desc":"New growth state of this crop"}],"desc":"Sets the growth state of this crop\n\nFor crops with only four growth states such as beetroot, the 8 CropStates are mapped into four states:\n\nSEEDED, SMALL, TALL and RIPE\n\nGERMINATED will change to SEEDED\nVERY_SMALL will change to SMALL\nMEDIUM will change to TALL\nVERY_TALL will change to RIPE","ret":""}],"desc":"Represents the different types of crops in different states of growth."},{"FQCN":"org.bukkit.material.Stairs","methods":[{"name":"getAscendingDirection","params":[],"desc":"","ret":"the direction the stairs ascend towards"},{"name":"getDescendingDirection","params":[],"desc":"","ret":"the direction the stairs descend towards"},{"name":"setFacingDirection","params":[{"name":"face","type":"BlockFace","desc":""}],"desc":"Set the direction the stair part of the block is facing","ret":""},{"name":"getFacing","params":[],"desc":"","ret":"the direction the stair part of the block is facing"},{"name":"isInverted","params":[],"desc":"Test if step is inverted","ret":"true if inverted (top half), false if normal (bottom half)"},{"name":"setInverted","params":[{"name":"inv","type":"boolean","desc":"- true if step is inverted (top half), false if step is\n    normal (bottom half)"}],"desc":"Set step inverted state","ret":""}],"desc":"Represents stairs."},{"FQCN":"org.bukkit.material.Lever","methods":[{"name":"isPowered","params":[],"desc":"Gets the current state of this Material, indicating if it's powered or\nunpowered","ret":"true if powered, otherwise false"},{"name":"setPowered","params":[{"name":"isPowered","type":"boolean","desc":"whether the lever should be powered or not"}],"desc":"Set this lever to be powered or not.","ret":""},{"name":"getAttachedFace","params":[],"desc":"Gets the face that this block is attached on","ret":"BlockFace attached to"},{"name":"setFacingDirection","params":[{"name":"face","type":"BlockFace","desc":""}],"desc":"Sets the direction this lever is pointing in","ret":""}],"desc":"Represents a lever"},{"FQCN":"org.bukkit.material.PressureSensor","methods":[],"desc":""},{"FQCN":"org.bukkit.material.SimpleAttachableMaterialData","methods":[],"desc":"Simple utility class for attachable MaterialData subclasses"},{"FQCN":"org.bukkit.material.Dye","methods":[{"name":"getColor","params":[],"desc":"Gets the current color of this dye","ret":"DyeColor of this dye"},{"name":"setColor","params":[{"name":"color","type":"DyeColor","desc":"New color of this dye"}],"desc":"Sets the color of this dye","ret":""}],"desc":"Represents dye"},{"FQCN":"org.bukkit.material.Pumpkin","methods":[],"desc":"Represents a pumpkin."},{"FQCN":"org.bukkit.material.Banner","methods":[],"desc":""},{"FQCN":"org.bukkit.material.Bed","methods":[{"name":"isHeadOfBed","params":[],"desc":"Determine if this block represents the head of the bed","ret":"true if this is the head of the bed, false if it is the foot"},{"name":"setHeadOfBed","params":[{"name":"isHeadOfBed","type":"boolean","desc":"True to make it the head."}],"desc":"Configure this to be either the head or the foot of the bed","ret":""},{"name":"setFacingDirection","params":[{"name":"face","type":"BlockFace","desc":""}],"desc":"Set which direction the head of the bed is facing. Note that this will\nonly affect one of the two blocks the bed is made of.","ret":""},{"name":"getFacing","params":[],"desc":"Get the direction that this bed's head is facing toward","ret":"the direction the head of the bed is facing"}],"desc":"Represents a bed."},{"FQCN":"org.bukkit.material.Gate","methods":[],"desc":"Represents a fence gate"},{"FQCN":"org.bukkit.material.FurnaceAndDispenser","methods":[],"desc":"Represents a furnace or dispenser, two types of directional containers"},{"FQCN":"org.bukkit.material.Chest","methods":[],"desc":"Represents a chest"},{"FQCN":"org.bukkit.material.SmoothBrick","methods":[],"desc":"Represents the different types of smooth bricks."},{"FQCN":"org.bukkit.material.SpawnEgg","methods":[{"name":"getSpawnedType","params":[],"desc":"Get the type of entity this egg will spawn.","ret":"The entity type."},{"name":"setSpawnedType","params":[{"name":"type","type":"EntityType","desc":"The entity type."}],"desc":"Set the type of entity this egg will spawn.","ret":""}],"desc":"Represents a spawn egg that can be used to spawn mobs"},{"FQCN":"org.bukkit.material.MaterialData","methods":[{"name":"getData","params":[],"desc":"Gets the raw data in this material","ret":"Raw data"},{"name":"setData","params":[{"name":"data","type":"byte","desc":"New raw data"}],"desc":"Sets the raw data of this material","ret":""},{"name":"getItemType","params":[],"desc":"Gets the Material that this MaterialData represents","ret":"Material represented by this MaterialData"},{"name":"toItemStack","params":[],"desc":"Creates a new ItemStack based on this MaterialData","ret":"New ItemStack containing a copy of this MaterialData"},{"name":"toItemStack","params":[{"name":"amount","type":"int","desc":"The stack size of the new stack"}],"desc":"Creates a new ItemStack based on this MaterialData","ret":"New ItemStack containing a copy of this MaterialData"}],"desc":"Handles specific metadata for certain items or blocks"},{"FQCN":"org.bukkit.material.Dispenser","methods":[],"desc":"Represents a dispenser."},{"FQCN":"org.bukkit.material.Step","methods":[{"name":"isInverted","params":[],"desc":"Test if step is inverted","ret":"true if inverted (top half), false if normal (bottom half)"},{"name":"setInverted","params":[{"name":"inv","type":"boolean","desc":"- true if step is inverted (top half), false if step is\n    normal (bottom half)"}],"desc":"Set step inverted state","ret":""},{"name":"getTextureIndex","params":[],"desc":"{@inheritDoc}","ret":""},{"name":"setTextureIndex","params":[{"name":"idx","type":"int","desc":""}],"desc":"{@inheritDoc}","ret":""}],"desc":"Represents the different types of steps."},{"FQCN":"org.bukkit.material.Wool","methods":[{"name":"getColor","params":[],"desc":"Gets the current color of this dye","ret":"DyeColor of this dye"},{"name":"setColor","params":[{"name":"color","type":"DyeColor","desc":"New color of this dye"}],"desc":"Sets the color of this dye","ret":""}],"desc":"Represents a Wool/Cloth block"},{"FQCN":"org.bukkit.material.NetherWarts","methods":[{"name":"getState","params":[],"desc":"Gets the current growth state of this nether wart","ret":"NetherWartsState of this nether wart"},{"name":"setState","params":[{"name":"state","type":"NetherWartsState","desc":"New growth state of this nether wart"}],"desc":"Sets the growth state of this nether wart","ret":""}],"desc":"Represents nether wart"},{"FQCN":"org.bukkit.material.TrapDoor","methods":[{"name":"isInverted","params":[],"desc":"Test if trapdoor is inverted","ret":"true if inverted (top half), false if normal (bottom half)"},{"name":"setInverted","params":[{"name":"inv","type":"boolean","desc":"- true if inverted (top half), false if normal (bottom half)"}],"desc":"Set trapdoor inverted state","ret":""}],"desc":"Represents a trap door"},{"FQCN":"org.bukkit.material.Mushroom","methods":[{"name":"isStem","params":[],"desc":"","ret":"Whether this is a mushroom stem."},{"name":"setStem","params":[],"desc":"Sets this to be a mushroom stem.","ret":""},{"name":"getBlockTexture","params":[],"desc":"Gets the mushroom texture of this block.","ret":"The mushroom texture of this block"},{"name":"setBlockTexture","params":[{"name":"texture","type":"MushroomBlockTexture","desc":"The mushroom texture to set"}],"desc":"Sets the mushroom texture of this block.","ret":""},{"name":"isFacePainted","params":[{"name":"face","type":"BlockFace","desc":"The face to check."}],"desc":"Checks whether a face of the block is painted with cap texture.","ret":"True if it is painted."},{"name":"setFacePainted","params":[{"name":"face","type":"BlockFace","desc":"The face to paint or unpaint."},{"name":"painted","type":"boolean","desc":"True if you want to paint it, false if you want the\n    pores to show."}],"desc":"Set a face of the block to be painted or not. Note that due to the\nnature of how the data is stored, setting a face painted or not is not\nguaranteed to leave the other faces unchanged.","ret":""},{"name":"getPaintedFaces","params":[],"desc":"","ret":"A set of all faces that are currently painted (an empty set if\n    it is a stem)"}],"desc":"Represents a huge mushroom block with certain combinations of faces set to\ncap, pores or stem."},{"FQCN":"org.bukkit.material.Diode","methods":[{"name":"setDelay","params":[{"name":"delay","type":"int","desc":"The new delay (1-4)"}],"desc":"Sets the delay of the repeater.","ret":""},{"name":"getDelay","params":[],"desc":"Gets the delay of the repeater in ticks.","ret":"The delay (1-4)"},{"name":"setFacingDirection","params":[{"name":"face","type":"BlockFace","desc":"The direction to set this diode to"}],"desc":"Sets the direction this diode is facing.","ret":""},{"name":"getFacing","params":[],"desc":"Gets the direction this diode is facing","ret":"The direction this diode is facing"},{"name":"isPowered","params":[],"desc":"Checks if the diode is powered.","ret":"true if the diode is powered"}],"desc":"Represents a diode/repeater in the on or off state, with a delay and facing\nin a specific direction."},{"FQCN":"org.bukkit.material.Comparator","methods":[{"name":"setSubtractionMode","params":[{"name":"isSubtraction","type":"boolean","desc":"True if the comparator is in subtraction mode, false for normal comparator operation"}],"desc":"Sets whether the comparator is in subtraction mode.","ret":""},{"name":"isSubtractionMode","params":[],"desc":"Checks whether the comparator is in subtraction mode","ret":"True if the comparator is in subtraction mode, false if normal comparator operation"},{"name":"setFacingDirection","params":[{"name":"face","type":"BlockFace","desc":"The direction to set this comparator to"}],"desc":"Sets the direction this comparator is facing","ret":""},{"name":"getFacing","params":[],"desc":"Gets the direction this comparator is facing","ret":"The direction this comparator is facing"},{"name":"isPowered","params":[],"desc":"Checks if the comparator is powered","ret":"true if the comparator is powered"},{"name":"isBeingPowered","params":[],"desc":"Checks if the comparator is being powered","ret":"true if the comparator is being powered"}],"desc":"Represents a comparator in the on or off state, in normal or subtraction mode and facing in a specific direction."},{"FQCN":"org.bukkit.material.Colorable","methods":[{"name":"getColor","params":[],"desc":"Gets the color of this object.\n<br>\nThis may be null to represent the default color of an object, if the\nobject has a special default color (e.g Shulkers).","ret":"The DyeColor of this object."},{"name":"setColor","params":[{"name":"color","type":"DyeColor","desc":"The color of the object, as a DyeColor."}],"desc":"Sets the color of this object to the specified DyeColor.\n<br>\nThis may be null to represent the default color of an object, if the\nobject has a special default color (e.g Shulkers).","ret":""}],"desc":"An object that can be colored."},{"FQCN":"org.bukkit.material.EnderChest","methods":[],"desc":"Represents an ender chest"},{"FQCN":"org.bukkit.material.Observer","methods":[],"desc":"Represents an observer."},{"FQCN":"org.bukkit.material.RedstoneTorch","methods":[{"name":"isPowered","params":[],"desc":"Gets the current state of this Material, indicating if it's powered or\nunpowered","ret":"true if powered, otherwise false"}],"desc":"Represents a redstone torch"},{"FQCN":"org.bukkit.material.TexturedMaterial","methods":[{"name":"getTextures","params":[],"desc":"Retrieve a list of possible textures. The first element of the list\nwill be used as a default.","ret":"a list of possible textures for this block"},{"name":"getMaterial","params":[],"desc":"Gets the current Material this block is made of","ret":"Material of this block"},{"name":"setMaterial","params":[{"name":"material","type":"Material","desc":"New material of this block"}],"desc":"Sets the material this block is made of","ret":""},{"name":"getTextureIndex","params":[],"desc":"Get material index from data","ret":"index of data in textures list"},{"name":"setTextureIndex","params":[{"name":"idx","type":"int","desc":"- index of data in textures list"}],"desc":"Set material index","ret":""}],"desc":"Represents textured materials like steps and smooth bricks"},{"FQCN":"org.bukkit.material.Cauldron","methods":[{"name":"isFull","params":[],"desc":"Check if the cauldron is full.","ret":"True if it is full."},{"name":"isEmpty","params":[],"desc":"Check if the cauldron is empty.","ret":"True if it is empty."}],"desc":"Represents a cauldron"},{"FQCN":"org.bukkit.material.RedstoneWire","methods":[{"name":"isPowered","params":[],"desc":"Gets the current state of this Material, indicating if it's powered or\nunpowered","ret":"true if powered, otherwise false"}],"desc":"Represents redstone wire"},{"FQCN":"org.bukkit.damage.DamageEffect","methods":[{"name":"getSound","params":[],"desc":"Get the {@link Sound} played for this {@link DamageEffect}.","ret":"the sound"}],"desc":"Represents a type of effect that occurs when damage is inflicted. Currently,\neffects only determine the sound that plays."},{"FQCN":"org.bukkit.damage.DamageScaling","methods":[],"desc":"A means of damage scaling with respect to the server's difficulty."},{"FQCN":"org.bukkit.damage.DeathMessageType","methods":[],"desc":"Represents a type of death message used by a {@link DamageSource}."},{"FQCN":"org.bukkit.damage.DamageSource","methods":[{"name":"getDamageType","params":[],"desc":"Get the {@link DamageType}.","ret":"the damage type"},{"name":"getCausingEntity","params":[],"desc":"Get the {@link Entity} that caused the damage to occur.\n<p>\nNot to be confused with {@link #getDirectEntity()}, the causing entity is\nthe entity to which the damage is ultimately attributed if the receiver\nis killed. If, for example, the receiver was damaged by a projectile, the\nshooter/thrower would be returned.","ret":"an Entity or null"},{"name":"getDirectEntity","params":[],"desc":"Get the {@link Entity} that directly caused the damage.\n<p>\nNot to be confused with {@link #getCausingEntity()}, the direct entity is\nthe entity that actually inflicted the damage. If, for example, the\nreceiver was damaged by a projectile, the projectile would be returned.","ret":"an Entity or null"},{"name":"getDamageLocation","params":[],"desc":"Get the {@link Location} from where the damage originated. This will only\nbe present if an entity did not cause the damage.","ret":"the location, or null if none"},{"name":"getSourceLocation","params":[],"desc":"Get the {@link Location} from where the damage originated.\n<p>\nThis is a convenience method to get the final location of the damage.\nThis method will attempt to return\n{@link #getDamageLocation() the damage location}. If this is null, the\n{@link #getCausingEntity() causing entity location} will be returned.\nFinally if there is no damage location nor a causing entity, null will be\nreturned.","ret":"the source of the location or null."},{"name":"isIndirect","params":[],"desc":"Get if this damage is indirect.\n<p>\nDamage is considered indirect if {@link #getCausingEntity()} is not equal\nto {@link #getDirectEntity()}. This will be the case, for example, if a\nskeleton shot an arrow or a player threw a potion.","ret":"{@code true} if is indirect, {@code false} otherwise."},{"name":"getFoodExhaustion","params":[],"desc":"Get the amount of hunger exhaustion caused by this damage.","ret":"the amount of hunger exhaustion caused."},{"name":"scalesWithDifficulty","params":[],"desc":"Gets if this source of damage scales with difficulty.","ret":"{@code True} if scales."},{"name":"builder","params":[{"name":"damageType","type":"DamageType","desc":"the {@link DamageType} to use"}],"desc":"Create a new {@link DamageSource.Builder}.","ret":"a {@link DamageSource.Builder}"}],"desc":"Represents a source of damage."},{"FQCN":"org.bukkit.damage.DamageType","methods":[{"name":"getTranslationKey","params":[],"desc":"{@inheritDoc}\n<p>\nThe returned key is that of the death message sent when this damage type\nis responsible for the death of an entity.\n<p>\n<strong>Note</strong> This translation key is only used if\n{@link #getDeathMessageType()} is {@link DeathMessageType#DEFAULT}","ret":""},{"name":"getDamageScaling","params":[],"desc":"Get the {@link DamageScaling} for this damage type.","ret":"the damage scaling"},{"name":"getDamageEffect","params":[],"desc":"Get the {@link DamageEffect} for this damage type.","ret":"the damage effect"},{"name":"getDeathMessageType","params":[],"desc":"Get the {@link DeathMessageType} for this damage type.","ret":"the death message type"},{"name":"getExhaustion","params":[],"desc":"Get the amount of hunger exhaustion caused by this damage type.","ret":"the exhaustion"}],"desc":"Represent a type of damage that an entity can receive.\n<p>\nConstants in this class include the base types provided by the vanilla\nserver. Data packs are capable of registering more types of damage which may\nbe obtained through the {@link Registry#DAMAGE_TYPE}."},{"FQCN":"org.bukkit.potion.Potion","methods":[{"name":"splash","params":[],"desc":"Chain this to the constructor to make the potion a splash potion.","ret":"The potion."},{"name":"extend","params":[],"desc":"Chain this to the constructor to extend the potion's duration.","ret":"The potion."},{"name":"apply","params":[{"name":"to","type":"ItemStack","desc":"The itemstack to apply to"}],"desc":"Applies the effects of this potion to the given {@link ItemStack}. The\nItemStack must be a potion.","ret":""},{"name":"apply","params":[{"name":"to","type":"LivingEntity","desc":"The entity to apply the effects to"}],"desc":"Applies the effects that would be applied by this potion to the given\n{@link LivingEntity}.","ret":""},{"name":"getEffects","params":[],"desc":"Returns a collection of {@link PotionEffect}s that this {@link Potion}\nwould confer upon a {@link LivingEntity}.","ret":"The effects that this potion applies"},{"name":"getLevel","params":[],"desc":"Returns the level of this potion.","ret":"The level of this potion"},{"name":"getType","params":[],"desc":"Returns the {@link PotionType} of this potion.","ret":"The type of this potion"},{"name":"hasExtendedDuration","params":[],"desc":"Returns whether this potion has an extended duration.","ret":"Whether this potion has extended duration"},{"name":"isSplash","params":[],"desc":"Returns whether this potion is a splash potion.","ret":"Whether this is a splash potion"},{"name":"setHasExtendedDuration","params":[{"name":"isExtended","type":"boolean","desc":"Whether the potion should have extended duration"}],"desc":"Set whether this potion has extended duration. This will cause the\npotion to have roughly 8/3 more duration than a regular potion.","ret":""},{"name":"setSplash","params":[{"name":"isSplash","type":"boolean","desc":"Whether this is a splash potion"}],"desc":"Sets whether this potion is a splash potion. Splash potions can be\nthrown for a radius effect.","ret":""},{"name":"setType","params":[{"name":"type","type":"PotionType","desc":"The new type of this potion"}],"desc":"Sets the {@link PotionType} of this potion.","ret":""},{"name":"setLevel","params":[{"name":"level","type":"int","desc":"The new level of this potion"}],"desc":"Sets the level of this potion.","ret":""},{"name":"toDamageValue","params":[],"desc":"Converts this potion to a valid potion damage short, usable for potion\nitem stacks.","ret":"The damage value of this potion"},{"name":"toItemStack","params":[{"name":"amount","type":"int","desc":"The amount of the ItemStack"}],"desc":"Converts this potion to an {@link ItemStack} with the specified amount\nand a correct damage value.","ret":"The created ItemStack"},{"name":"fromDamage","params":[{"name":"damage","type":"int","desc":"the damage value"}],"desc":"Gets the potion from its damage value.","ret":"the produced potion"},{"name":"getBrewer","params":[],"desc":"Returns an instance of {@link PotionBrewer}.","ret":"An instance of PotionBrewer"},{"name":"setPotionBrewer","params":[{"name":"other","type":"PotionBrewer","desc":"The new PotionBrewer"}],"desc":"Sets the current instance of {@link PotionBrewer}. Generally not to be\nused from within a plugin.","ret":""},{"name":"getNameId","params":[],"desc":"Gets the potion from its name id.","ret":"the name id"}],"desc":"Potion Adapter for pre-1.9 data values\nsee @PotionMeta for 1.9+"},{"FQCN":"org.bukkit.potion.PotionType","methods":[{"name":"getEffectType","params":[],"desc":"","ret":"the potion effect type of this potion type"},{"name":"getPotionEffects","params":[],"desc":"","ret":"a list of all effects this potion type has"},{"name":"isInstant","params":[],"desc":"","ret":"if this potion type is instant"},{"name":"isUpgradeable","params":[],"desc":"Checks if the potion type has an upgraded state.\nThis refers to whether or not the potion type can be Tier 2,\nsuch as Potion of Fire Resistance II.","ret":"true if the potion type can be upgraded;"},{"name":"isExtendable","params":[],"desc":"Checks if the potion type has an extended state.\nThis refers to the extended duration potions","ret":"true if the potion type can be extended"},{"name":"getByEffect","params":[{"name":"effectType","type":"PotionEffectType","desc":"the effect to get by"}],"desc":"","ret":"the matching potion type"}],"desc":"This enum reflects and matches each potion state that can be obtained from\nthe Creative mode inventory"},{"FQCN":"org.bukkit.potion.PotionData","methods":[{"name":"getType","params":[],"desc":"Gets the type of the potion, Type matches up with each kind of craftable\npotion","ret":"the potion type"},{"name":"isUpgraded","params":[],"desc":"Checks if the potion is in an upgraded state. This refers to whether or\nnot the potion is Tier 2, such as Potion of Fire Resistance II.","ret":"true if the potion is upgraded;"},{"name":"isExtended","params":[],"desc":"Checks if the potion is in an extended state. This refers to the extended\nduration potions","ret":"true if the potion is extended"}],"desc":""},{"FQCN":"org.bukkit.potion.PotionBrewer","methods":[{"name":"createEffect","params":[{"name":"potion","type":"PotionEffectType","desc":"The type of potion"},{"name":"duration","type":"int","desc":"The duration in ticks"},{"name":"amplifier","type":"int","desc":"The amplifier of the effect"}],"desc":"Creates a {@link PotionEffect} from the given {@link PotionEffectType},\napplying duration modifiers and checks.","ret":"The resulting potion effect"},{"name":"getEffectsFromDamage","params":[{"name":"damage","type":"int","desc":"The data value of the potion"}],"desc":"Returns a collection of {@link PotionEffect} that would be applied from\na potion with the given data value.","ret":"The list of effects"},{"name":"getEffects","params":[{"name":"type","type":"PotionType","desc":"The type of the potion"},{"name":"upgraded","type":"boolean","desc":"Whether the potion is upgraded"},{"name":"extended","type":"boolean","desc":"Whether the potion is extended"}],"desc":"Returns a collection of {@link PotionEffect} that would be applied from\na potion with the given type.","ret":"The list of effects"},{"name":"addPotionMix","params":[{"name":"potionMix","type":"io.papermc.paper.potion.PotionMix","desc":"the potion mix to add"}],"desc":"Adds a new potion mix recipe.","ret":""},{"name":"removePotionMix","params":[{"name":"key","type":"org.bukkit.NamespacedKey","desc":"the key of the mix to remove"}],"desc":"Removes a potion mix recipe.","ret":""},{"name":"resetPotionMixes","params":[],"desc":"Resets potion mixes to their default, removing all custom ones.","ret":""}],"desc":"Represents a brewer that can create {@link PotionEffect}s."},{"FQCN":"org.bukkit.potion.PotionEffect","methods":[{"name":"getHiddenPotionEffect","params":[],"desc":"Returns the PotionEffect that will become active\nafter the current PotionEffect has run out.\n<p>\nNote: This value is only applicable to type applied to living entities.","ret":"The hidden PotionEffect."},{"name":"apply","params":[{"name":"entity","type":"LivingEntity","desc":"The entity to add this effect to"}],"desc":"Attempts to add the effect represented by this object to the given\n{@link LivingEntity}.\n<p>\nNote: {@link PotionEffect#getHiddenPotionEffect()} is ignored when\nadding the effect to the entity.","ret":"Whether the effect could be added"},{"name":"getAmplifier","params":[],"desc":"Returns the amplifier of this effect. A higher amplifier means the\npotion effect happens more often over its duration and in some cases\nhas more effect on its target.","ret":"The effect amplifier"},{"name":"getDuration","params":[],"desc":"Returns the duration (in ticks) that this effect will run for when\napplied to a {@link LivingEntity}.","ret":"The duration of the effect, or {@value #INFINITE_DURATION} if\nthis effect is infinite"},{"name":"isInfinite","params":[],"desc":"Returns whether or not this potion effect has an infinite duration. Potion\neffects with infinite durations will display an infinite symbol and never\nexpire unless manually removed.","ret":"whether this duration is infinite or not"},{"name":"isShorterThan","params":[{"name":"other","type":"PotionEffect","desc":"the other effect"}],"desc":"Returns whether or not this potion effect has a shorter duration than the\nprovided potion effect.\n<p>\nAn infinite duration is considered longer than non-infinite durations. If\nboth potion effects have infinite durations, then neither is shorter than\nthe other and this method will return false.","ret":"true if this effect is shorter than the other, false if longer or equal"},{"name":"getType","params":[],"desc":"Returns the {@link PotionEffectType} of this effect.","ret":"The potion type of this effect"},{"name":"isAmbient","params":[],"desc":"Makes potion effect produce more, translucent, particles.","ret":"if this effect is ambient"},{"name":"hasParticles","params":[],"desc":"","ret":"whether this effect has particles or not"},{"name":"getColor","params":[],"desc":"","ret":"color of this potion's particles. May be null if the potion has no particles or defined color."},{"name":"hasIcon","params":[],"desc":"","ret":"whether this effect has an icon or not"}],"desc":"Represents a potion effect, that can be added to a {@link LivingEntity}. A\npotion effect has a duration that it will last for, an amplifier that will\nenhance its effects, and a {@link PotionEffectType}, that represents its\neffect on an entity."},{"FQCN":"org.bukkit.potion.PotionEffectTypeWrapper","methods":[{"name":"getType","params":[],"desc":"Get the potion type bound to this wrapper.","ret":"The potion effect type"}],"desc":""},{"FQCN":"org.bukkit.potion.PotionEffectType","methods":[{"name":"createEffect","params":[{"name":"duration","type":"int","desc":"time in ticks"},{"name":"amplifier","type":"int","desc":"the effect's amplifier"}],"desc":"Creates a PotionEffect from this PotionEffectType, applying duration\nmodifiers and checks.","ret":"a resulting potion effect"},{"name":"isInstant","params":[],"desc":"Returns whether the effect of this type happens once, immediately.","ret":"whether this type is normally instant"},{"name":"getColor","params":[],"desc":"Returns the color of this effect type.","ret":"the color"},{"name":"getDurationModifier","params":[],"desc":"Returns the duration modifier applied to effects of this type.","ret":"duration modifier"},{"name":"getId","params":[],"desc":"Returns the unique ID of this type.","ret":"Unique ID"},{"name":"getName","params":[],"desc":"Returns the name of this effect type.","ret":"The name of this effect type"},{"name":"getByKey","params":[{"name":"key","type":"NamespacedKey","desc":"key to fetch"}],"desc":"Gets the PotionEffectType at the specified key","ret":"Resulting PotionEffectType, or null if not found"},{"name":"getById","params":[{"name":"id","type":"int","desc":"Unique ID to fetch"}],"desc":"Gets the effect type specified by the unique id.","ret":"Resulting type, or null if not found."},{"name":"getByName","params":[{"name":"name","type":"String","desc":"Name of PotionEffectType to fetch"}],"desc":"Gets the effect type specified by the given name.","ret":"Resulting PotionEffectType, or null if not found."},{"name":"values","params":[],"desc":"","ret":"an array of all known PotionEffectTypes."},{"name":"getEffectAttributes","params":[],"desc":"Gets the effect attributes in an immutable map.","ret":"the attribute map"},{"name":"getAttributeModifierAmount","params":[{"name":"attribute","type":"org.bukkit.attribute.Attribute","desc":"the attribute"},{"name":"effectAmplifier","type":"int","desc":"the effect amplifier (0 indexed)"}],"desc":"Gets the true modifier amount based on the effect amplifier.","ret":"the modifier amount"},{"name":"getEffectCategory","params":[],"desc":"Gets the category of this effect","ret":"the category"}],"desc":"Represents a type of potion and its effect on an entity."},{"FQCN":"org.bukkit.help.GenericCommandHelpTopic","methods":[],"desc":"Lacking an alternative, the help system will create instances of\nGenericCommandHelpTopic for each command in the server's CommandMap. You\ncan use this class as a base class for custom help topics, or as an example\nfor how to write your own."},{"FQCN":"org.bukkit.help.HelpTopic","methods":[{"name":"canSee","params":[{"name":"player","type":"CommandSender","desc":"The Player in question."}],"desc":"Determines if a {@link Player} is allowed to see this help topic.\n<p>\nHelpTopic implementations should take server administrator wishes into\naccount as set by the {@link HelpTopic#amendCanSee(String)} function.","ret":"True of the Player can see this help topic, false otherwise."},{"name":"amendCanSee","params":[{"name":"amendedPermission","type":"String","desc":"The permission node the server administrator\n    wishes to apply to this topic."}],"desc":"Allows the server administrator to override the permission required to\nsee a help topic.\n<p>\nHelpTopic implementations should take this into account when\ndetermining topic visibility on the {@link\nHelpTopic#canSee(org.bukkit.command.CommandSender)} function.","ret":""},{"name":"getName","params":[],"desc":"Returns the name of this help topic.","ret":"The topic name."},{"name":"getShortText","params":[],"desc":"Returns a brief description that will be displayed in the topic index.","ret":"A brief topic description."},{"name":"getFullText","params":[{"name":"forWho","type":"CommandSender","desc":"The player or console requesting the full text. Useful\n    for further security trimming the command's full text based on\n    sub-permissions in custom implementations."}],"desc":"Returns the full description of this help topic that is displayed when\nthe user requests this topic's details.\n<p>\nThe result will be paginated to properly fit the user's client.","ret":"A full topic description."},{"name":"amendTopic","params":[{"name":"amendedShortText","type":"String","desc":"The new topic short text to use, or null to\n    leave alone."},{"name":"amendedFullText","type":"String","desc":"The new topic full text to use, or null to leave\n    alone."}],"desc":"Allows the server admin (or another plugin) to add or replace the\ncontents of a help topic.\n<p>\nA null in either parameter will leave that part of the topic unchanged.\nIn either amending parameter, the string {@literal <text>} is replaced\nwith the existing contents in the help topic. Use this to append or\nprepend additional content into an automatically generated help topic.","ret":""},{"name":"applyAmendment","params":[{"name":"baseText","type":"String","desc":"The existing text of the help topic."},{"name":"amendment","type":"String","desc":"The amending text from the amendTopic() method."}],"desc":"Developers implementing their own custom HelpTopic implementations can\nuse this utility method to ensure their implementations comply with the\nexpected behavior of the {@link HelpTopic#amendTopic(String, String)}\nmethod.","ret":"The application of the amending text to the existing text,\n    according to the expected rules of amendTopic()."}],"desc":"HelpTopic implementations are displayed to the user when the user uses the\n/help command.\n<p>\nCustom implementations of this class can work at two levels. A simple\nimplementation only needs to set the value of {@code name}, {@code\nshortText}, and {@code fullText} in the constructor. This base class will\ntake care of the rest.\n<p>\nComplex implementations can be created by overriding the behavior of all\nthe methods in this class."},{"FQCN":"org.bukkit.help.HelpTopicFactory","methods":[{"name":"createTopic","params":[{"name":"command","type":"TCommand","desc":"The custom command to build a help topic for."}],"desc":"This method accepts a command deriving from a custom command base class\nand constructs a custom HelpTopic for it.","ret":"A new custom help topic or {@code null} to intentionally NOT\n    create a topic."}],"desc":"A HelpTopicFactory is used to create custom {@link HelpTopic} objects from\ncommands that inherit from a common base class or have executors that\ninherit from a common base class. You can use a custom HelpTopic to change\nthe way all the commands in your plugin display in the help. If your plugin\nimplements a complex permissions system, a custom help topic may also be\nappropriate.\n<p>\nTo automatically bind your plugin's commands to your custom HelpTopic\nimplementation, first make sure all your commands or executors derive from\na custom base class (it doesn't have to do anything). Next implement a\ncustom HelpTopicFactory that accepts your custom command base class and\ninstantiates an instance of your custom HelpTopic from it. Finally,\nregister your HelpTopicFactory against your command base class using the\n{@link HelpMap#registerHelpTopicFactory(Class, HelpTopicFactory)} method.\n<p>\nAs the help system iterates over all registered commands to make help\ntopics, it first checks to see if there is a HelpTopicFactory registered\nfor the command's base class. If so, the factory is used to make a help\ntopic rather than a generic help topic. If no factory is found for the\ncommand's base class and the command derives from {@link\norg.bukkit.command.PluginCommand}, then the type of the command's executor\nis inspected looking for a registered HelpTopicFactory. Finally, if no\nfactory is found, a generic help topic is created for the command."},{"FQCN":"org.bukkit.help.HelpMap","methods":[{"name":"getHelpTopic","params":[{"name":"topicName","type":"String","desc":"The help topic name to look up."}],"desc":"Returns a help topic for a given topic name.","ret":"A {@link HelpTopic} object matching the topic name or null if\n    none can be found."},{"name":"getHelpTopics","params":[],"desc":"Returns a collection of all the registered help topics.","ret":"All the registered help topics."},{"name":"addTopic","params":[{"name":"topic","type":"HelpTopic","desc":"The new help topic to add."}],"desc":"Adds a topic to the server's help index.","ret":""},{"name":"clear","params":[],"desc":"Clears out the contents of the help index. Normally called during\nserver reload.","ret":""},{"name":"registerHelpTopicFactory","params":[{"name":"commandClass","type":"Class<?>","desc":"The class for which the custom HelpTopicFactory\n    applies. Must derive from either {@link org.bukkit.command.Command}\n    or {@link org.bukkit.command.CommandExecutor}."},{"name":"factory","type":"HelpTopicFactory<?>","desc":"The {@link HelpTopicFactory} implementation to associate\n    with the {@code commandClass}."}],"desc":"Associates a {@link HelpTopicFactory} object with given command base\nclass. Plugins typically call this method during {@code onLoad()}. Once\nregistered, the custom HelpTopicFactory will be used to create a custom\n{@link HelpTopic} for all commands deriving from the {@code\ncommandClass} base class, or all commands deriving from {@link\norg.bukkit.command.PluginCommand} who's executor derives from {@code\ncommandClass} base class.","ret":""},{"name":"getIgnoredPlugins","params":[],"desc":"Gets the list of plugins the server administrator has chosen to exclude\nfrom the help index. Plugin authors who choose to directly extend\n{@link org.bukkit.command.Command} instead of {@link\norg.bukkit.command.PluginCommand} will need to check this collection in\ntheir {@link HelpTopicFactory} implementations to ensure they meet the\nserver administrator's expectations.","ret":"A list of plugins that should be excluded from the help index."}],"desc":"The HelpMap tracks all help topics registered in a Bukkit server. When the\nserver starts up or is reloaded, help is processed and topics are added in\nthe following order:\n\n<ol>\n<li>General topics are loaded from the help.yml\n<li>Plugins load and optionally call {@code addTopic()}\n<li>Registered plugin commands are processed by {@link HelpTopicFactory}\n    objects to create topics\n<li>Topic contents are amended as directed in help.yml\n</ol>"},{"FQCN":"org.bukkit.help.IndexHelpTopic","methods":[{"name":"setTopicsCollection","params":[{"name":"topics","type":"Collection<HelpTopic>","desc":"The topics to set."}],"desc":"Sets the contents of the internal allTopics collection.","ret":""},{"name":"buildPreamble","params":[{"name":"sender","type":"CommandSender","desc":"The command sender requesting the preamble."}],"desc":"Builds the topic preamble. Override this method to change how the index\npreamble looks.","ret":"The topic preamble."},{"name":"buildIndexLine","params":[{"name":"sender","type":"CommandSender","desc":"The command sender requesting the index line."},{"name":"topic","type":"HelpTopic","desc":"The topic to render into an index line."}],"desc":"Builds individual lines in the index topic. Override this method to\nchange how index lines are rendered.","ret":"The rendered index line."}],"desc":"This help topic generates a list of other help topics. This class is useful\nfor adding your own index help topics. To enforce a particular order, use a\nsorted collection.\n<p>\nIf a preamble is provided to the constructor, that text will be displayed\nbefore the first item in the index."},{"FQCN":"org.bukkit.help.HelpTopicComparator","methods":[],"desc":"Used to impose a custom total ordering on help topics.\n<p>\nAll topics are listed in alphabetic order, but topics that start with a\nslash come after topics that don't."},{"FQCN":"org.bukkit.Color","methods":[{"name":"fromARGB","params":[{"name":"alpha","type":"int","desc":"integer from 0-255"},{"name":"red","type":"int","desc":"integer from 0-255"},{"name":"green","type":"int","desc":"integer from 0-255"},{"name":"blue","type":"int","desc":"integer from 0-255"}],"desc":"Creates a new Color object from an alpha, red, green, and blue","ret":"a new Color object for the alpha, red, green, blue"},{"name":"fromRGB","params":[{"name":"red","type":"int","desc":"integer from 0-255"},{"name":"green","type":"int","desc":"integer from 0-255"},{"name":"blue","type":"int","desc":"integer from 0-255"}],"desc":"Creates a new Color object from a red, green, and blue","ret":"a new Color object for the red, green, blue"},{"name":"fromBGR","params":[{"name":"blue","type":"int","desc":"integer from 0-255"},{"name":"green","type":"int","desc":"integer from 0-255"},{"name":"red","type":"int","desc":"integer from 0-255"}],"desc":"Creates a new Color object from a blue, green, and red","ret":"a new Color object for the red, green, blue"},{"name":"fromRGB","params":[{"name":"rgb","type":"int","desc":"the integer storing the red, green, and blue values"}],"desc":"Creates a new color object from an integer that contains the red,\ngreen, and blue bytes in the lowest order 24 bits.","ret":"a new color object for specified values"},{"name":"fromARGB","params":[{"name":"argb","type":"int","desc":"the integer storing the alpha, red, green, and blue values"}],"desc":"Creates a new color object from an integer that contains the alpha, red,\ngreen, and blue bytes.","ret":"a new color object for specified values"},{"name":"fromBGR","params":[{"name":"bgr","type":"int","desc":"the integer storing the blue, green, and red values"}],"desc":"Creates a new color object from an integer that contains the blue,\ngreen, and red bytes in the lowest order 24 bits.","ret":"a new color object for specified values"},{"name":"getAlpha","params":[],"desc":"Gets the alpha component","ret":"alpha component, from 0 to 255"},{"name":"setAlpha","params":[{"name":"alpha","type":"int","desc":"the alpha component, from 0 to 255"}],"desc":"Creates a new Color object with specified component","ret":"a new color object with the red component"},{"name":"getRed","params":[],"desc":"Gets the red component","ret":"red component, from 0 to 255"},{"name":"setRed","params":[{"name":"red","type":"int","desc":"the red component, from 0 to 255"}],"desc":"Creates a new Color object with specified component","ret":"a new color object with the red component"},{"name":"getGreen","params":[],"desc":"Gets the green component","ret":"green component, from 0 to 255"},{"name":"setGreen","params":[{"name":"green","type":"int","desc":"the red component, from 0 to 255"}],"desc":"Creates a new Color object with specified component","ret":"a new color object with the red component"},{"name":"getBlue","params":[],"desc":"Gets the blue component","ret":"blue component, from 0 to 255"},{"name":"setBlue","params":[{"name":"blue","type":"int","desc":"the red component, from 0 to 255"}],"desc":"Creates a new Color object with specified component","ret":"a new color object with the red component"},{"name":"asRGB","params":[],"desc":"Gets the color as an RGB integer.","ret":"An integer representation of this color, as 0xRRGGBB"},{"name":"asARGB","params":[],"desc":"Gets the color as an ARGB integer.","ret":"An integer representation of this color, as 0xAARRGGBB"},{"name":"asBGR","params":[],"desc":"Gets the color as an BGR integer.","ret":"An integer representation of this color, as 0xBBGGRR"}],"desc":"A container for a color palette. This class is immutable; the set methods\nreturn a new color. The color names listed as fields are HTML4 standards,\nbut subject to change."},{"FQCN":"org.bukkit.block.BlockState","methods":[{"name":"getBlock","params":[],"desc":"Gets the block represented by this block state.","ret":"the block represented by this block state"},{"name":"getData","params":[],"desc":"Gets the metadata for this block state.","ret":"block specific metadata"},{"name":"getBlockData","params":[],"desc":"Gets the data for this block state.","ret":"block specific data"},{"name":"copy","params":[],"desc":"Returns a copy of this BlockState as an unplaced BlockState.","ret":"a copy of the block state"},{"name":"getType","params":[],"desc":"Gets the type of this block state.","ret":"block type"},{"name":"getLightLevel","params":[],"desc":"Gets the current light level of the block represented by this block state.","ret":"the light level between 0-15"},{"name":"getWorld","params":[],"desc":"Gets the world which contains the block represented by this block state.","ret":"the world containing the block represented by this block state"},{"name":"getX","params":[],"desc":"Gets the x-coordinate of this block state.","ret":"x-coordinate"},{"name":"getY","params":[],"desc":"Gets the y-coordinate of this block state.","ret":"y-coordinate"},{"name":"getZ","params":[],"desc":"Gets the z-coordinate of this block state.","ret":"z-coordinate"},{"name":"getLocation","params":[],"desc":"Gets the location of this block state.\n<p>\nIf this block state is not placed the location's world will be null!","ret":"the location"},{"name":"getLocation","params":[{"name":"loc","type":"Location","desc":"the location to copy into"}],"desc":"Stores the location of this block state in the provided Location object.\n<p>\nIf the provided Location is null this method does nothing and returns\nnull.\n<p>\nIf this block state is not placed the location's world will be null!","ret":"The Location object provided or null"},{"name":"getChunk","params":[],"desc":"Gets the chunk which contains the block represented by this block state.","ret":"the containing Chunk"},{"name":"setData","params":[{"name":"data","type":"MaterialData","desc":"New block specific metadata"}],"desc":"Sets the metadata for this block state.","ret":""},{"name":"setBlockData","params":[{"name":"data","type":"BlockData","desc":"New block specific data"}],"desc":"Sets the data for this block state.","ret":""},{"name":"setType","params":[{"name":"type","type":"Material","desc":"Material to change this block state to"}],"desc":"Sets the type of this block state.","ret":""},{"name":"update","params":[],"desc":"Attempts to update the block represented by this state, setting it to\nthe new values as defined by this state.\n<p>\nThis has the same effect as calling update(false). That is to say,\nthis will not modify the state of a block if it is no longer the same\ntype as it was when this state was taken. It will return false in this\neventuality.","ret":"true if the update was successful, otherwise false"},{"name":"update","params":[{"name":"force","type":"boolean","desc":"true to forcefully set the state"}],"desc":"Attempts to update the block represented by this state, setting it to\nthe new values as defined by this state.\n<p>\nThis has the same effect as calling update(force, true). That is to\nsay, this will trigger a physics update to surrounding blocks.","ret":"true if the update was successful, otherwise false"},{"name":"update","params":[{"name":"force","type":"boolean","desc":"true to forcefully set the state"},{"name":"applyPhysics","type":"boolean","desc":"false to cancel updating physics on surrounding\n    blocks"}],"desc":"Attempts to update the block represented by this state, setting it to\nthe new values as defined by this state.\n<p>\nIf this state is not placed, this will have no effect and return true.\n<p>\nUnless force is true, this will not modify the state of a block if it\nis no longer the same type as it was when this state was taken. It will\nreturn false in this eventuality.\n<p>\nIf force is true, it will set the type of the block to match the new\nstate, set the state data and then return true.\n<p>\nIf applyPhysics is true, it will trigger a physics update on\nsurrounding blocks which could cause them to update or disappear.","ret":"true if the update was successful, otherwise false"},{"name":"getRawData","params":[],"desc":"","ret":"The data as a raw byte."},{"name":"setRawData","params":[{"name":"data","type":"byte","desc":"The new data value for the block."}],"desc":"","ret":""},{"name":"isPlaced","params":[],"desc":"Returns whether this state is placed in the world.\n<p>\nSome methods will not work if the block state isn't\nplaced in the world.","ret":"whether the state is placed in the world\n        or 'virtual' (e.g. on an itemstack)"},{"name":"isCollidable","params":[],"desc":"Checks if this block state is collidable.","ret":"true if collidable"},{"name":"getDrops","params":[],"desc":"Returns an immutable list of items which would drop by destroying this block state.","ret":"an immutable list of dropped items for the block state"},{"name":"getDrops","params":[{"name":"tool","type":"org.bukkit.inventory.ItemStack","desc":"The tool or item in hand used for digging"}],"desc":"Returns an immutable list of items which would drop by destroying this block state\nwith a specific tool","ret":"an immutable list of dropped items for the block state"},{"name":"getDrops","params":[{"name":"tool","type":"org.bukkit.inventory.ItemStack","desc":"The tool or item in hand used for digging"},{"name":"entity","type":"org.bukkit.entity.Entity","desc":"the entity destroying the block"}],"desc":"Returns an immutable list of items which would drop by the entity destroying this\nblock state with a specific tool","ret":"an immutable list of dropped items for the block state"}],"desc":"Represents a captured state of a block, which will not change\nautomatically.\n<p>\nUnlike Block, which only one object can exist per coordinate, BlockState\ncan exist multiple times for any given Block. Note that another plugin may\nchange the state of the block and you will not know, or they may change the\nblock to another type entirely, causing your BlockState to become invalid."},{"FQCN":"org.bukkit.block.DoubleChest","methods":[],"desc":"Represents a double chest."},{"FQCN":"org.bukkit.block.Conduit","methods":[{"name":"isActive","params":[],"desc":"Gets if the conduit is currently active.\n<p>\nRequires the conduit to be placed in the world.","ret":"if the conduit is active"},{"name":"getRange","params":[],"desc":"Gets the range in which the Conduit Power effect gets added to players.\n<p>\nRequires the conduit to be placed in the world.","ret":"the range"},{"name":"getTarget","params":[],"desc":"Gets the current target of the conduit.","ret":"the current target"}],"desc":"Represents a captured state of a conduit."},{"FQCN":"org.bukkit.block.DecoratedPot","methods":[{"name":"setSherd","params":[{"name":"side","type":"Side","desc":"the side to set"},{"name":"sherd","type":"Material","desc":"the sherd, or null to set a blank side."}],"desc":"Set the sherd on the provided side.","ret":""},{"name":"getSherd","params":[{"name":"side","type":"Side","desc":"the side to get"}],"desc":"Get the sherd on the provided side.","ret":"the sherd on the side or {@link Material#BRICK} if it's blank"},{"name":"getSherds","params":[],"desc":"Gets a Map of all sides on this decorated pot and the sherds on them.\nIf a side does not have a specific sherd on it, {@link Material#BRICK}\nwill be the value of that side.","ret":"the sherds"},{"name":"getShards","params":[],"desc":"Gets the sherds on this decorated pot. For faces without a specific sherd,\n{@link Material#BRICK} is used in its place.","ret":"the sherds"},{"name":"getInventory","params":[],"desc":"","ret":"inventory"},{"name":"getSnapshotInventory","params":[],"desc":"","ret":"snapshot inventory"}],"desc":"Represents a captured state of a decorated pot."},{"FQCN":"org.bukkit.block.EndGateway","methods":[{"name":"getExitLocation","params":[],"desc":"Gets the location that entities are teleported to when\nentering the gateway portal.\n<p>\nIf this block state is not placed the location's world will be null.","ret":"the gateway exit location"},{"name":"setExitLocation","params":[{"name":"location","type":"Location","desc":"the new exit location"}],"desc":"Sets the exit location that entities are teleported to when\nthey enter the gateway portal.\n<p>\nIf this block state is not placed the location's world has to be null.","ret":""},{"name":"isExactTeleport","params":[],"desc":"Gets whether this gateway will teleport entities directly to\nthe exit location instead of finding a nearby location.","ret":"true if the gateway is teleporting to the exact location"},{"name":"setExactTeleport","params":[{"name":"exact","type":"boolean","desc":"whether to teleport to the exact location"}],"desc":"Sets whether this gateway will teleport entities directly to\nthe exit location instead of finding a nearby location.","ret":""},{"name":"getAge","params":[],"desc":"Gets the age in ticks of the gateway.\n<br>\nIf the age is less than 200 ticks a magenta beam will be emitted, whilst\nif it is a multiple of 2400 ticks a purple beam will be emitted.","ret":"age in ticks"},{"name":"setAge","params":[{"name":"age","type":"long","desc":"new age in ticks"}],"desc":"Sets the age in ticks of the gateway.\n<br>\nIf the age is less than 200 ticks a magenta beam will be emitted, whilst\nif it is a multiple of 2400 ticks a purple beam will be emitted.","ret":""}],"desc":"Represents a captured state of an end gateway."},{"FQCN":"org.bukkit.block.Biome","methods":[],"desc":"Holds all accepted Biomes in the default server"},{"FQCN":"org.bukkit.block.Lectern","methods":[{"name":"getPage","params":[],"desc":"Get the current lectern page.","ret":"current page"},{"name":"setPage","params":[{"name":"page","type":"int","desc":"new page"}],"desc":"Set the current lectern page.\n\nIf the page is greater than the number of pages of the book currently in\nthe inventory, then behavior is undefined.","ret":""},{"name":"getInventory","params":[],"desc":"","ret":"inventory"},{"name":"getSnapshotInventory","params":[],"desc":"","ret":"snapshot inventory"}],"desc":"Represents a captured state of a lectern."},{"FQCN":"org.bukkit.block.BrushableBlock","methods":[{"name":"getItem","params":[],"desc":"Get the item which will be revealed when the sand is fully brushed away\nand uncovered.","ret":"the item"},{"name":"setItem","params":[{"name":"item","type":"ItemStack","desc":"the item"}],"desc":"Sets the item which will be revealed when the sand is fully brushed away\nand uncovered.","ret":""}],"desc":"Represents a captured state of suspicious sand or gravel."},{"FQCN":"org.bukkit.block.Hopper","methods":[{"name":"setTransferCooldown","params":[{"name":"cooldown","type":"int","desc":"the cooldown in ticks"}],"desc":"Sets the cooldown before the hopper transfers or sucks in another item","ret":""},{"name":"getTransferCooldown","params":[],"desc":"Returns the cooldown before the hopper transfers or sucks in another item","ret":"the cooldown in ticks"}],"desc":"Represents a captured state of a hopper."},{"FQCN":"org.bukkit.block.Lidded","methods":[{"name":"open","params":[],"desc":"Sets the block's animated state to open and prevents it from being closed\nuntil {@link #close()} is called.","ret":""},{"name":"close","params":[],"desc":"Sets the block's animated state to closed even if a player is currently\nviewing this block.","ret":""},{"name":"isOpen","params":[],"desc":"Checks if the block's animation state.","ret":"true if the block's animation state is set to open."}],"desc":""},{"FQCN":"org.bukkit.block.Furnace","methods":[{"name":"getBurnTime","params":[],"desc":"Get burn time.","ret":"Burn time"},{"name":"setBurnTime","params":[{"name":"burnTime","type":"short","desc":"Burn time"}],"desc":"Set burn time.\n\nA burn time greater than 0 will cause this block to be lit, whilst a time\nless than 0 will extinguish it.","ret":""},{"name":"getCookTime","params":[],"desc":"Get cook time.\n\nThis is the amount of time the item has been cooking for.","ret":"Cook time"},{"name":"setCookTime","params":[{"name":"cookTime","type":"short","desc":"Cook time"}],"desc":"Set cook time.\n\nThis is the amount of time the item has been cooking for.","ret":""},{"name":"getCookTimeTotal","params":[],"desc":"Get cook time total.\n\nThis is the amount of time the item is required to cook for.","ret":"Cook time total"},{"name":"setCookTimeTotal","params":[{"name":"cookTimeTotal","type":"int","desc":"Cook time total"}],"desc":"Set cook time.\n\nThis is the amount of time the item is required to cook for.","ret":""},{"name":"getRecipesUsed","params":[],"desc":"Get the recipes used in this furnace.\n\n<b>Note:</b> These recipes used are reset when the result item is\nmanually taken from the furnace.","ret":"An immutable map with the recipes used and the times used"},{"name":"getCookSpeedMultiplier","params":[],"desc":"Gets the cook speed multiplier that this {@link Furnace} will cook\ncompared to vanilla.","ret":"the multiplier, a value between 0 and 200"},{"name":"setCookSpeedMultiplier","params":[{"name":"multiplier","type":"double","desc":"the multiplier to set, a value between 0 and 200"}],"desc":"Sets the speed multiplier that this {@link Furnace} will cook\ncompared to vanilla.","ret":""},{"name":"getRecipeUsedCount","params":[{"name":"furnaceRecipe","type":"org.bukkit.NamespacedKey","desc":"the recipe to query the count for"}],"desc":"Gets the number of times a recipe has been used since the\nlast player removed items from the result slot. This is used\nto calculate experience rewards when withdrawing items from furnaces.","ret":"the count or 0 if none found"},{"name":"hasRecipeUsedCount","params":[{"name":"furnaceRecipe","type":"org.bukkit.NamespacedKey","desc":"the recipe to check if a count exists for"}],"desc":"Checks if the recipe has a used count present on this furnace.","ret":"true if there is a positive count, else false"},{"name":"setRecipeUsedCount","params":[{"name":"furnaceRecipe","type":"org.bukkit.inventory.CookingRecipe<?>","desc":"the recipe to set the count for"},{"name":"count","type":"int","desc":"the count, a non-positive number will remove the recipe"}],"desc":"Sets the number of times a recipe has been used. This is used\nto calculate experience rewards when withdrawing items from furnaces.","ret":""},{"name":"setRecipesUsed","params":[{"name":"recipesUsed","type":"Map<CookingRecipe<?>,Integer>","desc":"the recipes used"}],"desc":"Sets all recipes used by this furnace.","ret":""}],"desc":"Represents a captured state of a furnace."},{"FQCN":"org.bukkit.block.Beacon","methods":[{"name":"getEntitiesInRange","params":[],"desc":"Returns the list of players within the beacon's range of effect.\n<p>\nThis will return an empty list if the block represented by this state is\nno longer a beacon.","ret":"the players in range"},{"name":"getTier","params":[],"desc":"Returns the tier of the beacon pyramid (0-4). The tier refers to the\nbeacon's power level, based on how many layers of blocks are in the\npyramid. Tier 1 refers to a beacon with one layer of 9 blocks under it.","ret":"the beacon tier"},{"name":"getPrimaryEffect","params":[],"desc":"Returns the primary effect set on the beacon","ret":"the primary effect or null if not set"},{"name":"setPrimaryEffect","params":[{"name":"effect","type":"PotionEffectType","desc":"new primary effect"}],"desc":"Set the primary effect on this beacon, or null to clear.","ret":""},{"name":"getSecondaryEffect","params":[],"desc":"Returns the secondary effect set on the beacon.","ret":"the secondary effect or null if no secondary effect"},{"name":"setSecondaryEffect","params":[{"name":"effect","type":"PotionEffectType","desc":"desired secondary effect"}],"desc":"Set the secondary effect on this beacon, or null to clear. Note that tier\nmust be &gt;= 4 for this effect to be active.","ret":""},{"name":"getEffectRange","params":[],"desc":"Gets the effect range of this beacon.\nA negative range value means the beacon is using its default range based on tier.","ret":"Either the custom range set with {@link #setEffectRange(double)} or the range based on the beacon tier."},{"name":"setEffectRange","params":[{"name":"range","type":"double","desc":"Radius of effect range."}],"desc":"Sets the effect range of the beacon\nA negative range value means the beacon is using its default range based on tier.","ret":""},{"name":"resetEffectRange","params":[],"desc":"Resets the custom range from this beacon and falls back to the range based on the beacon tier.\nShortcut for setting the effect range to a negative number.","ret":""}],"desc":"Represents a captured state of a beacon."},{"FQCN":"org.bukkit.block.SculkCatalyst","methods":[{"name":"bloom","params":[{"name":"block","type":"Block","desc":"which block to spawn the cursor in"},{"name":"charges","type":"int","desc":"how much charge to spawn."}],"desc":"Causes a new sculk bloom, as if an entity just died around this catalyst.\n<p>\nTypically, charges should be set to the exp reward of a mob\n({@link EntityDeathEvent#getDroppedExp()}), which is usually\n3-5 for animals, and 5-10 for the average mob (up to 50 for\nwither skeletons). Roughly speaking, for each charge, 1 more\nsculk block will be placed.\n<p>\nIf <code>charges > 1000</code>, multiple cursors will be spawned in the\nblock.","ret":""},{"name":"bloom","params":[{"name":"position","type":"io.papermc.paper.math.Position","desc":"position to bloom at"},{"name":"charge","type":"int","desc":"charge to bloom with, normally the amount of experience dropped from the dead entity"}],"desc":"Bloom at the specified location as if an entity that drops experience just died there.","ret":""}],"desc":"Represents a captured state of a sculk catalyst."},{"FQCN":"org.bukkit.block.BlastFurnace","methods":[],"desc":"Represents a captured state of a blast furnace."},{"FQCN":"org.bukkit.block.Sign","methods":[{"name":"lines","params":[],"desc":"Gets all the lines of text currently on the {@link Side#FRONT} of this sign.","ret":"List of components containing each line of text"},{"name":"line","params":[{"name":"index","type":"int","desc":"Line number to get the text from, starting at 0"}],"desc":"Gets the line of text at the specified index on the {@link Side#FRONT}.\n<p>\nFor example, getLine(0) will return the first line of text.","ret":"Text on the given line"},{"name":"line","params":[{"name":"index","type":"int","desc":"Line number to set the text at, starting from 0"},{"name":"line","type":"net.kyori.adventure.text.Component","desc":"New text to set at the specified index"}],"desc":"Sets the line of text at the specified index on the {@link Side#FRONT}.\n<p>\nFor example, setLine(0, \"Line One\") will set the first line of text to\n\"Line One\".","ret":""},{"name":"getLines","params":[],"desc":"Gets all the lines of text currently on the {@link Side#FRONT} of this sign.","ret":"Array of Strings containing each line of text"},{"name":"getLine","params":[{"name":"index","type":"int","desc":"Line number to get the text from, starting at 0"}],"desc":"Gets the line of text at the specified index.\n<p>\nFor example, getLine(0) will return the first line of text on the {@link Side#FRONT}.","ret":"Text on the given line"},{"name":"setLine","params":[{"name":"index","type":"int","desc":"Line number to set the text at, starting from 0"},{"name":"line","type":"String","desc":"New text to set at the specified index"}],"desc":"Sets the line of text at the specified index.\n<p>\nFor example, setLine(0, \"Line One\") will set the first line of text to\n\"Line One\".","ret":""},{"name":"isEditable","params":[],"desc":"Marks whether this sign can be edited by players.","ret":"if this sign is currently editable"},{"name":"setEditable","params":[{"name":"editable","type":"boolean","desc":"if this sign is currently editable"}],"desc":"Marks whether this sign can be edited by players.","ret":""},{"name":"isWaxed","params":[],"desc":"Gets whether or not this sign has been waxed. If a sign has been waxed, it\ncannot be edited by a player.","ret":"if this sign is waxed"},{"name":"setWaxed","params":[{"name":"waxed","type":"boolean","desc":"if this sign is waxed"}],"desc":"Sets whether or not this sign has been waxed. If a sign has been waxed, it\ncannot be edited by a player.","ret":""},{"name":"isGlowingText","params":[],"desc":"Gets whether this sign has glowing text. Only affects the {@link Side#FRONT}.","ret":"if this sign has glowing text"},{"name":"setGlowingText","params":[{"name":"glowing","type":"boolean","desc":"if this sign has glowing text"}],"desc":"Sets whether this sign has glowing text. Only affects the {@link Side#FRONT}.","ret":""},{"name":"getColor","params":[],"desc":"{@inheritDoc}","ret":""},{"name":"setColor","params":[{"name":"color","type":"DyeColor","desc":""}],"desc":"{@inheritDoc}","ret":""},{"name":"getSide","params":[{"name":"side","type":"Side","desc":"the side of the sign"}],"desc":"Return the side of the sign.","ret":"the selected side of the sign"},{"name":"getTargetSide","params":[{"name":"player","type":"Player","desc":"the player"}],"desc":"Gets the side of this sign the given player is currently standing on.","ret":"the side the player is standing on"},{"name":"getAllowedEditor","params":[],"desc":"Gets the player that is currently allowed to edit this sign. <br>\nEdits from other players will be rejected if this value is not null.","ret":"the player allowed to edit this sign, or null"},{"name":"getInteractableSideFor","params":[{"name":"entity","type":"org.bukkit.entity.Entity","desc":"the entity"}],"desc":"Compute the side facing the specified entity.","ret":"the side it is facing"},{"name":"getInteractableSideFor","params":[{"name":"position","type":"io.papermc.paper.math.Position","desc":"the position"}],"desc":"Compute the side facing the specific position.","ret":"the side the position is facing"},{"name":"getInteractableSideFor","params":[{"name":"x","type":"double","desc":"the x coord"},{"name":"z","type":"double","desc":"the z coord"}],"desc":"Compute the side facing the specific x and z coordinates.","ret":"the side the coordinates are facing"}],"desc":"Represents a captured state of either a SignPost or a WallSign."},{"FQCN":"org.bukkit.block.Lockable","methods":[{"name":"isLocked","params":[],"desc":"Checks if the container has a valid (non empty) key.","ret":"true if the key is valid."},{"name":"getLock","params":[],"desc":"Gets the key needed to access the container.","ret":"the key needed."},{"name":"setLock","params":[{"name":"key","type":"String","desc":"the key required to access the container."}],"desc":"Sets the key required to access this container. Set to null (or empty\nstring) to remove key.","ret":""}],"desc":"Represents a block (usually a container) that may be locked. When a lock is\nactive an item with a name corresponding to the key will be required to open\nthis block."},{"FQCN":"org.bukkit.block.SuspiciousSand","methods":[],"desc":"Represents a captured state of suspicious sand."},{"FQCN":"org.bukkit.block.CommandBlock","methods":[{"name":"getCommand","params":[],"desc":"Gets the command that this CommandBlock will run when powered.\nThis will never return null.  If the CommandBlock does not have a\ncommand, an empty String will be returned instead.","ret":"Command that this CommandBlock will run when powered."},{"name":"setCommand","params":[{"name":"command","type":"String","desc":"Command that this CommandBlock will run when powered."}],"desc":"Sets the command that this CommandBlock will run when powered.\nSetting the command to null is the same as setting it to an empty\nString.","ret":""},{"name":"getName","params":[],"desc":"Gets the name of this CommandBlock.  The name is used with commands\nthat this CommandBlock executes.  This name will never be null, and\nby default is \"@\".","ret":"Name of this CommandBlock."},{"name":"setName","params":[{"name":"name","type":"String","desc":"New name for this CommandBlock."}],"desc":"Sets the name of this CommandBlock.  The name is used with commands\nthat this CommandBlock executes.  Setting the name to null is the\nsame as setting it to \"@\".","ret":""},{"name":"name","params":[],"desc":"Gets the name of this CommandBlock.  The name is used with commands\nthat this CommandBlock executes.  This name will never be null, and\nby default is a {@link net.kyori.adventure.text.TextComponent} containing {@code @}.","ret":"Name of this CommandBlock."},{"name":"name","params":[{"name":"name","type":"net.kyori.adventure.text.Component","desc":"New name for this CommandBlock."}],"desc":"Sets the name of this CommandBlock.  The name is used with commands\nthat this CommandBlock executes.  Setting the name to null is the\nsame as setting it to a {@link net.kyori.adventure.text.TextComponent} containing {@code @}.","ret":""}],"desc":"Represents a captured state of a command block."},{"FQCN":"org.bukkit.block.Skull","methods":[{"name":"hasOwner","params":[],"desc":"Checks to see if the skull has an owner","ret":"true if the skull has an owner"},{"name":"getOwner","params":[],"desc":"Gets the owner of the skull, if one exists","ret":"the owner of the skull or null if the skull does not have an owner"},{"name":"setOwner","params":[{"name":"name","type":"String","desc":"the new owner of the skull"}],"desc":"Sets the owner of the skull\n<p>\nInvolves a potentially blocking web request to acquire the profile data for\nthe provided name.","ret":"true if the owner was successfully set"},{"name":"getOwningPlayer","params":[],"desc":"Get the player which owns the skull. This player may appear as the\ntexture depending on skull type.","ret":"owning player"},{"name":"setOwningPlayer","params":[{"name":"player","type":"OfflinePlayer","desc":"the owning player"}],"desc":"Set the player which owns the skull. This player may appear as the\ntexture depending on skull type.","ret":""},{"name":"setPlayerProfile","params":[{"name":"profile","type":"com.destroystokyo.paper.profile.PlayerProfile","desc":"The profile to set this Skull to use, may not be null"}],"desc":"Sets this skull to use the supplied Player Profile, which can include textures already prefilled.","ret":""},{"name":"getPlayerProfile","params":[],"desc":"If the skull has an owner, per {@link #hasOwner()}, return the owners {@link com.destroystokyo.paper.profile.PlayerProfile}","ret":"The profile of the owner, if set"},{"name":"getOwnerProfile","params":[],"desc":"Gets the profile of the player who owns the skull. This player profile\nmay appear as the texture depending on skull type.","ret":"the profile of the owning player"},{"name":"setOwnerProfile","params":[{"name":"profile","type":"PlayerProfile","desc":"the profile of the owning player"}],"desc":"Sets the profile of the player who owns the skull. This player profile\nmay appear as the texture depending on skull type.\n<p>\nThe profile must contain both a unique id and a skin texture. If either\nof these is missing, the profile must contain a name by which the server\nwill then attempt to look up the unique id and skin texture.","ret":""},{"name":"getNoteBlockSound","params":[],"desc":"Gets the sound to play if the skull is placed on a note block.\n<br>\n<strong>Note:</strong> This only works for player heads. For other heads,\nsee {@link org.bukkit.Instrument}.","ret":"the key of the sound, or null"},{"name":"setNoteBlockSound","params":[{"name":"noteBlockSound","type":"NamespacedKey","desc":"the key of the sound to be played, or null"}],"desc":"Sets the sound to play if the skull is placed on a note block.\n<br>\n<strong>Note:</strong> This only works for player heads. For other heads,\nsee {@link org.bukkit.Instrument}.","ret":""},{"name":"getRotation","params":[],"desc":"Gets the rotation of the skull in the world (or facing direction if this\nis a wall mounted skull).","ret":"the rotation of the skull"},{"name":"setRotation","params":[{"name":"rotation","type":"BlockFace","desc":"the rotation of the skull"}],"desc":"Sets the rotation of the skull in the world (or facing direction if this\nis a wall mounted skull).","ret":""},{"name":"getSkullType","params":[],"desc":"Gets the type of skull","ret":"the type of skull"},{"name":"setSkullType","params":[{"name":"skullType","type":"SkullType","desc":"the type of skull"}],"desc":"Sets the type of skull","ret":""}],"desc":"Represents a captured state of a skull block."},{"FQCN":"org.bukkit.block.Jukebox","methods":[{"name":"getPlaying","params":[],"desc":"Gets the record inserted into the jukebox.","ret":"The record Material, or AIR if none is inserted"},{"name":"setPlaying","params":[{"name":"record","type":"Material","desc":"The record Material, or null/AIR to stop playing"}],"desc":"Sets the record being played.","ret":""},{"name":"hasRecord","params":[],"desc":"Gets whether or not this jukebox has a record.\n<p>\nA jukebox can have a record but not {@link #isPlaying() be playing}\nif it was stopped with {@link #stopPlaying()} or if a record has\nfinished playing.","ret":"true if this jukebox has a record, false if it the jukebox\nis empty"},{"name":"getRecord","params":[],"desc":"Gets the record item inserted into the jukebox.","ret":"a copy of the inserted record, or an air stack if none"},{"name":"setRecord","params":[{"name":"record","type":"ItemStack","desc":"the record to insert or null/AIR to empty"}],"desc":"Sets the record being played. The jukebox will start playing automatically.","ret":""},{"name":"isPlaying","params":[],"desc":"Checks if the jukebox is playing a record.","ret":"True if there is a record playing"},{"name":"startPlaying","params":[],"desc":"Starts the jukebox playing if there is a record.","ret":"true if the jukebox had a record and was able to start playing, false\nif the jukebox was already playing or did not have a record"},{"name":"stopPlaying","params":[],"desc":"Stops the jukebox playing without ejecting the record.","ret":""},{"name":"eject","params":[],"desc":"Stops the jukebox playing and ejects the current record.\n<p>\nIf the block represented by this state is no longer a jukebox, this will\ndo nothing and return false.","ret":"True if a record was ejected; false if there was none playing"},{"name":"getInventory","params":[],"desc":"","ret":"inventory"},{"name":"getSnapshotInventory","params":[],"desc":"","ret":"snapshot inventory"}],"desc":"Represents a captured state of a jukebox."},{"FQCN":"org.bukkit.block.ChiseledBookshelf","methods":[{"name":"getLastInteractedSlot","params":[],"desc":"Gets the last interacted inventory slot.","ret":"the last interacted slot"},{"name":"setLastInteractedSlot","params":[{"name":"lastInteractedSlot","type":"int","desc":"the new last interacted slot"}],"desc":"Sets the last interacted inventory slot.","ret":""},{"name":"getInventory","params":[],"desc":"","ret":"inventory"},{"name":"getSnapshotInventory","params":[],"desc":"","ret":"snapshot inventory"},{"name":"getSlot","params":[{"name":"position","type":"Vector","desc":"a vector relative to this block"}],"desc":"Gets the appropriate slot based on a vector relative to this block.<br>\nWill return -1 if the given vector is not within the bounds of any slot.\n<p>\nThe supplied vector should only contain components with values between 0.0\nand 1.0, inclusive.","ret":"the slot under the given vector or -1"}],"desc":"Represents a captured state of a chiseled bookshelf."},{"FQCN":"org.bukkit.block.Crafter","methods":[{"name":"getCraftingTicks","params":[],"desc":"Gets the number of ticks which this block will remain in the crafting\nstate for.","ret":"number of ticks remaining"},{"name":"setCraftingTicks","params":[{"name":"ticks","type":"int","desc":"number of ticks remaining"}],"desc":"Sets the number of ticks which this block will remain in the crafting\nstate for.","ret":""},{"name":"isSlotDisabled","params":[{"name":"slot","type":"int","desc":"slot index"}],"desc":"Gets whether the slot at the specified index is disabled and will not\nhave items placed in it.","ret":"disabled status"},{"name":"setSlotDisabled","params":[{"name":"slot","type":"int","desc":"slot index"},{"name":"disabled","type":"boolean","desc":"disabled status"}],"desc":"Sets whether the slot at the specified index is disabled and will not\nhave items placed in it.","ret":""},{"name":"isTriggered","params":[],"desc":"Gets whether this Crafter is powered.","ret":"powered status"},{"name":"setTriggered","params":[{"name":"triggered","type":"boolean","desc":"powered status"}],"desc":"Sets whether this Crafter is powered.","ret":""}],"desc":"Represents a captured state of a crafter."},{"FQCN":"org.bukkit.block.Container","methods":[{"name":"getInventory","params":[],"desc":"Gets the inventory of the block represented by this block state.\n<p>\nIf the block was changed to a different type in the meantime, the\nreturned inventory might no longer be valid.\n<p>\nIf this block state is not placed this will return the captured inventory\nsnapshot instead.","ret":"the inventory"},{"name":"getSnapshotInventory","params":[],"desc":"Gets the captured inventory snapshot of this container.\n<p>\nThe returned inventory is not linked to any block. Any modifications to\nthe returned inventory will not be applied to the block represented by\nthis block state up until {@link #update(boolean, boolean)} has been\ncalled.","ret":"the captured inventory snapshot"}],"desc":"Represents a captured state of a container block."},{"FQCN":"org.bukkit.block.Structure","methods":[{"name":"getStructureName","params":[],"desc":"The name of this structure.","ret":"structure name"},{"name":"setStructureName","params":[{"name":"name","type":"String","desc":"the case-sensitive name of this structure"}],"desc":"Set the name of this structure. This is case-sensitive. The name of the\nstructure in the {@link UsageMode#SAVE} structure block MUST match the\nname within the {@link UsageMode#CORNER} block or the size calculation\nwill fail.","ret":""},{"name":"getAuthor","params":[],"desc":"Get the name of who created this structure.","ret":"the name of whoever created this structure."},{"name":"setAuthor","params":[{"name":"author","type":"String","desc":"whoever created this structure (not empty)"}],"desc":"Set the name of whoever created this structure.","ret":""},{"name":"setAuthor","params":[{"name":"livingEntity","type":"LivingEntity","desc":"the entity who created this structure"}],"desc":"Set the name of whoever created this structure using a\n{@link LivingEntity}.","ret":""},{"name":"getRelativePosition","params":[],"desc":"The relative position of the structure outline based on the position of\nthe structure block. Maximum allowed distance is 48 blocks in any\ndirection.","ret":"a Location which contains the relative distance this structure is\nfrom the structure block."},{"name":"setRelativePosition","params":[{"name":"vector","type":"BlockVector","desc":"the {@link BlockVector} containing the relative origin\ncoordinates of this structure."}],"desc":"Set the relative position from the structure block. Maximum allowed\ndistance is 48 blocks in any direction.","ret":""},{"name":"getStructureSize","params":[],"desc":"The distance to the opposite corner of this structure. The maximum\nstructure size is 48x48x48. When a structure has successfully been\ncalculated (i.e. it is within the maximum allowed distance) a white\nborder surrounds the structure.","ret":"a {@link BlockVector} which contains the total size of the\nstructure."},{"name":"setStructureSize","params":[{"name":"vector","type":"BlockVector","desc":"the {@link BlockVector} containing the size of this\nstructure, based off of the origin coordinates."}],"desc":"Set the maximum size of this structure from the origin point. Maximum\nallowed size is 48x48x48.","ret":""},{"name":"setMirror","params":[{"name":"mirror","type":"Mirror","desc":"the new mirroring method"}],"desc":"Sets the mirroring of the structure.","ret":""},{"name":"getMirror","params":[],"desc":"How this structure is mirrored.","ret":"the current mirroring method"},{"name":"setRotation","params":[{"name":"rotation","type":"StructureRotation","desc":"the new rotation"}],"desc":"Set how this structure is rotated.","ret":""},{"name":"getRotation","params":[],"desc":"Get how this structure is rotated.","ret":"the new rotation"},{"name":"setUsageMode","params":[{"name":"mode","type":"UsageMode","desc":"the new mode to set."}],"desc":"Set the {@link UsageMode} of this structure block.","ret":""},{"name":"getUsageMode","params":[],"desc":"Get the {@link UsageMode} of this structure block.","ret":"the mode this block is currently in."},{"name":"setIgnoreEntities","params":[{"name":"ignoreEntities","type":"boolean","desc":"the flag to set"}],"desc":"While in {@link UsageMode#SAVE} mode, this will ignore any entities when\nsaving the structure.\n<br>\nWhile in {@link UsageMode#LOAD} mode this will ignore any entities that\nwere saved to file.","ret":""},{"name":"isIgnoreEntities","params":[],"desc":"Get if this structure block should ignore entities.","ret":"true if the appropriate {@link UsageMode} should ignore entities."},{"name":"setShowAir","params":[{"name":"showAir","type":"boolean","desc":"if the structure block should show air blocks"}],"desc":"Set if the structure outline should show air blocks.","ret":""},{"name":"isShowAir","params":[],"desc":"Check if this structure block is currently showing all air blocks","ret":"true if the structure block is showing all air blocks"},{"name":"setBoundingBoxVisible","params":[{"name":"showBoundingBox","type":"boolean","desc":"if the structure box should be shown"}],"desc":"Set if this structure box should show the bounding box.","ret":""},{"name":"isBoundingBoxVisible","params":[],"desc":"Get if this structure block is currently showing the bounding box.","ret":"true if the bounding box is shown"},{"name":"setIntegrity","params":[{"name":"integrity","type":"float","desc":"the integrity of this structure"}],"desc":"Set the integrity of the structure. Integrity must be between 0.0 and 1.0\nLower integrity values will result in more blocks being removed when\nloading a structure. Integrity and {@link #getSeed()} are used together\nto determine which blocks are randomly removed to mimic \"decay.\"","ret":""},{"name":"getIntegrity","params":[],"desc":"Get the integrity of this structure.","ret":"the integrity of this structure"},{"name":"setSeed","params":[{"name":"seed","type":"long","desc":"the seed used to determine how many blocks will be removed"}],"desc":"The seed used to determine which blocks will be removed upon loading.\n{@link #getIntegrity()} and seed are used together to determine which\nblocks are randomly removed to mimic \"decay.\"","ret":""},{"name":"getSeed","params":[],"desc":"The seed used to determine how many blocks are removed upon loading of\nthis structure.","ret":"the seed used"},{"name":"setMetadata","params":[{"name":"metadata","type":"String","desc":"the function to perform on the selected location"}],"desc":"Only applicable while in {@link UsageMode#DATA}. Metadata are specific\nfunctions that can be applied to the structure location. Consult the\n<a href=\"https://minecraft.wiki/w/Structure_Block#Data\">Minecraft\nwiki</a> for more information.","ret":""},{"name":"getMetadata","params":[],"desc":"Get the metadata function this structure block will perform when\nactivated. Consult the\n<a href=\"https://minecraft.wiki/w/Structure_Block#Data\">Minecraft\nWiki</a> for more information.","ret":"the function that will be performed when this block is activated"}],"desc":"Represents a structure block that can save and load blocks from a file. They\ncan only be used by OPs, and are not obtainable in survival."},{"FQCN":"org.bukkit.block.spawner.SpawnerEntry","methods":[{"name":"getSnapshot","params":[],"desc":"Gets the {@link EntitySnapshot} for this SpawnerEntry.","ret":"the snapshot"},{"name":"setSnapshot","params":[{"name":"snapshot","type":"EntitySnapshot","desc":"the snapshot"}],"desc":"Sets the {@link EntitySnapshot} for this SpawnerEntry.","ret":""},{"name":"getSpawnWeight","params":[],"desc":"Gets the weight for this SpawnerEntry, when added to a spawner entries\nwith higher weight will spawn more often.","ret":"the weight"},{"name":"setSpawnWeight","params":[{"name":"spawnWeight","type":"int","desc":"the new spawn weight"}],"desc":"Sets the weight for this SpawnerEntry, when added to a spawner entries\nwith higher weight will spawn more often.","ret":""},{"name":"getSpawnRule","params":[],"desc":"Gets a copy of the {@link SpawnRule} for this SpawnerEntry, or null if\nnone has been set.","ret":"a copy of the spawn rule or null"},{"name":"setSpawnRule","params":[{"name":"spawnRule","type":"SpawnRule","desc":"the new spawn rule to use or null"}],"desc":"Sets the {@link SpawnRule} for this SpawnerEntry, null may be used to\nclear the current spawn rule.","ret":""}],"desc":"Represents a weighted spawn potential that can be added to a monster spawner."},{"FQCN":"org.bukkit.block.spawner.SpawnRule","methods":[{"name":"getMinBlockLight","params":[],"desc":"Gets the minimum (inclusive) block light required for spawning to\nsucceed.","ret":"minimum block light"},{"name":"setMinBlockLight","params":[{"name":"minBlockLight","type":"int","desc":"minimum block light"}],"desc":"Sets the minimum (inclusive) block light required for spawning to\nsucceed.","ret":""},{"name":"getMaxBlockLight","params":[],"desc":"Gets the maximum (inclusive) block light required for spawning to\nsucceed.","ret":"maximum block light"},{"name":"setMaxBlockLight","params":[{"name":"maxBlockLight","type":"int","desc":"maximum block light"}],"desc":"Sets the maximum (inclusive) block light required for spawning to\nsucceed.","ret":""},{"name":"getMinSkyLight","params":[],"desc":"Gets the minimum (inclusive) sky light required for spawning to succeed.","ret":"minimum sky light"},{"name":"setMinSkyLight","params":[{"name":"minSkyLight","type":"int","desc":"minimum sky light"}],"desc":"Sets the minimum (inclusive) sky light required for spawning to succeed.","ret":""},{"name":"getMaxSkyLight","params":[],"desc":"Gets the maximum (inclusive) sky light required for spawning to succeed.","ret":"maximum sky light"},{"name":"setMaxSkyLight","params":[{"name":"maxSkyLight","type":"int","desc":"maximum sky light"}],"desc":"Sets the maximum (inclusive) sky light required for spawning to succeed.","ret":""}],"desc":"Represents a spawn rule that controls what conditions an entity from a\nmonster spawner can spawn."},{"FQCN":"org.bukkit.block.TileState","methods":[{"name":"getPersistentDataContainer","params":[],"desc":"Returns a custom tag container capable of storing tags on the object.\n\nNote that the tags stored on this container are all stored under their\nown custom namespace therefore modifying default tags using this\n{@link PersistentDataHolder} is impossible.\n<p>\nThis {@link PersistentDataHolder} is only linked to the snapshot instance\nstored by the {@link BlockState}.\n\nWhen storing changes on the {@link PersistentDataHolder}, the updated\ncontent will only be applied to the actual tile entity after one of the\n{@link #update()} methods is called.","ret":"the custom tag container"},{"name":"isSnapshot","params":[],"desc":"Checks if this TileState is a snapshot or a live\nrepresentation of the underlying tile entity.\n<p>\nNOTE: You may still have to call {@link BlockState#update()} on\nlive representations to update any visuals on the block.","ret":"true if this is a snapshot"}],"desc":"Represents a block state that also hosts a tile entity at the given location.\n\nThis interface alone is merely a marker that does not provide any data.\n\nData about the tile entities is provided by the respective interface for each\ntile entity type.\n\nAfter modifying the data provided by a TileState, {@link #update()} needs to\nbe called to store the data."},{"FQCN":"org.bukkit.block.EnchantingTable","methods":[],"desc":"Represents a captured state of an enchanting table."},{"FQCN":"org.bukkit.block.Jigsaw","methods":[],"desc":"Represents a captured state of a jigsaw."},{"FQCN":"org.bukkit.block.SculkSensor","methods":[{"name":"getLastVibrationFrequency","params":[],"desc":"Gets the last vibration frequency of this sensor.\n\nDifferent activities detected by the sensor will produce different\nfrequencies and dictate the output of connected comparators.","ret":"frequency between 0-15."},{"name":"setLastVibrationFrequency","params":[{"name":"lastVibrationFrequency","type":"int","desc":"frequency between 0-15."}],"desc":"Sets the last vibration frequency of this sensor.\n\nDifferent activities detected by the sensor will produce different\nfrequencies and dictate the output of connected comparators.","ret":""},{"name":"getListenerRange","params":[],"desc":"Gets the range this sensor listens to events at.","ret":"the range (defaults to 8)"},{"name":"setListenerRange","params":[{"name":"range","type":"int","desc":"the range (must be greater than 0)"}],"desc":"Sets the range this sensor will listen to events from.","ret":""}],"desc":"Represents a captured state of a sculk sensor"},{"FQCN":"org.bukkit.block.TrialSpawner","methods":[],"desc":"Represents a captured state of a trial spawner."},{"FQCN":"org.bukkit.block.SculkShrieker","methods":[{"name":"getWarningLevel","params":[],"desc":"Gets the most recent warning level of this block.\n\nWhen the warning level reaches 4, the shrieker will attempt to spawn a\nWarden.","ret":"current warning level"},{"name":"setWarningLevel","params":[{"name":"level","type":"int","desc":"new warning level"}],"desc":"Sets the most recent warning level of this block.\n\nWhen the warning level reaches 4, the shrieker will attempt to spawn a\nWarden.","ret":""},{"name":"tryShriek","params":[{"name":"player","type":"Player","desc":"the player that \"caused\" the shriek"}],"desc":"Simulates a player causing a vibration.","ret":""}],"desc":"Represents a captured state of a sculk shrieker."},{"FQCN":"org.bukkit.block.BrewingStand","methods":[{"name":"getBrewingTime","params":[],"desc":"How much time is left in the brewing cycle.","ret":"Brew Time"},{"name":"setBrewingTime","params":[{"name":"brewTime","type":"int","desc":"Brewing time"}],"desc":"Set the time left before brewing completes.","ret":""},{"name":"getFuelLevel","params":[],"desc":"Get the level of current fuel for brewing.","ret":"The fuel level"},{"name":"setFuelLevel","params":[{"name":"level","type":"int","desc":"fuel level"}],"desc":"Set the level of current fuel for brewing.","ret":""}],"desc":"Represents a captured state of a brewing stand."},{"FQCN":"org.bukkit.block.ShulkerBox","methods":[{"name":"getColor","params":[],"desc":"Get the {@link DyeColor} corresponding to this ShulkerBox","ret":"the {@link DyeColor} of this ShulkerBox, or null if default"}],"desc":"Represents a captured state of a ShulkerBox."},{"FQCN":"org.bukkit.block.Banner","methods":[{"name":"getBaseColor","params":[],"desc":"Returns the base color for this banner","ret":"the base color"},{"name":"setBaseColor","params":[{"name":"color","type":"DyeColor","desc":"the base color"}],"desc":"Sets the base color for this banner.\n<b>Only valid for shield pseudo banners, otherwise base depends on block\ntype</b>","ret":""},{"name":"getPatterns","params":[],"desc":"Returns a list of patterns on this banner","ret":"the patterns"},{"name":"setPatterns","params":[{"name":"patterns","type":"List<Pattern>","desc":"the new list of patterns"}],"desc":"Sets the patterns used on this banner","ret":""},{"name":"addPattern","params":[{"name":"pattern","type":"Pattern","desc":"the new pattern to add"}],"desc":"Adds a new pattern on top of the existing\npatterns","ret":""},{"name":"getPattern","params":[{"name":"i","type":"int","desc":"the index"}],"desc":"Returns the pattern at the specified index","ret":"the pattern"},{"name":"removePattern","params":[{"name":"i","type":"int","desc":"the index"}],"desc":"Removes the pattern at the specified index","ret":"the removed pattern"},{"name":"setPattern","params":[{"name":"i","type":"int","desc":"the index"},{"name":"pattern","type":"Pattern","desc":"the new pattern"}],"desc":"Sets the pattern at the specified index","ret":""},{"name":"numberOfPatterns","params":[],"desc":"Returns the number of patterns on this\nbanner","ret":"the number of patterns"}],"desc":"Represents a captured state of a banner."},{"FQCN":"org.bukkit.block.Barrel","methods":[],"desc":""},{"FQCN":"org.bukkit.block.Bed","methods":[{"name":"setColor","params":[{"name":"color","type":"org.bukkit.DyeColor","desc":""}],"desc":"<b>Unsupported</b>","ret":""}],"desc":""},{"FQCN":"org.bukkit.block.Smoker","methods":[],"desc":"Represents a captured state of a smoker."},{"FQCN":"org.bukkit.block.Chest","methods":[{"name":"getBlockInventory","params":[],"desc":"Gets the inventory of the chest block represented by this block state.\n<p>\nIf the chest is a double chest, it returns just the portion of the\ninventory linked to the half of the chest corresponding to this block state.\n<p>\nIf the block was changed to a different type in the meantime, the\nreturned inventory might no longer be valid.\n<p>\nIf this block state is not placed this will return the captured\ninventory snapshot instead.","ret":"the inventory"}],"desc":"Represents a captured state of a chest."},{"FQCN":"org.bukkit.block.CreatureSpawner","methods":[{"name":"getSpawnedType","params":[],"desc":"Get the spawner's creature type.","ret":"The creature type or null if it not set."},{"name":"setSpawnedType","params":[{"name":"creatureType","type":"EntityType","desc":"The creature type or null to clear."}],"desc":"Set the spawner's creature type. <br>\nThis will override any entities that have been added with {@link #addPotentialSpawn}","ret":""},{"name":"setCreatureTypeByName","params":[{"name":"creatureType","type":"String","desc":"The creature type's name or null to clear."}],"desc":"Set the spawner mob type.","ret":""},{"name":"getCreatureTypeName","params":[],"desc":"Get the spawner's creature type.","ret":"The creature type's name if is set."},{"name":"getDelay","params":[],"desc":"Get the spawner's delay.\n<br>\nThis is the delay, in ticks, until the spawner will spawn its next mob.","ret":"The delay."},{"name":"setDelay","params":[{"name":"delay","type":"int","desc":"The delay."}],"desc":"Set the spawner's delay.\n<br>\nIf set to -1, the spawn delay will be reset to a random value between\n{@link #getMinSpawnDelay} and {@link #getMaxSpawnDelay()}.","ret":""},{"name":"getMinSpawnDelay","params":[],"desc":"The minimum spawn delay amount (in ticks).\n<br>\nThis value is used when the spawner resets its delay (for any reason).\nIt will choose a random number between {@link #getMinSpawnDelay()}\nand {@link #getMaxSpawnDelay()} for its next {@link #getDelay()}.\n<br>\nDefault value is 200 ticks.","ret":"the minimum spawn delay amount"},{"name":"setMinSpawnDelay","params":[{"name":"delay","type":"int","desc":"the minimum spawn delay amount"}],"desc":"Set the minimum spawn delay amount (in ticks).","ret":""},{"name":"getMaxSpawnDelay","params":[],"desc":"The maximum spawn delay amount (in ticks).\n<br>\nThis value is used when the spawner resets its delay (for any reason).\nIt will choose a random number between {@link #getMinSpawnDelay()}\nand {@link #getMaxSpawnDelay()} for its next {@link #getDelay()}.\n<br>\nThis value <b>must</b> be greater than 0 and less than or equal to\n{@link #getMaxSpawnDelay()}.\n<br>\nDefault value is 800 ticks.","ret":"the maximum spawn delay amount"},{"name":"setMaxSpawnDelay","params":[{"name":"delay","type":"int","desc":"the new maximum spawn delay amount"}],"desc":"Set the maximum spawn delay amount (in ticks).\n<br>\nThis value <b>must</b> be greater than 0, as well as greater than or\nequal to {@link #getMinSpawnDelay()}","ret":""},{"name":"getSpawnCount","params":[],"desc":"Get how many mobs attempt to spawn.\n<br>\nDefault value is 4.","ret":"the current spawn count"},{"name":"setSpawnCount","params":[{"name":"spawnCount","type":"int","desc":"the new spawn count"}],"desc":"Set how many mobs attempt to spawn.","ret":""},{"name":"getMaxNearbyEntities","params":[],"desc":"Set the new maximum amount of similar entities that are allowed to be\nwithin spawning range of this spawner.\n<br>\nIf more than the maximum number of entities are within range, the spawner\nwill not spawn and try again with a new {@link #getDelay()}.\n<br>\nDefault value is 16.","ret":"the maximum number of nearby, similar, entities"},{"name":"setMaxNearbyEntities","params":[{"name":"maxNearbyEntities","type":"int","desc":"the maximum number of nearby, similar, entities"}],"desc":"Set the maximum number of similar entities that are allowed to be within\nspawning range of this spawner.\n<br>\nSimilar entities are entities that are of the same {@link EntityType}","ret":""},{"name":"getRequiredPlayerRange","params":[],"desc":"Get the maximum distance(squared) a player can be in order for this\nspawner to be active.\n<br>\nIf this value is less than or equal to 0, this spawner is always active\n(given that there are players online).\n<br>\nDefault value is 16.","ret":"the maximum distance(squared) a player can be in order for this\nspawner to be active."},{"name":"setRequiredPlayerRange","params":[{"name":"requiredPlayerRange","type":"int","desc":"the maximum distance (squared) a player can be\nin order for this spawner to be active."}],"desc":"Set the maximum distance (squared) a player can be in order for this\nspawner to be active.\n<br>\nSetting this value to less than or equal to 0 will make this spawner\nalways active (given that there are players online).","ret":""},{"name":"getSpawnRange","params":[],"desc":"Get the radius around which the spawner will attempt to spawn mobs in.\n<br>\nThis area is square, includes the block the spawner is in, and is\ncentered on the spawner's x,z coordinates - not the spawner itself.\n<br>\nIt is 2 blocks high, centered on the spawner's y-coordinate (its bottom);\nthus allowing mobs to spawn as high as its top surface and as low\nas 1 block below its bottom surface.\n<br>\nDefault value is 4.","ret":"the spawn range"},{"name":"setSpawnRange","params":[{"name":"spawnRange","type":"int","desc":"the new spawn range"}],"desc":"Set the new spawn range.\n<br>","ret":""},{"name":"getSpawnedEntity","params":[],"desc":"Gets the {@link EntitySnapshot} that will be spawned by this spawner or null\nif no entities have been assigned to this spawner. <br>\n<p>\nAll applicable data from the spawner will be copied, such as custom name,\nhealth, and velocity. <br>","ret":"the entity snapshot or null if no entities have been assigned to this\n        spawner."},{"name":"setSpawnedEntity","params":[{"name":"snapshot","type":"EntitySnapshot","desc":"the entity snapshot"}],"desc":"Sets the entity that will be spawned by this spawner. <br>\nThis will override any previous entries that have been added with\n{@link #addPotentialSpawn}\n<p>\nAll applicable data from the snapshot will be copied, such as custom name,\nhealth, and velocity. <br>","ret":""},{"name":"addPotentialSpawn","params":[{"name":"snapshot","type":"EntitySnapshot","desc":"the snapshot that will be spawned"},{"name":"weight","type":"int","desc":"the weight"},{"name":"spawnRule","type":"SpawnRule","desc":"the spawn rule for this entity, or null"}],"desc":"Adds a new {@link EntitySnapshot} to the list of entities this spawner can\nspawn.\n<p>\nThe weight will determine how often this entry is chosen to spawn, higher\nweighted entries will spawn more often than lower weighted ones. <br>\nThe {@link SpawnRule} will determine under what conditions this entry can\nspawn, passing null will use the default conditions for the given entity.","ret":""},{"name":"addPotentialSpawn","params":[{"name":"spawnerEntry","type":"SpawnerEntry","desc":"the spawner entry to use"}],"desc":"Adds a new {@link SpawnerEntry} to the list of entities this spawner can\nspawn. <br>","ret":""},{"name":"setPotentialSpawns","params":[{"name":"entries","type":"Collection<SpawnerEntry>","desc":"the list of entries"}],"desc":"Sets the list of {@link SpawnerEntry} this spawner can spawn. <br>\nThis will override any previous entries added with\n{@link #addPotentialSpawn}","ret":""},{"name":"getPotentialSpawns","params":[],"desc":"Gets a list of potential spawns from this spawner or an empty list if no\nentities have been assigned to this spawner. <br>\nChanges made to the returned list will not be reflected in the spawner unless\napplied with {@link #setPotentialSpawns}","ret":"a list of potential spawns from this spawner, or an empty list if no\n        entities have been assigned to this spawner"},{"name":"isActivated","params":[],"desc":"Check if spawner is activated (a player is close enough)","ret":"True if a player is close enough to activate it"},{"name":"resetTimer","params":[],"desc":"Resets the spawn delay timer within the min/max range","ret":""},{"name":"setSpawnedItem","params":[{"name":"itemStack","type":"org.bukkit.inventory.ItemStack","desc":"The item to spawn. Must not {@link org.bukkit.Material#isAir be air}."}],"desc":"Sets the {@link EntityType} to {@link EntityType#DROPPED_ITEM} and sets the data to the given\n{@link org.bukkit.inventory.ItemStack ItemStack}.\n<p>\n{@link #setSpawnCount(int)} does not dictate the amount of items in the stack spawned, but rather how many\nstacks should be spawned.","ret":""}],"desc":"Represents a captured state of a creature spawner."},{"FQCN":"org.bukkit.block.Dispenser","methods":[{"name":"getBlockProjectileSource","params":[],"desc":"Gets the BlockProjectileSource object for the dispenser.\n<p>\nIf the block represented by this state is no longer a dispenser, this\nwill return null.","ret":"a BlockProjectileSource if valid, otherwise null"},{"name":"dispense","params":[],"desc":"Attempts to dispense the contents of the dispenser.\n<p>\nIf the block represented by this state is no longer a dispenser, this\nwill return false.","ret":"true if successful, otherwise false"}],"desc":"Represents a captured state of a dispenser."},{"FQCN":"org.bukkit.block.BlockSupport","methods":[],"desc":"Represents a level of support a block can give on one of its faces.\n<p>\nAny given face on a block may support anywhere between none and all three of the\nvalues in this enum. The top face of a grass block for instance can support blocks\nthat require a full, center, or rigid face. On the contrary, all sides except the\nbottom of a camp fire cannot support any blocks, while the bottom face can support\nblocks that require a full or center face (such as a ceiling button)."},{"FQCN":"org.bukkit.block.HangingSign","methods":[],"desc":"Represents a captured state of a hanging sign."},{"FQCN":"org.bukkit.block.EntityBlockStorage","methods":[{"name":"isFull","params":[],"desc":"Check if the block is completely full of entities.","ret":"True if block is full"},{"name":"getEntityCount","params":[],"desc":"Get the amount of entities currently in this block.","ret":"Amount of entities currently in this block"},{"name":"getMaxEntities","params":[],"desc":"Get the maximum amount of entities this block can hold.","ret":"Maximum amount of entities this block can hold"},{"name":"setMaxEntities","params":[{"name":"max","type":"int","desc":"Maximum amount of entities this block can hold"}],"desc":"Set the maximum amount of entities this block can hold.","ret":""},{"name":"releaseEntities","params":[],"desc":"Release all the entities currently stored in the block.","ret":"List of all entities which were released"},{"name":"addEntity","params":[{"name":"entity","type":"T","desc":"Entity to add to the block"}],"desc":"Add an entity to the block.","ret":""},{"name":"clearEntities","params":[],"desc":"Clear all currently stored entities in the block.","ret":""}],"desc":"Represents a captured state of a block which stores entities."},{"FQCN":"org.bukkit.block.Bell","methods":[{"name":"ring","params":[{"name":"entity","type":"Entity","desc":"the entity ringing the bell"},{"name":"direction","type":"BlockFace","desc":"the direction from which the bell was rung or null to\nring in the direction that the bell is facing"}],"desc":"Ring this bell. This will call a {@link BellRingEvent}.","ret":"true if rung successfully, false if the event was cancelled"},{"name":"ring","params":[{"name":"entity","type":"Entity","desc":"the entity ringing the bell"}],"desc":"Ring this bell in the direction that the bell is facing. This will call a\n{@link BellRingEvent}.","ret":"true if rung successfully, false if the event was cancelled"},{"name":"ring","params":[{"name":"direction","type":"BlockFace","desc":"the direction from which the bell was rung or null to\nring in the direction that the bell is facing"}],"desc":"Ring this bell. This will call a {@link BellRingEvent}.","ret":"true if rung successfully, false if the event was cancelled"},{"name":"ring","params":[],"desc":"Ring this bell in the direction that the bell is facing. This will call a\n{@link BellRingEvent}.","ret":"true if rung successfully, false if the event was cancelled"},{"name":"isShaking","params":[],"desc":"Check whether or not this bell is shaking. A bell is considered to be\nshaking if it was recently rung.\n<p>\nA bell will typically shake for 50 ticks.","ret":"true if shaking, false otherwise"},{"name":"getShakingTicks","params":[],"desc":"Get the amount of ticks since this bell has been shaking, or 0 if the\nbell is not currently shaking.\n<p>\nA bell will typically shake for 50 ticks.","ret":"the time in ticks since the bell was rung, or 0 if not shaking"},{"name":"isResonating","params":[],"desc":"Check whether or not this bell is resonating. A bell is considered to be\nresonating if {@link #isShaking() while shaking}, raiders were detected\nin the area and are ready to be highlighted to nearby players.\n<p>\nA bell will typically resonate for 40 ticks.","ret":"true if resonating, false otherwise"},{"name":"getResonatingTicks","params":[],"desc":"Get the amount of ticks since this bell has been resonating, or 0 if the\nbell is not currently resonating.\n<p>\nA bell will typically resonate for 40 ticks.","ret":"the time in ticks since the bell has been resonating, or 0 if not\nresonating"}],"desc":"Represents a captured state of Bell."},{"FQCN":"org.bukkit.block.Comparator","methods":[],"desc":"Represents a captured state of an on / off comparator."},{"FQCN":"org.bukkit.block.data.Hatchable","methods":[{"name":"getHatch","params":[],"desc":"Gets the value of the 'hatch' property.","ret":"the 'hatch' value"},{"name":"setHatch","params":[{"name":"hatch","type":"int","desc":"the new 'hatch' value"}],"desc":"Sets the value of the 'hatch' property.","ret":""},{"name":"getMaximumHatch","params":[],"desc":"Gets the maximum allowed value of the 'hatch' property.","ret":"the maximum 'hatch' value"}],"desc":"'hatch' is the number of entities which may hatch from these eggs."},{"FQCN":"org.bukkit.block.data.Waterlogged","methods":[{"name":"isWaterlogged","params":[],"desc":"Gets the value of the 'waterlogged' property.","ret":"the 'waterlogged' value"},{"name":"setWaterlogged","params":[{"name":"waterlogged","type":"boolean","desc":"the new 'waterlogged' value"}],"desc":"Sets the value of the 'waterlogged' property.","ret":""}],"desc":"'waterlogged' denotes whether this block has fluid in it."},{"FQCN":"org.bukkit.block.data.Rotatable","methods":[{"name":"getRotation","params":[],"desc":"Gets the value of the 'rotation' property.","ret":"the 'rotation' value"},{"name":"setRotation","params":[{"name":"rotation","type":"BlockFace","desc":"the new 'rotation' value"}],"desc":"Sets the value of the 'rotation' property.","ret":""}],"desc":"'rotation' represents the current rotation of this block."},{"FQCN":"org.bukkit.block.data.Ageable","methods":[{"name":"getAge","params":[],"desc":"Gets the value of the 'age' property.","ret":"the 'age' value"},{"name":"setAge","params":[{"name":"age","type":"int","desc":"the new 'age' value"}],"desc":"Sets the value of the 'age' property.","ret":""},{"name":"getMaximumAge","params":[],"desc":"Gets the maximum allowed value of the 'age' property.","ret":"the maximum 'age' value"}],"desc":"'age' represents the different growth stages that a crop-like block can go\nthrough.\n<br>\nA value of 0 indicates that the crop was freshly planted, whilst a value\nequal to {@link #getMaximumAge()} indicates that the crop is ripe and ready\nto be harvested."},{"FQCN":"org.bukkit.block.data.Brushable","methods":[{"name":"getDusted","params":[],"desc":"Gets the value of the 'dusted' property.","ret":"the 'dusted' value"},{"name":"setDusted","params":[{"name":"dusted","type":"int","desc":"the new 'dusted' value"}],"desc":"Sets the value of the 'dusted' property.","ret":""},{"name":"getMaximumDusted","params":[],"desc":"Gets the maximum allowed value of the 'dusted' property.","ret":"the maximum 'dusted' value"}],"desc":"'dusted' represents how far uncovered by brush the block is."},{"FQCN":"org.bukkit.block.data.Attachable","methods":[{"name":"isAttached","params":[],"desc":"Gets the value of the 'attached' property.","ret":"the 'attached' value"},{"name":"setAttached","params":[{"name":"attached","type":"boolean","desc":"the new 'attached' value"}],"desc":"Sets the value of the 'attached' property.","ret":""}],"desc":"'attached' denotes whether a tripwire hook or string forms a complete\ntripwire circuit and is ready to trigger.\n<br>\nUpdating the property on a tripwire hook will change the texture to indicate\na connected string, but will not have any effect when used on the tripwire\nstring itself. It may however still be used to check whether the string forms\na circuit."},{"FQCN":"org.bukkit.block.data.Directional","methods":[{"name":"getFacing","params":[],"desc":"Gets the value of the 'facing' property.","ret":"the 'facing' value"},{"name":"setFacing","params":[{"name":"facing","type":"BlockFace","desc":"the new 'facing' value"}],"desc":"Sets the value of the 'facing' property.","ret":""},{"name":"getFaces","params":[],"desc":"Gets the faces which are applicable to this block.","ret":"the allowed 'facing' values"}],"desc":"'facing' represents the face towards which the block is pointing.\n<br>\nSome blocks may not be able to face in all directions, use\n{@link #getFaces()} to get all possible directions for this block."},{"FQCN":"org.bukkit.block.data.Rail","methods":[{"name":"getShape","params":[],"desc":"Gets the value of the 'shape' property.","ret":"the 'shape' value"},{"name":"setShape","params":[{"name":"shape","type":"Shape","desc":"the new 'shape' value"}],"desc":"Sets the value of the 'shape' property.","ret":""},{"name":"getShapes","params":[],"desc":"Gets the shapes which are applicable to this block.","ret":"the allowed 'shape' values"}],"desc":"'shape' represents the current layout of a minecart rail.\n<br>\nSome types of rail may not be able to be laid out in all shapes, use\n{@link #getShapes()} to get those applicable to this block."},{"FQCN":"org.bukkit.block.data.Snowable","methods":[{"name":"isSnowy","params":[],"desc":"Gets the value of the 'snowy' property.","ret":"the 'snowy' value"},{"name":"setSnowy","params":[{"name":"snowy","type":"boolean","desc":"the new 'snowy' value"}],"desc":"Sets the value of the 'snowy' property.","ret":""}],"desc":"'snowy' denotes whether this block has a snow covered side and top texture\n(normally because the block above is snow)."},{"FQCN":"org.bukkit.block.data.Hangable","methods":[{"name":"isHanging","params":[],"desc":"Gets the value of the 'hanging' property.","ret":"the 'hanging' value"},{"name":"setHanging","params":[{"name":"hanging","type":"boolean","desc":"the new 'hanging' value"}],"desc":"Sets the value of the 'hanging' property.","ret":""}],"desc":"'hanging' denotes whether the lantern is hanging from a block."},{"FQCN":"org.bukkit.block.data.AnaloguePowerable","methods":[{"name":"getPower","params":[],"desc":"Gets the value of the 'power' property.","ret":"the 'power' value"},{"name":"setPower","params":[{"name":"power","type":"int","desc":"the new 'power' value"}],"desc":"Sets the value of the 'power' property.","ret":""},{"name":"getMaximumPower","params":[],"desc":"Gets the maximum allowed value of the 'power' property.","ret":"the maximum 'power' value"}],"desc":"'power' represents the redstone power level currently being emitted or\ntransmitted via this block.\n<br>\nMay not be over 9000 or {@link #getMaximumPower()} (usually 15)."},{"FQCN":"org.bukkit.block.data.Openable","methods":[{"name":"isOpen","params":[],"desc":"Gets the value of the 'open' property.","ret":"the 'open' value"},{"name":"setOpen","params":[{"name":"open","type":"boolean","desc":"the new 'open' value"}],"desc":"Sets the value of the 'open' property.","ret":""}],"desc":"'open' denotes whether this block is currently opened."},{"FQCN":"org.bukkit.block.data.Orientable","methods":[{"name":"getAxis","params":[],"desc":"Gets the value of the 'axis' property.","ret":"the 'axis' value"},{"name":"setAxis","params":[{"name":"axis","type":"Axis","desc":"the new 'axis' value"}],"desc":"Sets the value of the 'axis' property.","ret":""},{"name":"getAxes","params":[],"desc":"Gets the axes which are applicable to this block.","ret":"the allowed 'axis' values"}],"desc":"'axis' represents the axis along whilst this block is oriented.\n<br>\nSome blocks such as the portal block may not be able to be placed in all\norientations, use {@link #getAxes()} to retrieve all possible such\norientations."},{"FQCN":"org.bukkit.block.data.type.Cocoa","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.MangrovePropagule","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.Repeater","methods":[{"name":"getDelay","params":[],"desc":"Gets the value of the 'delay' property.","ret":"the 'delay' value"},{"name":"setDelay","params":[{"name":"delay","type":"int","desc":"the new 'delay' value"}],"desc":"Sets the value of the 'delay' property.","ret":""},{"name":"getMinimumDelay","params":[],"desc":"Gets the minimum allowed value of the 'delay' property.","ret":"the minimum 'delay' value"},{"name":"getMaximumDelay","params":[],"desc":"Gets the maximum allowed value of the 'delay' property.","ret":"the maximum 'delay' value"},{"name":"isLocked","params":[],"desc":"Gets the value of the 'locked' property.","ret":"the 'locked' value"},{"name":"setLocked","params":[{"name":"locked","type":"boolean","desc":"the new 'locked' value"}],"desc":"Sets the value of the 'locked' property.","ret":""}],"desc":"'delay' is the propagation delay of a repeater, i.e. how many ticks before it\nwill be activated from a current change and propagate it to the next block.\n<br>\nDelay may not be lower than {@link #getMinimumDelay()} or higher than\n{@link #getMaximumDelay()}.\n<br>\n'locked' denotes whether the repeater is in the locked state or not.\n<br>\nA locked repeater will not change its output until it is unlocked. In game, a\nlocked repeater is created by having a constant current perpendicularly\nentering the block."},{"FQCN":"org.bukkit.block.data.type.Piston","methods":[{"name":"isExtended","params":[],"desc":"Gets the value of the 'extended' property.","ret":"the 'extended' value"},{"name":"setExtended","params":[{"name":"extended","type":"boolean","desc":"the new 'extended' value"}],"desc":"Sets the value of the 'extended' property.","ret":""}],"desc":"'extended' denotes whether the piston head is currently extended or not."},{"FQCN":"org.bukkit.block.data.type.Door","methods":[{"name":"getHinge","params":[],"desc":"Gets the value of the 'hinge' property.","ret":"the 'hinge' value"},{"name":"setHinge","params":[{"name":"hinge","type":"Hinge","desc":"the new 'hinge' value"}],"desc":"Sets the value of the 'hinge' property.","ret":""}],"desc":"'hinge' indicates which hinge this door is attached to and will rotate around\nwhen opened."},{"FQCN":"org.bukkit.block.data.type.EndPortalFrame","methods":[{"name":"hasEye","params":[],"desc":"Gets the value of the 'eye' property.","ret":"the 'eye' value"},{"name":"setEye","params":[{"name":"eye","type":"boolean","desc":"the new 'eye' value"}],"desc":"Sets the value of the 'eye' property.","ret":""}],"desc":"'eye' denotes whether this end portal frame has been activated by having an\neye of ender placed in it."},{"FQCN":"org.bukkit.block.data.type.DecoratedPot","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.SculkVein","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.SeaPickle","methods":[{"name":"getPickles","params":[],"desc":"Gets the value of the 'pickles' property.","ret":"the 'pickles' value"},{"name":"setPickles","params":[{"name":"pickles","type":"int","desc":"the new 'pickles' value"}],"desc":"Sets the value of the 'pickles' property.","ret":""},{"name":"getMinimumPickles","params":[],"desc":"Gets the minimum allowed value of the 'pickles' property.","ret":"the minimum 'pickles' value"},{"name":"getMaximumPickles","params":[],"desc":"Gets the maximum allowed value of the 'pickles' property.","ret":"the maximum 'pickles' value"}],"desc":"'pickles' indicates the number of pickles in this block."},{"FQCN":"org.bukkit.block.data.type.Leaves","methods":[{"name":"isPersistent","params":[],"desc":"Gets the value of the 'persistent' property.","ret":"the persistent value"},{"name":"setPersistent","params":[{"name":"persistent","type":"boolean","desc":"the new 'persistent' value"}],"desc":"Sets the value of the 'persistent' property.","ret":""},{"name":"getDistance","params":[],"desc":"Gets the value of the 'distance' property.","ret":"the 'distance' value"},{"name":"setDistance","params":[{"name":"distance","type":"int","desc":"the new 'distance' value"}],"desc":"Sets the value of the 'distance' property.","ret":""},{"name":"getMaximumDistance","params":[],"desc":"Gets the maximum allowed value of the 'distance' property.","ret":"the maximum 'distance' value"},{"name":"getMinimumDistance","params":[],"desc":"Gets the minimum allowed value of the 'distance' property.","ret":"the minimum 'distance' value"}],"desc":"'persistent' indicates whether or not leaves will be checked by the server to\nsee if they are subject to decay or not.\n<br>\n'distance' denotes how far the block is from a tree and is used in\nconjunction with 'persistent' flag to determine if the leaves will decay or\nnot."},{"FQCN":"org.bukkit.block.data.type.Tripwire","methods":[{"name":"isDisarmed","params":[],"desc":"Gets the value of the 'disarmed' property.","ret":"the 'disarmed' value"},{"name":"setDisarmed","params":[{"name":"disarmed","type":"boolean","desc":"the new 'disarmed' value"}],"desc":"Sets the value of the 'disarmed' property.","ret":""}],"desc":"'disarmed' denotes that the tripwire was broken with shears and will not\nsubsequently produce a current when destroyed."},{"FQCN":"org.bukkit.block.data.type.Lectern","methods":[{"name":"hasBook","params":[],"desc":"Gets the value of the 'has_book' property.","ret":"the 'has_book' value"}],"desc":"'has_book' is a quick flag to check whether this lectern has a book inside\nit."},{"FQCN":"org.bukkit.block.data.type.Hopper","methods":[{"name":"isEnabled","params":[],"desc":"Gets the value of the 'enabled' property.","ret":"the 'enabled' value"},{"name":"setEnabled","params":[{"name":"enabled","type":"boolean","desc":"the new 'enabled' value"}],"desc":"Sets the value of the 'enabled' property.","ret":""}],"desc":"Similar to {@link Powerable}, 'enabled' indicates whether or not the hopper\nis currently activated.\n<br>\nUnlike most other blocks, a hopper is only enabled when it is <b>not</b>\nreceiving any power."},{"FQCN":"org.bukkit.block.data.type.GlowLichen","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.CaveVinesPlant","methods":[{"name":"isBerries","params":[],"desc":"Gets the value of the 'berries' property.","ret":"the 'berries' value"},{"name":"setBerries","params":[{"name":"berries","type":"boolean","desc":"the new 'berries' value"}],"desc":"Sets the value of the 'berries' property.","ret":""}],"desc":"'berries' indicates whether the block has berries."},{"FQCN":"org.bukkit.block.data.type.Furnace","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.CaveVines","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.SculkCatalyst","methods":[{"name":"isBloom","params":[],"desc":"Gets the value of the 'bloom' property.","ret":"the 'bloom' value"},{"name":"setBloom","params":[{"name":"bloom","type":"boolean","desc":"the new 'bloom' value"}],"desc":"Sets the value of the 'bloom' property.","ret":""}],"desc":"'bloom' indicates whether the sculk catalyst is actively spreading the sculk\nor not."},{"FQCN":"org.bukkit.block.data.type.Cake","methods":[{"name":"getBites","params":[],"desc":"Gets the value of the 'bites' property.","ret":"the 'bites' value"},{"name":"setBites","params":[{"name":"bites","type":"int","desc":"the new 'bites' value"}],"desc":"Sets the value of the 'bites' property.","ret":""},{"name":"getMaximumBites","params":[],"desc":"Gets the maximum allowed value of the 'bites' property.","ret":"the maximum 'bites' value"}],"desc":"'bites' represents the amount of bites which have been taken from this slice\nof cake.\n<br>\nA value of 0 indicates that the cake has not been eaten, whilst a value of\n{@link #getMaximumBites()} indicates that it is all gone :("},{"FQCN":"org.bukkit.block.data.type.Snow","methods":[{"name":"getLayers","params":[],"desc":"Gets the value of the 'layers' property.","ret":"the 'layers' value"},{"name":"setLayers","params":[{"name":"layers","type":"int","desc":"the new 'layers' value"}],"desc":"Sets the value of the 'layers' property.","ret":""},{"name":"getMinimumLayers","params":[],"desc":"Gets the minimum allowed value of the 'layers' property.","ret":"the minimum 'layers' value"},{"name":"getMaximumLayers","params":[],"desc":"Gets the maximum allowed value of the 'layers' property.","ret":"the maximum 'layers' value"}],"desc":"'layers' represents the amount of layers of snow which are present in this\nblock.\n<br>\nMay not be lower than {@link #getMinimumLayers()} or higher than\n{@link #getMaximumLayers()}."},{"FQCN":"org.bukkit.block.data.type.AmethystCluster","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.LightningRod","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.Sign","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.Farmland","methods":[{"name":"getMoisture","params":[],"desc":"Gets the value of the 'moisture' property.","ret":"the 'moisture' value"},{"name":"setMoisture","params":[{"name":"moisture","type":"int","desc":"the new 'moisture' value"}],"desc":"Sets the value of the 'moisture' property.","ret":""},{"name":"getMaximumMoisture","params":[],"desc":"Gets the maximum allowed value of the 'moisture' property.","ret":"the maximum 'moisture' value"}],"desc":"The 'moisture' level of farmland indicates how close it is to a water source\n(if any).\n<br>\nA higher moisture level leads, to faster growth of crops on this block, but\ncannot be higher than {@link #getMaximumMoisture()}."},{"FQCN":"org.bukkit.block.data.type.StructureBlock","methods":[{"name":"getMode","params":[],"desc":"Gets the value of the 'mode' property.","ret":"the 'mode' value"},{"name":"setMode","params":[{"name":"mode","type":"Mode","desc":"the new 'mode' value"}],"desc":"Sets the value of the 'mode' property.","ret":""}],"desc":"'mode' represents the different modes in which this structure block may\noperate."},{"FQCN":"org.bukkit.block.data.type.RedstoneWallTorch","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.WallHangingSign","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.TripwireHook","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.CommandBlock","methods":[{"name":"isConditional","params":[],"desc":"Gets the value of the 'conditional' property.","ret":"the 'conditional' value"},{"name":"setConditional","params":[{"name":"conditional","type":"boolean","desc":"the new 'conditional' value"}],"desc":"Sets the value of the 'conditional' property.","ret":""}],"desc":"'conditional' denotes whether this command block is conditional or not, i.e.\nwill only execute if the preceding command block also executed successfully."},{"FQCN":"org.bukkit.block.data.type.Sapling","methods":[{"name":"getStage","params":[],"desc":"Gets the value of the 'stage' property.","ret":"the 'stage' value"},{"name":"setStage","params":[{"name":"stage","type":"int","desc":"the new 'stage' value"}],"desc":"Sets the value of the 'stage' property.","ret":""},{"name":"getMaximumStage","params":[],"desc":"Gets the maximum allowed value of the 'stage' property.","ret":"the maximum 'stage' value"}],"desc":"'stage' represents the growth stage of a sapling.\n<br>\nWhen the sapling reaches {@link #getMaximumStage()} it will attempt to grow\ninto a tree as the next stage."},{"FQCN":"org.bukkit.block.data.type.Fence","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.Ladder","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.Chain","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.WallSign","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.Grindstone","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.Jukebox","methods":[{"name":"hasRecord","params":[],"desc":"Gets the value of the 'has_record' property.","ret":"the 'has_record' value"}],"desc":"'has_record' is a quick flag to check whether this jukebox has a record\ninside it."},{"FQCN":"org.bukkit.block.data.type.ChiseledBookshelf","methods":[{"name":"isSlotOccupied","params":[{"name":"slot","type":"int","desc":"to check"}],"desc":"Checks if the following slot is occupied.","ret":"if slot is occupied"},{"name":"setSlotOccupied","params":[{"name":"slot","type":"int","desc":"to set"},{"name":"occupied","type":"boolean","desc":"book"}],"desc":"Sets whether the following slot is occupied.","ret":""},{"name":"getOccupiedSlots","params":[],"desc":"Get the indexes of all the occupied slots present on this block.","ret":"set of all occupied slots"},{"name":"getMaximumOccupiedSlots","params":[],"desc":"Get the maximum amount of slots on this block.","ret":"maximum occupied slots count"}],"desc":"Interface to the 'slot_0_occupied', 'slow_1_occupied' ... 'slot_5_occupied'\nflags on a bookshelf which indicate which slots are occupied rendered on the\noutside.\n<br>\nBlock may have 0, 1... {@link #getMaximumOccupiedSlots()}-1 occupied slots."},{"FQCN":"org.bukkit.block.data.type.RespawnAnchor","methods":[{"name":"getCharges","params":[],"desc":"Gets the value of the 'charges' property.","ret":"the 'charges' value"},{"name":"setCharges","params":[{"name":"charges","type":"int","desc":"the new 'charges' value"}],"desc":"Sets the value of the 'charges' property.","ret":""},{"name":"getMaximumCharges","params":[],"desc":"Gets the maximum allowed value of the 'charges' property.","ret":"the maximum 'charges' value"}],"desc":"'charges' represents the amount of times the anchor may still be used."},{"FQCN":"org.bukkit.block.data.type.Light","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.Crafter","methods":[{"name":"isCrafting","params":[],"desc":"Gets the value of the 'crafting' property.","ret":"the 'crafting' value"},{"name":"setCrafting","params":[{"name":"crafting","type":"boolean","desc":"the new 'crafting' value"}],"desc":"Sets the value of the 'crafting' property.","ret":""},{"name":"isTriggered","params":[],"desc":"Gets the value of the 'triggered' property.","ret":"the 'triggered' value"},{"name":"setTriggered","params":[{"name":"triggered","type":"boolean","desc":"the new 'triggered' value"}],"desc":"Sets the value of the 'triggered' property.","ret":""},{"name":"getOrientation","params":[],"desc":"Gets the value of the 'orientation' property.","ret":"the 'orientation' value"},{"name":"setOrientation","params":[{"name":"orientation","type":"Orientation","desc":"the new 'orientation' value"}],"desc":"Sets the value of the 'orientation' property.","ret":""}],"desc":"'orientation' is the direction the block is facing.\n<br>\nSimilar to {@link Powerable}, 'triggered' indicates whether or not the\ndispenser is currently activated.\n<br>\n'crafting' is whether crafter's mouth is open and top is glowing."},{"FQCN":"org.bukkit.block.data.type.PointedDripstone","methods":[{"name":"getVerticalDirection","params":[],"desc":"Gets the value of the 'vertical_direction' property.","ret":"the 'vertical_direction' value"},{"name":"setVerticalDirection","params":[{"name":"direction","type":"BlockFace","desc":"the new 'vertical_direction' value"}],"desc":"Sets the value of the 'vertical_direction' property.","ret":""},{"name":"getVerticalDirections","params":[],"desc":"Gets the faces which are applicable to this block.","ret":"the allowed 'vertical_direction' values"},{"name":"getThickness","params":[],"desc":"Gets the value of the 'thickness' property.","ret":"the 'thickness' value"},{"name":"setThickness","params":[{"name":"thickness","type":"Thickness","desc":"the new 'thickness' value"}],"desc":"Sets the value of the 'thickness' property.","ret":""}],"desc":"'thickness' represents the dripstone thickness.\n<br>\n'vertical_direction' represents the dripstone orientation.\n<br>\nSome blocks may not be able to face in all directions, use\n{@link #getVerticalDirections()} to get all possible directions for this\nblock."},{"FQCN":"org.bukkit.block.data.type.Jigsaw","methods":[{"name":"getOrientation","params":[],"desc":"Gets the value of the 'orientation' property.","ret":"the 'orientation' value"},{"name":"setOrientation","params":[{"name":"orientation","type":"Orientation","desc":"the new 'orientation' value"}],"desc":"Sets the value of the 'orientation' property.","ret":""}],"desc":"'orientation' is the direction the block is facing."},{"FQCN":"org.bukkit.block.data.type.Stairs","methods":[{"name":"getShape","params":[],"desc":"Gets the value of the 'shape' property.","ret":"the 'shape' value"},{"name":"setShape","params":[{"name":"shape","type":"Shape","desc":"the new 'shape' value"}],"desc":"Sets the value of the 'shape' property.","ret":""}],"desc":"'shape' represents the texture and bounding box shape of these stairs."},{"FQCN":"org.bukkit.block.data.type.Slab","methods":[{"name":"getType","params":[],"desc":"Gets the value of the 'type' property.","ret":"the 'type' value"},{"name":"setType","params":[{"name":"type","type":"Type","desc":"the new 'type' value"}],"desc":"Sets the value of the 'type' property.","ret":""}],"desc":"'type' represents what state the slab is in - either top, bottom, or a double\nslab occupying the full block."},{"FQCN":"org.bukkit.block.data.type.Scaffolding","methods":[{"name":"isBottom","params":[],"desc":"Gets the value of the 'bottom' property.","ret":"the 'bottom' value"},{"name":"setBottom","params":[{"name":"bottom","type":"boolean","desc":"the new 'bottom' value"}],"desc":"Sets the value of the 'bottom' property.","ret":""},{"name":"getDistance","params":[],"desc":"Gets the value of the 'distance' property.","ret":"the 'distance' value"},{"name":"setDistance","params":[{"name":"distance","type":"int","desc":"the new 'distance' value"}],"desc":"Sets the value of the 'distance' property.","ret":""},{"name":"getMaximumDistance","params":[],"desc":"Gets the maximum allowed value of the 'distance' property.","ret":"the maximum 'distance' value"}],"desc":"'bottom' indicates whether the scaffolding is floating or not.\n<br>\n'distance' indicates the distance from a scaffolding block placed above a\n'bottom' scaffold.\n<br>\nWhen 'distance' reaches {@link #getMaximumDistance()} the block will drop."},{"FQCN":"org.bukkit.block.data.type.SculkSensor","methods":[{"name":"getPhase","params":[],"desc":"Gets the value of the 'sculk_sensor_phase' property.","ret":"the 'sculk_sensor_phase' value"},{"name":"setPhase","params":[{"name":"phase","type":"Phase","desc":"the new 'sculk_sensor_phase' value"}],"desc":"Sets the value of the 'sculk_sensor_phase' property.","ret":""}],"desc":"'sculk_sensor_phase' indicates the current operational phase of the sensor."},{"FQCN":"org.bukkit.block.data.type.TechnicalPiston","methods":[{"name":"getType","params":[],"desc":"Gets the value of the 'type' property.","ret":"the 'type' value"},{"name":"setType","params":[{"name":"type","type":"Type","desc":"the new 'type' value"}],"desc":"Sets the value of the 'type' property.","ret":""}],"desc":"'type' represents the type of piston which this (technical) block corresponds\nto."},{"FQCN":"org.bukkit.block.data.type.CopperBulb","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.TrialSpawner","methods":[{"name":"getTrialSpawnerState","params":[],"desc":"Gets the value of the 'trial_spawner_state' property.","ret":"the 'trial_spawner_state' value"},{"name":"setTrialSpawnerState","params":[{"name":"state","type":"State","desc":"the new 'trial_spawner_state' value"}],"desc":"Sets the value of the 'trial_spawner_state' property.","ret":""}],"desc":"'trial_spawner_state' indicates the current operational phase of the spawner."},{"FQCN":"org.bukkit.block.data.type.SculkShrieker","methods":[{"name":"isCanSummon","params":[],"desc":"Gets the value of the 'can_summon' property.","ret":"the 'can_summon' value"},{"name":"setCanSummon","params":[{"name":"can_summon","type":"boolean","desc":"the new 'can_summon' value"}],"desc":"Sets the value of the 'can_summon' property.","ret":""},{"name":"isShrieking","params":[],"desc":"Gets the value of the 'shrieking' property.","ret":"the 'shrieking' value"},{"name":"setShrieking","params":[{"name":"shrieking","type":"boolean","desc":"the new 'shrieking' value"}],"desc":"Sets the value of the 'shrieking' property.","ret":""}],"desc":"'can_summon' indicates whether the sculk shrieker can summon the warden.\n<p>\n'shrieking' indicated whether the sculk shrieker is shrieking or not."},{"FQCN":"org.bukkit.block.data.type.Bamboo","methods":[{"name":"getLeaves","params":[],"desc":"Gets the value of the 'leaves' property.","ret":"the 'leaves' value"},{"name":"setLeaves","params":[{"name":"leaves","type":"Leaves","desc":"the new 'leaves' value"}],"desc":"Sets the value of the 'leaves' property.","ret":""}],"desc":"'leaves' represents the size of the leaves on this bamboo block."},{"FQCN":"org.bukkit.block.data.type.BrewingStand","methods":[{"name":"hasBottle","params":[{"name":"bottle","type":"int","desc":"to check"}],"desc":"Checks if the stand has the following bottle","ret":"if bottle is present"},{"name":"setBottle","params":[{"name":"bottle","type":"int","desc":"to set"},{"name":"has","type":"boolean","desc":"bottle"}],"desc":"Set whether the stand has this bottle present.","ret":""},{"name":"getBottles","params":[],"desc":"Get the indexes of all the bottles present on this block.","ret":"set of all bottles"},{"name":"getMaximumBottles","params":[],"desc":"Get the maximum amount of bottles present on this stand.","ret":"maximum bottle count"}],"desc":"Interface to the 'has_bottle_0', 'has_bottle_1', 'has_bottle_2' flags on a\nbrewing stand which indicate which bottles are rendered on the outside.\n<br>\nStand may have 0, 1... {@link #getMaximumBottles()}-1 bottles."},{"FQCN":"org.bukkit.block.data.type.PinkPetals","methods":[{"name":"getFlowerAmount","params":[],"desc":"Gets the value of the 'flower_amount' property.","ret":"the 'flower_amount' value"},{"name":"setFlowerAmount","params":[{"name":"flower_amount","type":"int","desc":"the new 'flower_amount' value"}],"desc":"Sets the value of the 'flower_amount' property.","ret":""},{"name":"getMaximumFlowerAmount","params":[],"desc":"Gets the maximum allowed value of the 'flower_amount' property.","ret":"the maximum 'flower_amount' value"}],"desc":"'flower_amount' represents the number of petals."},{"FQCN":"org.bukkit.block.data.type.TNT","methods":[{"name":"isUnstable","params":[],"desc":"Gets the value of the 'unstable' property.","ret":"the 'unstable' value"},{"name":"setUnstable","params":[{"name":"unstable","type":"boolean","desc":"the new 'unstable' value"}],"desc":"Sets the value of the 'unstable' property.","ret":""}],"desc":"'unstable' indicates whether this TNT will explode on punching."},{"FQCN":"org.bukkit.block.data.type.Barrel","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.SmallDripleaf","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.Wall","methods":[{"name":"isUp","params":[],"desc":"Gets the value of the 'up' property.","ret":"the 'up' value"},{"name":"setUp","params":[{"name":"up","type":"boolean","desc":"the new 'up' value"}],"desc":"Sets the value of the 'up' property.","ret":""},{"name":"getHeight","params":[{"name":"face","type":"BlockFace","desc":"to check"}],"desc":"Gets the height of the specified face.","ret":"if face is enabled"},{"name":"setHeight","params":[{"name":"face","type":"BlockFace","desc":"to set"},{"name":"height","type":"Height","desc":"the height"}],"desc":"Set the height of the specified face.","ret":""}],"desc":"This class encompasses the 'north', 'east', 'south', 'west', height flags\nwhich are used to set the height of a wall.\n\n'up' denotes whether the well has a center post."},{"FQCN":"org.bukkit.block.data.type.Bed","methods":[{"name":"getPart","params":[],"desc":"Gets the value of the 'part' property.","ret":"the 'part' value"},{"name":"setPart","params":[{"name":"part","type":"Part","desc":"the new 'part' value"}],"desc":"Sets the value of the 'part' property.","ret":""},{"name":"isOccupied","params":[],"desc":"Gets the value of the 'occupied' property.","ret":"the 'occupied' value"},{"name":"setOccupied","params":[{"name":"occupied","type":"boolean","desc":"the new 'occupied' value"}],"desc":"Sets the value of the 'occupied' property.","ret":""}],"desc":"Similar to {@link Bisected}, 'part' denotes which half of the bed this block\ncorresponds to.\n<br>\n'occupied' property is a quick flag to check if a player is currently\nsleeping in this bed block."},{"FQCN":"org.bukkit.block.data.type.Gate","methods":[{"name":"isInWall","params":[],"desc":"Gets the value of the 'in_wall' property.","ret":"the 'in_wall' value"},{"name":"setInWall","params":[{"name":"inWall","type":"boolean","desc":"the new 'in_wall' value"}],"desc":"Sets the value of the 'in_wall' property.","ret":""}],"desc":"'in_wall' indicates if the fence gate is attached to a wall, and if true the\ntexture is lowered by a small amount to blend in better."},{"FQCN":"org.bukkit.block.data.type.PistonHead","methods":[{"name":"isShort","params":[],"desc":"Gets the value of the 'short' property.","ret":"the 'short' value"},{"name":"setShort","params":[{"name":"_short","type":"boolean","desc":"the new 'short' value"}],"desc":"Sets the value of the 'short' property.","ret":""}],"desc":"'short' denotes this piston head is shorter than the usual amount because it\nis currently retracting."},{"FQCN":"org.bukkit.block.data.type.Chest","methods":[{"name":"getType","params":[],"desc":"Gets the value of the 'type' property.","ret":"the 'type' value"},{"name":"setType","params":[{"name":"type","type":"Type","desc":"the new 'type' value"}],"desc":"Sets the value of the 'type' property.","ret":""}],"desc":"'type' represents which part of a double chest this block is, or if it is a\nsingle chest."},{"FQCN":"org.bukkit.block.data.type.GlassPane","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.Dripleaf","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.Dispenser","methods":[{"name":"isTriggered","params":[],"desc":"Gets the value of the 'triggered' property.","ret":"the 'triggered' value"},{"name":"setTriggered","params":[{"name":"triggered","type":"boolean","desc":"the new 'triggered' value"}],"desc":"Sets the value of the 'triggered' property.","ret":""}],"desc":"Similar to {@link Powerable}, 'triggered' indicates whether or not the\ndispenser is currently activated."},{"FQCN":"org.bukkit.block.data.type.TurtleEgg","methods":[{"name":"getEggs","params":[],"desc":"Gets the value of the 'eggs' property.","ret":"the 'eggs' value"},{"name":"setEggs","params":[{"name":"eggs","type":"int","desc":"the new 'eggs' value"}],"desc":"Sets the value of the 'eggs' property.","ret":""},{"name":"getMinimumEggs","params":[],"desc":"Gets the minimum allowed value of the 'eggs' property.","ret":"the minimum 'eggs' value"},{"name":"getMaximumEggs","params":[],"desc":"Gets the maximum allowed value of the 'eggs' property.","ret":"the maximum 'eggs' value"}],"desc":"'eggs' is the number of eggs which appear in this block."},{"FQCN":"org.bukkit.block.data.type.Fire","methods":[],"desc":"md_5's mixtape."},{"FQCN":"org.bukkit.block.data.type.HangingSign","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.TrapDoor","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.RedstoneRail","methods":[],"desc":"A type of minecart rail which interacts with redstone in one way or another."},{"FQCN":"org.bukkit.block.data.type.Bell","methods":[{"name":"getAttachment","params":[],"desc":"Gets the value of the 'attachment' property.","ret":"the 'attachment' value"},{"name":"setAttachment","params":[{"name":"attachment","type":"Attachment","desc":"the new 'attachment' value"}],"desc":"Sets the value of the 'attachment' property.","ret":""}],"desc":"'attachment' denotes how the bell is attached to its block."},{"FQCN":"org.bukkit.block.data.type.NoteBlock","methods":[{"name":"getInstrument","params":[],"desc":"Gets the value of the 'instrument' property.","ret":"the 'instrument' value"},{"name":"setInstrument","params":[{"name":"instrument","type":"Instrument","desc":"the new 'instrument' value"}],"desc":"Sets the value of the 'instrument' property.","ret":""},{"name":"getNote","params":[],"desc":"Gets the value of the 'note' property.","ret":"the 'note' value"},{"name":"setNote","params":[{"name":"note","type":"Note","desc":"the new 'note' value"}],"desc":"Sets the value of the 'note' property.","ret":""}],"desc":"'instrument' is the type of sound made when this note block is activated.\n<br>\n'note' is the specified tuned pitch that the instrument will be played in."},{"FQCN":"org.bukkit.block.data.type.CoralWallFan","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.Comparator","methods":[{"name":"getMode","params":[],"desc":"Gets the value of the 'mode' property.","ret":"the 'mode' value"},{"name":"setMode","params":[{"name":"mode","type":"Mode","desc":"the new 'mode' value"}],"desc":"Sets the value of the 'mode' property.","ret":""}],"desc":"'mode' indicates what mode this comparator will operate in."},{"FQCN":"org.bukkit.block.data.type.Lantern","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.Candle","methods":[{"name":"getCandles","params":[],"desc":"Gets the value of the 'candles' property.","ret":"the 'candles' value"},{"name":"setCandles","params":[{"name":"candles","type":"int","desc":"the new 'candles' value"}],"desc":"Sets the value of the 'candles' property.","ret":""},{"name":"getMaximumCandles","params":[],"desc":"Gets the maximum allowed value of the 'candles' property.","ret":"the maximum 'candles' value"},{"name":"getMinimumCandles","params":[],"desc":"Gets the minimum allowed value of the 'candles' property.","ret":"the minimum 'candles' value"}],"desc":"'candles' represents the number of candles which are present."},{"FQCN":"org.bukkit.block.data.type.EnderChest","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.DaylightDetector","methods":[{"name":"isInverted","params":[],"desc":"Gets the value of the 'inverted' property.","ret":"the 'inverted' value"},{"name":"setInverted","params":[{"name":"inverted","type":"boolean","desc":"the new 'inverted' value"}],"desc":"Sets the value of the 'inverted' property.","ret":""}],"desc":"'inverted' denotes whether this daylight detector is in the inverted mode,\ni.e. activates in the absence of light rather than presence.\""},{"FQCN":"org.bukkit.block.data.type.Observer","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.BubbleColumn","methods":[{"name":"isDrag","params":[],"desc":"Gets the value of the 'drag' property.","ret":"the 'drag' value"},{"name":"setDrag","params":[{"name":"drag","type":"boolean","desc":"the new 'drag' value"}],"desc":"Sets the value of the 'drag' property.","ret":""}],"desc":"'drag' indicates whether a force will be applied on entities moving through\nthis block."},{"FQCN":"org.bukkit.block.data.type.CalibratedSculkSensor","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.PitcherCrop","methods":[],"desc":""},{"FQCN":"org.bukkit.block.data.type.RedstoneWire","methods":[{"name":"getFace","params":[{"name":"face","type":"BlockFace","desc":"to check"}],"desc":"Checks the type of connection on the specified face.","ret":"connection type"},{"name":"setFace","params":[{"name":"face","type":"BlockFace","desc":"to set"},{"name":"connection","type":"Connection","desc":"the connection type"}],"desc":"Sets the type of connection on the specified face.","ret":""},{"name":"getAllowedFaces","params":[],"desc":"Gets all of this faces which may be set on this block.","ret":"all allowed faces"}],"desc":"'north', 'east', 'south', 'west' represent the types of connections this\nredstone wire has to adjacent blocks."},{"FQCN":"org.bukkit.block.data.type.Switch","methods":[{"name":"getFace","params":[],"desc":"Gets the value of the 'face' property.","ret":"the 'face' value"},{"name":"setFace","params":[{"name":"face","type":"Face","desc":"the new 'face' value"}],"desc":"Sets the value of the 'face' property.","ret":""}],"desc":""},{"FQCN":"org.bukkit.block.data.type.BigDripleaf","methods":[{"name":"getTilt","params":[],"desc":"Gets the value of the 'tilt' property.","ret":"the 'tilt' value"},{"name":"setTilt","params":[{"name":"tilt","type":"Tilt","desc":"the new 'tilt' value"}],"desc":"Sets the value of the 'tilt' property.","ret":""}],"desc":"'tilt' indicates how far the leaf is tilted."},{"FQCN":"org.bukkit.block.data.type.Beehive","methods":[{"name":"getHoneyLevel","params":[],"desc":"Gets the value of the 'honey_level' property.","ret":"the 'honey_level' value"},{"name":"setHoneyLevel","params":[{"name":"honeyLevel","type":"int","desc":"the new 'honey_level' value"}],"desc":"Sets the value of the 'honey_level' property.","ret":""},{"name":"getMaximumHoneyLevel","params":[],"desc":"Gets the maximum allowed value of the 'honey_level' property.","ret":"the maximum 'honey_level' value"}],"desc":"'honey_level' represents the amount of honey stored in the hive."},{"FQCN":"org.bukkit.block.data.type.Campfire","methods":[{"name":"isSignalFire","params":[],"desc":"Gets the value of the 'signal_fire' property.","ret":"the 'signal_fire' value"},{"name":"setSignalFire","params":[{"name":"signalFire","type":"boolean","desc":"the new 'signal_fire' value"}],"desc":"Sets the value of the 'signal_fire' property.","ret":""}],"desc":"'signal_fire' denotes whether the fire is extra smokey due to having a hay\nbale placed beneath it."},{"FQCN":"org.bukkit.block.data.Levelled","methods":[{"name":"getLevel","params":[],"desc":"Gets the value of the 'level' property.","ret":"the 'level' value"},{"name":"setLevel","params":[{"name":"level","type":"int","desc":"the new 'level' value"}],"desc":"Sets the value of the 'level' property.","ret":""},{"name":"getMaximumLevel","params":[],"desc":"Gets the maximum allowed value of the 'level' property.","ret":"the maximum 'level' value"},{"name":"getMinimumLevel","params":[],"desc":"Gets the minimum allowed value of the 'level' property.","ret":"the minimum 'level' value"}],"desc":"'level' represents the amount of fluid contained within this block, either by\nitself or inside a cauldron.\n<br>\nIn the case of water and lava blocks the levels have special meanings: a\nlevel of 0 corresponds to a source block, 1-7 regular fluid heights, and 8-15\nto \"falling\" fluids. All falling fluids have the same behaviour, but the\nlevel corresponds to that of the block above them, equal to\n<code>this.level - 8</code>\n<b>Note that counterintuitively, an adjusted level of 1 is the highest level,\nwhilst 7 is the lowest.</b>\n<br>\nMay not be higher than {@link #getMaximumLevel()}."},{"FQCN":"org.bukkit.block.data.Bisected","methods":[{"name":"getHalf","params":[],"desc":"Gets the value of the 'half' property.","ret":"the 'half' value"},{"name":"setHalf","params":[{"name":"half","type":"Half","desc":"the new 'half' value"}],"desc":"Sets the value of the 'half' property.","ret":""}],"desc":"'half' denotes which half of a two block tall material this block is.\n<br>\nIn game it may be referred to as either (top, bottom) or (upper, lower)."},{"FQCN":"org.bukkit.block.data.Lightable","methods":[{"name":"isLit","params":[],"desc":"Gets the value of the 'lit' property.","ret":"the 'lit' value"},{"name":"setLit","params":[{"name":"lit","type":"boolean","desc":"the new 'lit' value"}],"desc":"Sets the value of the 'lit' property.","ret":""}],"desc":"'lit' denotes whether this block (either a redstone torch or furnace) is\ncurrently lit - that is not burned out."},{"FQCN":"org.bukkit.block.data.Powerable","methods":[{"name":"isPowered","params":[],"desc":"Gets the value of the 'powered' property.","ret":"the 'powered' value"},{"name":"setPowered","params":[{"name":"powered","type":"boolean","desc":"the new 'powered' value"}],"desc":"Sets the value of the 'powered' property.","ret":""}],"desc":"'powered' indicates whether this block is in the powered state or not, i.e.\nreceiving a redstone current of power &gt; 0."},{"FQCN":"org.bukkit.block.data.BlockData","methods":[{"name":"getMaterial","params":[],"desc":"Get the Material represented by this block data.","ret":"the material"},{"name":"getAsString","params":[],"desc":"Gets a string, which when passed into a method such as\n{@link Server#createBlockData(java.lang.String)} will unambiguously\nrecreate this instance.","ret":"serialized data string for this block"},{"name":"getAsString","params":[{"name":"hideUnspecified","type":"boolean","desc":"true if unspecified states should be omitted,\nfalse if they are to be shown as performed by {@link #getAsString()}."}],"desc":"Gets a string, which when passed into a method such as\n{@link Server#createBlockData(java.lang.String)} will recreate this or a\nsimilar instance where unspecified states (if any) may be optionally\nomitted. If this instance was parsed and states are omitted, this exact\ninstance will be creatable when parsed again, else their equality cannot\nbe guaranteed.\n<p>\nThis method will only take effect for BlockData instances created by\nmethods such as {@link Server#createBlockData(String)} or any similar\nmethod whereby states are optionally defined. If otherwise, the result of\n{@link #getAsString()} will be returned. The following behaviour would be\nexpected:\n<pre>{@code\nString dataString = \"minecraft:chest[waterlogged=true]\"\nBlockData data = Bukkit.createBlockData(dataString);\ndataString.equals(data.getAsString(true)); // This would return true\ndataString.equals(data.getAsString(false)); // This would return false as all states are present\ndataString.equals(data.getAsString()); // This is equivalent to the above, \"getAsString(false)\"\n}</pre>","ret":"serialized data string for this block"},{"name":"merge","params":[{"name":"data","type":"BlockData","desc":"the data to merge from"}],"desc":"Merges all explicitly set states from the given data with this BlockData.\n<br>\nNote that the given data MUST have been created from one of the String\nparse methods, e.g. {@link Server#createBlockData(java.lang.String)} and\nnot have been subsequently modified.\n<br>\nNote also that the block types must match identically.","ret":"a new instance of this blockdata with the merged data"},{"name":"matches","params":[{"name":"data","type":"BlockData","desc":"the data to match against (normally a parsed constant)"}],"desc":"Checks if the specified BlockData matches this block data.\n<br>\nThe semantics of this method are such that for manually created or\nmodified BlockData it has the same effect as\n{@link Object#equals(java.lang.Object)}, whilst for parsed data (that to\nwhich {@link #merge(org.bukkit.block.data.BlockData)} applies, it will\nreturn true when the type and all explicitly set states match.\n<br>\n<b>Note that these semantics mean that a.matches(b) may not be the same\nas b.matches(a)</b>","ret":"if there is a match"},{"name":"clone","params":[],"desc":"Returns a copy of this BlockData.","ret":"a copy of the block data"},{"name":"getSoundGroup","params":[],"desc":"Gets the block's {@link SoundGroup} which can be used to get its step\nsound, hit sound, and others.","ret":"the sound effect group"},{"name":"getLightEmission","params":[],"desc":"Get the amount of light emitted by this state when in the world.","ret":"the light emission"},{"name":"isOccluding","params":[],"desc":"Check whether or not this state will occlude other blocks.\n<p>\nBlock state occlusion affects visual features of other blocks (e.g. leaves and\nwet sponges will not spawn dripping water particles if an occluding state is\nbelow it), or whether light will pass through it.","ret":"true if occluding, false otherwise"},{"name":"requiresCorrectToolForDrops","params":[],"desc":"Check whether or not this state requires a specific item to be used to drop\nitems when broken. For example, diamond ore requires an iron pickaxe and will\nnot drop diamonds when broken with a wooden or stone pickaxe.","ret":"true if a more specific item is required for drops, false if any item\n(or an empty hand) will drop items"},{"name":"isPreferredTool","params":[{"name":"tool","type":"ItemStack","desc":"The tool or item used for breaking this block"}],"desc":"Returns if the given item is a preferred choice to break this Block.\n\nIn some cases this determines if a block will drop anything or extra\nloot.","ret":"true if the tool is preferred for breaking this block."},{"name":"getPistonMoveReaction","params":[],"desc":"Returns the reaction of the block when moved by a piston","ret":"reaction"},{"name":"isSupported","params":[{"name":"block","type":"Block","desc":"the block position at which the state would be placed"}],"desc":"Checks if this state would be properly supported if it were placed at\nthe given {@link Block}.\n<p>\nThis may be useful, for instance, to check whether or not a wall torch is\ncapable of surviving on its neighbouring block states.","ret":"true if the block is supported, false if this state would not survive\nthe world conditions"},{"name":"isSupported","params":[{"name":"location","type":"Location","desc":"the location at which the state would be placed"}],"desc":"Checks if this state would be properly supported if it were placed at\nthe block at the given {@link Location}.\n<p>\nThis may be useful, for instance, to check whether or not a wall torch is\ncapable of surviving on its neighbouring block states.","ret":"true if the block is supported, false if this state would not survive\nthe world conditions"},{"name":"isFaceSturdy","params":[{"name":"face","type":"BlockFace","desc":"the face to check"},{"name":"support","type":"BlockSupport","desc":"the possible support level"}],"desc":"Checks if a state's {@link BlockFace} is capable of providing a given level\nof {@link BlockSupport} for neighbouring block states.\n<p>\nAny given state may support either none, one, or more than one level of block\nsupport depending on its states. A common example would be a wall's ability to support\ntorches only on the center of the upper block face, whereas a grass block would\nsupport all levels of block support on all block faces.","ret":"true if the face is sturdy and can support a block, false otherwise"},{"name":"getCollisionShape","params":[{"name":"location","type":"Location","desc":"the location to calculate the collision shape at"}],"desc":"Calculates the collision shape this block data would have at a particular location.\n<p>\nThis does not take into account any block updates that may occur if the block was to be actually placed in the world.","ret":"a {@link org.bukkit.util.VoxelShape} representing the collision shape of this block data."},{"name":"getMapColor","params":[],"desc":"Gets the color this block should appear as when rendered on a map.","ret":"the color associated with this BlockData"},{"name":"getPlacementMaterial","params":[],"desc":"Gets the material that a player would use to place this block.\n<p>\nFor most blocks this is the same as {@link #getMaterial()} but some blocks\nhave different materials used to place them.\n\nFor example:\n<pre>\n{@link Material#REDSTONE_WIRE} -> {@link Material#REDSTONE}\n{@link Material#CARROTS} -> {@link Material#CARROT}\n</pre>","ret":"placement material or {@link Material#AIR} if it doesn't have one"},{"name":"rotate","params":[{"name":"rotation","type":"StructureRotation","desc":"the rotation"}],"desc":"Rotates this blockdata by the specified {@link StructureRotation}.\n<p>\nThis has no effect on blocks that do not have any rotatable states.","ret":""},{"name":"mirror","params":[{"name":"mirror","type":"Mirror","desc":"the mirror"}],"desc":"Mirrors this blockdata using the specified {@link Mirror}.\n<p>\nThis has no effect on blocks that do not have any mirrorable states.","ret":""},{"name":"copyTo","params":[{"name":"other","type":"BlockData","desc":"the BlockData to copy properties to"}],"desc":"Copies all applicable properties from this BlockData to the provided\nBlockData.\n<p>\nOnly modifies properties that both blocks share in common.","ret":""},{"name":"createBlockState","params":[],"desc":"Creates a new default {@link BlockState} for this type of Block, not\nbound to a location.","ret":"a new {@link BlockState}"},{"name":"getDestroySpeed","params":[{"name":"itemStack","type":"ItemStack","desc":"{@link ItemStack} used to mine this Block"}],"desc":"Gets the speed at which this block will be destroyed by a given {@link ItemStack}\n<p>\nDefault value is 1.0","ret":"the speed that this Block will be mined by the given {@link ItemStack}"},{"name":"getDestroySpeed","params":[{"name":"itemStack","type":"ItemStack","desc":"{@link ItemStack} used to mine this Block"},{"name":"considerEnchants","type":"boolean","desc":"true to look at enchants on the itemstack"}],"desc":"Gets the speed at which this block will be destroyed by a given {@link ItemStack}\n<p>\nDefault value is 1.0","ret":"the speed that this Block will be mined by the given {@link ItemStack}"},{"name":"isRandomlyTicked","params":[],"desc":"Gets if this block is ticked randomly in the world.\nThe blocks current state may change this value.","ret":"is ticked randomly"}],"desc":""},{"FQCN":"org.bukkit.block.data.FaceAttachable","methods":[{"name":"getAttachedFace","params":[],"desc":"Gets the value of the 'face' property.","ret":"the 'face' value"},{"name":"setAttachedFace","params":[{"name":"face","type":"AttachedFace","desc":"the new 'face' value"}],"desc":"Sets the value of the 'face' property.","ret":""}],"desc":"'face' represents the face to which a lever or button is stuck.\n<br>\nThis is used in conjunction with {@link Directional} to compute the\norientation of these blocks."},{"FQCN":"org.bukkit.block.data.MultipleFacing","methods":[{"name":"hasFace","params":[{"name":"face","type":"BlockFace","desc":"to check"}],"desc":"Checks if this block has the specified face enabled.","ret":"if face is enabled"},{"name":"setFace","params":[{"name":"face","type":"BlockFace","desc":"to set"},{"name":"has","type":"boolean","desc":"the face"}],"desc":"Set whether this block has the specified face enabled.","ret":""},{"name":"getFaces","params":[],"desc":"Get all of the faces which are enabled on this block.","ret":"all faces enabled"},{"name":"getAllowedFaces","params":[],"desc":"Gets all of this faces which may be set on this block.","ret":"all allowed faces"}],"desc":"This class encompasses the 'north', 'east', 'south', 'west', 'up', 'down'\nboolean flags which are used to set which faces of the block textures are\ndisplayed on.\n<br>\nSome blocks may not be able to have faces on all directions, use\n{@link #getAllowedFaces()} to get all possible faces for this block. It is\nnot valid to call any methods on non-allowed faces."},{"FQCN":"org.bukkit.block.structure.StructureRotation","methods":[],"desc":"Represents how a {@link org.bukkit.block.Structure} can be rotated."},{"FQCN":"org.bukkit.block.structure.Mirror","methods":[],"desc":"Represents how a {@link org.bukkit.block.Structure} can be mirrored upon\nbeing loaded."},{"FQCN":"org.bukkit.block.structure.UsageMode","methods":[],"desc":"Represents how a {@link org.bukkit.block.Structure} can be used."},{"FQCN":"org.bukkit.block.sign.SignSide","methods":[{"name":"lines","params":[],"desc":"Gets all the lines of text currently on the sign.","ret":"List of components containing each line of text"},{"name":"line","params":[{"name":"index","type":"int","desc":"Line number to get the text from, starting at 0"}],"desc":"Gets the line of text at the specified index.\n<p>\nFor example, getLine(0) will return the first line of text.","ret":"Text on the given line"},{"name":"line","params":[{"name":"index","type":"int","desc":"Line number to set the text at, starting from 0"},{"name":"line","type":"net.kyori.adventure.text.Component","desc":"New text to set at the specified index"}],"desc":"Sets the line of text at the specified index.\n<p>\nFor example, setLine(0, \"Line One\") will set the first line of text to\n\"Line One\".","ret":""},{"name":"getLines","params":[],"desc":"Gets all the lines of text currently on this side of the sign.","ret":"Array of Strings containing each line of text"},{"name":"getLine","params":[{"name":"index","type":"int","desc":"Line number to get the text from, starting at 0"}],"desc":"Gets the line of text at the specified index on this side of the sign.\n<p>\nFor example, getLine(0) will return the first line of text.","ret":"Text on the given line"},{"name":"setLine","params":[{"name":"index","type":"int","desc":"Line number to set the text at, starting from 0"},{"name":"line","type":"String","desc":"New text to set at the specified index"}],"desc":"Sets the line of text at the specified index on this side of the sign.\n<p>\nFor example, setLine(0, \"Line One\") will set the first line of text to\n\"Line One\".","ret":""},{"name":"isGlowingText","params":[],"desc":"Gets whether this side of the sign has glowing text.","ret":"if this side of the sign has glowing text"},{"name":"setGlowingText","params":[{"name":"glowing","type":"boolean","desc":"if this side of the sign has glowing text"}],"desc":"Sets whether this side of the sign has glowing text.","ret":""}],"desc":"Represents a side of a sign."},{"FQCN":"org.bukkit.block.sign.Side","methods":[],"desc":"Represents the side of sign."},{"FQCN":"org.bukkit.block.EnderChest","methods":[],"desc":"Represents a captured state of an ender chest."},{"FQCN":"org.bukkit.block.DaylightDetector","methods":[],"desc":"Represents a captured state of a (possibly inverted) daylight detector."},{"FQCN":"org.bukkit.block.CalibratedSculkSensor","methods":[],"desc":"Represents a captured state of a calibrated sculk sensor"},{"FQCN":"org.bukkit.block.PistonMoveReaction","methods":[{"name":"getId","params":[],"desc":"","ret":"The ID of the move reaction"},{"name":"getById","params":[{"name":"id","type":"int","desc":"An ID"}],"desc":"","ret":"The move reaction with that ID"}],"desc":"Represents how a block or entity will react when interacting with a piston\nwhen it is extending or retracting."},{"FQCN":"org.bukkit.block.BlockFace","methods":[{"name":"getModX","params":[],"desc":"Get the amount of X-coordinates to modify to get the represented block","ret":"Amount of X-coordinates to modify"},{"name":"getModY","params":[],"desc":"Get the amount of Y-coordinates to modify to get the represented block","ret":"Amount of Y-coordinates to modify"},{"name":"getModZ","params":[],"desc":"Get the amount of Z-coordinates to modify to get the represented block","ret":"Amount of Z-coordinates to modify"},{"name":"getDirection","params":[],"desc":"Gets the normal vector corresponding to this block face.","ret":"the normal vector"},{"name":"isCartesian","params":[],"desc":"Returns true if this face is aligned with one of the unit axes in 3D\nCartesian space (ie NORTH, SOUTH, EAST, WEST, UP, DOWN).","ret":"Cartesian status"}],"desc":"Represents the face of a block"},{"FQCN":"org.bukkit.block.Block","methods":[{"name":"getData","params":[],"desc":"Gets the metadata for this block","ret":"block specific metadata"},{"name":"getBlockData","params":[],"desc":"Gets the complete block data for this block","ret":"block specific data"},{"name":"getRelative","params":[{"name":"modX","type":"int","desc":"X-coordinate offset"},{"name":"modY","type":"int","desc":"Y-coordinate offset"},{"name":"modZ","type":"int","desc":"Z-coordinate offset"}],"desc":"Gets the block at the given offsets","ret":"Block at the given offsets"},{"name":"getRelative","params":[{"name":"face","type":"BlockFace","desc":"Face of this block to return"}],"desc":"Gets the block at the given face\n<p>\nThis method is equal to getRelative(face, 1)","ret":"Block at the given face"},{"name":"getRelative","params":[{"name":"face","type":"BlockFace","desc":"Face of this block to return"},{"name":"distance","type":"int","desc":"Distance to get the block at"}],"desc":"Gets the block at the given distance of the given face\n<p>\nFor example, the following method places water at 100,102,100; two\nblocks above 100,100,100.\n\n<pre>\nBlock block = world.getBlockAt(100, 100, 100);\nBlock shower = block.getRelative(BlockFace.UP, 2);\nshower.setType(Material.WATER);\n</pre>","ret":"Block at the given face"},{"name":"getType","params":[],"desc":"Gets the type of this block","ret":"block type"},{"name":"getLightLevel","params":[],"desc":"Gets the light level between 0-15","ret":"light level"},{"name":"getLightFromSky","params":[],"desc":"Get the amount of light at this block from the sky.\n<p>\nAny light given from other sources (such as blocks like torches) will\nbe ignored.","ret":"Sky light level"},{"name":"getLightFromBlocks","params":[],"desc":"Get the amount of light at this block from nearby blocks.\n<p>\nAny light given from other sources (such as the sun) will be ignored.","ret":"Block light level"},{"name":"getWorld","params":[],"desc":"Gets the world which contains this Block","ret":"World containing this block"},{"name":"getX","params":[],"desc":"Gets the x-coordinate of this block","ret":"x-coordinate"},{"name":"getY","params":[],"desc":"Gets the y-coordinate of this block","ret":"y-coordinate"},{"name":"getZ","params":[],"desc":"Gets the z-coordinate of this block","ret":"z-coordinate"},{"name":"getBlockKey","params":[],"desc":"Returns this block's coordinates packed into a long value.\nComputed via: {@code Block.getBlockKey(this.getX(), this.getY(), this.getZ())}","ret":"This block's x, y, and z coordinates packed into a long value"},{"name":"getBlockKey","params":[{"name":"x","type":"int","desc":""},{"name":"y","type":"int","desc":""},{"name":"z","type":"int","desc":""}],"desc":"Returns the specified block coordinates packed into a long value\n<p>\nThe return value can be computed as follows:\n<br>\n{@code long value = ((long)x & 0x7FFFFFF) | (((long)z & 0x7FFFFFF) << 27) | ((long)y << 54);}\n</p>\n\n<p>\nAnd may be unpacked as follows:\n<br>\n{@code int x = (int) ((packed << 37) >> 37);}\n<br>\n{@code int y = (int) (packed >> 54);}\n<br>\n{@code int z = (int) ((packed << 10) >> 37);}\n</p>","ret":"This block's x, y, and z coordinates packed into a long value"},{"name":"getBlockKeyX","params":[{"name":"packed","type":"long","desc":"The packed value, as computed by {@link Block#getBlockKey(int, int, int)}"}],"desc":"Returns the x component from the packed value.","ret":"The x component from the packed value."},{"name":"getBlockKeyY","params":[{"name":"packed","type":"long","desc":"The packed value, as computed by {@link Block#getBlockKey(int, int, int)}"}],"desc":"Returns the y component from the packed value.","ret":"The y component from the packed value."},{"name":"getBlockKeyZ","params":[{"name":"packed","type":"long","desc":"The packed value, as computed by {@link Block#getBlockKey(int, int, int)}"}],"desc":"Returns the z component from the packed value.","ret":"The z component from the packed value."},{"name":"isValidTool","params":[{"name":"itemStack","type":"ItemStack","desc":"The (tool) itemstack"}],"desc":"Checks if the itemstack is a valid tool to\nbreak the block with","ret":"whether the block will drop items"},{"name":"getLocation","params":[],"desc":"Gets the Location of the block","ret":"Location of block"},{"name":"getLocation","params":[{"name":"loc","type":"Location","desc":"the location to copy into"}],"desc":"Stores the location of the block in the provided Location object.\n<p>\nIf the provided Location is null this method does nothing and returns\nnull.","ret":"The Location object provided or null"},{"name":"getChunk","params":[],"desc":"Gets the chunk which contains this block","ret":"Containing Chunk"},{"name":"setBlockData","params":[{"name":"data","type":"BlockData","desc":"new block specific data"}],"desc":"Sets the complete data for this block","ret":""},{"name":"setBlockData","params":[{"name":"data","type":"BlockData","desc":"new block specific data"},{"name":"applyPhysics","type":"boolean","desc":"false to cancel physics from the changed block"}],"desc":"Sets the complete data for this block\n\n<br>\nNote that applyPhysics = false is not in general safe. It should only be\nused when you need to avoid triggering a physics update of neighboring\nblocks, for example when creating a {@link Bisected} block. If you are\nusing a custom populator, then this parameter may also be required to\nprevent triggering infinite chunk loads on border blocks. This method\nshould NOT be used to \"hack\" physics by placing blocks in impossible\nlocations. Such blocks are liable to be removed on various events such as\nworld upgrades. Furthermore setting large amounts of such blocks in close\nproximity may overload the server physics engine if an update is\ntriggered at a later point. If this occurs, the resulting behavior is\nundefined.","ret":""},{"name":"setType","params":[{"name":"type","type":"Material","desc":"Material to change this block to"}],"desc":"Sets the type of this block","ret":""},{"name":"setType","params":[{"name":"type","type":"Material","desc":"Material to change this block to"},{"name":"applyPhysics","type":"boolean","desc":"False to cancel physics on the changed block."}],"desc":"Sets the type of this block\n\n<br>\nNote that applyPhysics = false is not in general safe. It should only be\nused when you need to avoid triggering a physics update of neighboring\nblocks, for example when creating a {@link Bisected} block. If you are\nusing a custom populator, then this parameter may also be required to\nprevent triggering infinite chunk loads on border blocks. This method\nshould NOT be used to \"hack\" physics by placing blocks in impossible\nlocations. Such blocks are liable to be removed on various events such as\nworld upgrades. Furthermore setting large amounts of such blocks in close\nproximity may overload the server physics engine if an update is\ntriggered at a later point. If this occurs, the resulting behavior is\nundefined.","ret":""},{"name":"getFace","params":[{"name":"block","type":"Block","desc":"Block to compare against this block"}],"desc":"Gets the face relation of this block compared to the given block.\n<p>\nFor example:\n<pre>{@code\nBlock current = world.getBlockAt(100, 100, 100);\nBlock target = world.getBlockAt(100, 101, 100);\n\ncurrent.getFace(target) == BlockFace.Up;\n}</pre>\n<br>\nIf the given block is not connected to this block, null may be returned","ret":"BlockFace of this block which has the requested block, or null"},{"name":"getState","params":[],"desc":"Captures the current state of this block. You may then cast that state\ninto any accepted type, such as Furnace or Sign.\n<p>\nThe returned object will never be updated, and you are not guaranteed\nthat (for example) a sign is still a sign after you capture its state.","ret":"BlockState with the current state of this block."},{"name":"getState","params":[{"name":"useSnapshot","type":"boolean","desc":"if this block is a TE, should we create a fully copy of the TileEntity"}],"desc":"","ret":"BlockState with the current state of this block"},{"name":"getBiome","params":[],"desc":"Returns the biome that this block resides in","ret":"Biome type containing this block"},{"name":"getComputedBiome","params":[],"desc":"Gets the computed biome at the location of this Block.","ret":"computed biome at the location of this Block."},{"name":"setBiome","params":[{"name":"bio","type":"Biome","desc":"new Biome type for this block"}],"desc":"Sets the biome that this block resides in","ret":""},{"name":"isBlockPowered","params":[],"desc":"Returns true if the block is being powered by Redstone.","ret":"True if the block is powered."},{"name":"isBlockIndirectlyPowered","params":[],"desc":"Returns true if the block is being indirectly powered by Redstone.","ret":"True if the block is indirectly powered."},{"name":"isBlockFacePowered","params":[{"name":"face","type":"BlockFace","desc":"The block face"}],"desc":"Returns true if the block face is being powered by Redstone.","ret":"True if the block face is powered."},{"name":"isBlockFaceIndirectlyPowered","params":[{"name":"face","type":"BlockFace","desc":"The block face"}],"desc":"Returns true if the block face is being indirectly powered by Redstone.","ret":"True if the block face is indirectly powered."},{"name":"getBlockPower","params":[{"name":"face","type":"BlockFace","desc":"the face of the block to query or BlockFace.SELF for the\n    block itself"}],"desc":"Returns the redstone power being provided to this block face","ret":"The power level."},{"name":"getBlockPower","params":[],"desc":"Returns the redstone power being provided to this block","ret":"The power level."},{"name":"isEmpty","params":[],"desc":"Checks if this block is empty.\n<p>\nA block is considered empty when {@link #getType()} returns {@link\nMaterial#AIR}.","ret":"true if this block is empty"},{"name":"isLiquid","params":[],"desc":"Checks if this block is liquid.\n<p>\nA block is considered liquid when {@link #getType()} returns {@link\nMaterial#WATER} or {@link Material#LAVA}.","ret":"true if this block is liquid"},{"name":"isBuildable","params":[],"desc":"Check if this block is solid\n<p>\nDetermined by Minecraft, typically a block a player can use to place a new block to build things.\nAn example of a non buildable block would be liquids, flowers, or fire","ret":"true if block is buildable"},{"name":"isBurnable","params":[],"desc":"Check if this block is burnable\n<p>\nDetermined by Minecraft, typically a block that fire can destroy (Wool, Wood)","ret":"true if block is burnable"},{"name":"isReplaceable","params":[],"desc":"Check if this block is replaceable\n<p>\nDetermined by Minecraft, representing a block that is not AIR that you can still place a new block at, such as flowers.","ret":"true if block is replaceable"},{"name":"isSolid","params":[],"desc":"Check if this block is solid\n<p>\nDetermined by Minecraft, typically a block a player can stand on and can't be passed through.\n\nThis API is faster than accessing Material#isSolid as it avoids a material lookup and switch statement.","ret":"true if block is solid"},{"name":"isCollidable","params":[],"desc":"Checks if this block is collidable.","ret":"true if collidable"},{"name":"getTemperature","params":[],"desc":"Gets the temperature of this block.\n<p>\nIf the raw biome temperature without adjusting for height effects is\nrequired then please use {@link World#getTemperature(int, int, int)}.","ret":"Temperature of this block"},{"name":"getHumidity","params":[],"desc":"Gets the humidity of the biome of this block","ret":"Humidity of this block"},{"name":"getPistonMoveReaction","params":[],"desc":"Returns the reaction of the block when moved by a piston","ret":"reaction"},{"name":"breakNaturally","params":[],"desc":"Breaks the block and spawns items as if a player had digged it regardless\nof the tool.","ret":"true if the block was destroyed"},{"name":"breakNaturally","params":[{"name":"tool","type":"ItemStack","desc":"The tool or item in hand used for digging"}],"desc":"Breaks the block and spawns items as if a player had digged it with a\nspecific tool","ret":"true if the block was destroyed"},{"name":"breakNaturally","params":[{"name":"triggerEffect","type":"boolean","desc":"Play the block break particle effect and sound"}],"desc":"Breaks the block and spawns item drops as if a player had broken it","ret":"true if the block was destroyed"},{"name":"breakNaturally","params":[{"name":"triggerEffect","type":"boolean","desc":"Play the block break particle effect and sound"},{"name":"dropExperience","type":"boolean","desc":"drop exp if the block normally does so"}],"desc":"Breaks the block and spawns item drops as if a player had broken it","ret":"true if the block was destroyed"},{"name":"breakNaturally","params":[{"name":"tool","type":"ItemStack","desc":"The tool or item in hand used for digging"},{"name":"triggerEffect","type":"boolean","desc":"Play the block break particle effect and sound"}],"desc":"Breaks the block and spawns item drops as if a player had broken it\nwith a specific tool","ret":"true if the block was destroyed"},{"name":"breakNaturally","params":[{"name":"tool","type":"ItemStack","desc":"The tool or item in hand used for digging"},{"name":"triggerEffect","type":"boolean","desc":"Play the block break particle effect and sound"},{"name":"dropExperience","type":"boolean","desc":"drop exp if the block normally does so"}],"desc":"Breaks the block and spawns item drops as if a player had broken it\nwith a specific tool","ret":"true if the block was destroyed"},{"name":"tick","params":[],"desc":"Causes the block to be ticked, this is different from {@link Block#randomTick()},\nin that it is usually scheduled to occur, for example\nredstone components being activated, sand falling, etc.","ret":""},{"name":"randomTick","params":[],"desc":"Causes the block to be ticked randomly.\nThis has a chance to execute naturally if {@link BlockData#isRandomlyTicked()} is true.\n<p>\nFor certain blocks, this behavior may be the same as {@link Block#tick()}.","ret":""},{"name":"applyBoneMeal","params":[{"name":"face","type":"BlockFace","desc":"the face on which bonemeal should be applied"}],"desc":"Simulate bone meal application to this block (if possible).","ret":"true if the block was bonemealed, false otherwise"},{"name":"getDrops","params":[],"desc":"Returns a list of items which could drop by destroying this block.\n<p>\nThe items are not guaranteed to be consistent across multiple calls to this\nmethod as this just uses the block type's loot table.","ret":"a list of dropped items for this type of block"},{"name":"getDrops","params":[{"name":"tool","type":"ItemStack","desc":"The tool or item in hand used for digging"}],"desc":"Returns a list of items which could drop by destroying this block with\na specific tool.\n<p>\nThe items are not guaranteed to be consistent across multiple calls to this\nmethod as this just uses the block type's loot table.","ret":"a list of dropped items for this type of block"},{"name":"getDrops","params":[{"name":"tool","type":"ItemStack","desc":"The tool or item in hand used for digging"},{"name":"entity","type":"Entity","desc":"the entity destroying the block"}],"desc":"Returns a list of items which could drop by the entity destroying this\nblock with a specific tool.\n<p>\nThe items are not guaranteed to be consistent across multiple calls to this\nmethod as this just uses the block type's loot table.","ret":"a list of dropped items for this type of block"},{"name":"isPreferredTool","params":[{"name":"tool","type":"ItemStack","desc":"The tool or item used for breaking this block"}],"desc":"Returns if the given item is a preferred choice to break this Block.\n\nIn some cases this determines if a block will drop anything or extra\nloot.","ret":"true if the tool is preferred for breaking this block."},{"name":"getBreakSpeed","params":[{"name":"player","type":"Player","desc":"player breaking the block"}],"desc":"Gets the speed at which the given player would break this block, taking\ninto account tools, potion effects, whether or not the player is in\nwater, enchantments, etc.\n\nThe returned value is the amount of progress made in breaking the block\neach tick. When the total breaking progress reaches {@code 1.0f}, the\nblock is broken. Note that the break speed can change in the course of\nbreaking a block, e.g. if a potion effect is applied or expires, or the\nplayer jumps/enters water.","ret":"the speed at which the player breaks this block"},{"name":"isPassable","params":[],"desc":"Checks if this block is passable.\n<p>\nA block is passable if it has no colliding parts that would prevent\nplayers from moving through it.\n<p>\nExamples: Tall grass, flowers, signs, etc. are passable, but open doors,\nfence gates, trap doors, etc. are not because they still have parts that\ncan be collided with.","ret":"<code>true</code> if passable"},{"name":"rayTrace","params":[{"name":"start","type":"Location","desc":"the start location"},{"name":"direction","type":"Vector","desc":"the ray direction"},{"name":"maxDistance","type":"double","desc":"the maximum distance"},{"name":"fluidCollisionMode","type":"FluidCollisionMode","desc":"the fluid collision mode"}],"desc":"Performs a ray trace that checks for collision with this specific block\nin its current state using its precise collision shape.","ret":"the ray trace hit result, or <code>null</code> if there is no hit"},{"name":"getBoundingBox","params":[],"desc":"Gets the approximate bounding box for this block.\n<p>\nThis isn't exact as some blocks {@link org.bukkit.block.data.type.Stairs}\ncontain many bounding boxes to establish their complete form.\n\nAlso, the box may not be exactly the same as the collision shape (such as\ncactus, which is 16/16 of a block with 15/16 collisional bounds).\n\nThis method will return an empty bounding box if the geometric shape of\nthe block is empty (such as air blocks).","ret":"the approximate bounding box of the block"},{"name":"getCollisionShape","params":[],"desc":"Gets the collision shape of this block.","ret":"a {@link VoxelShape} representing the collision shape of this\nblock."},{"name":"canPlace","params":[{"name":"data","type":"BlockData","desc":"the block data to check"}],"desc":"Checks if this block is a valid placement location for the specified\nblock data.","ret":"<code>true</code> if the block data can be placed here"},{"name":"getSoundGroup","params":[],"desc":"Gets the {@link com.destroystokyo.paper.block.BlockSoundGroup} for this block.\n<p>\nThis object contains the block, step, place, hit, and fall sounds.","ret":"the sound group for this block"},{"name":"getBlockSoundGroup","params":[],"desc":"Gets the {@link org.bukkit.SoundGroup} for this block.","ret":"the sound group for this block"},{"name":"getTranslationKey","params":[],"desc":"","ret":""},{"name":"getDestroySpeed","params":[{"name":"itemStack","type":"ItemStack","desc":"{@link ItemStack} used to mine this Block"}],"desc":"Gets the speed at which this block will be destroyed by a given {@link ItemStack}\n<p>\nDefault value is 1.0","ret":"the speed that this Block will be mined by the given {@link ItemStack}"},{"name":"getDestroySpeed","params":[{"name":"itemStack","type":"ItemStack","desc":"{@link ItemStack} used to mine this Block"},{"name":"considerEnchants","type":"boolean","desc":"true to look at enchants on the itemstack"}],"desc":"Gets the speed at which this block will be destroyed by a given {@link ItemStack}\n<p>\nDefault value is 1.0","ret":"the speed that this Block will be mined by the given {@link ItemStack}"}],"desc":"Represents a block. This is a live object, and only one Block may exist for\nany given location in a world. The state of the block may change\nconcurrently to your own handling of it; use block.getState() to get a\nsnapshot state of a block which will not be modified.\n\n<br>\nNote that parts of this class which require access to the world at large\n(i.e. lighting and power) may not be able to be safely accessed during world\ngeneration when used in cases like BlockPhysicsEvent!!!!"},{"FQCN":"org.bukkit.block.banner.Pattern","methods":[{"name":"getColor","params":[],"desc":"Returns the color of the pattern","ret":"the color of the pattern"},{"name":"getPattern","params":[],"desc":"Returns the type of pattern","ret":"the pattern type"}],"desc":""},{"FQCN":"org.bukkit.block.banner.PatternType","methods":[{"name":"getIdentifier","params":[],"desc":"Returns the identifier used to represent\nthis pattern type","ret":"the pattern's identifier"},{"name":"getByIdentifier","params":[{"name":"identifier","type":"String","desc":"the identifier"}],"desc":"Returns the pattern type which matches the passed\nidentifier or null if no matches are found","ret":"the matched pattern type or null"}],"desc":""},{"FQCN":"org.bukkit.block.Beehive","methods":[{"name":"getFlower","params":[],"desc":"Get the hive's flower location.","ret":"flower location or null"},{"name":"setFlower","params":[{"name":"location","type":"Location","desc":"or null"}],"desc":"Set the hive's flower location.","ret":""},{"name":"isSedated","params":[],"desc":"Check if the hive is sedated due to smoke from a nearby campfire.","ret":"True if hive is sedated"}],"desc":"Represents a captured state of a bee hive."},{"FQCN":"org.bukkit.block.Campfire","methods":[{"name":"getSize","params":[],"desc":"","ret":"The size of the inventory"},{"name":"getItem","params":[{"name":"index","type":"int","desc":"The index of the Slot's ItemStack to return"}],"desc":"","ret":"The ItemStack in the slot"},{"name":"setItem","params":[{"name":"index","type":"int","desc":"The index where to put the ItemStack"},{"name":"item","type":"ItemStack","desc":"The ItemStack to set"}],"desc":"","ret":""},{"name":"getCookTime","params":[{"name":"index","type":"int","desc":"item slot index"}],"desc":"Get cook time.\n\nThis is the amount of time the item has been cooking for.","ret":"Cook time"},{"name":"setCookTime","params":[{"name":"index","type":"int","desc":"item slot index"},{"name":"cookTime","type":"int","desc":"Cook time"}],"desc":"Set cook time.\n\nThis is the amount of time the item has been cooking for.","ret":""},{"name":"getCookTimeTotal","params":[{"name":"index","type":"int","desc":"item slot index"}],"desc":"Get cook time total.\n\nThis is the amount of time the item is required to cook for.","ret":"Cook time total"},{"name":"setCookTimeTotal","params":[{"name":"index","type":"int","desc":"item slot index"},{"name":"cookTimeTotal","type":"int","desc":"Cook time total"}],"desc":"Set cook time.\n\nThis is the amount of time the item is required to cook for.","ret":""},{"name":"stopCooking","params":[],"desc":"Disable cooking in all slots.","ret":""},{"name":"startCooking","params":[],"desc":"Re-enable cooking in all slots.","ret":""},{"name":"stopCooking","params":[{"name":"index","type":"int","desc":"item slot index"}],"desc":"Disable cooking in the specified slot index.","ret":"whether the slot had cooking enabled before this call"},{"name":"startCooking","params":[{"name":"index","type":"int","desc":"item slot index"}],"desc":"Re-enable cooking in the specified slot index.","ret":"whether the slot couldn't cook before this call"},{"name":"isCookingDisabled","params":[{"name":"index","type":"int","desc":"item slot index"}],"desc":"State of slot index.","ret":"{@code true} if the specified slot index cannot cook"}],"desc":"Represents a captured state of a campfire."},{"FQCN":"org.bukkit.block.Dropper","methods":[{"name":"drop","params":[],"desc":"Tries to drop a randomly selected item from the dropper's inventory,\nfollowing the normal behavior of a dropper.\n<p>\nNormal behavior of a dropper is as follows:\n<p>\nIf the block that the dropper is facing is an InventoryHolder,\nthe randomly selected ItemStack is placed within that\nInventory in the first slot that's available, starting with 0 and\ncounting up.  If the inventory is full, nothing happens.\n<p>\nIf the block that the dropper is facing is not an InventoryHolder,\nthe randomly selected ItemStack is dropped on\nthe ground in the form of an {@link org.bukkit.entity.Item Item}.\n<p>\nIf the block represented by this state is no longer a dropper, this will\ndo nothing.","ret":""}],"desc":"Represents a captured state of a dropper."},{"FQCN":"org.bukkit.Instrument","methods":[{"name":"getSound","params":[],"desc":"Gets the sound associated with this instrument. <br>\nWill be null for {@link Instrument#CUSTOM_HEAD}","ret":"the sound or null"},{"name":"getType","params":[],"desc":"","ret":"The type ID of this instrument."},{"name":"getByType","params":[{"name":"type","type":"byte","desc":"The type ID"}],"desc":"Get an instrument by its type ID.","ret":"The instrument"}],"desc":""},{"FQCN":"org.bukkit.UnsafeValues","methods":[{"name":"loadAdvancement","params":[{"name":"key","type":"NamespacedKey","desc":"the unique advancement key"},{"name":"advancement","type":"String","desc":"representation of the advancement"}],"desc":"Load an advancement represented by the specified string into the server.\nThe advancement format is governed by Minecraft and has no specified\nlayout.\n<br>\nIt is currently a JSON object, as described by the <a href=\"https://minecraft.wiki/w/Advancements\">Minecraft wiki</a>.\n<br>\nLoaded advancements will be stored and persisted across server restarts\nand reloads.\n<br>\nCallers should be prepared for {@link Exception} to be thrown.","ret":"the loaded advancement or null if an error occurred"},{"name":"removeAdvancement","params":[{"name":"key","type":"NamespacedKey","desc":"the unique advancement key"}],"desc":"Delete an advancement which was loaded and saved by\n{@link #loadAdvancement(org.bukkit.NamespacedKey, java.lang.String)}.\n<br>\nThis method will only remove advancement from persistent storage. It\nshould be accompanied by a call to {@link Server#reloadData()} in order\nto fully remove it from the running instance.","ret":"true if a file matching this key was found and deleted"},{"name":"getInternalPotionData","params":[{"name":"key","type":"NamespacedKey","desc":"of the potion type"}],"desc":"Do not use, method will get removed, and the plugin won't run","ret":"an internal potion data"},{"name":"createDamageSourceBuilder","params":[{"name":"damageType","type":"DamageType","desc":"the {@link DamageType} to use"}],"desc":"Create a new {@link DamageSource.Builder}.","ret":"a {@link DamageSource.Builder}"},{"name":"getTimingsServerName","params":[],"desc":"Server name to report to timings v2","ret":"name"},{"name":"getVersionFetcher","params":[],"desc":"Called once by the version command on first use, then cached.","ret":""},{"name":"nextEntityId","params":[],"desc":"Creates and returns the next EntityId available.\n<p>\nUse this when sending custom packets, so that there are no collisions on the client or server.","ret":""},{"name":"getMainLevelName","params":[],"desc":"Just don't use it.","ret":""},{"name":"getItemRarity","params":[{"name":"material","type":"Material","desc":"the material to get the rarity of"}],"desc":"Gets the item rarity of a material. The material <b>MUST</b> be an item.\nUse {@link Material#isItem()} before this.","ret":"the item rarity"},{"name":"getItemStackRarity","params":[{"name":"itemStack","type":"ItemStack","desc":"the itemstack to get the rarity of"}],"desc":"Gets the item rarity of the itemstack. The rarity can change based on enchantements.","ret":"the itemstack rarity"},{"name":"isValidRepairItemStack","params":[{"name":"itemToBeRepaired","type":"ItemStack","desc":"the itemstack to be repaired"},{"name":"repairMaterial","type":"ItemStack","desc":"the repair material"}],"desc":"Checks if an itemstack can be repaired with another itemstack.\nReturns false if either argument's type is not an item ({@link Material#isItem()}).","ret":"true if valid repair, false if not"},{"name":"getItemAttributes","params":[{"name":"material","type":"Material","desc":"the material"},{"name":"equipmentSlot","type":"EquipmentSlot","desc":"the slot to get the attributes for"}],"desc":"Returns an immutable multimap of attributes for the material and slot.\n{@link Material#isItem()} must be true for this material.","ret":"an immutable multimap of attributes"},{"name":"getProtocolVersion","params":[],"desc":"Returns the server's protocol version.","ret":"the server's protocol version"},{"name":"hasDefaultEntityAttributes","params":[{"name":"entityKey","type":"NamespacedKey","desc":"the entity's key"}],"desc":"Checks if the entity represented by the namespaced key has default attributes.","ret":"true if it has default attributes"},{"name":"getDefaultEntityAttributes","params":[{"name":"entityKey","type":"NamespacedKey","desc":"the entity's key"}],"desc":"Gets the default attributes for the entity represented by the namespaced key.","ret":"an unmodifiable instance of Attributable for reading default attributes."},{"name":"isCollidable","params":[{"name":"material","type":"Material","desc":"the material to check"}],"desc":"Checks if this material is collidable.","ret":"true if collidable"},{"name":"getBiomeKey","params":[{"name":"accessor","type":"RegionAccessor","desc":"The {@link RegionAccessor} of the provided coordinates"},{"name":"x","type":"int","desc":"X-coordinate of the block"},{"name":"y","type":"int","desc":"Y-coordinate of the block"},{"name":"z","type":"int","desc":"Z-coordinate of the block"}],"desc":"Gets the {@link NamespacedKey} for the biome at the given location.","ret":"the biome's {@link NamespacedKey}"},{"name":"setBiomeKey","params":[{"name":"accessor","type":"RegionAccessor","desc":"The {@link RegionAccessor} of the provided coordinates"},{"name":"x","type":"int","desc":"X-coordinate of the block"},{"name":"y","type":"int","desc":"Y-coordinate of the block"},{"name":"z","type":"int","desc":"Z-coordinate of the block"},{"name":"biomeKey","type":"NamespacedKey","desc":"Biome key"}],"desc":"Sets the biome at the given location to a biome registered\nto the given {@link NamespacedKey}. If no biome by the given\n{@link NamespacedKey} exists, an {@link IllegalStateException}\nwill be thrown.","ret":""},{"name":"getSpawnEggLayerColor","params":[{"name":"entityType","type":"org.bukkit.entity.EntityType","desc":"The entity type to get the color for"},{"name":"layer","type":"int","desc":"The texture layer to get a color for"}],"desc":"Obtains the underlying color informating for a spawn egg of a given\nentity type, or null if the entity passed does not have a spawn egg.\nSpawn eggs have two colors - the background layer (0), and the\nforeground layer (1)","ret":"The color of the layer for the entity's spawn egg"},{"name":"createPluginLifecycleEventManager","params":[{"name":"plugin","type":"org.bukkit.plugin.java.JavaPlugin","desc":""},{"name":"registrationCheck","type":"java.util.function.BooleanSupplier","desc":""}],"desc":"","ret":""}],"desc":"This interface provides value conversions that may be specific to a\nruntime, or have arbitrary meaning (read: magic values).\n<p>\nTheir existence and behavior is not guaranteed across future versions. They\nmay be poorly named, throw exceptions, have misleading parameters, or any\nother bad programming practice."},{"FQCN":"org.bukkit.Particle","methods":[{"name":"getDataType","params":[],"desc":"Returns the required data type for the particle","ret":"the required data type"},{"name":"builder","params":[],"desc":"Creates a {@link com.destroystokyo.paper.ParticleBuilder}","ret":"a {@link com.destroystokyo.paper.ParticleBuilder} for the particle"}],"desc":""},{"FQCN":"org.spigotmc.event.entity.EntityDismountEvent","methods":[],"desc":"Called when an entity stops riding another entity."},{"FQCN":"org.spigotmc.event.entity.EntityMountEvent","methods":[],"desc":"Called when an entity attempts to ride another entity."},{"FQCN":"org.spigotmc.event.player.PlayerSpawnLocationEvent","methods":[{"name":"getSpawnLocation","params":[],"desc":"Gets player's spawn location.\nIf the player {@link Player#hasPlayedBefore()}, it's going to default to the location inside player.dat file.\nFor new players, the default spawn location is spawn of the main Bukkit world.","ret":"the spawn location"},{"name":"setSpawnLocation","params":[{"name":"location","type":"Location","desc":"the spawn location"}],"desc":"Sets player's spawn location.","ret":""}],"desc":"Called when player is about to spawn in a world after joining the server."},{"FQCN":"org.spigotmc.CustomTimingsHandler","methods":[],"desc":"This is here for legacy purposes incase any plugin used it.\n\nIf you use this, migrate ASAP as this will be removed in the future!"},{"FQCN":"co.aikar.timings.TimingsManager","methods":[{"name":"reset","params":[],"desc":"Resets all timing data on the next tick","ret":""},{"name":"tick","params":[],"desc":"Ticked every tick by CraftBukkit to count the number of times a timer\ncaused TPS loss.","ret":""},{"name":"getCommandTiming","params":[{"name":"pluginName","type":"String","desc":"Plugin this command is associated with"},{"name":"command","type":"Command","desc":"Command to get timings for"}],"desc":"<p>Due to access restrictions, we need a helper method to get a Command TimingHandler with String group</p>\n\nPlugins should never call this","ret":"TimingHandler"},{"name":"getPluginByClassloader","params":[{"name":"clazz","type":"Class<?>","desc":"Class to check"}],"desc":"Looks up the class loader for the specified class, and if it is a PluginClassLoader, return the\nPlugin that created this class.","ret":"Plugin if created by a plugin"}],"desc":""},{"FQCN":"co.aikar.timings.UnsafeTimingHandler","methods":[],"desc":""},{"FQCN":"co.aikar.timings.TimingHandler","methods":[{"name":"reset","params":[{"name":"full","type":"boolean","desc":""}],"desc":"Reset this timer, setting all values to zero.","ret":""},{"name":"close","params":[],"desc":"This is simply for the Closeable interface so it can be used with try-with-resources ()","ret":""}],"desc":""},{"FQCN":"co.aikar.timings.TimedEventExecutor","methods":[],"desc":""},{"FQCN":"co.aikar.timings.FullServerTickHandler","methods":[],"desc":""},{"FQCN":"co.aikar.timings.TimingsCommand","methods":[],"desc":""},{"FQCN":"co.aikar.timings.TimingData","methods":[],"desc":"<p>Lightweight object for tracking timing data</p>\n\nThis is broken out to reduce memory usage"},{"FQCN":"co.aikar.timings.TimingIdentifier","methods":[],"desc":"<p>Used as a basis for fast HashMap key comparisons for the Timing Map.</p>\n\nThis class uses interned strings giving us the ability to do an identity check instead of equals() on the strings"},{"FQCN":"co.aikar.timings.TimingHistory","methods":[],"desc":""},{"FQCN":"co.aikar.timings.NullTimingHandler","methods":[],"desc":""},{"FQCN":"co.aikar.timings.Timing","methods":[{"name":"startTiming","params":[],"desc":"Starts timing the execution until {@link #stopTiming()} is called.","ret":"Timing"},{"name":"stopTiming","params":[],"desc":"<p>Stops timing and records the data. Propagates the data up to group handlers.</p>\n\nWill automatically be called when this Timing is used with try-with-resources","ret":""},{"name":"startTimingIfSync","params":[],"desc":"Starts timing the execution until {@link #stopTiming()} is called.\n\nBut only if we are on the primary thread.","ret":"Timing"},{"name":"stopTimingIfSync","params":[],"desc":"<p>Stops timing and records the data. Propagates the data up to group handlers.</p>\n\n<p>Will automatically be called when this Timing is used with try-with-resources</p>\n\nBut only if we are on the primary thread.","ret":""},{"name":"abort","params":[],"desc":"","ret":""},{"name":"getTimingHandler","params":[],"desc":"Used internally to get the actual backing Handler in the case of delegated Handlers","ret":"TimingHandler"}],"desc":"Provides an ability to time sections of code within the Minecraft Server"},{"FQCN":"co.aikar.timings.TimingsReportListener","methods":[],"desc":""},{"FQCN":"co.aikar.timings.TimingHistoryEntry","methods":[],"desc":""},{"FQCN":"co.aikar.timings.Timings","methods":[{"name":"of","params":[{"name":"plugin","type":"Plugin","desc":"Plugin to own the Timing"},{"name":"name","type":"String","desc":"Name of Timing"}],"desc":"Returns a Timing for a plugin corresponding to a name.","ret":"Handler"},{"name":"of","params":[{"name":"plugin","type":"Plugin","desc":"Plugin to own the Timing"},{"name":"name","type":"String","desc":"Name of Timing"},{"name":"groupHandler","type":"Timing","desc":"Parent handler to mirror .start/stop calls to"}],"desc":"<p>Returns a handler that has a groupHandler timer handler. Parent timers should not have their\nstart/stop methods called directly, as the children will call it for you.</p>\n\nParent Timers are used to group multiple subsections together and get a summary of them combined\nParent Handler can not be changed after first call","ret":"Timing Handler"},{"name":"ofStart","params":[{"name":"plugin","type":"Plugin","desc":"Plugin to own the Timing"},{"name":"name","type":"String","desc":"Name of Timing"}],"desc":"Returns a Timing object after starting it, useful for Java7 try-with-resources.\n\ntry (Timing ignored = Timings.ofStart(plugin, someName)) {\n// timed section\n}","ret":"Timing Handler"},{"name":"ofStart","params":[{"name":"plugin","type":"Plugin","desc":"Plugin to own the Timing"},{"name":"name","type":"String","desc":"Name of Timing"},{"name":"groupHandler","type":"Timing","desc":"Parent handler to mirror .start/stop calls to"}],"desc":"Returns a Timing object after starting it, useful for Java7 try-with-resources.\n\ntry (Timing ignored = Timings.ofStart(plugin, someName, groupHandler)) {\n// timed section\n}","ret":"Timing Handler"},{"name":"isTimingsEnabled","params":[],"desc":"Gets whether or not the Spigot Timings system is enabled","ret":"Enabled or not"},{"name":"setTimingsEnabled","params":[{"name":"enabled","type":"boolean","desc":"Should timings be reported"}],"desc":"<p>Sets whether or not the Spigot Timings system should be enabled</p>\n\nCalling this will reset timing data.","ret":""},{"name":"isVerboseTimingsEnabled","params":[],"desc":"<p>Sets whether or not the Timings should monitor at Verbose level.</p>\n\n<p>When Verbose is disabled, high-frequency timings will not be available.</p>","ret":"Enabled or not"},{"name":"setVerboseTimingsEnabled","params":[{"name":"enabled","type":"boolean","desc":"Should high-frequency timings be reported"}],"desc":"<p>Sets whether or not the Timings should monitor at Verbose level.</p>\n\nWhen Verbose is disabled, high-frequency timings will not be available.\nCalling this will reset timing data.","ret":""},{"name":"getHistoryInterval","params":[],"desc":"<p>Gets the interval between Timing History report generation.</p>\n\nDefaults to 5 minutes (6000 ticks)","ret":"Interval in ticks"},{"name":"setHistoryInterval","params":[{"name":"interval","type":"int","desc":"Interval in ticks"}],"desc":"<p>Sets the interval between Timing History report generations.</p>\n\n<p>Defaults to 5 minutes (6000 ticks)</p>\n\nThis will recheck your history length, so lowering this value will lower your\nhistory length if you need more than 60 history windows.","ret":""},{"name":"getHistoryLength","params":[],"desc":"Gets how long in ticks Timings history is kept for the server.\n\nDefaults to 1 hour (72000 ticks)","ret":"Duration in Ticks"},{"name":"setHistoryLength","params":[{"name":"length","type":"int","desc":"Duration in ticks"}],"desc":"Sets how long Timing History reports are kept for the server.\n\nDefaults to 1 hours(72000 ticks)\n\nThis value is capped at a maximum of getHistoryInterval() * MAX_HISTORY_FRAMES (12)\n\nWill not reset Timing Data but may truncate old history if the new length is less than old length.","ret":""},{"name":"reset","params":[],"desc":"Resets all Timing Data","ret":""},{"name":"generateReport","params":[{"name":"sender","type":"CommandSender","desc":"The sender to send to, or null to use the ConsoleCommandSender"}],"desc":"Generates a report and sends it to the specified command sender.\n\nIf sender is null, ConsoleCommandSender will be used.","ret":""},{"name":"generateReport","params":[{"name":"sender","type":"TimingsReportListener","desc":"The listener to send responses too."}],"desc":"Generates a report and sends it to the specified listener.\nUse with {@link org.bukkit.command.BufferedCommandSender} to get full response when done!","ret":""}],"desc":""},{"FQCN":"co.aikar.util.JSONUtil","methods":[{"name":"pair","params":[{"name":"key","type":"String","desc":"Key to use"},{"name":"obj","type":"Object","desc":"Value to use"}],"desc":"Creates a key/value \"JSONPair\" object","ret":"JSONPair"},{"name":"createObject","params":[{"name":"data","type":"JSONPair","desc":"JSONPairs"}],"desc":"Creates a new JSON object from multiple JSONPair key/value pairs","ret":"Map"},{"name":"appendObjectData","params":[{"name":"parent","type":"Map","desc":"Map to be appended to"},{"name":"data","type":"JSONPair","desc":"Data to append"}],"desc":"This appends multiple key/value Obj pairs into a JSON Object","ret":"Map"},{"name":"toArray","params":[{"name":"data","type":"Object","desc":"Data to build JSON array from"}],"desc":"This builds a JSON array from a set of data","ret":"List"},{"name":"toArrayMapper","params":[{"name":"collection","type":"E[]","desc":"Collection to apply to"},{"name":"mapper","type":"Function<E,Object>","desc":"Mapper to apply"}],"desc":"These help build a single JSON array using a mapper function","ret":"List"},{"name":"toObjectMapper","params":[{"name":"collection","type":"E[]","desc":"Collection to apply to"},{"name":"mapper","type":"Function<E,JSONPair>","desc":"Mapper to apply"}],"desc":"These help build a single JSON Object from a collection, using a mapper function","ret":"Map"}],"desc":"Provides Utility methods that assist with generating JSON Objects"},{"FQCN":"co.aikar.util.MRUMapCache","methods":[{"name":"of","params":[{"name":"map","type":"Map<K,V>","desc":"Map to be wrapped"}],"desc":"Wraps the specified map with a most recently used cache","ret":"Map"}],"desc":"Implements a Most Recently Used cache in front of a backing map, to quickly access the last accessed result."},{"FQCN":"co.aikar.util.LoadingMap","methods":[{"name":"of","params":[{"name":"backingMap","type":"Map<K,V>","desc":"Actual map being used."},{"name":"loader","type":"Function<K,V>","desc":"Loader to use"}],"desc":"Creates a new LoadingMap with the specified map and loader","ret":"Map"},{"name":"newAutoMap","params":[{"name":"backingMap","type":"Map<K,V>","desc":"Actual map being used."},{"name":"keyClass","type":"Class<? extends K>","desc":"Class used for the K generic"},{"name":"valueClass","type":"Class<? extends V>","desc":"Class used for the V generic"}],"desc":"Creates a LoadingMap with an auto instantiating loader.\n\nWill auto construct class of of Value when not found\n\nSince this uses Reflection, It is more effecient to define your own static loader\nthan using this helper, but if performance is not critical, this is easier.","ret":"Map that auto instantiates on .get()"},{"name":"newAutoMap","params":[{"name":"backingMap","type":"Map<K,V>","desc":"Actual map being used."},{"name":"valueClass","type":"Class<? extends V>","desc":"Class used for the V generic"}],"desc":"Creates a LoadingMap with an auto instantiating loader.\n\nWill auto construct class of of Value when not found\n\nSince this uses Reflection, It is more effecient to define your own static loader\nthan using this helper, but if performance is not critical, this is easier.","ret":"Map that auto instantiates on .get()"},{"name":"newHashAutoMap","params":[{"name":"keyClass","type":"Class<? extends K>","desc":"Class used for the K generic"},{"name":"valueClass","type":"Class<? extends V>","desc":"Class used for the V generic"}],"desc":"","ret":"Map that auto instantiates on .get()"},{"name":"newHashAutoMap","params":[{"name":"valueClass","type":"Class<? extends V>","desc":"Class used for the V generic"}],"desc":"","ret":"Map that auto instantiates on .get()"},{"name":"newHashAutoMap","params":[{"name":"keyClass","type":"Class<? extends K>","desc":"Class used for the K generic"},{"name":"valueClass","type":"Class<? extends V>","desc":"Class used for the V generic"},{"name":"initialCapacity","type":"int","desc":"Initial capacity to use"},{"name":"loadFactor","type":"float","desc":"Load factor to use"}],"desc":"","ret":"Map that auto instantiates on .get()"},{"name":"newHashAutoMap","params":[{"name":"valueClass","type":"Class<? extends V>","desc":"Class used for the V generic"},{"name":"initialCapacity","type":"int","desc":"Initial capacity to use"},{"name":"loadFactor","type":"float","desc":"Load factor to use"}],"desc":"","ret":"Map that auto instantiates on .get()"},{"name":"newHashMap","params":[{"name":"loader","type":"Function<K,V>","desc":"Loader to use"}],"desc":"Initializes an auto loading map using a HashMap","ret":"Map"},{"name":"newHashMap","params":[{"name":"loader","type":"Function<K,V>","desc":"Loader to use"},{"name":"initialCapacity","type":"int","desc":"Initial capacity to use"}],"desc":"Initializes an auto loading map using a HashMap","ret":"Map"},{"name":"newHashMap","params":[{"name":"loader","type":"Function<K,V>","desc":"Loader to use"},{"name":"initialCapacity","type":"int","desc":"Initial capacity to use"},{"name":"loadFactor","type":"float","desc":"Load factor to use"}],"desc":"Initializes an auto loading map using a HashMap","ret":"Map"},{"name":"newIdentityHashMap","params":[{"name":"loader","type":"Function<K,V>","desc":"Loader to use"}],"desc":"Initializes an auto loading map using an Identity HashMap","ret":"Map"},{"name":"newIdentityHashMap","params":[{"name":"loader","type":"Function<K,V>","desc":"Loader to use"},{"name":"initialCapacity","type":"int","desc":"Initial capacity to use"}],"desc":"Initializes an auto loading map using an Identity HashMap","ret":"Map"}],"desc":"Allows you to pass a Loader function that when a key is accessed that doesn't exists,\nautomatically loads the entry into the map by calling the loader Function.\n\n.get() Will only return null if the Loader can return null.\n\nYou may pass any backing Map to use.\n\nThis class is not thread safe and should be wrapped with Collections.synchronizedMap on the OUTSIDE of the LoadingMap if needed.\n\nDo not wrap the backing map with Collections.synchronizedMap."},{"FQCN":"co.aikar.util.Counter","methods":[],"desc":""},{"FQCN":"co.aikar.util.LoadingIntMap","methods":[],"desc":"Allows you to pass a Loader function that when a key is accessed that doesn't exist,\nautomatically loads the entry into the map by calling the loader Function.\n\n.get() Will only return null if the Loader can return null.\n\nYou may pass any backing Map to use.\n\nThis class is not thread safe and should be wrapped with Collections.synchronizedMap on the OUTSIDE of the LoadingMap if needed.\n\nDo not wrap the backing map with Collections.synchronizedMap."},{"FQCN":"io.papermc.paper.generated.GeneratedFrom","methods":[],"desc":"Used to mark classes which are generated from\na specific version of minecraft."},{"FQCN":"io.papermc.paper.threadedregions.scheduler.GlobalRegionScheduler","methods":[{"name":"execute","params":[{"name":"plugin","type":"Plugin","desc":"The plugin that owns the task"},{"name":"run","type":"Runnable","desc":"The task to execute"}],"desc":"Schedules a task to be executed on the global region.","ret":""},{"name":"run","params":[{"name":"plugin","type":"Plugin","desc":"The plugin that owns the task"},{"name":"task","type":"Consumer<ScheduledTask>","desc":"The task to execute"}],"desc":"Schedules a task to be executed on the global region on the next tick.","ret":"The {@link ScheduledTask} that represents the scheduled task."},{"name":"runDelayed","params":[{"name":"plugin","type":"Plugin","desc":"The plugin that owns the task"},{"name":"task","type":"Consumer<ScheduledTask>","desc":"The task to execute"},{"name":"delayTicks","type":"long","desc":"The delay, in ticks."}],"desc":"Schedules a task to be executed on the global region after the specified delay in ticks.","ret":"The {@link ScheduledTask} that represents the scheduled task."},{"name":"runAtFixedRate","params":[{"name":"plugin","type":"Plugin","desc":"The plugin that owns the task"},{"name":"task","type":"Consumer<ScheduledTask>","desc":"The task to execute"},{"name":"initialDelayTicks","type":"long","desc":"The initial delay, in ticks."},{"name":"periodTicks","type":"long","desc":"The period, in ticks."}],"desc":"Schedules a repeating task to be executed on the global region after the initial delay with the\nspecified period.","ret":"The {@link ScheduledTask} that represents the scheduled task."},{"name":"cancelTasks","params":[{"name":"plugin","type":"Plugin","desc":"Specified plugin."}],"desc":"Attempts to cancel all tasks scheduled by the specified plugin.","ret":""}],"desc":"The global region task scheduler may be used to schedule tasks that will execute on the global region.\n<p>\nThe global region is responsible for maintaining world day time, world game time, weather cycle,\nsleep night skipping, executing commands for console, and other misc. tasks that do not belong to any specific region.\n</p>"},{"FQCN":"io.papermc.paper.threadedregions.scheduler.AsyncScheduler","methods":[{"name":"runNow","params":[{"name":"plugin","type":"Plugin","desc":"Plugin which owns the specified task."},{"name":"task","type":"Consumer<ScheduledTask>","desc":"Specified task."}],"desc":"Schedules the specified task to be executed asynchronously immediately.","ret":"The {@link ScheduledTask} that represents the scheduled task."},{"name":"runDelayed","params":[{"name":"plugin","type":"Plugin","desc":"Plugin which owns the specified task."},{"name":"task","type":"Consumer<ScheduledTask>","desc":"Specified task."},{"name":"delay","type":"long","desc":"The time delay to pass before the task should be executed."},{"name":"unit","type":"TimeUnit","desc":"The time unit for the time delay."}],"desc":"Schedules the specified task to be executed asynchronously after the time delay has passed.","ret":"The {@link ScheduledTask} that represents the scheduled task."},{"name":"runAtFixedRate","params":[{"name":"plugin","type":"Plugin","desc":"Plugin which owns the specified task."},{"name":"task","type":"Consumer<ScheduledTask>","desc":"Specified task."},{"name":"initialDelay","type":"long","desc":"The time delay to pass before the first execution of the task."},{"name":"period","type":"long","desc":"The time between task executions after the first execution of the task."},{"name":"unit","type":"TimeUnit","desc":"The time unit for the initial delay and period."}],"desc":"Schedules the specified task to be executed asynchronously after the initial delay has passed,\nand then periodically executed with the specified period.","ret":"The {@link ScheduledTask} that represents the scheduled task."},{"name":"cancelTasks","params":[{"name":"plugin","type":"Plugin","desc":"Specified plugin."}],"desc":"Attempts to cancel all tasks scheduled by the specified plugin.","ret":""}],"desc":"Scheduler that may be used by plugins to schedule tasks to execute asynchronously from the server tick process."},{"FQCN":"io.papermc.paper.threadedregions.scheduler.EntityScheduler","methods":[{"name":"execute","params":[{"name":"plugin","type":"Plugin","desc":""},{"name":"run","type":"Runnable","desc":"The callback to run after the specified delay, may not be null."},{"name":"retired","type":"Runnable","desc":"Retire callback to run if the entity is retired before the run callback can be invoked, may be null."},{"name":"delay","type":"long","desc":"The delay in ticks before the run callback is invoked. Any value less-than 1 is treated as 1."}],"desc":"Schedules a task with the given delay. If the task failed to schedule because the scheduler is retired (entity\nremoved), then returns {@code false}. Otherwise, either the run callback will be invoked after the specified delay,\nor the retired callback will be invoked if the scheduler is retired.\nNote that the retired callback is invoked in critical code, so it should not attempt to remove the entity, remove\nother entities, load chunks, load worlds, modify ticket levels, etc.\n\n<p>\nIt is guaranteed that the run and retired callback are invoked on the region which owns the entity.\n</p>","ret":"{@code true} if the task was scheduled, which means that either the run function or the retired function\n        will be invoked (but never both), or {@code false} indicating neither the run nor retired function will be invoked\n        since the scheduler has been retired."},{"name":"run","params":[{"name":"plugin","type":"Plugin","desc":"The plugin that owns the task"},{"name":"task","type":"Consumer<ScheduledTask>","desc":"The task to execute"},{"name":"retired","type":"Runnable","desc":"Retire callback to run if the entity is retired before the run callback can be invoked, may be null."}],"desc":"Schedules a task to execute on the next tick. If the task failed to schedule because the scheduler is retired (entity\nremoved), then returns {@code null}. Otherwise, either the task callback will be invoked after the specified delay,\nor the retired callback will be invoked if the scheduler is retired.\nNote that the retired callback is invoked in critical code, so it should not attempt to remove the entity, remove\nother entities, load chunks, load worlds, modify ticket levels, etc.\n\n<p>\nIt is guaranteed that the task and retired callback are invoked on the region which owns the entity.\n</p>","ret":"The {@link ScheduledTask} that represents the scheduled task, or {@code null} if the entity has been removed."},{"name":"runDelayed","params":[{"name":"plugin","type":"Plugin","desc":"The plugin that owns the task"},{"name":"task","type":"Consumer<ScheduledTask>","desc":"The task to execute"},{"name":"retired","type":"Runnable","desc":"Retire callback to run if the entity is retired before the run callback can be invoked, may be null."},{"name":"delayTicks","type":"long","desc":"The delay, in ticks."}],"desc":"Schedules a task with the given delay. If the task failed to schedule because the scheduler is retired (entity\nremoved), then returns {@code null}. Otherwise, either the task callback will be invoked after the specified delay,\nor the retired callback will be invoked if the scheduler is retired.\nNote that the retired callback is invoked in critical code, so it should not attempt to remove the entity, remove\nother entities, load chunks, load worlds, modify ticket levels, etc.\n\n<p>\nIt is guaranteed that the task and retired callback are invoked on the region which owns the entity.\n</p>","ret":"The {@link ScheduledTask} that represents the scheduled task, or {@code null} if the entity has been removed."},{"name":"runAtFixedRate","params":[{"name":"plugin","type":"Plugin","desc":"The plugin that owns the task"},{"name":"task","type":"Consumer<ScheduledTask>","desc":"The task to execute"},{"name":"retired","type":"Runnable","desc":"Retire callback to run if the entity is retired before the run callback can be invoked, may be null."},{"name":"initialDelayTicks","type":"long","desc":"The initial delay, in ticks."},{"name":"periodTicks","type":"long","desc":"The period, in ticks."}],"desc":"Schedules a repeating task with the given delay and period. If the task failed to schedule because the scheduler\nis retired (entity removed), then returns {@code null}. Otherwise, either the task callback will be invoked after\nthe specified delay, or the retired callback will be invoked if the scheduler is retired.\nNote that the retired callback is invoked in critical code, so it should not attempt to remove the entity, remove\nother entities, load chunks, load worlds, modify ticket levels, etc.\n\n<p>\nIt is guaranteed that the task and retired callback are invoked on the region which owns the entity.\n</p>","ret":"The {@link ScheduledTask} that represents the scheduled task, or {@code null} if the entity has been removed."}],"desc":"An entity can move between worlds with an arbitrary tick delay, be temporarily removed\nfor players (i.e end credits), be partially removed from world state (i.e inactive but not removed),\nteleport between ticking regions, teleport between worlds, and even be removed entirely from the server.\nThe uncertainty of an entity's state can make it difficult to schedule tasks without worrying about undefined\nbehaviors resulting from any of the states listed previously.\n\n<p>\nThis class is designed to eliminate those states by providing an interface to run tasks only when an entity\nis contained in a world, on the owning thread for the region, and by providing the current Entity object.\nThe scheduler also allows a task to provide a callback, the \"retired\" callback, that will be invoked\nif the entity is removed before a task that was scheduled could be executed. The scheduler is also\ncompletely thread-safe, allowing tasks to be scheduled from any thread context. The scheduler also indicates\nproperly whether a task was scheduled successfully (i.e scheduler not retired), thus the code scheduling any task\nknows whether the given callbacks will be invoked eventually or not - which may be critical for off-thread\ncontexts.\n</p>"},{"FQCN":"io.papermc.paper.threadedregions.scheduler.ScheduledTask","methods":[{"name":"getOwningPlugin","params":[],"desc":"Returns the plugin that scheduled this task.","ret":"the plugin that scheduled this task."},{"name":"isRepeatingTask","params":[],"desc":"Returns whether this task executes on a fixed period, as opposed to executing only once.","ret":"whether this task executes on a fixed period, as opposed to executing only once."},{"name":"cancel","params":[],"desc":"Attempts to cancel this task, returning the result of the attempt. In all cases, if the task is currently\nbeing executed no attempt is made to halt the task, however any executions in the future are halted.","ret":"the result of the cancellation attempt."},{"name":"getExecutionState","params":[],"desc":"Returns the current execution state of this task.","ret":"the current execution state of this task."},{"name":"isCancelled","params":[],"desc":"Returns whether the current execution state is {@link ExecutionState#CANCELLED} or {@link ExecutionState#CANCELLED_RUNNING}.","ret":"whether the current execution state is {@link ExecutionState#CANCELLED} or {@link ExecutionState#CANCELLED_RUNNING}."}],"desc":"Represents a task scheduled to a scheduler."},{"FQCN":"io.papermc.paper.threadedregions.scheduler.RegionScheduler","methods":[{"name":"execute","params":[{"name":"plugin","type":"Plugin","desc":"The plugin that owns the task"},{"name":"world","type":"World","desc":"The world of the region that owns the task"},{"name":"chunkX","type":"int","desc":"The chunk X coordinate of the region that owns the task"},{"name":"chunkZ","type":"int","desc":"The chunk Z coordinate of the region that owns the task"},{"name":"run","type":"Runnable","desc":"The task to execute"}],"desc":"Schedules a task to be executed on the region which owns the location.","ret":""},{"name":"execute","params":[{"name":"plugin","type":"Plugin","desc":"The plugin that owns the task"},{"name":"location","type":"Location","desc":"The location at which the region executing should own"},{"name":"run","type":"Runnable","desc":"The task to execute"}],"desc":"Schedules a task to be executed on the region which owns the location.","ret":""},{"name":"run","params":[{"name":"plugin","type":"Plugin","desc":"The plugin that owns the task"},{"name":"world","type":"World","desc":"The world of the region that owns the task"},{"name":"chunkX","type":"int","desc":"The chunk X coordinate of the region that owns the task"},{"name":"chunkZ","type":"int","desc":"The chunk Z coordinate of the region that owns the task"},{"name":"task","type":"Consumer<ScheduledTask>","desc":"The task to execute"}],"desc":"Schedules a task to be executed on the region which owns the location on the next tick.","ret":"The {@link ScheduledTask} that represents the scheduled task."},{"name":"run","params":[{"name":"plugin","type":"Plugin","desc":"The plugin that owns the task"},{"name":"location","type":"Location","desc":"The location at which the region executing should own"},{"name":"task","type":"Consumer<ScheduledTask>","desc":"The task to execute"}],"desc":"Schedules a task to be executed on the region which owns the location on the next tick.","ret":"The {@link ScheduledTask} that represents the scheduled task."},{"name":"runDelayed","params":[{"name":"plugin","type":"Plugin","desc":"The plugin that owns the task"},{"name":"world","type":"World","desc":"The world of the region that owns the task"},{"name":"chunkX","type":"int","desc":"The chunk X coordinate of the region that owns the task"},{"name":"chunkZ","type":"int","desc":"The chunk Z coordinate of the region that owns the task"},{"name":"task","type":"Consumer<ScheduledTask>","desc":"The task to execute"},{"name":"delayTicks","type":"long","desc":"The delay, in ticks."}],"desc":"Schedules a task to be executed on the region which owns the location after the specified delay in ticks.","ret":"The {@link ScheduledTask} that represents the scheduled task."},{"name":"runDelayed","params":[{"name":"plugin","type":"Plugin","desc":"The plugin that owns the task"},{"name":"location","type":"Location","desc":"The location at which the region executing should own"},{"name":"task","type":"Consumer<ScheduledTask>","desc":"The task to execute"},{"name":"delayTicks","type":"long","desc":"The delay, in ticks."}],"desc":"Schedules a task to be executed on the region which owns the location after the specified delay in ticks.","ret":"The {@link ScheduledTask} that represents the scheduled task."},{"name":"runAtFixedRate","params":[{"name":"plugin","type":"Plugin","desc":"The plugin that owns the task"},{"name":"world","type":"World","desc":"The world of the region that owns the task"},{"name":"chunkX","type":"int","desc":"The chunk X coordinate of the region that owns the task"},{"name":"chunkZ","type":"int","desc":"The chunk Z coordinate of the region that owns the task"},{"name":"task","type":"Consumer<ScheduledTask>","desc":"The task to execute"},{"name":"initialDelayTicks","type":"long","desc":"The initial delay, in ticks."},{"name":"periodTicks","type":"long","desc":"The period, in ticks."}],"desc":"Schedules a repeating task to be executed on the region which owns the location after the initial delay with the\nspecified period.","ret":"The {@link ScheduledTask} that represents the scheduled task."},{"name":"runAtFixedRate","params":[{"name":"plugin","type":"Plugin","desc":"The plugin that owns the task"},{"name":"location","type":"Location","desc":"The location at which the region executing should own"},{"name":"task","type":"Consumer<ScheduledTask>","desc":"The task to execute"},{"name":"initialDelayTicks","type":"long","desc":"The initial delay, in ticks."},{"name":"periodTicks","type":"long","desc":"The period, in ticks."}],"desc":"Schedules a repeating task to be executed on the region which owns the location after the initial delay with the\nspecified period.","ret":"The {@link ScheduledTask} that represents the scheduled task."}],"desc":"The region task scheduler can be used to schedule tasks by location to be executed on the region which owns the location.\n<p>\n<b>Note</b>: It is entirely inappropriate to use the region scheduler to schedule tasks for entities.\nIf you wish to schedule tasks to perform actions on entities, you should be using {@link Entity#getScheduler()}\nas the entity scheduler will \"follow\" an entity if it is teleported, whereas the region task scheduler\nwill not.\n</p>"},{"FQCN":"io.papermc.paper.enchantments.EnchantmentRarity","methods":[{"name":"getWeight","params":[],"desc":"Gets the weight for the rarity.","ret":"the weight"}],"desc":""},{"FQCN":"io.papermc.paper.chat.ChatRenderer","methods":[{"name":"render","params":[{"name":"source","type":"Player","desc":"the message source"},{"name":"sourceDisplayName","type":"Component","desc":"the display name of the source player"},{"name":"message","type":"Component","desc":"the chat message"},{"name":"viewer","type":"Audience","desc":"the receiving {@link Audience}"}],"desc":"Renders a chat message. This will be called once for each receiving {@link Audience}.","ret":"a rendered chat message"},{"name":"defaultRenderer","params":[],"desc":"Create a new instance of the default {@link ChatRenderer}.","ret":"a new {@link ChatRenderer}"},{"name":"viewerUnaware","params":[{"name":"renderer","type":"ViewerUnaware","desc":"the viewer unaware renderer"}],"desc":"Creates a new viewer-unaware {@link ChatRenderer}, which will render the chat message a single time,\ndisplaying the same rendered message to every viewing {@link Audience}.","ret":"a new {@link ChatRenderer}"}],"desc":"A chat renderer is responsible for rendering chat messages sent by {@link Player}s to the server."},{"FQCN":"io.papermc.paper.chat.ViewerUnawareImpl","methods":[],"desc":""},{"FQCN":"io.papermc.paper.util.JarManifests","methods":[],"desc":""},{"FQCN":"io.papermc.paper.util.TransformingRandomAccessList","methods":[],"desc":"Modified version of the Guava class with the same name to support add operations."},{"FQCN":"io.papermc.paper.util.Tick","methods":[{"name":"tick","params":[],"desc":"Gets the instance of the tick temporal unit.","ret":"the tick instance"},{"name":"of","params":[{"name":"ticks","type":"long","desc":"the amount of ticks"}],"desc":"Creates a duration from an amount of ticks. This is shorthand for\n{@link Duration#of(long, TemporalUnit)} called with the amount of ticks and\n{@link #tick()}.","ret":"the duration"},{"name":"fromDuration","params":[{"name":"duration","type":"Duration","desc":"the duration"}],"desc":"Gets the number of whole ticks that occur in the provided duration. Note that this\nmethod returns an {@code int} as this is the unit that Minecraft stores ticks in.","ret":"the number of whole ticks in this duration"}],"desc":"A TemporalUnit that represents the target length of one server tick. This is defined\nas 50 milliseconds. Note that this class is not for measuring the length that a tick\ntook, rather it is used for simple conversion between times and ticks."},{"FQCN":"io.papermc.paper.entity.CollarColorable","methods":[{"name":"getCollarColor","params":[],"desc":"Get the collar color of this entity","ret":"the color of the collar"},{"name":"setCollarColor","params":[{"name":"color","type":"DyeColor","desc":"the color to apply"}],"desc":"Set the collar color of this entity","ret":""}],"desc":"Entities that can have their collars colored."},{"FQCN":"io.papermc.paper.entity.LookAnchor","methods":[],"desc":"Represents what part of the entity should be used when determining where to face a position/entity."},{"FQCN":"io.papermc.paper.entity.TeleportFlag","methods":[],"desc":"Represents a flag that can be set on teleportation that may\nslightly modify the behavior."},{"FQCN":"io.papermc.paper.entity.SchoolableFish","methods":[{"name":"startFollowing","params":[{"name":"leader","type":"SchoolableFish","desc":"fish to follow"}],"desc":"Forces this fish to follow the given fish.","ret":""},{"name":"stopFollowing","params":[],"desc":"Causes the fish to stop following their current\nleader.","ret":""},{"name":"getSchoolSize","params":[],"desc":"Gets the amount of fish currently following this fish.","ret":"school size"},{"name":"getMaxSchoolSize","params":[],"desc":"Gets the maximum number of fish that will naturally follow this fish.","ret":"max school size"},{"name":"getSchoolLeader","params":[],"desc":"Gets the fish that this entity is currently following.","ret":"following fish"}],"desc":"Represents a fish that can school with other fish."},{"FQCN":"io.papermc.paper.entity.Bucketable","methods":[{"name":"isFromBucket","params":[],"desc":"Gets if this entity originated from a bucket.","ret":"originated from bucket"},{"name":"setFromBucket","params":[{"name":"fromBucket","type":"boolean","desc":"is from a bucket"}],"desc":"Sets if this entity originated from a bucket.","ret":""},{"name":"getBaseBucketItem","params":[],"desc":"Gets the base itemstack of this entity in a bucket form.","ret":"bucket form"},{"name":"getPickupSound","params":[],"desc":"Gets the sound that is played when this entity\nis picked up in a bucket.","ret":"bucket pickup sound"}],"desc":"Represents an entity that can be bucketed."},{"FQCN":"io.papermc.paper.entity.Frictional","methods":[{"name":"getFrictionState","params":[],"desc":"Gets the friction state of this entity.\nWhen set to {@link TriState#TRUE}, the entity will always experience friction.\nWhen set to {@link TriState#FALSE}, the entity will never experience friction.\nWhen set to {@link TriState#NOT_SET}, the entity will fall back to Minecraft's default behaviour.","ret":"the entity's friction state"},{"name":"setFrictionState","params":[{"name":"state","type":"TriState","desc":"the new friction state to set for the entity"}],"desc":"Sets the friction state of this entity.\nWhen set to {@link TriState#TRUE}, the entity will always experience friction.\nWhen set to {@link TriState#FALSE}, the entity will never experience friction.\nWhen set to {@link TriState#NOT_SET}, the entity will fall back to Minecraft's default behaviour.\n<p>\nPlease note that changing this value will do nothing for a player.","ret":""}],"desc":"Represents an {@link Entity} that can experience friction with the air and ground."},{"FQCN":"io.papermc.paper.entity.Shearable","methods":[{"name":"shear","params":[],"desc":"Forces the entity to be sheared and then play the effect as if it were sheared by a player.\nThis will cause the entity to be sheared, even if {@link Shearable#readyToBeSheared()} is false.\n<p>\nSome shearing behavior may cause the entity to no longer be valid\ndue to it being replaced by a different entity.","ret":""},{"name":"shear","params":[{"name":"source","type":"Sound.Source","desc":"Sound source to play any sound effects on"}],"desc":"Forces the entity to be sheared and then play the effect as if it were sheared by the provided source.\nThis will cause the entity to be sheared, even if {@link Shearable#readyToBeSheared()} is false.\n<p>\nSome shearing behavior may cause the entity to no longer be valid\ndue to it being replaced by a different entity.\n<p>\nThis simulates the behavior of an actual shearing, which may cause events like EntityTransformEvent to be called\nfor mooshrooms, and EntityDropItemEvent to be called for sheep.","ret":""},{"name":"readyToBeSheared","params":[],"desc":"Gets if the entity would be able to be sheared or not naturally using shears.","ret":"if the entity can be sheared"}],"desc":"Represents an entity that can be sheared."},{"FQCN":"io.papermc.paper.plugin.configuration.PluginMeta","methods":[{"name":"getName","params":[],"desc":"Provides the name of the plugin. This name uniquely identifies the plugin amongst all loaded plugins on the\nserver.\n<ul>\n<li>Will only contain alphanumeric characters, underscores, hyphens,\n    and periods: [a-zA-Z0-9_\\-\\.].\n<li>Typically used for identifying the plugin data folder.\n<li>The name also acts as the token referenced in {@link #getPluginDependencies()},\n{@link #getPluginSoftDependencies()}, and {@link #getLoadBeforePlugins()}.\n</ul>\n<p>\nIn the plugin.yml, this entry is named <code>name</code>.\n<p>\nExample:<blockquote><pre>name: MyPlugin</pre></blockquote>","ret":"the name of the plugin"},{"name":"getDisplayName","params":[],"desc":"Returns the display name of the plugin, including the version.","ret":"a descriptive name of the plugin and respective version"},{"name":"getMainClass","params":[],"desc":"Provides the fully qualified class name of the main class for the plugin.\nA subtype of {@link JavaPlugin} is expected at this location.","ret":"the fully qualified class name of the plugin's main class."},{"name":"getLoadOrder","params":[],"desc":"Returns the phase of the server startup logic that the plugin should be loaded.","ret":"the plugin load order"},{"name":"getVersion","params":[],"desc":"Provides the version of this plugin as defined by the plugin.\nThere is no inherit format defined/enforced for the version of a plugin, however a common approach\nmight be semantic versioning.","ret":"the string representation of the plugin's version"},{"name":"getLoggerPrefix","params":[],"desc":"Provides the prefix that should be used for the plugin logger.\nThe logger prefix allows plugins to overwrite the usual default of the logger prefix, which is the name of the\nplugin.","ret":"the specific overwrite of the logger prefix as defined by the plugin. If the plugin did not define a\n    custom logger prefix, this method will return null"},{"name":"getPluginDependencies","params":[],"desc":"Provides a list of dependencies that are required for this plugin to load.\nThe list holds the unique identifiers, following the constraints laid out in {@link #getName()}, of the\ndependencies.\n<p>\nIf any of the dependencies defined by this list are not installed on the server, this plugin will fail to load.","ret":"an immutable list of required dependency names"},{"name":"getPluginSoftDependencies","params":[],"desc":"Provides a list of dependencies that are used but not required by this plugin.\nThe list holds the unique identifiers, following the constraints laid out in {@link #getName()}, of the soft\ndependencies.\n<p>\nIf these dependencies are installed on the server, they will be loaded first and supplied as dependencies to this\nplugin, however the plugin will load even if these dependencies are not installed.","ret":"immutable list of soft dependencies"},{"name":"getLoadBeforePlugins","params":[],"desc":"Provides a list of plugins that should be loaded before this plugin is loaded.\nThe list holds the unique identifiers, following the constraints laid out in {@link #getName()}, of the\nplugins that should be loaded before the plugin described by this plugin meta.\n<p>\nThe plugins referenced in the list provided by this method are not considered dependencies of this plugin and\nare hence not available to the plugin at runtime. They merely load before this plugin.","ret":"immutable list of plugins to load before this plugin"},{"name":"getProvidedPlugins","params":[],"desc":"Returns the list of plugins/dependencies that this plugin provides.\nThe list holds the unique identifiers, following the constraints laid out in {@link #getName()}, for each plugin\nit provides the expected classes for.","ret":"immutable list of provided plugins/dependencies"},{"name":"getAuthors","params":[],"desc":"Provides the list of authors that are credited with creating this plugin.\nThe author names are in no particular format.","ret":"an immutable list of the plugin's authors"},{"name":"getContributors","params":[],"desc":"Provides a list of contributors that contributed to the plugin but are not considered authors.\nThe names of the contributors are in no particular format.","ret":"an immutable list of the plugin's contributors"},{"name":"getDescription","params":[],"desc":"Gives a human-friendly description of the functionality the plugin\nprovides.","ret":"description or null if the plugin did not define a human readable description."},{"name":"getWebsite","params":[],"desc":"Provides the website for the plugin or the plugin's author.\nThe defined string value is <b>not guaranteed</b> to be in the form of a url.","ret":"a string representation of the website that serves as the main hub for this plugin/its author."},{"name":"getAPIVersion","params":[],"desc":"Gets the api version that this plugin supports.\nNullable if this version is not specified, and should be\nconsidered legacy (spigot plugins only)","ret":"the version string made up of the major and minor version (e.g. 1.18 or 1.19). Minor versions like 1.18.2\nare unified to their major release version (in this example 1.18)"}],"desc":"This class acts as an abstraction for a plugin configuration."},{"FQCN":"io.papermc.paper.plugin.bootstrap.BootstrapContext","methods":[{"name":"getLifecycleManager","params":[],"desc":"Get the lifecycle event manager for registering handlers\nfor lifecycle events allowed on the {@link BootstrapContext}.","ret":"the lifecycle event manager"}],"desc":"Represents the context provided to a {@link PluginBootstrap} during both the bootstrapping and plugin\ninstantiation logic.\nA boostrap context may be used to access data or logic usually provided to {@link org.bukkit.plugin.Plugin} instances\nlike the plugin's configuration or logger during the plugins bootstrap."},{"FQCN":"io.papermc.paper.plugin.bootstrap.PluginProviderContext","methods":[{"name":"getConfiguration","params":[],"desc":"Provides the plugin's configuration.","ret":"the plugin's configuration"},{"name":"getDataDirectory","params":[],"desc":"Provides the path to the data directory of the plugin.","ret":"the previously described path"},{"name":"getLogger","params":[],"desc":"Provides the logger used for this plugin.","ret":"the logger instance"},{"name":"getPluginSource","params":[],"desc":"Provides the path to the originating source of the plugin, such as the plugin's JAR file.","ret":"the previously described path"}],"desc":"Represents the context provided to a {@link PluginBootstrap} during both the bootstrapping and plugin\ninstantiation logic.\nA boostrap context may be used to access data or logic usually provided to {@link org.bukkit.plugin.Plugin} instances\nlike the plugin's configuration or logger during the plugins bootstrap."},{"FQCN":"io.papermc.paper.plugin.bootstrap.PluginBootstrap","methods":[{"name":"bootstrap","params":[{"name":"context","type":"BootstrapContext","desc":"the server provided context"}],"desc":"Called by the server, allowing you to bootstrap the plugin with a context that provides things like a logger and your shared plugin configuration file.","ret":""},{"name":"createPlugin","params":[{"name":"context","type":"PluginProviderContext","desc":"the server created bootstrap object"}],"desc":"Called by the server to instantiate your main class.\nPlugins may override this logic to define custom creation logic for said instance, like passing addition\nconstructor arguments.","ret":"the server requested instance of the plugins main class."}],"desc":"A plugin boostrap is meant for loading certain parts of the plugin before the server is loaded.\n<p>\nPlugin bootstrapping allows values to be initialized in certain parts of the server that might not be allowed\nwhen the server is running.\n<p>\nYour bootstrap class will be on the same classloader as your JavaPlugin.\n<p>\n<b>All calls to Bukkit may throw a NullPointerExceptions or return null unexpectedly. You should only call api methods that are explicitly documented to work in the bootstrapper</b>"},{"FQCN":"io.papermc.paper.plugin.PermissionManager","methods":[{"name":"getPermission","params":[{"name":"name","type":"String","desc":"Name of the permission"}],"desc":"Gets a {@link Permission} from its fully qualified name","ret":"Permission, or null if none"},{"name":"addPermission","params":[{"name":"perm","type":"Permission","desc":"Permission to add"}],"desc":"Adds a {@link Permission} to this plugin manager.\n<p>\nIf a permission is already defined with the given name of the new\npermission, an exception will be thrown.","ret":""},{"name":"removePermission","params":[{"name":"perm","type":"Permission","desc":"Permission to remove"}],"desc":"Removes a {@link Permission} registration from this plugin manager.\n<p>\nIf the specified permission does not exist in this plugin manager,\nnothing will happen.\n<p>\nRemoving a permission registration will <b>not</b> remove the\npermission from any {@link Permissible}s that have it.","ret":""},{"name":"removePermission","params":[{"name":"name","type":"String","desc":"Permission to remove"}],"desc":"Removes a {@link Permission} registration from this plugin manager.\n<p>\nIf the specified permission does not exist in this plugin manager,\nnothing will happen.\n<p>\nRemoving a permission registration will <b>not</b> remove the\npermission from any {@link Permissible}s that have it.","ret":""},{"name":"getDefaultPermissions","params":[{"name":"op","type":"boolean","desc":"Which set of default permissions to get"}],"desc":"Gets the default permissions for the given op status","ret":"The default permissions"},{"name":"recalculatePermissionDefaults","params":[{"name":"perm","type":"Permission","desc":"Permission to recalculate"}],"desc":"Recalculates the defaults for the given {@link Permission}.\n<p>\nThis will have no effect if the specified permission is not registered\nhere.","ret":""},{"name":"subscribeToPermission","params":[{"name":"permission","type":"String","desc":"Permission to subscribe to"},{"name":"permissible","type":"Permissible","desc":"Permissible subscribing"}],"desc":"Subscribes the given Permissible for information about the requested\nPermission, by name.\n<p>\nIf the specified Permission changes in any form, the Permissible will\nbe asked to recalculate.","ret":""},{"name":"unsubscribeFromPermission","params":[{"name":"permission","type":"String","desc":"Permission to unsubscribe from"},{"name":"permissible","type":"Permissible","desc":"Permissible subscribing"}],"desc":"Unsubscribes the given Permissible for information about the requested\nPermission, by name.","ret":""},{"name":"getPermissionSubscriptions","params":[{"name":"permission","type":"String","desc":"Permission to query for"}],"desc":"Gets a set containing all subscribed {@link Permissible}s to the given\npermission, by name","ret":"Set containing all subscribed permissions"},{"name":"subscribeToDefaultPerms","params":[{"name":"op","type":"boolean","desc":"Default list to subscribe to"},{"name":"permissible","type":"Permissible","desc":"Permissible subscribing"}],"desc":"Subscribes to the given Default permissions by operator status\n<p>\nIf the specified defaults change in any form, the Permissible will be\nasked to recalculate.","ret":""},{"name":"unsubscribeFromDefaultPerms","params":[{"name":"op","type":"boolean","desc":"Default list to unsubscribe from"},{"name":"permissible","type":"Permissible","desc":"Permissible subscribing"}],"desc":"Unsubscribes from the given Default permissions by operator status","ret":""},{"name":"getDefaultPermSubscriptions","params":[{"name":"op","type":"boolean","desc":"Default list to query for"}],"desc":"Gets a set containing all subscribed {@link Permissible}s to the given\ndefault list, by op status","ret":"Set containing all subscribed permissions"},{"name":"getPermissions","params":[],"desc":"Gets a set of all registered permissions.\n<p>\nThis set is a copy and will not be modified live.","ret":"Set containing all current registered permissions"},{"name":"addPermissions","params":[{"name":"perm","type":"List<Permission>","desc":"permission"}],"desc":"Adds a list of permissions.\n<p>\nThis is meant as an optimization for adding multiple permissions without recalculating each permission.","ret":""},{"name":"clearPermissions","params":[],"desc":"Clears the current registered permissinos.\n<p>\nThis is used for reloading.","ret":""}],"desc":"A permission manager implementation to keep backwards compatibility partially alive with existing plugins that used\nthe bukkit one before."},{"FQCN":"io.papermc.paper.plugin.provider.util.ProviderUtil","methods":[{"name":"loadClass","params":[{"name":"clazz","type":"String","desc":"the fully qualified name of the class to load"},{"name":"classType","type":"Class<T>","desc":"the parent type that the created object found at the {@code clazz} name should be cast to"},{"name":"loader","type":"ClassLoader","desc":"the loader from which the class should be loaded"}],"desc":"Loads the class found at the provided fully qualified class name from the passed classloader, creates a new\ninstance of it using the no-args constructor, that should exist as per this method contract, and casts it to the\nprovided parent type.","ret":"the object instantiated from the class found at the provided FQN, cast to the parent type"},{"name":"loadClass","params":[{"name":"clazz","type":"String","desc":"the fully qualified name of the class to load"},{"name":"classType","type":"Class<T>","desc":"the parent type that the created object found at the {@code clazz} name should be cast to"},{"name":"loader","type":"ClassLoader","desc":"the loader from which the class should be loaded"},{"name":"onError","type":"Runnable","desc":"a runnable that is executed before any unknown exception is raised through a sneaky throw."}],"desc":"Loads the class found at the provided fully qualified class name from the passed classloader, creates a new\ninstance of it using the no-args constructor, that should exist as per this method contract, and casts it to the\nprovided parent type.","ret":"the object instantiated from the class found at the provided fully qualified class name, cast to the\nparent type"}],"desc":"An <b>internal</b> utility type that holds logic for loading a provider-like type from a classloaders.\nProvides, at least in the context of this utility, define themselves as implementations of a specific parent\ninterface/type, e.g. {@link org.bukkit.plugin.java.JavaPlugin} and implement a no-args constructor."},{"FQCN":"io.papermc.paper.plugin.provider.classloader.PaperClassLoaderStorage","methods":[{"name":"instance","params":[],"desc":"Access to the shared instance of the {@link PaperClassLoaderStorageAccess}.","ret":"the singleton instance of the {@link PaperClassLoaderStorage} used throughout the server"},{"name":"registerSpigotGroup","params":[{"name":"pluginClassLoader","type":"PluginClassLoader","desc":"the legacy spigot plugin class loader to register"}],"desc":"Registers a legacy spigot {@link PluginClassLoader} into the loader storage, creating a group wrapping\nthe single plugin class loader with transitive access to the global group.","ret":"the group the plugin class loader was placed into"},{"name":"registerOpenGroup","params":[{"name":"classLoader","type":"ConfiguredPluginClassLoader","desc":"the configured plugin class loader to register"}],"desc":"Registers a paper configured plugin classloader into a new open group, with full access to the global\nplugin class loader group.\n<p>\nThis method hence allows the configured plugin class loader to access all other class loaders registered in this\nstorage.","ret":"the group the plugin class loader was placed into"},{"name":"registerAccessBackedGroup","params":[{"name":"classLoader","type":"ConfiguredPluginClassLoader","desc":"the configured plugin class loader to register"},{"name":"access","type":"ClassLoaderAccess","desc":"the class loader access that defines what other classloaders the passed plugin class loader\n                   should be granted access to."}],"desc":"Registers a paper configured classloader into a new, access backed group.\nThe access backed classloader group, different from an open group, only has access to the classloaders\nthe passed {@link ClassLoaderAccess} grants access to.","ret":"the group the plugin class loader was placed into."},{"name":"unregisterClassloader","params":[{"name":"configuredPluginClassLoader","type":"ConfiguredPluginClassLoader","desc":"the class loader to remove from this storage."}],"desc":"Unregisters a configured class loader from this storage.\nThis removes the passed class loaders from any group it may have been a part of, including the global group.\n<p>\nNote: this method is <b>highly</b> discouraged from being used, as mutation of the classloaders at runtime\nis not encouraged","ret":""},{"name":"registerUnsafePlugin","params":[{"name":"pluginLoader","type":"ConfiguredPluginClassLoader","desc":"the configured plugin classloader instance that should be registered directly into the global\n                    group."}],"desc":"Registers a configured plugin class loader directly into the global group without adding it to\nany existing groups.\n<p>\nNote: this method unsafely injects the plugin classloader directly into the global group, which bypasses the\ngroup structure paper's plugin API introduced. This method should hence be used with caution.","ret":"a simple boolean flag, {@code true} if the classloader was registered or {@code false} if the classloader\nwas already part of the global group."}],"desc":"The plugin classloader storage is an <b>internal</b> type that is used to manage existing classloaders on the server.\n<p>\nThe paper classloader storage is also responsible for storing added {@link ConfiguredPluginClassLoader}s into\n{@link PluginClassLoaderGroup}s, via {@link #registerOpenGroup(ConfiguredPluginClassLoader)},\n{@link #registerSpigotGroup(PluginClassLoader)} and {@link\n#registerAccessBackedGroup(ConfiguredPluginClassLoader, ClassLoaderAccess)}.\n<p>\nGroups are differentiated into the global group or plugin owned groups.\n<ul>\n<li>The global group holds all registered class loaders and merely exists to maintain backwards compatibility with\nspigots legacy classloader handling.</li>\n<li>The plugin groups only contains the classloaders that each plugin has access to and hence serves to properly\nseparates unrelated classloaders.</li>\n</ul>"},{"FQCN":"io.papermc.paper.plugin.provider.classloader.PaperClassLoaderStorageAccess","methods":[],"desc":"The paper classloader storage access acts as the holder for the server provided implementation of the\n{@link PaperClassLoaderStorage} interface."},{"FQCN":"io.papermc.paper.plugin.provider.classloader.ClassLoaderAccess","methods":[{"name":"canAccess","params":[{"name":"classLoader","type":"ConfiguredPluginClassLoader","desc":"the class loader for which access should be evaluated"}],"desc":"Evaluates if this class loader access is allowed to access types provided by the passed {@link\nConfiguredPluginClassLoader}.\n<p>\nThis interface method does not offer any further contracts on the interface level, as the logic to determine\nwhat class loaders this class loader access is allowed to retrieve types from depends heavily on the type of\naccess.\nLegacy spigot types for example may access any class loader available on the server, while modern paper plugins\nare properly limited to their dependency tree.","ret":"a plain boolean flag, {@code true} indicating that this class loader access is allowed to access types\nfrom the passed configured plugin class loader, {@code false} indicating otherwise."}],"desc":"The class loader access interface is an <b>internal</b> representation of a class accesses' ability to see types\nfrom other {@link ConfiguredPluginClassLoader}.\n<p>\nAn example of this would be a class loader access representing a plugin. The class loader access in that case would\nonly return {@code true} on calls for {@link #canAccess(ConfiguredPluginClassLoader)} if the passed class loader\nis owned by a direct or transitive dependency of the plugin, preventing the plugin for accidentally discovering and\nusing class types that are supplied by plugins/libraries the plugin did not actively define as a dependency."},{"FQCN":"io.papermc.paper.plugin.provider.classloader.ConfiguredPluginClassLoader","methods":[{"name":"getConfiguration","params":[],"desc":"Provides the configuration of the plugin that this plugin classloader provides type access to.","ret":"the plugin meta instance, holding all meta information about the plugin instance."},{"name":"loadClass","params":[{"name":"name","type":"String","desc":"the fully qualified name of the class to load"},{"name":"resolve","type":"boolean","desc":"whether the class should be resolved if needed or not"},{"name":"checkGlobal","type":"boolean","desc":"whether this lookup should check transitive dependencies, including either the legacy spigot\n                      global class loader or the paper {@link PluginClassLoaderGroup}"},{"name":"checkLibraries","type":"boolean","desc":"whether the defined libraries should be checked for the class or not"}],"desc":"Attempts to load a class from this plugin class loader using the passed fully qualified name.\nThis lookup logic can be configured through the following parameters to define how wide or how narrow the\nclass lookup should be.","ret":"the class found at the fully qualified class name passed under the passed restrictions"},{"name":"init","params":[{"name":"plugin","type":"JavaPlugin","desc":"the {@link JavaPlugin} that should be interlinked with this class loader."}],"desc":"Initializes both this configured plugin class loader and the java plugin passed to link to each other.\nThis logic is to be called exactly once when the initial setup between the class loader and the instantiated\n{@link JavaPlugin} is loaded.","ret":""},{"name":"getPlugin","params":[],"desc":"Gets the plugin held by this class loader.","ret":"the plugin or null if it doesn't exist yet"},{"name":"getGroup","params":[],"desc":"Get the plugin classloader group\nthat is used by the underlying classloader","ret":"classloader"}],"desc":"The configured plugin class loader represents an <b>internal</b> abstraction over the classloaders used by the server\nto load and access a plugins classes during runtime.\n<p>\nIt implements {@link Closeable} to define the ability to shutdown and close the classloader that implements this\ninterface."},{"FQCN":"io.papermc.paper.plugin.provider.classloader.PluginClassLoaderGroup","methods":[{"name":"getClassByName","params":[{"name":"name","type":"String","desc":"the fully qualified name of the class to load"},{"name":"resolve","type":"boolean","desc":"whether the class should be resolved if needed or not"},{"name":"requester","type":"ConfiguredPluginClassLoader","desc":"plugin classloader that is requesting the class from this loader group"}],"desc":"Attempts to find/load a class from this plugin class loader group using the passed fully qualified name\nin any of the classloaders that are part of this group.\n<p>\nThe lookup order across the contained loaders is not defined on the API level and depends purely on the\nimplementation.","ret":"the class found at the fully qualified class name passed. If the class could not be found, {@code null}\nwill be returned."},{"name":"remove","params":[{"name":"configuredPluginClassLoader","type":"ConfiguredPluginClassLoader","desc":"the plugin classloader to remove from the group"}],"desc":"Removes a configured plugin classloader from this class loader group.\nIf the classloader is not currently in the list, this method will simply do nothing.","ret":""},{"name":"add","params":[{"name":"configuredPluginClassLoader","type":"ConfiguredPluginClassLoader","desc":"the plugin classloader to add to this group."}],"desc":"Adds the passed plugin classloader to this group, allowing this group to use it during\n{@link #getClassByName(String, boolean, ConfiguredPluginClassLoader)} lookups.\n<p>\nThis method does <b>not</b> query the {@link ClassLoaderAccess} (exposed via {@link #getAccess()}) to ensure\nif this group has access to the class loader passed.","ret":""},{"name":"getAccess","params":[],"desc":"Provides the class loader access that guards and defines the content of this classloader group.\nWhile not guaranteed contractually (see {@link #add(ConfiguredPluginClassLoader)}), the access generally is\nresponsible for defining which {@link ConfiguredPluginClassLoader}s should be part of this group and which ones\nshould not.","ret":"the classloader access governing which classloaders should be part of this group and which ones should\nnot."}],"desc":"A plugin classloader group represents a group of classloaders that a plugins classloader may access.\n<p>\nAn example of this would be a classloader group that holds all direct and transitive dependencies a plugin declared,\nallowing a plugins classloader to access classes included in these dependencies via this group."},{"FQCN":"io.papermc.paper.plugin.provider.entrypoint.DependencyContext","methods":[{"name":"isTransitiveDependency","params":[{"name":"plugin","type":"PluginMeta","desc":"the plugin meta this computation should consider the requester of the dependency status for the\n              passed potential dependency."},{"name":"depend","type":"PluginMeta","desc":"the potential transitive dependency of the {@code plugin} parameter."}],"desc":"Computes if the passed {@link PluginMeta} defined the passed dependency as a transitive dependency.\nA transitive dependency, as implied by its name, may not have been configured directly by the passed plugin\nbut could also simply be a dependency of a dependency.\n<p>\nA simple example of this method would be\n<pre>{@code\ndependencyContext.isTransitiveDependency(pluginMetaA, pluginMetaC);\n}</pre>\nwhich would return {@code true} if {@code pluginMetaA} directly or indirectly depends on {@code pluginMetaC}.","ret":"a simple boolean flag indicating if {@code plugin} considers {@code depend} as a transitive dependency."},{"name":"hasDependency","params":[{"name":"pluginIdentifier","type":"String","desc":"the unique identifier of the dependency with which to probe this dependency context."}],"desc":"Computes if this dependency context is aware of a dependency that provides/matches the passed identifier.\n<p>\nA dependency in this methods context is any dependable artefact. It does not matter if anything actually depends\non said artefact, its mere existence as a potential dependency is enough for this method to consider it a\ndependency. If this dependency context is hence aware of an artefact with the matching identifier, this\nmethod returns {@code true}.","ret":"a plain boolean flag indicating if this dependency context is aware of a potential dependency with the\npassed identifier."}],"desc":"A dependency context is a read-only abstraction of a type/concept that can resolve dependencies between plugins.\n<p>\nThis may for example be the server wide plugin manager itself, capable of validating if a dependency exists between\ntwo {@link PluginMeta} instances, however the implementation is not limited to such a concrete use-case."},{"FQCN":"io.papermc.paper.plugin.lifecycle.event.handler.configuration.LifecycleEventHandlerConfiguration","methods":[],"desc":"Base type for constructing configured event handlers for\nlifecycle events. Usually created via {@link io.papermc.paper.plugin.lifecycle.event.types.LifecycleEventType#newHandler(LifecycleEventHandler)}\nfrom event types in {@link io.papermc.paper.plugin.lifecycle.event.types.LifecycleEvents}"},{"FQCN":"io.papermc.paper.plugin.lifecycle.event.handler.configuration.PrioritizedLifecycleEventHandlerConfiguration","methods":[{"name":"priority","params":[{"name":"priority","type":"int","desc":"the numerical priority"}],"desc":"Sets the priority for this handler. Resets\nall previous calls to {@link #monitor()}. A\nlower numeric value correlates to the handler\nbeing run earlier.","ret":"this configuration for chaining"},{"name":"monitor","params":[],"desc":"Sets this handler configuration to be considered a \"monitor\".\nThese handlers will run last and should only be used by plugins\nto observe any changes from previously ran handlers.","ret":"this configuration for chaining"}],"desc":"Handler configuration that allows both \"monitor\" and prioritized handlers.\nThe default priority is 0."},{"FQCN":"io.papermc.paper.plugin.lifecycle.event.handler.configuration.MonitorLifecycleEventHandlerConfiguration","methods":[{"name":"monitor","params":[],"desc":"Sets this handler configuration to be considered a \"monitor\".\nThese handlers will run last and should only be used by plugins\nto observe changes from previously run handlers.","ret":"this configuration for chaining"}],"desc":"Handler configuration for event types that allow \"monitor\" handlers."},{"FQCN":"io.papermc.paper.plugin.lifecycle.event.handler.LifecycleEventHandler","methods":[],"desc":"A handler for a specific event. Can be implemented\nin a concrete class or as a lambda."},{"FQCN":"io.papermc.paper.plugin.lifecycle.event.types.LifecycleEventType","methods":[{"name":"name","params":[],"desc":"Gets the name of the lifecycle event.","ret":"the name"},{"name":"newHandler","params":[{"name":"handler","type":"LifecycleEventHandler<? super E>","desc":"the event handler"}],"desc":"Create a configuration for this event with the specified\nhandler.","ret":"a new configuration"}],"desc":"Base type for all types of lifecycle events. Differs from\n{@link LifecycleEvent} which is the actual event object, whereas\nthis is an object representing the type of the event. Used\nto construct subtypes of {@link LifecycleEventHandlerConfiguration} for\nuse in {@link LifecycleEventManager}"},{"FQCN":"io.papermc.paper.plugin.lifecycle.event.types.LifecycleEvents","methods":[],"desc":"Holds various types of lifecycle events for\nuse when creating event handler configurations\nin {@link LifecycleEventManager}."},{"FQCN":"io.papermc.paper.plugin.lifecycle.event.types.LifecycleEventTypeProvider","methods":[],"desc":""},{"FQCN":"io.papermc.paper.plugin.lifecycle.event.LifecycleEvent","methods":[],"desc":"Base type for all Lifecycle Events.\n<p>\nLifecycle events are generally fired when the older\nevent system is not available, like during early\nserver initialization."},{"FQCN":"io.papermc.paper.plugin.lifecycle.event.LifecycleEventOwner","methods":[{"name":"getPluginMeta","params":[],"desc":"Get the plugin meta for this plugin.","ret":"the plugin meta"}],"desc":"Implemented by types that are considered owners\nof registered handlers for lifecycle events. Generally\nthe types that implement this interface also provide\na {@link LifecycleEventManager} where you can register\nevent handlers."},{"FQCN":"io.papermc.paper.plugin.lifecycle.event.registrar.RegistrarEvent","methods":[{"name":"registrar","params":[],"desc":"Get the registrar related to this event.","ret":"the registrar"}],"desc":"A lifecycle event that exposes a {@link Registrar} of some kind\nto allow management of various things. Look at implementations of\n{@link Registrar} for an idea of what uses this event."},{"FQCN":"io.papermc.paper.plugin.lifecycle.event.registrar.ReloadableRegistrarEvent","methods":[{"name":"cause","params":[],"desc":"Get the cause of this reload.","ret":"the cause"}],"desc":"A lifecycle event that exposes a {@link Registrar} that is\nreloadable."},{"FQCN":"io.papermc.paper.plugin.lifecycle.event.registrar.Registrar","methods":[],"desc":"To be implemented by types that provide ways to register types\neither on server start or during a reload"},{"FQCN":"io.papermc.paper.plugin.lifecycle.event.LifecycleEventManager","methods":[{"name":"registerEventHandler","params":[{"name":"eventType","type":"LifecycleEventType<? super O,? extends E,?>","desc":"the event type to listen to"},{"name":"eventHandler","type":"LifecycleEventHandler<? super E>","desc":"the handler for that event"}],"desc":"Registers an event handler for a specific event type.\n<p>\nThis is shorthand for creating a new {@link LifecycleEventHandlerConfiguration} and\njust passing in the {@link LifecycleEventHandler}.\n<pre>{@code\nLifecycleEventHandler<RegistrarEvent<Commands>> handler = new Handler();\nmanager.registerEventHandler(LifecycleEvents.COMMANDS, handler);\n}</pre>\nis equivalent to\n<pre>{@code\nLifecycleEventHandler<RegistrarEvent<Commands>> handler = new Handler();\nmanager.registerEventHandler(LifecycleEvents.COMMANDS.newHandler(handler));\n}</pre>","ret":""},{"name":"registerEventHandler","params":[{"name":"handlerConfiguration","type":"LifecycleEventHandlerConfiguration<? super O>","desc":"the handler configuration to register"}],"desc":"Registers an event handler configuration.\n<p>\nConfigurations are created via {@link LifecycleEventType#newHandler(LifecycleEventHandler)}.\nEvent types may have different configurations options available on the builder-like object\nreturned by {@link LifecycleEventType#newHandler(LifecycleEventHandler)}.","ret":""}],"desc":"Manages a plugin's lifecycle events. Can be obtained\nfrom {@link org.bukkit.plugin.Plugin} or {@link io.papermc.paper.plugin.bootstrap.BootstrapContext}."},{"FQCN":"io.papermc.paper.plugin.loader.PluginClasspathBuilder","methods":[{"name":"addLibrary","params":[{"name":"classPathLibrary","type":"ClassPathLibrary","desc":"the library instance to add to this builder"}],"desc":"Adds a new classpath library to this classpath builder.\n<p>\nAs a builder, this method does not invoke {@link ClassPathLibrary#register(LibraryStore)} and\nmay hence be run without invoking potential IO performed by a {@link ClassPathLibrary} during resolution.\n<p>\nThe paper api provides pre implemented {@link ClassPathLibrary} types that allow easy inclusion of existing\nlibraries on disk or on remote maven repositories.","ret":"self"}],"desc":"A mutable builder that may be used to collect and register all {@link ClassPathLibrary} instances a\n{@link PluginLoader} aims to provide to its plugin at runtime."},{"FQCN":"io.papermc.paper.plugin.loader.PluginLoader","methods":[{"name":"classloader","params":[{"name":"classpathBuilder","type":"PluginClasspathBuilder","desc":"a mutable classpath builder that may be used to register custom runtime dependencies\n                        for the plugin the loader was registered for."}],"desc":"Called by the server to allows plugins to configure the runtime classpath that the plugin is run on.\nThis allows plugin loaders to configure dependencies for the plugin where jars can be downloaded or\nprovided during runtime.","ret":""}],"desc":"A plugin loader is responsible for creating certain aspects of a plugin before it is created.\n<p>\nThe goal of the plugin loader is the creation of an expected/dynamic environment for the plugin to load into.\nThis, as of right now, only applies to creating the expected classpath for the plugin, e.g. supplying external\nlibraries to the plugin.\n<p>\nIt should be noted that this class will be called from a different classloader, this will cause any static values\nset in this class/any other classes loaded not to persist when the plugin loads."},{"FQCN":"io.papermc.paper.plugin.loader.library.impl.JarLibrary","methods":[],"desc":"A simple jar library implementation of the {@link ClassPathLibrary} that allows {@link io.papermc.paper.plugin.loader.PluginLoader}s to\nappend a jar stored on the local file system into their runtime classloader.\n<p>\nAn example creation of the jar library type may look like this:\n<pre>{@code\n  final JarLibrary customLibrary = new JarLibrary(Path.of(\"libs/custom-library-1.24.jar\"));\n}</pre>\nresulting in a jar library that provides the jar at {@code libs/custom-library-1.24.jar} to the plugins classloader\nat runtime.\n<p>\nThe jar library implementation will error if the file does not exist at the specified path."},{"FQCN":"io.papermc.paper.plugin.loader.library.impl.MavenLibraryResolver","methods":[{"name":"addDependency","params":[{"name":"dependency","type":"Dependency","desc":"the definition of the dependency the maven library resolver should resolve when running"}],"desc":"Adds the provided dependency to the library resolver.\nThe artifact from the first valid repository matching the passed dependency will be chosen.","ret":""},{"name":"addRepository","params":[{"name":"remoteRepository","type":"RemoteRepository","desc":"the configuration that defines the maven repository this library resolver should fetch\n                        dependencies from"}],"desc":"Adds the provided repository to the library resolver.\nThe order in which these are added does matter, as dependency resolving will start at the first added\nrepository.","ret":""},{"name":"register","params":[{"name":"store","type":"LibraryStore","desc":"the library store the then resolved and downloaded dependencies are registered into"}],"desc":"Resolves the provided dependencies and adds them to the library store.","ret":""}],"desc":"The maven library resolver acts as a resolver for yet to be resolved jar libraries that may be pulled from a\nremote maven repository.\n<p>\nPlugins may create and configure a {@link MavenLibraryResolver} by creating a new one and registering both\na dependency artifact that should be resolved to a library at runtime and the repository it is found in.\nAn example of this would be the inclusion of the jooq library for typesafe SQL queries:\n<pre>{@code\nMavenLibraryResolver resolver = new MavenLibraryResolver();\nresolver.addDependency(new Dependency(new DefaultArtifact(\"org.jooq:jooq:3.17.7\"), null));\nresolver.addRepository(new RemoteRepository.Builder(\n    \"central\", \"default\", \"https://repo1.maven.org/maven2/\"\n).build());\n}</pre>\n\nPlugins may create and register a {@link MavenLibraryResolver} after configuring it."},{"FQCN":"io.papermc.paper.plugin.loader.library.LibraryStore","methods":[{"name":"addLibrary","params":[{"name":"library","type":"Path","desc":"path to the libraries jar file on the disk"}],"desc":"Adds the provided library path to this library store.","ret":""}],"desc":"Represents a storage that stores library jars.\n<p>\nThe library store api allows plugins to register specific dependencies into their runtime classloader when their\n{@link io.papermc.paper.plugin.loader.PluginLoader} is processed."},{"FQCN":"io.papermc.paper.plugin.loader.library.ClassPathLibrary","methods":[{"name":"register","params":[{"name":"store","type":"LibraryStore","desc":"the library store instance to register this library into"}],"desc":"Called to register the library this class path library represents into the passed library store.\nThis method may either be implemented by the plugins themselves if they need complex logic, or existing\nAPI exposed implementations of this interface may be used.","ret":""}],"desc":"The classpath library interface represents libraries that are capable of registering themselves via\n{@link #register(LibraryStore)} on any given {@link LibraryStore}."},{"FQCN":"io.papermc.paper.plugin.loader.library.LibraryLoadingException","methods":[],"desc":"Indicates that an exception has occured while loading a library."},{"FQCN":"io.papermc.paper.world.structure.ConfiguredStructure","methods":[{"name":"getStructureType","params":[],"desc":"Gets the structure type for this configure structure.","ret":"the structure type"}],"desc":"Represents a configured structure each with a\n{@link StructureType}. Multiple ConfiguredStructures can have\nthe same {@link StructureType}."},{"FQCN":"io.papermc.paper.world.MoonPhase","methods":[],"desc":""},{"FQCN":"io.papermc.paper.annotation.DoNotUse","methods":[],"desc":"Annotation used to mark methods or constructors which should not be called.\n\n<p>Separate from {@link Deprecated} to differentiate from the large amount of deprecations.</p>"},{"FQCN":"io.papermc.paper.math.RotationsImpl","methods":[],"desc":""},{"FQCN":"io.papermc.paper.math.BlockPositionImpl","methods":[],"desc":""},{"FQCN":"io.papermc.paper.math.FinePosition","methods":[],"desc":"A position represented with doubles.\n<p>\n<b>May see breaking changes until Experimental annotation is removed.</b>"},{"FQCN":"io.papermc.paper.math.Rotations","methods":[{"name":"ofDegrees","params":[{"name":"x","type":"double","desc":"the angle for the X axis in degrees"},{"name":"y","type":"double","desc":"the angle for the Y axis in degrees"},{"name":"z","type":"double","desc":"the angle for the Z axis in degrees"}],"desc":"Creates a new Rotations instance holding the provided rotations","ret":"Rotations instance holding the provided rotations"},{"name":"x","params":[],"desc":"Returns the angle on the X axis in degrees","ret":"the angle in degrees"},{"name":"y","params":[],"desc":"Returns the angle on the Y axis in degrees","ret":"the angle in degrees"},{"name":"z","params":[],"desc":"Returns the angle on the Z axis in degrees","ret":"the angle in degrees"},{"name":"withX","params":[{"name":"x","type":"double","desc":"the angle in degrees"}],"desc":"Returns a new Rotations instance which is the result\nof changing the X axis to the passed angle","ret":"the resultant Rotations"},{"name":"withY","params":[{"name":"y","type":"double","desc":"the angle in degrees"}],"desc":"Returns a new Rotations instance which is the result\nof changing the Y axis to the passed angle","ret":"the resultant Rotations"},{"name":"withZ","params":[{"name":"z","type":"double","desc":"the angle in degrees"}],"desc":"Returns a new Rotations instance which is the result\nof changing the Z axis to the passed angle","ret":"the resultant Rotations"},{"name":"add","params":[{"name":"x","type":"double","desc":"the angle to add to the X axis in degrees"},{"name":"y","type":"double","desc":"the angle to add to the Y axis in degrees"},{"name":"z","type":"double","desc":"the angle to add to the Z axis in degrees"}],"desc":"Returns a new Rotations instance which is the result of adding\nthe x, y, z components to this Rotations","ret":"the resultant Rotations"},{"name":"subtract","params":[{"name":"x","type":"double","desc":"the angle to subtract from the X axis in degrees"},{"name":"y","type":"double","desc":"the angle to subtract from the Y axis in degrees"},{"name":"z","type":"double","desc":"the angle to subtract from the Z axis in degrees"}],"desc":"Returns a new Rotations instance which is the result of subtracting\nthe x, y, z components from this Rotations","ret":"the resultant Rotations"}],"desc":"Rotations is an immutable object that stores rotations\nin degrees on each axis (X, Y, Z)."},{"FQCN":"io.papermc.paper.math.BlockPosition","methods":[{"name":"offset","params":[{"name":"blockFace","type":"BlockFace","desc":"the block face to offset towards"}],"desc":"Returns a block position offset by 1 in the direction specified.","ret":"the offset block position"},{"name":"offset","params":[{"name":"blockFace","type":"BlockFace","desc":"the block face to offset towards"},{"name":"amount","type":"int","desc":"the number of times to move in that direction"}],"desc":"Returns a block position offset in the direction specified\nmultiplied by the amount.","ret":"the offset block position"},{"name":"offset","params":[{"name":"axis","type":"Axis","desc":"the axis to offset along"},{"name":"amount","type":"int","desc":"the amount to offset along that axis"}],"desc":"Returns a block position offset by the amount along\nthe specified axis.","ret":"the offset block position"}],"desc":"A position represented with integers.\n<p>\n<b>May see breaking changes until Experimental annotation is removed.</b>"},{"FQCN":"io.papermc.paper.math.FinePositionImpl","methods":[],"desc":""},{"FQCN":"io.papermc.paper.math.Position","methods":[{"name":"blockX","params":[],"desc":"Gets the block x value for this position","ret":"the block x value"},{"name":"blockY","params":[],"desc":"Gets the block x value for this position","ret":"the block x value"},{"name":"blockZ","params":[],"desc":"Gets the block x value for this position","ret":"the block x value"},{"name":"x","params":[],"desc":"Gets the x value for this position","ret":"the x value"},{"name":"y","params":[],"desc":"Gets the y value for this position","ret":"the y value"},{"name":"z","params":[],"desc":"Gets the z value for this position","ret":"the z value"},{"name":"isBlock","params":[],"desc":"Checks of this position represents a {@link BlockPosition}","ret":"true if block"},{"name":"isFine","params":[],"desc":"Checks if this position represents a {@link FinePosition}","ret":"true if fine"},{"name":"isFinite","params":[],"desc":"Checks if each component of this position is finite.","ret":""},{"name":"offset","params":[{"name":"x","type":"int","desc":"x value to offset"},{"name":"y","type":"int","desc":"y value to offset"},{"name":"z","type":"int","desc":"z value to offset"}],"desc":"Returns a position offset by the specified amounts.","ret":"the offset position"},{"name":"offset","params":[{"name":"x","type":"double","desc":"x value to offset"},{"name":"y","type":"double","desc":"y value to offset"},{"name":"z","type":"double","desc":"z value to offset"}],"desc":"Returns a position offset by the specified amounts.","ret":"the offset position"},{"name":"toCenter","params":[],"desc":"Returns a new position at the center of the block position this represents","ret":"a new center position"},{"name":"toBlock","params":[],"desc":"Returns the block position of this position\nor itself if it already is a block position","ret":"the block position"},{"name":"toVector","params":[],"desc":"Converts this position to a vector","ret":"a new vector"},{"name":"toLocation","params":[{"name":"world","type":"World","desc":"the world for the location object"}],"desc":"Creates a new location object at this position with the specified world","ret":"a new location"},{"name":"block","params":[{"name":"x","type":"int","desc":"x coord"},{"name":"y","type":"int","desc":"y coord"},{"name":"z","type":"int","desc":"z coord"}],"desc":"Creates a position at the coordinates","ret":"a position with those coords"},{"name":"block","params":[{"name":"location","type":"Location","desc":"the location to copy the position of"}],"desc":"Creates a position from the location.","ret":"a new position at that location"},{"name":"fine","params":[{"name":"x","type":"double","desc":"x coord"},{"name":"y","type":"double","desc":"y coord"},{"name":"z","type":"double","desc":"z coord"}],"desc":"Creates a position at the coordinates","ret":"a position with those coords"},{"name":"fine","params":[{"name":"location","type":"Location","desc":"the location to copy the position of"}],"desc":"Creates a position from the location.","ret":"a new position at that location"}],"desc":"Common interface for {@link FinePosition} and {@link BlockPosition}.\n<p>\n<b>May see breaking changes until Experimental annotation is removed.</b>"},{"FQCN":"io.papermc.paper.datapack.Datapack","methods":[{"name":"getName","params":[],"desc":"","ret":"the name of the pack"},{"name":"getCompatibility","params":[],"desc":"","ret":"the compatibility of the pack"},{"name":"isEnabled","params":[],"desc":"","ret":"whether or not the pack is currently enabled"}],"desc":""},{"FQCN":"io.papermc.paper.datapack.DatapackManager","methods":[{"name":"getPacks","params":[],"desc":"","ret":"all the packs known to the server"},{"name":"getEnabledPacks","params":[],"desc":"","ret":"all the packs which are currently enabled"}],"desc":""},{"FQCN":"io.papermc.paper.scoreboard.numbers.FixedFormatImpl","methods":[],"desc":""},{"FQCN":"io.papermc.paper.scoreboard.numbers.StyledFormatImpl","methods":[],"desc":""},{"FQCN":"io.papermc.paper.scoreboard.numbers.BlankFormatImpl","methods":[],"desc":""},{"FQCN":"io.papermc.paper.scoreboard.numbers.StyledFormat","methods":[{"name":"style","params":[],"desc":"The style that is being applied to the number in the score","ret":"the style to apply"}],"desc":"A scoreboard number format that applies a custom formatting to the score number."},{"FQCN":"io.papermc.paper.scoreboard.numbers.NumberFormat","methods":[{"name":"blank","params":[],"desc":"Creates a blank scoreboard number format that removes the score number entirely.","ret":"a blank number format"},{"name":"noStyle","params":[],"desc":"Gets an un-styled number format.","ret":"an un-styled number format"},{"name":"styled","params":[{"name":"style","type":"Style","desc":"the style to apply on the number"}],"desc":"Creates a scoreboard number format that applies a custom formatting to the score number.","ret":"a styled number format"},{"name":"styled","params":[{"name":"styleBuilderApplicables","type":"StyleBuilderApplicable","desc":"the style to apply on the number"}],"desc":"Creates a scoreboard number format that applies a custom formatting to the score number.","ret":"a styled number format"},{"name":"fixed","params":[{"name":"component","type":"ComponentLike","desc":"the component to replace the number with"}],"desc":"Creates a scoreboard number format that replaces the score number with a chat component.","ret":"a fixed number format"}],"desc":"Describes a scoreboard number format that applies custom formatting to scoreboard scores."},{"FQCN":"io.papermc.paper.scoreboard.numbers.FixedFormat","methods":[{"name":"component","params":[],"desc":"The component shown instead of the number for a score","ret":"the chat component"}],"desc":"A scoreboard number format that replaces the score number with a chat component."},{"FQCN":"io.papermc.paper.inventory.tooltip.TooltipContext","methods":[{"name":"create","params":[{"name":"advanced","type":"boolean","desc":"whether the context is for advanced tooltips"},{"name":"creative","type":"boolean","desc":"whether the context is for the creative inventory"}],"desc":"Creates a new context with the given advanced and creative\nmode settings.","ret":"a new context"},{"name":"create","params":[],"desc":"Creates a new context that is neither advanced nor creative.","ret":"a new context"},{"name":"isAdvanced","params":[],"desc":"Returns whether the context is for advanced\ntooltips.\n<p>\nAdvanced tooltips are shown by default\nwhen a player has {@code F3+H} enabled.","ret":"true if for advanced tooltips"},{"name":"isCreative","params":[],"desc":"Returns whether the context is for the creative\nmode inventory.\n<p>\nCreative tooltips are shown by default when a player is\nin the creative inventory.","ret":"true if for creative mode inventory"},{"name":"asAdvanced","params":[],"desc":"Returns a new context with {@link #isAdvanced()}\nset to true.","ret":"a new context"},{"name":"asCreative","params":[],"desc":"Returns a new context with {@link #isCreative()}\nset to true.","ret":"a new context"}],"desc":"Context for computing itemstack tooltips via\n{@link org.bukkit.inventory.ItemStack#computeTooltipLines(TooltipContext, Player)}"},{"FQCN":"io.papermc.paper.inventory.tooltip.TooltipContextImpl","methods":[],"desc":""},{"FQCN":"io.papermc.paper.inventory.ItemRarity","methods":[{"name":"getColor","params":[],"desc":"Gets the color formatting associated with the rarity.","ret":""}],"desc":""},{"FQCN":"io.papermc.paper.registry.ReferenceImpl","methods":[],"desc":""},{"FQCN":"io.papermc.paper.registry.TypedKey","methods":[{"name":"key","params":[],"desc":"Gets the key for the value in the registry.","ret":"the value's key"},{"name":"registryKey","params":[],"desc":"Gets the registry key for the value this key\nrepresents.","ret":"the registry key"},{"name":"create","params":[{"name":"registryKey","type":"RegistryKey<T>","desc":"the registry this key is for"},{"name":"key","type":"Key","desc":"the key for the value in the registry"}],"desc":"Create a typed key from a key and a registry key.","ret":"a new key for the value key and registry key"}],"desc":"Represents a key for a value in a specific registry."},{"FQCN":"io.papermc.paper.registry.Reference","methods":[{"name":"value","params":[],"desc":"Gets the value from the registry with the key.","ret":"the value"},{"name":"valueOrNull","params":[],"desc":"Gets the value from the registry with the key.","ret":"the value or null if it doesn't exist"},{"name":"create","params":[{"name":"registry","type":"Registry<T>","desc":"the registry the value is located in"},{"name":"key","type":"NamespacedKey","desc":"the key to the value"}],"desc":"Creates a reference to a registered value.","ret":"a reference"}],"desc":"Represents a reference to a server-backed registry value that may\nchange."},{"FQCN":"io.papermc.paper.registry.TypedKeyImpl","methods":[],"desc":""},{"FQCN":"io.papermc.paper.registry.RegistryKeyImpl","methods":[],"desc":""},{"FQCN":"io.papermc.paper.registry.RegistryKey","methods":[],"desc":"Identifier for a specific registry. For use with\n{@link TypedKey} and the registry modification API.\n<p>\nThere are 2 types of registries, identified as \"built-in\"\nor \"data-driven\". The former are not changeable by datapacks (which\ndoesn't necessarily mean they aren't changeable in the API) and\nare loaded first. \"Data-driven\" registries are all created by\nreading in data from the vanilla and other datapacks."},{"FQCN":"io.papermc.paper.command.CommandBlockHolder","methods":[{"name":"getCommand","params":[],"desc":"Gets the command that this CommandBlock will run when powered.\nThis will never return null.  If the CommandBlock does not have a\ncommand, an empty String will be returned instead.","ret":"Command that this CommandBlock will run when activated."},{"name":"setCommand","params":[{"name":"command","type":"String","desc":"Command that this CommandBlock will run when activated."}],"desc":"Sets the command that this CommandBlock will run when powered.\nSetting the command to null is the same as setting it to an empty\nString.","ret":""},{"name":"lastOutput","params":[],"desc":"Gets the last output from this command block.","ret":"the last output"},{"name":"lastOutput","params":[{"name":"lastOutput","type":"Component","desc":"the last output"}],"desc":"Sets the last output from this command block.","ret":""},{"name":"getSuccessCount","params":[],"desc":"Gets the success count from this command block.","ret":"the success count"},{"name":"setSuccessCount","params":[{"name":"successCount","type":"int","desc":"the success count"}],"desc":"Sets the success count from this command block.","ret":""}],"desc":""},{"FQCN":"io.papermc.paper.text.PaperComponents","methods":[{"name":"resolveWithContext","params":[{"name":"input","type":"Component","desc":"the component to resolve"},{"name":"context","type":"CommandSender","desc":"the command sender to resolve with"},{"name":"scoreboardSubject","type":"Entity","desc":"the scoreboard subject to use (for use with {@link net.kyori.adventure.text.ScoreComponent}s)"}],"desc":"Resolves a component with a specific command sender and subject.\n<p>\nNote that in Vanilla, elevated permissions are usually required to use\n'@' selectors in various component types, but this method should not\ncheck such permissions from the sender.\n<p>\nA {@link CommandSender} argument is required to resolve:\n<ul>\n    <li>{@link net.kyori.adventure.text.NBTComponent}</li>\n    <li>{@link net.kyori.adventure.text.ScoreComponent}</li>\n    <li>{@link net.kyori.adventure.text.SelectorComponent}</li>\n</ul>\nA {@link Entity} argument is optional to help resolve:\n<ul>\n    <li>{@link net.kyori.adventure.text.ScoreComponent}</li>\n</ul>\n{@link net.kyori.adventure.text.TranslatableComponent}s don't require any extra arguments.","ret":"the resolved component"},{"name":"resolveWithContext","params":[{"name":"input","type":"Component","desc":"the component to resolve"},{"name":"context","type":"CommandSender","desc":"the command sender to resolve with"},{"name":"scoreboardSubject","type":"Entity","desc":"the scoreboard subject to use (for use with {@link net.kyori.adventure.text.ScoreComponent}s)"},{"name":"bypassPermissions","type":"boolean","desc":"true to bypass permissions checks for resolving components"}],"desc":"Resolves a component with a specific command sender and subject.\n<p>\nNote that in Vanilla, elevated permissions are required to use\n'@' selectors in various component types. If the boolean {@code bypassPermissions}\nargument is {@code false}, the {@link CommandSender} argument will be used to query\nthose permissions.\n<p>\nA {@link CommandSender} argument is required to resolve:\n<ul>\n    <li>{@link net.kyori.adventure.text.NBTComponent}</li>\n    <li>{@link net.kyori.adventure.text.ScoreComponent}</li>\n    <li>{@link net.kyori.adventure.text.SelectorComponent}</li>\n</ul>\nA {@link Entity} argument is optional to help resolve:\n<ul>\n    <li>{@link net.kyori.adventure.text.ScoreComponent}</li>\n</ul>\n{@link net.kyori.adventure.text.TranslatableComponent}s don't require any extra arguments.","ret":"the resolved component"},{"name":"flattener","params":[],"desc":"Return a component flattener that can use game data to resolve extra information about components.","ret":"a component flattener"},{"name":"plainSerializer","params":[],"desc":"Get a serializer for {@link Component}s that will convert components to\na plain-text string.\n\n<p>Implementations may provide a serializer capable of processing any\ninformation that requires access to implementation details.</p>","ret":"a serializer to plain text"},{"name":"plainTextSerializer","params":[],"desc":"Get a serializer for {@link Component}s that will convert components to\na plain-text string.\n\n<p>Implementations may provide a serializer capable of processing any\ninformation that requires access to implementation details.</p>","ret":"a serializer to plain text"},{"name":"gsonSerializer","params":[],"desc":"Get a serializer for {@link Component}s that will convert to and from the\nstandard JSON serialization format using Gson.\n\n<p>Implementations may provide a serializer capable of processing any\ninformation that requires implementation details, such as legacy\n(pre-1.16) hover events.</p>","ret":"a json component serializer"},{"name":"colorDownsamplingGsonSerializer","params":[],"desc":"Get a serializer for {@link Component}s that will convert to and from the\nstandard JSON serialization format using Gson, downsampling any RGB colors\nto their nearest {@link NamedTextColor} counterpart.\n\n<p>Implementations may provide a serializer capable of processing any\ninformation that requires implementation details, such as legacy\n(pre-1.16) hover events.</p>","ret":"a json component serializer"},{"name":"legacySectionSerializer","params":[],"desc":"Get a serializer for {@link Component}s that will convert to and from the\nlegacy component format used by Bukkit. This serializer uses the\n{@link LegacyComponentSerializer.Builder#useUnusualXRepeatedCharacterHexFormat()}\noption to match upstream behavior.\n\n<p>This legacy serializer uses the standard section symbol to mark\nformatting characters.</p>\n\n<p>Implementations may provide a serializer capable of processing any\ninformation that requires access to implementation details.</p>","ret":"a section serializer"}],"desc":"Paper API-specific methods for working with {@link Component}s and related."},{"FQCN":"io.papermc.paper.advancement.AdvancementDisplay","methods":[{"name":"frame","params":[],"desc":"Gets the {@link Frame}.\n<p>\nThis defines the appearance of the tile in the advancements screen and\nthe text when it's completed.","ret":"the frame type"},{"name":"title","params":[],"desc":"Gets the advancement title.","ret":"the title"},{"name":"description","params":[],"desc":"Gets the description.","ret":"the description"},{"name":"icon","params":[],"desc":"Gets the icon shown in the frame in the advancements screen.","ret":"a copy of the icon"},{"name":"doesShowToast","params":[],"desc":"Gets whether a toast should be displayed.\n<p>\nA toast is a notification that will be displayed in the top right corner\nof the screen.","ret":"{@code true} if a toast should be shown"},{"name":"doesAnnounceToChat","params":[],"desc":"Gets whether a message should be sent in the chat.","ret":"{@code true} if a message should be sent"},{"name":"isHidden","params":[],"desc":"Gets whether this advancement is hidden.\n<p>\nHidden advancements cannot be viewed by the player until they have been\nunlocked.","ret":"{@code true} if hidden"},{"name":"backgroundPath","params":[],"desc":"Gets the texture displayed behind the advancement tree when selected.\n<p>\nThis only affects root advancements without any parent. If the background\nis not specified or doesn't exist, the tab background will be the missing\ntexture.","ret":"the background texture path"},{"name":"displayName","params":[],"desc":"Gets the formatted display name for this display. This\nis a part of the component that would be shown in chat when a player\ncompletes the advancement.","ret":"the display name"}],"desc":"Describes the display of an advancement.\n<p>\nThe display is used in the chat, in the toast messages and the advancements\nscreen."},{"FQCN":"io.papermc.paper.ban.BanListTypeImpl","methods":[],"desc":""},{"FQCN":"io.papermc.paper.ban.BanListType","methods":[{"name":"typeClass","params":[],"desc":"Returns the type class of the ban list used generically","ret":"the type class"}],"desc":"Represents a ban-type that a {@link BanList} may track.\nIt enforces the correct return value at compile time."},{"FQCN":"io.papermc.paper.event.entity.TameableDeathMessageEvent","methods":[{"name":"deathMessage","params":[{"name":"deathMessage","type":"Component","desc":"Death message to appear"}],"desc":"Set the death message that appears to the owner of the tameable.","ret":""},{"name":"deathMessage","params":[],"desc":"Get the death message that appears to the owner of the tameable.","ret":"Death message to appear"}],"desc":"Called when a {@link Tameable} dies and sends a death message."},{"FQCN":"io.papermc.paper.event.entity.ElderGuardianAppearanceEvent","methods":[{"name":"getAffectedPlayer","params":[],"desc":"Get the player affected by the guardian appearance.","ret":"Player affected by the appearance"},{"name":"getEntity","params":[],"desc":"The elder guardian playing the effect.","ret":"The elder guardian"}],"desc":"Is called when an {@link ElderGuardian} appears in front of a {@link Player}."},{"FQCN":"io.papermc.paper.event.entity.EntityCompostItemEvent","methods":[{"name":"getEntity","params":[],"desc":"Gets the entity that interacted with the composter.","ret":"the entity that composted an item."}],"desc":"Called when an item is about to be composted by an entity."},{"FQCN":"io.papermc.paper.event.entity.WaterBottleSplashEvent","methods":[{"name":"getToDamage","params":[],"desc":"Gets an immutable collection of entities that\nwill take damage as a result of this event. Use\nother methods on this class to modify which entities\ntake damage.","ret":"an immutable collection of entities"},{"name":"doNotDamageAsWaterSensitive","params":[{"name":"entity","type":"LivingEntity","desc":"entity to remove"}],"desc":"Removes this entity from the group that\nwill be damaged.","ret":""},{"name":"damageAsWaterSensitive","params":[{"name":"entity","type":"LivingEntity","desc":"entity to add"}],"desc":"Adds this entity to the group that\nwill be damaged","ret":""},{"name":"getToRehydrate","params":[],"desc":"Get a mutable collection of entities\nthat will be rehydrated by this.\n<p>\nAs of 1.19.3 this only will contain Axolotls as they\nare the only entity type that can be rehydrated, but\nit may change in the future.","ret":"the entities"},{"name":"getToExtinguish","params":[],"desc":"Get a mutable collection of entities that will\nbe extinguished as a result of this event.","ret":"entities to be extinguished"},{"name":"getAffectedEntities","params":[],"desc":"","ret":"a confusing collection, don't use it"},{"name":"getIntensity","params":[{"name":"entity","type":"LivingEntity","desc":""}],"desc":"Doesn't make sense for this event as intensity doesn't vary.","ret":"a confusing value"},{"name":"setIntensity","params":[{"name":"entity","type":"LivingEntity","desc":""},{"name":"intensity","type":"double","desc":""}],"desc":"Doesn't make sense for this event as intensity doesn't vary.","ret":""}],"desc":"Called when a splash water potion \"splashes\" and affects\ndifferent entities in different ways."},{"FQCN":"io.papermc.paper.event.entity.EntityPushedByEntityAttackEvent","methods":[{"name":"getPushedBy","params":[],"desc":"Gets the entity which pushed the affected entity.","ret":"the pushing entity"},{"name":"getAcceleration","params":[],"desc":"Gets the acceleration that will be applied to the affected entity.","ret":"the acceleration vector"},{"name":"setAcceleration","params":[{"name":"acceleration","type":"Vector","desc":"the new acceleration vector"}],"desc":"Sets the relative acceleration that will be applied to the affected entity.","ret":""}],"desc":"Fired when an entity is pushed by another entity's attack. The acceleration vector can be\nmodified. If this event is cancelled, the entity will not get pushed.\n<p>\nNote: Some entities might trigger this multiple times on the same entity\nas multiple acceleration calculations are done."},{"FQCN":"io.papermc.paper.event.entity.EntityFertilizeEggEvent","methods":[{"name":"getMother","params":[],"desc":"Provides the entity in the fertilization process that will eventually be responsible for \"creating\" offspring,\nmay that be by setting a block that later hatches or dropping an egg that has to be placed.","ret":"The \"mother\" entity."},{"name":"getFather","params":[],"desc":"Provides the \"father\" entity in the fertilization process that is not responsible for initiating the offspring\ncreation.","ret":"the other parent"},{"name":"getBreeder","params":[],"desc":"Gets the Entity responsible for fertilization. Breeder is {@code null} for spontaneous\nconception.","ret":"The Entity who initiated fertilization."},{"name":"getBredWith","params":[],"desc":"The ItemStack that was used to initiate fertilization, if present.","ret":"ItemStack used to initiate fertilization."},{"name":"getExperience","params":[],"desc":"Get the amount of experience granted by fertilization.","ret":"experience amount"},{"name":"setExperience","params":[{"name":"experience","type":"int","desc":"experience amount"}],"desc":"Set the amount of experience granted by fertilization.\nIf the amount is negative or zero, no experience will be dropped.","ret":""}],"desc":"Called when two entities mate and the mating process results in a fertilization.\nFertilization differs from normal breeding, as represented by the {@link EntityBreedEvent}, as\nit does not result in the immediate creation of the child entity in the world.\n<p>\nAn example of this would be:\n<ul>\n<li>A frog being marked as \"is_pregnant\" and laying {@link Material#FROGSPAWN} later.</li>\n<li>Sniffers producing the {@link Material#SNIFFER_EGG} item, which needs to be placed before it can begin to hatch.</li>\n<li>A turtle being marked with \"HasEgg\" and laying a {@link Material#TURTLE_EGG} later.</li>\n</ul>\n\nThe event hence only exposes the two parent entities in the fertilization process and cannot provide the child entity, as it will only exist at a later point in time."},{"FQCN":"io.papermc.paper.event.entity.EntityPortalReadyEvent","methods":[{"name":"getTargetWorld","params":[],"desc":"Gets the world this portal will teleport to.\nCan be {@code null} if \"allow-nether\" is false in server.properties\nor if there is another situation where there is no world to teleport to.\n<p>\nThis world may be modified by later events such as {@link PlayerPortalEvent}\nor {@link EntityPortalEvent}.","ret":"the world the portal will teleport the entity to."},{"name":"setTargetWorld","params":[{"name":"targetWorld","type":"World","desc":"the world"}],"desc":"Sets the world this portal will teleport to. A {@code null} value\nwill essentially cancel the teleport and prevent further events\nsuch as {@link PlayerPortalEvent} from firing.\n<p>\nThis world may be modified by later events such as {@link PlayerPortalEvent}\nor {@link EntityPortalEvent}.","ret":""},{"name":"getPortalType","params":[],"desc":"Gets the portal type for this event.","ret":"the portal type"}],"desc":"Called when an entity is ready to be teleported by a plugin.\nCurrently this is only called after the required\nticks have passed for a Nether Portal.\n<p>\nCancelling this event resets the entity's readiness\nregarding the current portal."},{"FQCN":"io.papermc.paper.event.entity.ShulkerDuplicateEvent","methods":[{"name":"getEntity","params":[],"desc":"Provides the newly created shulker, which did not exist prior to the duplication.\nAt the point of this event, said shulker is not part of the world yet.","ret":"the newly duplicated shulker."},{"name":"getParent","params":[],"desc":"Provides the \"parent\" of the freshly created shulker.\nThe parent shulker is the one that initiated the duplication.","ret":"the previously existing shulker which duplicated."}],"desc":"Fired when a shulker duplicates itself by spawning a new shulker.\n<p>\nThe event is fired prior to the newly created shulker, accessible via {@link #getEntity()}, being added to the world."},{"FQCN":"io.papermc.paper.event.entity.EntityDyeEvent","methods":[{"name":"getColor","params":[],"desc":"Gets the DyeColor the entity is being dyed","ret":"the DyeColor the entity is being dyed"},{"name":"setColor","params":[{"name":"dyeColor","type":"DyeColor","desc":"the DyeColor the entity will be dyed"}],"desc":"Sets the DyeColor the entity is being dyed","ret":""},{"name":"getPlayer","params":[],"desc":"Returns the player dyeing the entity, if available.","ret":"player or {@code null}"}],"desc":"Called when an entity is dyed. Currently, this is called for {@link Sheep}\nbeing dyed, and {@link Wolf}/{@link Cat} collars being dyed."},{"FQCN":"io.papermc.paper.event.entity.EntityMoveEvent","methods":[{"name":"getFrom","params":[],"desc":"Gets the location this entity moved from","ret":"Location the entity moved from"},{"name":"setFrom","params":[{"name":"from","type":"Location","desc":"New location to mark as the entity's previous location"}],"desc":"Sets the location to mark as where the entity moved from","ret":""},{"name":"getTo","params":[],"desc":"Gets the location this entity moved to","ret":"Location the entity moved to"},{"name":"setTo","params":[{"name":"to","type":"Location","desc":"New Location this entity will move to"}],"desc":"Sets the location that this entity will move to","ret":""},{"name":"hasChangedPosition","params":[],"desc":"Check if the entity has changed position (even within the same block) in the event","ret":"whether the entity has changed position or not"},{"name":"hasExplicitlyChangedPosition","params":[],"desc":"Check if the entity has changed position (even within the same block) in the event, disregarding a possible world change","ret":"whether the entity has changed position or not"},{"name":"hasChangedBlock","params":[],"desc":"Check if the entity has moved to a new block in the event","ret":"whether the entity has moved to a new block or not"},{"name":"hasExplicitlyChangedBlock","params":[],"desc":"Check if the entity has moved to a new block in the event, disregarding a possible world change","ret":"whether the entity has moved to a new block or not"},{"name":"hasChangedOrientation","params":[],"desc":"Check if the entity has changed orientation in the event","ret":"whether the entity has changed orientation or not"}],"desc":"Holds information for living entity movement events\n<p>\nDoes not fire for players; use {@link PlayerMoveEvent} for player movement."},{"FQCN":"io.papermc.paper.event.entity.EntityDamageItemEvent","methods":[{"name":"getItem","params":[],"desc":"Gets the item being damaged.","ret":"the item"},{"name":"getDamage","params":[],"desc":"Gets the amount of durability damage this item will be taking.","ret":"durability change"},{"name":"setDamage","params":[{"name":"damage","type":"int","desc":"the damage amount to cause"}],"desc":"Sets the amount of durability damage this item will be taking.","ret":""}],"desc":"Called when an item on or used by an entity takes durability damage as a result of being hit/used.\n<p>\nNOTE: default vanilla behaviour dictates that armor/tools picked up by\nmobs do not take damage (except via Thorns)."},{"FQCN":"io.papermc.paper.event.entity.PufferFishStateChangeEvent","methods":[{"name":"getNewPuffState","params":[],"desc":"Get the <strong>new</strong> puff state of the {@link PufferFish}.\n<p>\nThis is what the {@link PufferFish}'s new puff state will be after this event if it isn't cancelled.<br>\nRefer to {@link PufferFish#getPuffState()} to get the current puff state.","ret":"The <strong>new</strong> puff state, 0 being not inflated, 1 being slightly inflated and 2 being fully inflated"},{"name":"isInflating","params":[],"desc":"Get if the {@link PufferFish} is going to inflate.","ret":"If it's going to inflate"},{"name":"isDeflating","params":[],"desc":"Get if the {@link PufferFish} is going to deflate.","ret":"If it's going to deflate"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":"{@code true} if you wish to cancel the (in/de)flation"}],"desc":"Set whether to cancel the {@link PufferFish} (in/de)flating.","ret":""}],"desc":"Called just before a {@link PufferFish} inflates or deflates."},{"FQCN":"io.papermc.paper.event.entity.WardenAngerChangeEvent","methods":[{"name":"getTarget","params":[],"desc":"Gets the entity which triggered this anger update.","ret":"triggering entity"},{"name":"getOldAnger","params":[],"desc":"Gets the old anger level.","ret":"old anger level"},{"name":"getNewAnger","params":[],"desc":"Gets the new anger level resulting from this event.","ret":"new anger level"},{"name":"setNewAnger","params":[{"name":"newAnger","type":"int","desc":"the new anger level, max 150"}],"desc":"Sets the new anger level resulting from this event.\n<p>\nThe anger of a warden is capped at 150.","ret":""}],"desc":"Called when a Warden's anger level has changed due to another entity.\n<p>\nIf the event is cancelled, the warden's anger level will not change."},{"FQCN":"io.papermc.paper.event.entity.EntityLoadCrossbowEvent","methods":[{"name":"getCrossbow","params":[],"desc":"Gets the crossbow {@link ItemStack} being loaded.","ret":"the crossbow involved in this event"},{"name":"getHand","params":[],"desc":"Gets the hand from which the crossbow was loaded.","ret":"the hand"},{"name":"shouldConsumeItem","params":[],"desc":"","ret":"should the itemstack be consumed"},{"name":"setConsumeItem","params":[{"name":"consume","type":"boolean","desc":"should the item be consumed"}],"desc":"","ret":""},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":""}],"desc":"Set whether to cancel the crossbow being loaded. If canceled, the\nprojectile that would be loaded into the crossbow will not be consumed.","ret":""}],"desc":"Called when a LivingEntity loads a crossbow with a projectile."},{"FQCN":"io.papermc.paper.event.entity.EntityToggleSitEvent","methods":[{"name":"getSittingState","params":[],"desc":"Gets the new sitting state that the entity will change to.","ret":"If it's going to sit or not."}],"desc":"Is called when an entity sits down or stands up."},{"FQCN":"io.papermc.paper.event.entity.EntityInsideBlockEvent","methods":[{"name":"getBlock","params":[],"desc":"Gets the block.","ret":"the block"}],"desc":"Called when an entity enters the hitbox of a block.\nOnly called for blocks that react when an entity is inside.\nIf cancelled, any action that would have resulted from that entity\nbeing in the block will not happen (such as extinguishing an entity in a cauldron).\n<p>\nBlocks this is currently called for:\n<ul>\n    <li>Big dripleaf</li>\n    <li>Bubble column</li>\n    <li>Buttons</li>\n    <li>Cactus</li>\n    <li>Campfire</li>\n    <li>Cauldron</li>\n    <li>Crops</li>\n    <li>Ender Portal</li>\n    <li>Fires</li>\n    <li>Frogspawn</li>\n    <li>Honey</li>\n    <li>Hopper</li>\n    <li>Detector rails</li>\n    <li>Nether portals</li>\n    <li>Pitcher crop</li>\n    <li>Powdered snow</li>\n    <li>Pressure plates</li>\n    <li>Sweet berry bush</li>\n    <li>Tripwire</li>\n    <li>Waterlily</li>\n    <li>Web</li>\n    <li>Wither rose</li>\n</ul>"},{"FQCN":"io.papermc.paper.event.world.border.WorldBorderEvent","methods":[],"desc":""},{"FQCN":"io.papermc.paper.event.world.border.WorldBorderCenterChangeEvent","methods":[{"name":"getOldCenter","params":[],"desc":"Gets the original center location of the world border.","ret":"the old center"},{"name":"getNewCenter","params":[],"desc":"Gets the new center location for the world border.","ret":"the new center"},{"name":"setNewCenter","params":[{"name":"newCenter","type":"Location","desc":"the new center"}],"desc":"Sets the new center location for the world border. Y coordinate is ignored.","ret":""}],"desc":"Called when a world border's center is changed."},{"FQCN":"io.papermc.paper.event.world.border.WorldBorderBoundsChangeEvent","methods":[{"name":"getType","params":[],"desc":"Gets if this change is an instant change or over-time change.","ret":"the change type"},{"name":"getOldSize","params":[],"desc":"Gets the old size or the world border.","ret":"the old size"},{"name":"getNewSize","params":[],"desc":"Gets the new size of the world border.","ret":"the new size"},{"name":"setNewSize","params":[{"name":"newSize","type":"double","desc":"the new size"}],"desc":"Sets the new size of the world border.","ret":""},{"name":"getDuration","params":[],"desc":"Gets the time in milliseconds for the change. Will be 0 if instant.","ret":"the time in milliseconds for the change"},{"name":"setDuration","params":[{"name":"duration","type":"long","desc":"the time in milliseconds for the change"}],"desc":"Sets the time in milliseconds for the change. Will change {@link #getType()} to return\n{@link Type#STARTED_MOVE}.","ret":""}],"desc":"Called when a world border changes its bounds, either over time, or instantly."},{"FQCN":"io.papermc.paper.event.world.border.WorldBorderBoundsChangeFinishEvent","methods":[{"name":"getOldSize","params":[],"desc":"Gets the old size of the worldborder.","ret":"the old size"},{"name":"getNewSize","params":[],"desc":"Gets the new size of the worldborder.","ret":"the new size"},{"name":"getDuration","params":[],"desc":"Gets the duration this worldborder took to make the change.\n<p>\nCan be 0 if handlers for {@link WorldBorderCenterChangeEvent} set the duration to 0.","ret":"the duration of the transition"}],"desc":"Called when a moving world border has finished its move."},{"FQCN":"io.papermc.paper.event.world.StructureLocateEvent","methods":[{"name":"getResult","params":[],"desc":"Gets the location set as the structure location, if it was defined.\n<p>\nReturns {@code null} if it has not been set by {@link StructureLocateEvent#setResult(Location)}.\nSince this event fires <i>before</i> the search is done, the actual location is unknown at this point.","ret":"The result location, if it has been set. {@code null} if it has not."},{"name":"setResult","params":[{"name":"result","type":"Location","desc":"the {@link Location} of the structure."}],"desc":"Sets the result {@link Location}. This causes the search to be skipped, and the location passed here to be used as the result.","ret":""},{"name":"getType","params":[],"desc":"Gets the {@link StructureType} that is to be located.","ret":"the structure type."},{"name":"setType","params":[{"name":"type","type":"StructureType","desc":"the structure type."}],"desc":"Sets the {@link StructureType} that is to be located.","ret":""},{"name":"getOrigin","params":[],"desc":"Gets the {@link Location} from which the search is to be conducted.","ret":"{@link Location} where search begins"},{"name":"getRadius","params":[],"desc":"Gets the search radius in which to attempt locating the structure.\n<p>\nThis radius may not always be obeyed during the structure search!","ret":"the search radius."},{"name":"setRadius","params":[{"name":"radius","type":"int","desc":"the search radius."}],"desc":"Sets the search radius in which to attempt locating the structure.\n<p>\nThis radius may not always be obeyed during the structure search!","ret":""},{"name":"shouldFindUnexplored","params":[],"desc":"Gets whether to search exclusively for unexplored structures.\n<p>\nAs with the search radius, this value is not always obeyed.","ret":"Whether to search for only unexplored structures."},{"name":"setFindUnexplored","params":[{"name":"findUnexplored","type":"boolean","desc":"Whether to search for only unexplored structures."}],"desc":"Sets whether to search exclusively for unexplored structures.\n<p>\nAs with the search radius, this value is not always obeyed.","ret":""}],"desc":"Called <b>before</b> a structure/feature is located.\nThis happens when:\n<ul>\n    <li>The /locate command is used.<br></li>\n    <li>An Eye of Ender is used.</li>\n    <li>An Explorer/Treasure Map is activated.</li>\n    <li>{@link World#locateNearestStructure(Location, StructureType, int, boolean)} is invoked.</li>\n</ul>"},{"FQCN":"io.papermc.paper.event.world.WorldGameRuleChangeEvent","methods":[{"name":"getCommandSender","params":[],"desc":"Gets the command sender associated with this event.","ret":"{@code null} if the gamerule was changed via api, otherwise the {@link CommandSender}."},{"name":"getGameRule","params":[],"desc":"Gets the game rule associated with this event.","ret":"the gamerule being changed."},{"name":"getValue","params":[],"desc":"Gets the new value of the gamerule.","ret":"the new value of the gamerule."},{"name":"setValue","params":[{"name":"value","type":"String","desc":"the new value of the gamerule."}],"desc":"Sets the new value of this gamerule.","ret":""}],"desc":"Called when a world's gamerule is changed, either by command or by api."},{"FQCN":"io.papermc.paper.event.world.StructuresLocateEvent","methods":[{"name":"getOrigin","params":[],"desc":"Gets the {@link Location} from which the search is to be conducted.","ret":"{@link Location} where search begins"},{"name":"getResult","params":[],"desc":"Gets the {@link Location} and {@link Structure} set as the result, if it was defined.\n<p>\nReturns {@code null} if it has not been set by {@link StructuresLocateEvent#setResult(Result)}.\nSince this event fires <i>before</i> the search is done, the actual result is unknown at this point.","ret":"The result location and structure, if it has been set. {@code null} if it has not."},{"name":"setResult","params":[{"name":"result","type":"Result","desc":"the {@link Location} and {@link Structure} of the search."}],"desc":"Sets the result {@link Location} and {@link Structure}. This causes the search to be\nskipped, and the result object passed here to be used as the result.","ret":""},{"name":"getConfiguredStructures","params":[],"desc":"Gets a mutable list of ConfiguredStructures that are valid targets for the search.","ret":"a mutable list of ConfiguredStructures"},{"name":"setConfiguredStructures","params":[{"name":"configuredStructures","type":"List<ConfiguredStructure>","desc":"a list of ConfiguredStructure targets"}],"desc":"Sets the list of ConfiguredStructures that are valid targets for the search.","ret":""},{"name":"getStructures","params":[],"desc":"Gets an unmodifiable list of Structures that are valid targets for the search.","ret":"an unmodifiable list of Structures"},{"name":"setStructures","params":[{"name":"structures","type":"List<Structure>","desc":"a list of Structures targets"}],"desc":"Sets the list of Structures that are valid targets for the search.","ret":""},{"name":"getRadius","params":[],"desc":"Gets the search radius in which to attempt locating the structure.\n<p>\nThis radius may not always be obeyed during the structure search!","ret":"the search radius (in chunks)"},{"name":"setRadius","params":[{"name":"radius","type":"int","desc":"the search radius (in chunks)"}],"desc":"Sets the search radius in which to attempt locating the structure.\n<p>\nThis radius may not always be obeyed during the structure search!","ret":""},{"name":"shouldFindUnexplored","params":[],"desc":"Gets whether to search exclusively for unexplored structures.\n<p>\nAs with the search radius, this value is not always obeyed.","ret":"Whether to search for only unexplored structures."},{"name":"setFindUnexplored","params":[{"name":"findUnexplored","type":"boolean","desc":"Whether to search for only unexplored structures."}],"desc":"Sets whether to search exclusively for unexplored structures.\n<p>\nAs with the search radius, this value is not always obeyed.","ret":""}],"desc":"Called <b>before</b> a set of configured structures is located.\nThis happens when:\n<ul>\n    <li>The /locate command is used.<br></li>\n    <li>An Eye of Ender is used.</li>\n    <li>An Explorer/Treasure Map is activated.</li>\n    <li>A dolphin swims to a treasure location.</li>\n    <li>A trade is done with a villager for a map.</li>\n    <li>{@link World#locateNearestStructure(Location, StructureType, int, boolean)} is invoked.</li>\n    <li>{@link World#locateNearestStructure(Location, Structure, int, boolean)} is invoked.</li>\n</ul>"},{"FQCN":"io.papermc.paper.event.server.ServerResourcesReloadedEvent","methods":[{"name":"getCause","params":[],"desc":"Gets the cause of the resource reload.","ret":"the reload cause"}],"desc":"Called when resources such as datapacks are reloaded (e.g. /minecraft:reload)\n<p>\nIntended for use to re-register custom recipes, advancements that may be lost during a reload like this."},{"FQCN":"io.papermc.paper.event.server.WhitelistStateUpdateEvent","methods":[{"name":"getPlayer","params":[],"desc":"Gets the player whose whitelist status is being changed","ret":"the player whose status is being changed"},{"name":"getPlayerProfile","params":[],"desc":"Gets the player profile whose whitelist status is being changed","ret":"the player profile whose status is being changed"},{"name":"getStatus","params":[],"desc":"Gets the status change of the player profile","ret":"the whitelist status"}],"desc":"This event gets called when the whitelist status of a player is changed"},{"FQCN":"io.papermc.paper.event.packet.PlayerChunkUnloadEvent","methods":[],"desc":"Is called when a {@link Player} receives a chunk unload packet.\n<p>\nShould only be used for packet/clientside related stuff.\nNot intended for modifying server side."},{"FQCN":"io.papermc.paper.event.packet.PlayerChunkLoadEvent","methods":[],"desc":"Is called when a {@link Player} receives a {@link Chunk}\n<p>\nCan for example be used for spawning a fake entity when the player receives a chunk.\n<p>\nShould only be used for packet/clientside related stuff.\nNot intended for modifying server side state."},{"FQCN":"io.papermc.paper.event.block.BeaconActivatedEvent","methods":[{"name":"getBeacon","params":[],"desc":"Returns the beacon that was activated.","ret":"the beacon that was activated."}],"desc":"Called when a beacon is activated.\nActivation occurs when the beacon beam becomes visible."},{"FQCN":"io.papermc.paper.event.block.PlayerShearBlockEvent","methods":[{"name":"getBlock","params":[],"desc":"Gets the block being sheared in this event.","ret":"The {@link Block} which block is being sheared in this event."},{"name":"getItem","params":[],"desc":"Gets the item used to shear the block.","ret":"The {@link ItemStack} of the shears."},{"name":"getHand","params":[],"desc":"Gets the hand used to shear the block.","ret":"Either {@link EquipmentSlot#HAND} OR {@link EquipmentSlot#OFF_HAND}."},{"name":"getDrops","params":[],"desc":"Gets the resulting drops of this event.","ret":"A {@link List list} of {@link ItemStack items} that will be dropped as result of this event."},{"name":"isCancelled","params":[],"desc":"Gets whether the shearing of the block should be cancelled or not.","ret":"Whether the shearing of the block should be cancelled or not."},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":"whether the shearing of the block should be cancelled or not."}],"desc":"Sets whether the shearing of the block should be cancelled or not.","ret":""}],"desc":"Called when a player uses sheers on a block.\n<p>\nThis event is <b>not</b> called when breaking blocks with shears but instead only when a\nplayer uses the sheer item on a block to garner drops from said block and/or change its state.\n<p>\nExamples include shearing a pumpkin to turn it into a carved pumpkin or shearing a beehive to get honeycomb."},{"FQCN":"io.papermc.paper.event.block.CompostItemEvent","methods":[{"name":"getItem","params":[],"desc":"Gets the item that was used on the composter.","ret":"the item"},{"name":"willRaiseLevel","params":[],"desc":"Gets whether the composter will rise a level.","ret":"{@code true} if successful"},{"name":"setWillRaiseLevel","params":[{"name":"willRaiseLevel","type":"boolean","desc":"{@code true} if the composter should rise a level"}],"desc":"Sets whether the composter will rise a level.","ret":""}],"desc":"Called when an item is about to be composted by a hopper.\nTo prevent hoppers from moving items into composters, cancel the {@link InventoryMoveItemEvent}."},{"FQCN":"io.papermc.paper.event.block.BlockPreDispenseEvent","methods":[{"name":"getItemStack","params":[],"desc":"Gets the {@link ItemStack} to be dispensed.","ret":"The item to be dispensed"},{"name":"getSlot","params":[],"desc":"Gets the inventory slot of the dispenser to dispense from.","ret":"The inventory slot"}],"desc":""},{"FQCN":"io.papermc.paper.event.block.TargetHitEvent","methods":[{"name":"getSignalStrength","params":[],"desc":"Gets the strength of the redstone signal to be emitted by the Target block","ret":"the strength of the redstone signal to be emitted"},{"name":"setSignalStrength","params":[{"name":"signalStrength","type":"int","desc":"the strength of the redstone signal to be emitted"}],"desc":"Sets the strength of the redstone signal to be emitted by the Target block","ret":""}],"desc":"Called when a Target Block is hit by a projectile.\n<p>\nCancelling this event will stop the Target from emitting a redstone signal,\nand in the case that the shooter is a player, will stop them from receiving\nadvancement criteria."},{"FQCN":"io.papermc.paper.event.block.BellRevealRaiderEvent","methods":[{"name":"getEntity","params":[],"desc":"Gets the raider that the bell revealed.","ret":"The raider"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":""}],"desc":"{@inheritDoc}\n<p>\nThis does not cancel the particle effects shown on the bell, only the entity.","ret":""}],"desc":"Called when a {@link Raider} is revealed by a bell."},{"FQCN":"io.papermc.paper.event.block.BlockLockCheckEvent","methods":[{"name":"getBlockState","params":[],"desc":"Gets the snapshot {@link LockableTileState} of the block entity\nwhose lock is being checked.","ret":"the snapshot block state."},{"name":"getPlayer","params":[],"desc":"Get the player involved this lock check.","ret":"the player"},{"name":"getKeyItem","params":[],"desc":"Gets the itemstack that will be used as the key itemstack. Initially\nthis will be the item in the player's main hand but an override can be set\nwith {@link #setKeyItem(ItemStack)}. Use {@link #isUsingCustomKeyItemStack()}\nto check if a custom key stack has been set.","ret":"the item being used as the key item"},{"name":"setKeyItem","params":[{"name":"stack","type":"ItemStack","desc":"the stack to use as a key"}],"desc":"Sets the itemstack that will be used as the key item.","ret":""},{"name":"resetKeyItem","params":[],"desc":"Reset the key stack to the default (the player's main hand).","ret":""},{"name":"isUsingCustomKeyItemStack","params":[],"desc":"Checks if a custom key stack has been set.","ret":"{@code true} if a custom key itemstack has been set"},{"name":"getResult","params":[],"desc":"Gets the result of this event.","ret":"the result"},{"name":"setResult","params":[{"name":"result","type":"Result","desc":"the result of this event"}],"desc":"Gets the result of this event. {@link Result#DEFAULT} is the default\nallowing the vanilla logic to check the lock of this block. Set to {@link Result#ALLOW}\nor {@link Result#DENY} to override that behavior.\n<p>\nSetting this to {@link Result#ALLOW} bypasses the spectator check.","ret":""},{"name":"denyWithMessageAndSound","params":[{"name":"lockedMessage","type":"Component","desc":"the message to show if locked (or {@code null} for none)"},{"name":"lockedSound","type":"Sound","desc":"the sound to play if locked (or {@code null} for none)"}],"desc":"Shorthand method to set the {@link #getResult()} to {@link Result#DENY},\nthe locked message and locked sound.","ret":""},{"name":"getLockedMessage","params":[],"desc":"Gets the locked message that will be sent if the\nplayer cannot open the block.","ret":"the locked message (or {@code null} if none)"},{"name":"setLockedMessage","params":[{"name":"lockedMessage","type":"Component","desc":"the locked message (or {@code null} for none)"}],"desc":"Sets the locked message that will be sent if the\nplayer cannot open the block.","ret":""},{"name":"getLockedSound","params":[],"desc":"Gets the locked sound that will play if the\nplayer cannot open the block.","ret":"the locked sound (or {@code null} if none)"},{"name":"setLockedSound","params":[{"name":"lockedSound","type":"Sound","desc":"the locked sound (or {@code null} for none)"}],"desc":"Sets the locked sound that will play if the\nplayer cannot open the block.","ret":""}],"desc":"Called when the server tries to check the lock on a lockable block entity.\n<br>\nSee {@link #setResult(Result)} to change behavior"},{"FQCN":"io.papermc.paper.event.block.BlockFailedDispenseEvent","methods":[{"name":"shouldPlayEffect","params":[],"desc":"","ret":"if the effect should be played"},{"name":"shouldPlayEffect","params":[{"name":"playEffect","type":"boolean","desc":"if the effect should be played"}],"desc":"Sets if the effect for empty dispensers should be played","ret":""},{"name":"callEvent","params":[],"desc":"","ret":"{@link #shouldPlayEffect()}"}],"desc":"Called when a block tries to dispense an item, but its inventory is empty."},{"FQCN":"io.papermc.paper.event.block.BlockBreakBlockEvent","methods":[{"name":"getDrops","params":[],"desc":"Gets the drops of this event","ret":"the drops"},{"name":"getSource","params":[],"desc":"Gets the block that cause this (e.g. a piston, or adjacent liquid)","ret":"the source"}],"desc":"Called when a block forces another block to break and drop items.\n<p>\nCurrently called for piston's and liquid flows."},{"FQCN":"io.papermc.paper.event.block.BeaconDeactivatedEvent","methods":[{"name":"getBeacon","params":[],"desc":"Returns the beacon that was deactivated.\nThis will return {@code null} if the beacon does not exist.\n(which can occur after the deactivation of a now broken beacon)","ret":"The beacon that got deactivated, or {@code null} if it does not exist."}],"desc":"Called when a beacon is deactivated, either because its base block(s) or itself were destroyed."},{"FQCN":"io.papermc.paper.event.block.BellRingEvent","methods":[],"desc":"Called when a bell is rung."},{"FQCN":"io.papermc.paper.event.block.DragonEggFormEvent","methods":[{"name":"getDragonBattle","params":[],"desc":"Gets the {@link DragonBattle} associated with this event.\nKeep in mind that the {@link EnderDragon} is already dead\nwhen this event is called.","ret":"the dragon battle"}],"desc":"Called when the {@link EnderDragon} is defeated (killed) in a {@link DragonBattle},\ncausing a {@link Material#DRAGON_EGG} (more formally: {@link #getNewState()})\nto possibly appear depending on {@link #isCancelled()}.\n<p>\n<b>This event might be cancelled by default depending on\ne.g. {@link DragonBattle#hasBeenPreviouslyKilled()} and server configuration.</b>"},{"FQCN":"io.papermc.paper.event.player.PlayerPickItemEvent","methods":[{"name":"getTargetSlot","params":[],"desc":"Returns the slot the item that is being picked goes into.","ret":"hotbar slot (0-8 inclusive)"},{"name":"setTargetSlot","params":[{"name":"targetSlot","type":"int","desc":"hotbar slot (0-8 inclusive)"}],"desc":"Changes the slot the item that is being picked goes into.","ret":""},{"name":"getSourceSlot","params":[],"desc":"Returns the slot in which the item that will be put into the players hotbar is located.","ret":"player inventory slot (0-35 inclusive)"},{"name":"setSourceSlot","params":[{"name":"sourceSlot","type":"int","desc":"player inventory slot (0-35 inclusive)"}],"desc":"Change the source slot from which the item that will be put in the players hotbar will be taken.","ret":""}],"desc":"Event that is fired when a player uses the pick item functionality (middle-clicking a block to get the appropriate\nitem). However, note that this event will only trigger if an item has to be moved from the inventory to the hotbar.\nAfter the handling of this event, the contents of the source and the target slot will be swapped and the currently\nselected hotbar slot of the player will be set to the target slot.\n<p>\nNote: This event will not be fired for players in creative mode."},{"FQCN":"io.papermc.paper.event.player.PlayerItemCooldownEvent","methods":[{"name":"getType","params":[],"desc":"Get the material affected by the cooldown.","ret":"material affected by the cooldown"},{"name":"getCooldown","params":[],"desc":"Gets the cooldown in ticks.","ret":"cooldown in ticks"},{"name":"setCooldown","params":[{"name":"cooldown","type":"int","desc":"cooldown in ticks, has to be a positive number"}],"desc":"Sets the cooldown of the material in ticks.\nSetting the cooldown to 0 results in removing an already existing cooldown for the material.","ret":""}],"desc":"Fired when a player receives an item cooldown."},{"FQCN":"io.papermc.paper.event.player.PlayerLecternPageChangeEvent","methods":[{"name":"getLectern","params":[],"desc":"Gets the lectern involved.","ret":"the Lectern"},{"name":"getBook","params":[],"desc":"Gets the current ItemStack on the lectern.","ret":"the ItemStack on the Lectern"},{"name":"getPageChangeDirection","params":[],"desc":"Gets the page change direction. This is essentially returns which button the player clicked, left or right.","ret":"the page change direction"},{"name":"getOldPage","params":[],"desc":"Gets the page changed from. <i>Pages are 0-indexed.</i>","ret":"the page changed from"},{"name":"getNewPage","params":[],"desc":"Gets the page changed to. <i>Pages are 0-indexed.</i>","ret":"the page changed to"},{"name":"setNewPage","params":[{"name":"newPage","type":"int","desc":"the new paged changed to"}],"desc":"Sets the page changed to. <i>Pages are 0-indexed.</i>\nPage indices that are greater than the number of pages will show the last page.","ret":""}],"desc":""},{"FQCN":"io.papermc.paper.event.player.PlayerUntrackEntityEvent","methods":[{"name":"getEntity","params":[],"desc":"Gets the entity that will be untracked","ret":"the entity untracked"}],"desc":"Is called when a {@link Player} untracks an {@link Entity}.\n<p>\nAdding or removing entities from the world at the point in time this event is called is completely\nunsupported and should be avoided."},{"FQCN":"io.papermc.paper.event.player.PlayerArmSwingEvent","methods":[{"name":"getHand","params":[],"desc":"Returns the hand of the arm swing.","ret":"the hand"}],"desc":""},{"FQCN":"io.papermc.paper.event.player.PlayerItemFrameChangeEvent","methods":[{"name":"getItemFrame","params":[],"desc":"Gets the {@link ItemFrame} involved in this event.","ret":"the {@link ItemFrame}"},{"name":"getItemStack","params":[],"desc":"Gets the {@link ItemStack} involved in this event.\nThis is the item being added, rotated, or removed from the {@link ItemFrame}.\n<p>\nIf this method returns air, then the resulting item in the ItemFrame will be empty.","ret":"the {@link ItemStack} being added, rotated, or removed"},{"name":"setItemStack","params":[{"name":"itemStack","type":"ItemStack","desc":"{@link ItemFrame} item"}],"desc":"Sets the {@link ItemStack} that this {@link ItemFrame} holds.\nIf {@code null} is provided, the ItemStack will become air and the result in the ItemFrame will be empty.","ret":""},{"name":"getAction","params":[],"desc":"Gets the action that was performed on this {@link ItemFrame}.","ret":"action performed on the item frame in this event"}],"desc":"Called when an {@link ItemFrame} is having an item rotated, added, or removed from it."},{"FQCN":"io.papermc.paper.event.player.PlayerTradeEvent","methods":[{"name":"getVillager","params":[],"desc":"Gets the Villager or Wandering trader associated with this event","ret":"the villager or wandering trader"}],"desc":"Called when a player trades with a villager or wandering trader"},{"FQCN":"io.papermc.paper.event.player.PlayerBedFailEnterEvent","methods":[{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":""}],"desc":"{@inheritDoc}\n<p>\n<b>NOTE</b>: This does not cancel the player getting in the bed, but any messages/explosions\nthat may occur because of the interaction.","ret":""}],"desc":""},{"FQCN":"io.papermc.paper.event.player.PrePlayerAttackEntityEvent","methods":[{"name":"getAttacked","params":[],"desc":"Gets the entity that was attacked in this event.","ret":"entity that was attacked"},{"name":"willAttack","params":[],"desc":"Gets if this entity will be attacked normally.\nEntities like falling sand will return {@code false} because\ntheir entity type does not allow them to be attacked.\n<p>\nNote: there may be other factors (invulnerability, etc.) that will prevent this entity from being attacked that this event will not cover","ret":"if the entity will actually be attacked"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":"{@code true} if you wish to cancel this event"}],"desc":"Sets if this attack should be cancelled, note if {@link PrePlayerAttackEntityEvent#willAttack()} returns false\nthis event will always be cancelled.","ret":""}],"desc":"Called when the player tries to attack an entity.\n<p>\nThis occurs before any of the damage logic, so cancelling this event\nwill prevent any sort of sounds from being played when attacking.\n<p>\nThis event will fire as cancelled for certain entities, with {@link PrePlayerAttackEntityEvent#willAttack()} being false\nto indicate that this entity will not actually be attacked.\n<p>\nNote: there may be other factors (invulnerability, etc.) that will prevent this entity from being attacked that this event will not cover"},{"FQCN":"io.papermc.paper.event.player.AsyncChatDecorateEvent","methods":[{"name":"player","params":[],"desc":"Gets the player (if available) associated with this event.\n<p>\nCertain commands request decorations without a player context\nwhich is why this is possibly null.","ret":"the player or {@code null}"},{"name":"originalMessage","params":[],"desc":"Gets the original decoration input","ret":"the input"},{"name":"result","params":[],"desc":"Gets the decoration result. This may already be different from\n{@link #originalMessage()} if some other listener to this event\n<b>OR</b> the legacy preview event ({@link AsyncPlayerChatPreviewEvent})\nchanged the result.","ret":"the result"},{"name":"result","params":[{"name":"result","type":"Component","desc":"the result"}],"desc":"Sets the resulting decorated component.","ret":""},{"name":"isPreview","params":[],"desc":"If this decorating is part of a preview request/response.","ret":"{@code true} if part of previewing"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":""}],"desc":"A cancelled decorating event means that no changes to the result component\nwill have any effect. The decorated component will be equal to the original\ncomponent.","ret":""}],"desc":"This event is fired when the server decorates a component for chat purposes. This is called\nbefore {@link AsyncChatEvent} and the other chat events. It is recommended that you modify the\nmessage here, and use the chat events for modifying receivers and later the chat type. If you\nwant to keep the message as \"signed\" for the clients who get it, be sure to include the entire\noriginal message somewhere in the final message.\n<br>\nSee {@link AsyncChatCommandDecorateEvent} for the decoration of messages sent via commands"},{"FQCN":"io.papermc.paper.event.player.PlayerFailMoveEvent","methods":[{"name":"getFailReason","params":[],"desc":"Gets the reason this movement was prevented by the server","ret":"The reason the movement was prevented"},{"name":"getFrom","params":[],"desc":"Gets the location this player moved from","ret":"Location the player moved from"},{"name":"getTo","params":[],"desc":"Gets the location this player tried to move to","ret":"Location the player tried to move to"},{"name":"isAllowed","params":[],"desc":"Gets if the check should be bypassed, allowing the movement","ret":"whether to bypass the check"},{"name":"setAllowed","params":[{"name":"allowed","type":"boolean","desc":"whether to bypass the check"}],"desc":"Set if the check should be bypassed and the movement should be allowed","ret":""},{"name":"getLogWarning","params":[],"desc":"Gets if warnings will be printed to console. e.g. \"Player123 moved too quickly!\"","ret":"whether to log warnings"},{"name":"setLogWarning","params":[{"name":"logWarning","type":"boolean","desc":"whether to log warnings"}],"desc":"Set if a warning is printed to console. e.g. \"Player123 moved too quickly!\"","ret":""}],"desc":"Runs when a player attempts to move, but is prevented from doing so by the server"},{"FQCN":"io.papermc.paper.event.player.ChatEvent","methods":[],"desc":"An event fired when a {@link Player} sends a chat message to the server."},{"FQCN":"io.papermc.paper.event.player.PlayerInventorySlotChangeEvent","methods":[{"name":"getRawSlot","params":[],"desc":"The raw slot number that was changed.","ret":"The raw slot number."},{"name":"getSlot","params":[],"desc":"The slot number that was changed, ready for passing to\n{@link Inventory#getItem(int)}. Note that there may be two slots with\nthe same slot number, since a view links two different inventories.\n<p>\nIf no inventory is opened, internal crafting view is used for conversion.","ret":"The slot number."},{"name":"getOldItemStack","params":[],"desc":"Clone of ItemStack that was in the slot before the change.","ret":"The old ItemStack in the slot."},{"name":"getNewItemStack","params":[],"desc":"Clone of ItemStack that is in the slot after the change.","ret":"The new ItemStack in the slot."},{"name":"shouldTriggerAdvancements","params":[],"desc":"Gets whether the slot change advancements will be triggered.","ret":"Whether the slot change advancements will be triggered."},{"name":"setShouldTriggerAdvancements","params":[{"name":"triggerAdvancements","type":"boolean","desc":"Whether the slot change advancements will be triggered."}],"desc":"Sets whether the slot change advancements will be triggered.","ret":""}],"desc":"Called when a slot contents change in a player's inventory."},{"FQCN":"io.papermc.paper.event.player.PlayerDeepSleepEvent","methods":[],"desc":"Called when a player has slept long enough\nto count as passing the night/storm.\n<p>\nCancelling this event will prevent the player from being counted as deeply sleeping\nunless they exit and re-enter the bed."},{"FQCN":"io.papermc.paper.event.player.PlayerChangeBeaconEffectEvent","methods":[{"name":"getPrimary","params":[],"desc":"","ret":"the primary effect"},{"name":"setPrimary","params":[{"name":"primary","type":"PotionEffectType","desc":"the primary effect"}],"desc":"Sets the primary effect\n<p>\nNOTE: The primary effect still has to be one of the valid effects for a beacon.","ret":""},{"name":"getSecondary","params":[],"desc":"","ret":"the secondary effect"},{"name":"setSecondary","params":[{"name":"secondary","type":"PotionEffectType","desc":"the secondary effect"}],"desc":"Sets the secondary effect\n<p>\nThis only has an effect when the beacon is able to accept a secondary effect.\nNOTE: The secondary effect still has to be a valid effect for a beacon.","ret":""},{"name":"getBeacon","params":[],"desc":"","ret":"the beacon block associated with this event"},{"name":"willConsumeItem","params":[],"desc":"Gets if the item used to change the beacon will be consumed.\n<p>\nIndependent of {@link #isCancelled()}. If the event is cancelled\nthe item will <b>NOT</b> be consumed.","ret":"{@code true} if item will be consumed"},{"name":"setConsumeItem","params":[{"name":"consumeItem","type":"boolean","desc":"{@code true} if item should be consumed"}],"desc":"Sets if the item used to change the beacon should be consumed.\n<p>\nIndependent of {@link #isCancelled()}. If the event is cancelled\nthe item will <b>NOT</b> be consumed.","ret":""},{"name":"isCancelled","params":[],"desc":"{@inheritDoc}\n<p>\nIf a {@link PlayerChangeBeaconEffectEvent} is cancelled, the changes will\nnot take effect","ret":""},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":""}],"desc":"{@inheritDoc}\n<p>\nIf cancelled, the item will <b>NOT</b> be consumed regardless of what {@link #willConsumeItem()} says\n<p>\nIf a {@link PlayerChangeBeaconEffectEvent} is cancelled, the changes will not be applied\nor saved.","ret":""}],"desc":"Called when a player sets the effect for a beacon"},{"FQCN":"io.papermc.paper.event.player.PlayerStonecutterRecipeSelectEvent","methods":[],"desc":""},{"FQCN":"io.papermc.paper.event.player.AsyncChatEvent","methods":[],"desc":"An event fired when a {@link Player} sends a chat message to the server.\n<p>\nThis event will sometimes fire synchronously, depending on how it was\ntriggered.\n<p>\nIf a player is the direct cause of this event by an incoming packet, this\nevent will be asynchronous. If a plugin triggers this event by compelling a\nplayer to chat, this event will be synchronous.\n<p>\nCare should be taken to check {@link #isAsynchronous()} and treat the event\nappropriately."},{"FQCN":"io.papermc.paper.event.player.PlayerTrackEntityEvent","methods":[{"name":"getEntity","params":[],"desc":"Gets the entity that will be tracked","ret":"the entity tracked"}],"desc":"Is called when a {@link Player} tracks an {@link Entity}.\n<p>\nIf cancelled entity is not shown to the player and interaction in both directions is not possible.\n<p>\nAdding or removing entities from the world at the point in time this event is called is completely\nunsupported and should be avoided."},{"FQCN":"io.papermc.paper.event.player.PlayerLoomPatternSelectEvent","methods":[{"name":"getLoomInventory","params":[],"desc":"Gets the loom inventory involved.","ret":"the loom inventory"},{"name":"getPatternType","params":[],"desc":"Gets the pattern type selected.","ret":"the pattern type"},{"name":"setPatternType","params":[{"name":"patternType","type":"PatternType","desc":"the pattern type"}],"desc":"Sets the pattern type selected.","ret":""}],"desc":"Called when a player selects a banner patten in a loom inventory."},{"FQCN":"io.papermc.paper.event.player.PlayerNameEntityEvent","methods":[{"name":"getName","params":[],"desc":"Gets the name to be given to the entity.","ret":"the name"},{"name":"setName","params":[{"name":"name","type":"Component","desc":"the name"}],"desc":"Sets the name to be given to the entity.","ret":""},{"name":"getEntity","params":[],"desc":"Gets the entity involved in this event.","ret":"the entity"},{"name":"setEntity","params":[{"name":"entity","type":"LivingEntity","desc":"the entity"}],"desc":"Sets the entity involved in this event.","ret":""},{"name":"isPersistent","params":[],"desc":"Gets whether this will set the mob to be persistent.","ret":"persistent"},{"name":"setPersistent","params":[{"name":"persistent","type":"boolean","desc":"persistent"}],"desc":"Sets whether this will set the mob to be persistent.","ret":""}],"desc":"Called when the player is attempting to rename a mob"},{"FQCN":"io.papermc.paper.event.player.PlayerFlowerPotManipulateEvent","methods":[{"name":"getFlowerpot","params":[],"desc":"Gets the flowerpot that is involved in this event.","ret":"the flowerpot that is involved with this event"},{"name":"getItem","params":[],"desc":"Gets the item being placed, or taken from, the flower pot.\nCheck if placing with {@link #isPlacing()}.","ret":"the item placed, or taken from, the flowerpot"},{"name":"isPlacing","params":[],"desc":"Gets if the item is being placed into the flowerpot.","ret":"if the item is being placed into the flowerpot"}],"desc":"Called when a player places an item in or takes an item out of a flowerpot."},{"FQCN":"io.papermc.paper.event.player.AsyncChatCommandDecorateEvent","methods":[],"desc":""},{"FQCN":"io.papermc.paper.event.player.PlayerSignCommandPreprocessEvent","methods":[{"name":"getSign","params":[],"desc":"Gets the sign that the command originated from.","ret":"the sign"},{"name":"getSide","params":[],"desc":"Gets the side of the sign that the command originated from.","ret":"the sign side"}],"desc":"Called when a {@link Player} clicks a side on a sign that causes a command to run.\n<p>\nThis command is run with elevated permissions which allows players to access commands on signs they wouldn't\nnormally be able to run."},{"FQCN":"io.papermc.paper.event.player.AbstractChatEvent","methods":[{"name":"viewers","params":[],"desc":"Gets a set of {@link Audience audiences} that this chat message will be displayed to.\n\n<p>The set returned may auto-populate on access. Any listener accessing the returned set should be aware that\nit may reduce performance for a lazy set implementation.</p>","ret":"a mutable set of {@link Audience audiences} who will receive the chat message"},{"name":"renderer","params":[{"name":"renderer","type":"ChatRenderer","desc":"the chat renderer"}],"desc":"Sets the chat renderer.","ret":""},{"name":"renderer","params":[],"desc":"Gets the chat renderer.","ret":"the chat renderer"},{"name":"message","params":[],"desc":"Gets the user-supplied message.\nThe return value will reflect changes made using {@link #message(Component)}.","ret":"the user-supplied message"},{"name":"message","params":[{"name":"message","type":"Component","desc":"the user-supplied message"}],"desc":"Sets the user-supplied message.","ret":""},{"name":"originalMessage","params":[],"desc":"Gets the original and unmodified user-supplied message.\nThe return value will <b>not</b> reflect changes made using\n{@link #message(Component)}.","ret":"the original user-supplied message"},{"name":"signedMessage","params":[],"desc":"Gets the signed message.\nChanges made in this event will <b>not</b> update\nthe signed message.","ret":"the signed message"}],"desc":"An abstract implementation of a chat event, handling shared logic."},{"FQCN":"io.papermc.paper.event.player.PlayerOpenSignEvent","methods":[{"name":"getSign","params":[],"desc":"Gets the sign that was clicked.","ret":"{@link Sign} that was clicked"},{"name":"getSide","params":[],"desc":"Gets which side of the sign was clicked.","ret":"{@link Side} that was clicked"},{"name":"getCause","params":[],"desc":"The cause of this sign open.","ret":"the cause"}],"desc":"Called when a player begins editing a sign's text.\n<p>\nCancelling this event stops the sign editing menu from opening."},{"FQCN":"io.papermc.paper.event.player.PlayerStopUsingItemEvent","methods":[{"name":"getItem","params":[],"desc":"Gets the exact item the player is releasing","ret":"ItemStack the exact item the player released"},{"name":"getTicksHeldFor","params":[],"desc":"Gets the number of ticks the item was held for","ret":"int the number of ticks the item was held for"}],"desc":"Called when the server detects a player stopping using an item.\nExamples of this are letting go of the interact button when holding a bow, an edible item, or a spyglass."},{"FQCN":"io.papermc.paper.event.player.PlayerPurchaseEvent","methods":[{"name":"getTrade","params":[],"desc":"Gets the associated trade with this event","ret":"the trade"},{"name":"setTrade","params":[{"name":"trade","type":"MerchantRecipe","desc":"the trade to use"}],"desc":"Sets the trade. This is then used to determine the next prices","ret":""},{"name":"isRewardingExp","params":[],"desc":"","ret":"will trade try to reward exp"},{"name":"setRewardExp","params":[{"name":"rewardExp","type":"boolean","desc":"try to reward exp"}],"desc":"Sets whether the trade will try to reward exp","ret":""},{"name":"willIncreaseTradeUses","params":[],"desc":"","ret":"whether the trade will count as a use of the trade"},{"name":"setIncreaseTradeUses","params":[{"name":"increaseTradeUses","type":"boolean","desc":"{@code true} to count, {@code false} otherwise"}],"desc":"Sets whether the trade will count as a use","ret":""}],"desc":"Called when a player trades with a standalone merchant GUI."},{"FQCN":"io.papermc.paper.event.player.PlayerShieldDisableEvent","methods":[{"name":"getDamager","params":[],"desc":"Provides the damager that disabled the shield.","ret":"the entity instance that damaged the player in a way that caused the shield to be disabled."},{"name":"getCooldown","params":[],"desc":"Gets the cooldown the disabled shield will be disabled for in ticks.\n<p>\nNotably, this value is not final as it might be changed by a {@link PlayerItemCooldownEvent} down the line,\nas said event is called if this event is not cancelled.","ret":"cooldown in ticks"},{"name":"setCooldown","params":[{"name":"cooldown","type":"int","desc":"cooldown in ticks, has to be a positive number"}],"desc":"Sets the cooldown of the shield in ticks.\n<p>\nNotably, this value is not final as it might be changed by a {@link PlayerItemCooldownEvent} down the line,\nas said event is called if this event is not cancelled.","ret":""}],"desc":"Called whenever a players shield is disabled due to an attack from another entity that was capable of disabling the\nshield. This, most commonly, may be another player attacking with an axe.\n<p>\nNotably, this even is distinct from a {@link PlayerItemCooldownEvent} and will fire prior to the item going on\ncooldown.\nIt follows that, if this event is cancelled, no {@link PlayerItemCooldownEvent} is called as the shield is never\ndisabled in the first place."},{"FQCN":"io.papermc.paper.tag.EntitySetTag","methods":[],"desc":""},{"FQCN":"io.papermc.paper.tag.EntityTags","methods":[],"desc":"All tags in this class are unmodifiable, attempting to modify them will throw an\n{@link UnsupportedOperationException}."},{"FQCN":"io.papermc.paper.tag.BaseTag","methods":[],"desc":""},{"FQCN":"io.papermc.paper.potion.SuspiciousEffectEntryImpl","methods":[],"desc":""},{"FQCN":"io.papermc.paper.potion.PotionMix","methods":[{"name":"createPredicateChoice","params":[{"name":"stackPredicate","type":"Predicate<? super ItemStack>","desc":"a predicate for an itemstack."}],"desc":"Create a {@link RecipeChoice} based on a Predicate. These RecipeChoices are only\nvalid for {@link PotionMix}, not anywhere else RecipeChoices may be used.","ret":"a new RecipeChoice"},{"name":"getResult","params":[],"desc":"Gets the resulting itemstack after the brew has finished.","ret":"the result itemstack"},{"name":"getInput","params":[],"desc":"Gets the input for the bottom 3 slots in the brewing stand.","ret":"the bottom 3 slot ingredients"},{"name":"getIngredient","params":[],"desc":"Gets the ingredient in the top slot of the brewing stand.","ret":"the top slot input"}],"desc":"Represents a potion mix made in a Brewing Stand."},{"FQCN":"io.papermc.paper.potion.SuspiciousEffectEntry","methods":[{"name":"effect","params":[],"desc":"Gets the effect type.","ret":"type"},{"name":"duration","params":[],"desc":"Gets the duration for this effect instance.","ret":"duration (in ticks)"},{"name":"create","params":[{"name":"effectType","type":"PotionEffectType","desc":"effect type"},{"name":"duration","type":"int","desc":"duration (in ticks)"}],"desc":"Creates a new instance of SuspiciousEffectEntry.","ret":"new instance of an entry"}],"desc":"Represents a {@link PotionEffectType} paired with a duration."},{"FQCN":"io.papermc.paper.potion.PredicateRecipeChoice","methods":[],"desc":""},{"FQCN":"io.papermc.paper.block.LockableTileState","methods":[],"desc":"Interface for tile entities that are lockable."},{"FQCN":"io.papermc.paper.block.fluid.FluidData","methods":[{"name":"getFluidType","params":[],"desc":"Gets the fluid type of this fluid data.","ret":"the fluid type"},{"name":"clone","params":[],"desc":"Returns a copy of this FluidData.","ret":"a copy of the fluid data"},{"name":"computeFlowDirection","params":[{"name":"location","type":"Location","desc":"- the location to check the liquid flow"}],"desc":"Computes the direction of the flow of the liquid at the given location as a vector.\n<p>\nThis method requires the passed location's chunk to be loaded.\nIf said chunk is not loaded when this method is called, the chunk will first be loaded prior to the computation\nwhich leads to a potentially slow sync chunk load.","ret":"the flow direction vector at the given location"},{"name":"getLevel","params":[],"desc":"Returns the level of liquid this fluid data holds.","ret":"the amount as an integer, between 0 and 8"},{"name":"computeHeight","params":[{"name":"location","type":"Location","desc":"the location at which to check the high of this fluid data."}],"desc":"Computes the height of the fluid in the world.\n<p>\nThis method requires the passed location's chunk to be loaded.\nIf said chunk is not loaded when this method is called, the chunk will first be loaded prior to the computation\nwhich leads to a potentially slow sync chunk load.","ret":"the height as a float value"},{"name":"isSource","params":[],"desc":"Returns whether this fluid is a source block","ret":"true if the fluid is a source block, false otherwise"}],"desc":"A representation of a fluid in a specific state of data.\nThis type is not linked to a specific location and hence mostly resembles a {@link org.bukkit.block.data.BlockData}."},{"FQCN":"io.papermc.paper.block.fluid.type.FlowingFluidData","methods":[],"desc":"A specific subtype of {@link FluidData} that is returned by the API for fluid data of potentially falling fluids."},{"FQCN":"io.papermc.paper.block.fluid.type.FallingFluidData","methods":[{"name":"isFalling","params":[],"desc":"Get if this liquid is falling.","ret":"true if falling"}],"desc":"A specific subtype of {@link FluidData} that is returned by the API for fluid data of potentially falling fluids."},{"FQCN":"io.papermc.paper.block.MovingPiston","methods":[{"name":"getMovingBlock","params":[],"desc":"Gets the block that is being pushed","ret":"the pushed block"},{"name":"getDirection","params":[],"desc":"The direction that the current moving piston\nis pushing/pulling a block in.","ret":"the direction"},{"name":"isExtending","params":[],"desc":"Gets if the piston is extending or not.\nReturns false if the piston is retracting.","ret":"is extending or not"},{"name":"isPistonHead","params":[],"desc":"Returns if this moving piston represents the main piston head\nfrom the original piston.","ret":"is the piston head or not"}],"desc":""},{"FQCN":"com.destroystokyo.paper.MaterialSetTag","methods":[],"desc":""},{"FQCN":"com.destroystokyo.paper.ParticleBuilder","methods":[{"name":"spawn","params":[],"desc":"Sends the particle to all receiving players (or all). This method is safe to use\nAsynchronously","ret":"a reference to this object."},{"name":"particle","params":[],"desc":"","ret":"The particle going to be sent"},{"name":"particle","params":[{"name":"particle","type":"Particle","desc":"The particle"}],"desc":"Changes what particle will be sent","ret":"a reference to this object."},{"name":"receivers","params":[],"desc":"","ret":"List of players who will receive the particle, or null for all in world"},{"name":"hasReceivers","params":[],"desc":"Example use:\n\nbuilder.receivers(16); if (builder.hasReceivers()) { sendParticleAsync(builder); }","ret":"If this particle is going to be sent to someone"},{"name":"allPlayers","params":[],"desc":"Sends this particle to all players in the world. This is rather silly and you should likely not\nbe doing this.\n\nJust be a logical person and use receivers by radius or collection.","ret":"a reference to this object."},{"name":"receivers","params":[{"name":"receivers","type":"List<Player>","desc":"List of players to receive this particle, or null for all players in the\nworld"}],"desc":"","ret":"a reference to this object."},{"name":"receivers","params":[{"name":"receivers","type":"Collection<Player>","desc":"List of players to receive this particle, or null for all players in the\nworld"}],"desc":"","ret":"a reference to this object."},{"name":"receivers","params":[{"name":"receivers","type":"Player","desc":"List of players to be receive this particle, or null for all players in the\nworld"}],"desc":"","ret":"a reference to this object."},{"name":"receivers","params":[{"name":"radius","type":"int","desc":"amount to add on all axis"}],"desc":"Selects all players within a cuboid selection around the particle location, within the\nspecified bounding box. If you want a more spherical check, see {@link #receivers(int,\nboolean)}","ret":"a reference to this object."},{"name":"receivers","params":[{"name":"radius","type":"int","desc":"amount to add on each axis"},{"name":"byDistance","type":"boolean","desc":"true to use a spherical radius, false to use a cuboid"}],"desc":"Selects all players within the specified radius around the particle location. If byDistance is\nfalse, behavior uses cuboid selection the same as {@link #receivers(int, int)} If byDistance is\ntrue, radius is tested by distance in a spherical shape","ret":"a reference to this object."},{"name":"receivers","params":[{"name":"xzRadius","type":"int","desc":"amount to add on the x/z axis"},{"name":"yRadius","type":"int","desc":"amount to add on the y axis"}],"desc":"Selects all players within a cuboid selection around the particle location, within the\nspecified bounding box. Allows specifying a different Y size than X and Z If you want a more\ncylinder check, see {@link #receivers(int, int, boolean)} If you want a more spherical check,\nsee {@link #receivers(int, boolean)}","ret":"a reference to this object."},{"name":"receivers","params":[{"name":"xzRadius","type":"int","desc":"amount to add on the x/z axis"},{"name":"yRadius","type":"int","desc":"amount to add on the y axis"},{"name":"byDistance","type":"boolean","desc":"true to use a cylinder shape, false to use cuboid"}],"desc":"Selects all players within the specified radius around the particle location. If byDistance is\nfalse, behavior uses cuboid selection the same as {@link #receivers(int, int)} If byDistance is\ntrue, radius is tested by distance on the y plane and on the x/z plane, in a cylinder shape.","ret":"a reference to this object."},{"name":"receivers","params":[{"name":"xRadius","type":"int","desc":"amount to add on the x axis"},{"name":"yRadius","type":"int","desc":"amount to add on the y axis"},{"name":"zRadius","type":"int","desc":"amount to add on the z axis"}],"desc":"Selects all players within a cuboid selection around the particle location, within the\nspecified bounding box. If you want a more cylinder check, see {@link #receivers(int, int,\nboolean)} If you want a more spherical check, see {@link #receivers(int, boolean)}","ret":"a reference to this object."},{"name":"source","params":[],"desc":"","ret":"The player considered the source of this particle (for Visibility concerns), or null"},{"name":"source","params":[{"name":"source","type":"Player","desc":"The player who is considered the source"}],"desc":"Sets the source of this particle for visibility concerns (Vanish API)","ret":"a reference to this object."},{"name":"location","params":[],"desc":"","ret":"Location of where the particle will spawn"},{"name":"location","params":[{"name":"location","type":"Location","desc":"The location of the particle"}],"desc":"Sets the location of where to spawn the particle","ret":"a reference to this object."},{"name":"location","params":[{"name":"world","type":"World","desc":"World to spawn particle in"},{"name":"x","type":"double","desc":"X location"},{"name":"y","type":"double","desc":"Y location"},{"name":"z","type":"double","desc":"Z location"}],"desc":"Sets the location of where to spawn the particle","ret":"a reference to this object."},{"name":"count","params":[],"desc":"","ret":"Number of particles to spawn"},{"name":"count","params":[{"name":"count","type":"int","desc":"Number of particles"}],"desc":"Sets the number of particles to spawn","ret":"a reference to this object."},{"name":"offsetX","params":[],"desc":"Particle offset X. Varies by particle on how this is used","ret":"Particle offset X."},{"name":"offsetY","params":[],"desc":"Particle offset Y. Varies by particle on how this is used","ret":"Particle offset Y."},{"name":"offsetZ","params":[],"desc":"Particle offset Z. Varies by particle on how this is used","ret":"Particle offset Z."},{"name":"offset","params":[{"name":"offsetX","type":"double","desc":"Particle offset X"},{"name":"offsetY","type":"double","desc":"Particle offset Y"},{"name":"offsetZ","type":"double","desc":"Particle offset Z"}],"desc":"Sets the particle offset. Varies by particle on how this is used","ret":"a reference to this object."},{"name":"extra","params":[],"desc":"Gets the Particle extra data. Varies by particle on how this is used","ret":"the extra particle data"},{"name":"extra","params":[{"name":"extra","type":"double","desc":"the extra particle data"}],"desc":"Sets the particle extra data. Varies by particle on how this is used","ret":"a reference to this object."},{"name":"data","params":[],"desc":"Gets the particle custom data. Varies by particle on how this is used","ret":"the ParticleData for this particle"},{"name":"data","params":[{"name":"data","type":"T","desc":"The new particle data"}],"desc":"Sets the particle custom data. Varies by particle on how this is used","ret":"a reference to this object."},{"name":"force","params":[],"desc":"","ret":"whether the particle is forcefully shown to players."},{"name":"force","params":[{"name":"force","type":"boolean","desc":"true to force, false for normal"}],"desc":"Sets whether the particle is forcefully shown to the player. If forced, the particle will show\nfaraway, as far as the player's view distance allows. If false, the particle will show\naccording to the client's particle settings.","ret":"a reference to this object."},{"name":"color","params":[{"name":"color","type":"Color","desc":"the new particle color"}],"desc":"Sets the particle Color. Only valid for REDSTONE.","ret":"a reference to this object."},{"name":"color","params":[{"name":"color","type":"Color","desc":"the new particle color"},{"name":"size","type":"float","desc":"the size of the particle"}],"desc":"Sets the particle Color and size. Only valid for REDSTONE.","ret":"a reference to this object."},{"name":"color","params":[{"name":"r","type":"int","desc":"red color component"},{"name":"g","type":"int","desc":"green color component"},{"name":"b","type":"int","desc":"blue color component"}],"desc":"Sets the particle Color.\nOnly valid for REDSTONE.","ret":"a reference to this object."}],"desc":"Helps prepare a particle to be sent to players.\n\nUsage of the builder is preferred over the super long {@link World#spawnParticle(Particle, Location, int, double, double, double, double, Object)} API"},{"FQCN":"com.destroystokyo.paper.util.VersionFetcher","methods":[{"name":"getCacheTime","params":[],"desc":"Amount of time to cache results for in milliseconds\n<p>\nNegative values will never cache.","ret":"cache time"},{"name":"getVersionMessage","params":[{"name":"serverVersion","type":"String","desc":"the current version of the server (will match {@link Bukkit#getVersion()})"}],"desc":"Gets the version message to cache and show to command senders.\n\n<p>NOTE: This is run in a new thread separate from that of the command processing thread</p>","ret":"the message to show when requesting a version"}],"desc":""},{"FQCN":"com.destroystokyo.paper.util.SneakyThrow","methods":[],"desc":""},{"FQCN":"com.destroystokyo.paper.Title","methods":[{"name":"getTitle","params":[],"desc":"Gets the text of this title","ret":"the text"},{"name":"getSubtitle","params":[],"desc":"Gets the text of this title's subtitle","ret":"the text"},{"name":"getFadeIn","params":[],"desc":"Gets the number of ticks to fade in.\n\n<p>The returned value is never negative.</p>","ret":"the number of ticks to fade in"},{"name":"getStay","params":[],"desc":"Gets the number of ticks to stay.\n\n<p>The returned value is never negative.</p>","ret":"the number of ticks to stay"},{"name":"getFadeOut","params":[],"desc":"Gets the number of ticks to fade out.\n\n<p>The returned value is never negative.</p>","ret":"the number of ticks to fade out"},{"name":"send","params":[{"name":"player","type":"Player","desc":"the receiver of the title"}],"desc":"Sends the title directly to an player","ret":""},{"name":"send","params":[{"name":"players","type":"Collection<? extends Player>","desc":"the receivers of the title"}],"desc":"Sends the title directly to the defined players","ret":""},{"name":"send","params":[{"name":"players","type":"Player[]","desc":"the receivers of the title"}],"desc":"Sends the title directly to the defined players","ret":""},{"name":"broadcast","params":[],"desc":"Sends the title directly to all online players","ret":""}],"desc":"Represents a title to may be sent to a {@link Player}.\n\n<p>A title can be sent without subtitle text.</p>"},{"FQCN":"com.destroystokyo.paper.entity.RangedEntity","methods":[{"name":"rangedAttack","params":[{"name":"target","type":"LivingEntity","desc":"the entity to target"},{"name":"charge","type":"float","desc":"How \"charged\" the attack is (how far back the bow was pulled for Bow attacks).\n              This should be a value between 0 and 1, represented as targetDistance/maxDistance."}],"desc":"Attack the specified entity using a ranged attack.","ret":""},{"name":"setChargingAttack","params":[{"name":"raiseHands","type":"boolean","desc":"Whether the entities hands are raised to charge attack"}],"desc":"Sets that the Entity is \"charging\" up an attack, by raising its hands","ret":""},{"name":"isChargingAttack","params":[],"desc":"Alias to {@link LivingEntity#isHandRaised()}, if the entity is charging an attack","ret":"If entities hands are raised"}],"desc":""},{"FQCN":"com.destroystokyo.paper.entity.ai.MobGoals","methods":[],"desc":"Represents a part of the \"brain\" of a mob. It tracks all tasks (running or not), allows adding and removing goals"},{"FQCN":"com.destroystokyo.paper.entity.ai.GoalType","methods":[],"desc":"Represents the subtype of a goal. Used by minecraft to disable certain types of goals if needed."},{"FQCN":"com.destroystokyo.paper.entity.ai.Goal","methods":[{"name":"shouldActivate","params":[],"desc":"Checks if this goal should be activated","ret":"if this goal should be activated"},{"name":"shouldStayActive","params":[],"desc":"Checks if this goal should stay active, defaults to {@link Goal#shouldActivate()}","ret":"if this goal should stay active"},{"name":"start","params":[],"desc":"Called when this goal gets activated","ret":""},{"name":"stop","params":[],"desc":"Called when this goal gets stopped","ret":""},{"name":"tick","params":[],"desc":"Called each tick the goal is activated","ret":""},{"name":"getKey","params":[],"desc":"A unique key that identifies this type of goal. Plugins should use their own namespace, not the minecraft\nnamespace. Additionally, this key also specifies to what mobs this goal can be applied to","ret":"the goal key"},{"name":"getTypes","params":[],"desc":"Returns a list of all applicable flags for this goal.<br>\n\nThis method is only called on construction.","ret":"the subtypes."}],"desc":"Represents an AI goal of an entity"},{"FQCN":"com.destroystokyo.paper.entity.ai.GoalKey","methods":[],"desc":"Used to identify a Goal. Consists of a {@link NamespacedKey} and the type of mob the goal can be applied to"},{"FQCN":"com.destroystokyo.paper.entity.TargetEntityInfo","methods":[{"name":"getEntity","params":[],"desc":"Get the entity that is targeted","ret":"Targeted entity"},{"name":"getHitVector","params":[],"desc":"Get the position the entity is targeted at","ret":"Targeted position"}],"desc":"Represents information about a targeted entity"},{"FQCN":"com.destroystokyo.paper.entity.Pathfinder","methods":[{"name":"getEntity","params":[],"desc":"","ret":"The entity that is controlled by this pathfinder"},{"name":"stopPathfinding","params":[],"desc":"Instructs the Entity to stop trying to navigate to its current desired location","ret":""},{"name":"hasPath","params":[],"desc":"If the entity is currently trying to navigate to a destination, this will return true","ret":"true if the entity is navigating to a destination"},{"name":"getCurrentPath","params":[],"desc":"","ret":"The location the entity is trying to navigate to, or null if there is no destination"},{"name":"findPath","params":[{"name":"loc","type":"Location","desc":"Location to navigate to"}],"desc":"Calculates a destination for the Entity to navigate to, but does not set it\nas the current target. Useful for calculating what would happen before setting it.","ret":"The closest Location the Entity can get to for this navigation, or null if no path could be calculated"},{"name":"findPath","params":[{"name":"target","type":"LivingEntity","desc":"the Entity to navigate to"}],"desc":"Calculates a destination for the Entity to navigate to to reach the target entity,\nbut does not set it as the current target.\nUseful for calculating what would happen before setting it.\n\nThe behavior of this PathResult is subject to the games pathfinding rules, and may\nresult in the pathfinding automatically updating to follow the target Entity.\n\nHowever, this behavior is not guaranteed, and is subject to the games behavior.","ret":"The closest Location the Entity can get to for this navigation, or null if no path could be calculated"},{"name":"moveTo","params":[{"name":"loc","type":"Location","desc":"Location to navigate to"}],"desc":"Calculates a destination for the Entity to navigate to, and sets it with default speed\nas the current target.","ret":"If the pathfinding was successfully started"},{"name":"moveTo","params":[{"name":"loc","type":"Location","desc":"Location to navigate to"},{"name":"speed","type":"double","desc":"Speed multiplier to navigate at, where 1 is 'normal'"}],"desc":"Calculates a destination for the Entity to navigate to, with desired speed\nas the current target.","ret":"If the pathfinding was successfully started"},{"name":"moveTo","params":[{"name":"target","type":"LivingEntity","desc":"the Entity to navigate to"}],"desc":"Calculates a destination for the Entity to navigate to to reach the target entity,\nand sets it with default speed.\n\nThe behavior of this PathResult is subject to the games pathfinding rules, and may\nresult in the pathfinding automatically updating to follow the target Entity.\n\nHowever, this behavior is not guaranteed, and is subject to the games behavior.","ret":"If the pathfinding was successfully started"},{"name":"moveTo","params":[{"name":"target","type":"LivingEntity","desc":"the Entity to navigate to"},{"name":"speed","type":"double","desc":"Speed multiplier to navigate at, where 1 is 'normal'"}],"desc":"Calculates a destination for the Entity to navigate to to reach the target entity,\nand sets it with specified speed.\n\nThe behavior of this PathResult is subject to the games pathfinding rules, and may\nresult in the pathfinding automatically updating to follow the target Entity.\n\nHowever, this behavior is not guaranteed, and is subject to the games behavior.","ret":"If the pathfinding was successfully started"},{"name":"moveTo","params":[{"name":"path","type":"PathResult","desc":"The Path to start following"}],"desc":"Takes the result of a previous pathfinding calculation and sets it\nas the active pathfinding with default speed.","ret":"If the pathfinding was successfully started"},{"name":"moveTo","params":[{"name":"path","type":"PathResult","desc":"The Path to start following"},{"name":"speed","type":"double","desc":"Speed multiplier to navigate at, where 1 is 'normal'"}],"desc":"Takes the result of a previous pathfinding calculation and sets it\nas the active pathfinding,","ret":"If the pathfinding was successfully started"},{"name":"canOpenDoors","params":[],"desc":"Checks if this pathfinder allows passing through closed doors.","ret":"if this pathfinder allows passing through closed doors"},{"name":"setCanOpenDoors","params":[{"name":"canOpenDoors","type":"boolean","desc":"if the mob can pass through closed doors, or not"}],"desc":"Allows this pathfinder to pass through closed doors, or not","ret":""},{"name":"canPassDoors","params":[],"desc":"Checks if this pathfinder allows passing through open doors.","ret":"if this pathfinder allows passing through open doors"},{"name":"setCanPassDoors","params":[{"name":"canPassDoors","type":"boolean","desc":"if the mob can pass through open doors, or not"}],"desc":"Allows this pathfinder to pass through open doors, or not","ret":""},{"name":"canFloat","params":[],"desc":"Checks if this pathfinder assumes that the mob can float","ret":"if this pathfinder assumes that the mob can float"},{"name":"setCanFloat","params":[{"name":"canFloat","type":"boolean","desc":"if the mob can float, or not"}],"desc":"Makes this pathfinder assume that the mob can float, or not","ret":""}],"desc":"Handles pathfinding operations for an Entity"},{"FQCN":"com.destroystokyo.paper.entity.villager.ReputationType","methods":[],"desc":"A type of reputation gained with a {@link org.bukkit.entity.Villager Villager}.\n<p>\nAll types but {@link #MAJOR_POSITIVE} are shared to other villagers."},{"FQCN":"com.destroystokyo.paper.entity.villager.Reputation","methods":[{"name":"getReputation","params":[{"name":"type","type":"ReputationType","desc":"The {@link ReputationType type} of reputation to get."}],"desc":"Gets the reputation value for a specific {@link ReputationType}.","ret":"The value of the {@link ReputationType type}."},{"name":"setReputation","params":[{"name":"type","type":"ReputationType","desc":"The {@link ReputationType type} of reputation to set."},{"name":"value","type":"int","desc":"The value of the {@link ReputationType type}."}],"desc":"Sets the reputation value for a specific {@link ReputationType}.","ret":""},{"name":"hasReputationSet","params":[{"name":"type","type":"ReputationType","desc":"The {@link ReputationType type} to check"}],"desc":"Gets if a reputation value is currently set for a specific {@link ReputationType}.","ret":"If there is a value for this {@link ReputationType type} set."}],"desc":"A reputation score for a player on a villager."},{"FQCN":"com.destroystokyo.paper.network.StatusClient","methods":[{"name":"isLegacy","params":[],"desc":"Returns whether the client is using an older version that doesn't\nsupport all of the features in {@link PaperServerListPingEvent}.\n\n<p>For Vanilla, this returns {@code true} for all clients older than 1.7.</p>","ret":"{@code true} if the client is using legacy ping"}],"desc":"Represents a client requesting the current status from the server (e.g. from\nthe server list)."},{"FQCN":"com.destroystokyo.paper.network.NetworkClient","methods":[{"name":"getAddress","params":[],"desc":"Returns the socket address of the client.","ret":"The client's socket address"},{"name":"getProtocolVersion","params":[],"desc":"Returns the protocol version of the client.","ret":"The client's protocol version, or {@code -1} if unknown"},{"name":"getVirtualHost","params":[],"desc":"Returns the virtual host the client is connected to.\n\n<p>The virtual host refers to the hostname/port the client used to\nconnect to the server.</p>","ret":"The client's virtual host, or {@code null} if unknown"}],"desc":"Represents a client connected to the server."},{"FQCN":"com.destroystokyo.paper.utils.PaperPluginLogger","methods":[],"desc":"Prevents plugins (e.g. Essentials) from changing the parent of the plugin logger."},{"FQCN":"com.destroystokyo.paper.utils.CachedSizeConcurrentLinkedQueue","methods":[],"desc":""},{"FQCN":"com.destroystokyo.paper.HeightmapType","methods":[],"desc":"Enumeration of different heightmap types maintained by the server. Generally using these maps is much faster\nthan using an iterative search for a block in a given x, z coordinate."},{"FQCN":"com.destroystokyo.paper.MaterialTags","methods":[],"desc":"Represents a collection tags to identify materials that share common properties.\nWill map to minecraft for missing tags, as well as custom ones that may be useful.\n<p>\nAll tags in this class are unmodifiable, attempting to modify them will throw an\n{@link UnsupportedOperationException}."},{"FQCN":"com.destroystokyo.paper.profile.PlayerProfile","methods":[{"name":"getName","params":[],"desc":"","ret":"The players name, if set"},{"name":"setName","params":[{"name":"name","type":"String","desc":"The new Name"}],"desc":"Sets this profiles Name","ret":"The previous Name"},{"name":"getId","params":[],"desc":"","ret":"The players unique identifier, if set"},{"name":"setId","params":[{"name":"uuid","type":"UUID","desc":"The new UUID"}],"desc":"Sets this profiles UUID","ret":"The previous UUID"},{"name":"getTextures","params":[],"desc":"Gets the {@link PlayerTextures} of this profile.\nThis will build a snapshot of the current texture data once\nrequested inside PlayerTextures.","ret":"the textures, not <code>null</code>"},{"name":"setTextures","params":[{"name":"textures","type":"PlayerTextures","desc":"the textures to copy, or <code>null</code> to clear the\ntextures"}],"desc":"Copies the given textures.","ret":""},{"name":"getProperties","params":[],"desc":"","ret":"A Mutable set of this players properties, such as textures.\nValues specified here are subject to implementation details."},{"name":"hasProperty","params":[{"name":"property","type":"String","desc":"Property name to check"}],"desc":"Check if the Profile has the specified property","ret":"If the property is set"},{"name":"setProperty","params":[{"name":"property","type":"ProfileProperty","desc":"Property to set."}],"desc":"Sets a property. If the property already exists, the previous one will be replaced","ret":""},{"name":"setProperties","params":[{"name":"properties","type":"Collection<ProfileProperty>","desc":"The properties to set"}],"desc":"Sets multiple properties. If any of the set properties already exist, it will be replaced","ret":""},{"name":"removeProperty","params":[{"name":"property","type":"String","desc":"The property to remove"}],"desc":"Removes a specific property from this profile","ret":"If a property was removed"},{"name":"removeProperty","params":[{"name":"property","type":"ProfileProperty","desc":"The property to remove"}],"desc":"Removes a specific property from this profile","ret":"If a property was removed"},{"name":"removeProperties","params":[{"name":"properties","type":"Collection<ProfileProperty>","desc":"The properties to remove"}],"desc":"Removes all properties in the collection","ret":"If any property was removed"},{"name":"clearProperties","params":[],"desc":"Clears all properties on this profile","ret":""},{"name":"isComplete","params":[],"desc":"","ret":"If the profile is now complete (has UUID and Name)"},{"name":"completeFromCache","params":[],"desc":"Like {@link #complete(boolean)} but will try only from cache, and not make network calls\nDoes not account for textures.","ret":"If the profile is now complete (has UUID and Name)"},{"name":"completeFromCache","params":[{"name":"onlineMode","type":"boolean","desc":"Treat this as online mode or not"}],"desc":"Like {@link #complete(boolean)} but will try only from cache, and not make network calls\nDoes not account for textures.","ret":"If the profile is now complete (has UUID and Name)"},{"name":"completeFromCache","params":[{"name":"lookupUUID","type":"boolean","desc":"If only name is supplied, should we do a UUID lookup"},{"name":"onlineMode","type":"boolean","desc":"Treat this as online mode or not"}],"desc":"Like {@link #complete(boolean)} but will try only from cache, and not make network calls\nDoes not account for textures.","ret":"If the profile is now complete (has UUID and Name)"},{"name":"complete","params":[],"desc":"If this profile is not complete, then make the API call to complete it.\nThis is a blocking operation and should be done asynchronously.\n\nThis will also complete textures. If you do not want to load textures, use {{@link #complete(boolean)}}","ret":"If the profile is now complete (has UUID and Name) (if you get rate limited, this operation may fail)"},{"name":"complete","params":[{"name":"textures","type":"boolean","desc":"controls if we should fill the profile with texture properties"}],"desc":"If this profile is not complete, then make the API call to complete it.\nThis is a blocking operation and should be done asynchronously.\n\nOptionally will also fill textures.\n\nOnline mode will be automatically determined","ret":"If the profile is now complete (has UUID and Name) (if you get rate limited, this operation may fail)"},{"name":"complete","params":[{"name":"textures","type":"boolean","desc":"controls if we should fill the profile with texture properties"},{"name":"onlineMode","type":"boolean","desc":"Treat this server as online mode or not"}],"desc":"If this profile is not complete, then make the API call to complete it.\nThis is a blocking operation and should be done asynchronously.\n\nOptionally will also fill textures.","ret":"If the profile is now complete (has UUID and Name) (if you get rate limited, this operation may fail)"},{"name":"update","params":[],"desc":"Produces an updated player profile based on this profile.\n<p>\nThis tries to produce a completed profile by filling in missing\nproperties (name, unique id, textures, etc.), and updates existing\nproperties (e.g. name, textures, etc.) to their official and up-to-date\nvalues. This operation does not alter the current profile, but produces a\nnew updated {@link PlayerProfile}.\n<p>\nIf no player exists for the unique id or name of this profile, this\noperation yields a profile that is equal to the current profile, which\nmight not be complete.\n<p>\nThis is an asynchronous operation: Updating the profile can result in an\noutgoing connection in another thread in order to fetch the latest\nprofile properties. The returned {@link CompletableFuture} will be\ncompleted once the updated profile is available. In order to not block\nthe server's main thread, you should not wait for the result of the\nreturned CompletableFuture on the server's main thread. Instead, if you\nwant to do something with the updated player profile on the server's main\nthread once it is available, you could do something like this:\n<pre>\nprofile.update().thenAcceptAsync(updatedProfile -> {\n    // Do something with the updated profile:\n    // ...\n}, runnable -> Bukkit.getScheduler().runTask(plugin, runnable));\n</pre>","ret":""},{"name":"hasTextures","params":[],"desc":"Whether this Profile has textures associated to it","ret":"If it has a textures property"}],"desc":"Represents a players profile for the game, such as UUID, Name, and textures."},{"FQCN":"com.destroystokyo.paper.profile.ProfileProperty","methods":[{"name":"getName","params":[],"desc":"","ret":"The property name, ie \"textures\""},{"name":"getValue","params":[],"desc":"","ret":"The property value, likely to be base64 encoded"},{"name":"getSignature","params":[],"desc":"","ret":"A signature from Mojang for signed properties"},{"name":"isSigned","params":[],"desc":"","ret":"If this property has a signature or not"}],"desc":"Represents a property on a {@link PlayerProfile}"},{"FQCN":"com.destroystokyo.paper.inventory.ItemStackRecipeChoice","methods":[],"desc":"Allows crafting Items that require full matching itemstacks to complete the recipe for custom items"},{"FQCN":"com.destroystokyo.paper.inventory.meta.ArmorStandMeta","methods":[{"name":"isInvisible","params":[],"desc":"Gets whether the ArmorStand should be invisible when spawned","ret":"true if this should be invisible"},{"name":"hasNoBasePlate","params":[],"desc":"Gets whether this ArmorStand should have no base plate when spawned","ret":"true if it will not have a base plate"},{"name":"shouldShowArms","params":[],"desc":"Gets whether this ArmorStand should show arms when spawned","ret":"true if it will show arms"},{"name":"isSmall","params":[],"desc":"Gets whether this ArmorStand will be small when spawned","ret":"true if it will be small"},{"name":"isMarker","params":[],"desc":"Gets whether this ArmorStand will be a marker when spawned\nThe exact details of this flag are an implementation detail","ret":"true if it will be a marker"},{"name":"setInvisible","params":[{"name":"invisible","type":"boolean","desc":"true if set invisible"}],"desc":"Sets that this ArmorStand should be invisible when spawned","ret":""},{"name":"setNoBasePlate","params":[{"name":"noBasePlate","type":"boolean","desc":"true if no base plate"}],"desc":"Sets that this ArmorStand should have no base plate when spawned","ret":""},{"name":"setShowArms","params":[{"name":"showArms","type":"boolean","desc":"true if show arms"}],"desc":"Sets that this ArmorStand should show arms when spawned","ret":""},{"name":"setSmall","params":[{"name":"small","type":"boolean","desc":"true if small"}],"desc":"Sets that this ArmorStand should be small when spawned","ret":""},{"name":"setMarker","params":[{"name":"marker","type":"boolean","desc":"true if a marker"}],"desc":"Sets that this ArmorStand should be a marker when spawned\nThe exact details of this flag are an implementation detail","ret":""}],"desc":""},{"FQCN":"com.destroystokyo.paper.Namespaced","methods":[{"name":"getNamespace","params":[],"desc":"Gets the namespace this resource is a part of\n<p>\nThis is contractually obligated to only contain lowercase alphanumeric characters,\nperiods, underscores, and hyphens.","ret":"resource namespace"},{"name":"getKey","params":[],"desc":"Gets the key corresponding to this resource\n<p>\nThis is contractually obligated to only contain lowercase alphanumeric characters,\nperiods, underscores, hyphens, and forward slashes.","ret":"resource key"}],"desc":"Represents a namespaced resource, see {@link org.bukkit.NamespacedKey} for single elements\nor {@link com.destroystokyo.paper.NamespacedTag} for a collection of elements\n\nNamespaces may only contain lowercase alphanumeric characters, periods,\nunderscores, and hyphens.\n<p>\nKeys may only contain lowercase alphanumeric characters, periods,\nunderscores, hyphens, and forward slashes.\n<p>\nYou should not be implementing this interface yourself, use {@link org.bukkit.NamespacedKey}\nor {@link com.destroystokyo.paper.NamespacedTag} as needed instead."},{"FQCN":"com.destroystokyo.paper.SkinParts","methods":[],"desc":""},{"FQCN":"com.destroystokyo.paper.ClientOption","methods":[],"desc":""},{"FQCN":"com.destroystokyo.paper.exception.ServerPluginMessageException","methods":[{"name":"getChannel","params":[],"desc":"Gets the channel to which the error occurred from receiving data from","ret":"exception channel"},{"name":"getData","params":[],"desc":"Gets the data to which the error occurred from","ret":"exception data"},{"name":"getPlayer","params":[],"desc":"Gets the player which the plugin message causing the exception originated from","ret":"exception player"}],"desc":"Thrown when an incoming plugin message channel throws an exception"},{"FQCN":"com.destroystokyo.paper.exception.ServerInternalException","methods":[],"desc":"Thrown when the internal server throws a recoverable exception."},{"FQCN":"com.destroystokyo.paper.exception.ServerPluginException","methods":[{"name":"getResponsiblePlugin","params":[],"desc":"Gets the plugin which is directly responsible for the exception being thrown","ret":"plugin which is responsible for the exception throw"}],"desc":"Wrapper exception for all cases to which a plugin can be immediately blamed for"},{"FQCN":"com.destroystokyo.paper.exception.ServerTabCompleteException","methods":[],"desc":"Called when a tab-complete request throws an exception"},{"FQCN":"com.destroystokyo.paper.exception.ServerSchedulerException","methods":[{"name":"getTask","params":[],"desc":"Gets the task which threw the exception","ret":"exception throwing task"}],"desc":"Thrown when a plugin's scheduler fails with an exception"},{"FQCN":"com.destroystokyo.paper.exception.ServerCommandException","methods":[{"name":"getCommand","params":[],"desc":"Gets the command which threw the exception","ret":"exception throwing command"},{"name":"getCommandSender","params":[],"desc":"Gets the command sender which executed the command request","ret":"command sender of exception thrown command request"},{"name":"getArguments","params":[],"desc":"Gets the arguments which threw the exception for the command","ret":"arguments of exception thrown command request"}],"desc":"Thrown when a command throws an exception"},{"FQCN":"com.destroystokyo.paper.exception.ServerPluginEnableDisableException","methods":[],"desc":"Thrown whenever there is an exception with any enabling or disabling of plugins."},{"FQCN":"com.destroystokyo.paper.exception.ServerException","methods":[],"desc":"Wrapper exception for all exceptions that are thrown by the server."},{"FQCN":"com.destroystokyo.paper.exception.ServerEventException","methods":[{"name":"getListener","params":[],"desc":"Gets the listener which threw the exception","ret":"event listener"},{"name":"getEvent","params":[],"desc":"Gets the event which caused the exception","ret":"event"}],"desc":"Exception thrown when a server event listener throws an exception"},{"FQCN":"com.destroystokyo.paper.event.entity.EntityTeleportEndGatewayEvent","methods":[{"name":"getGateway","params":[],"desc":"The gateway triggering the teleport","ret":"EndGateway used"}],"desc":"Fired any time an entity attempts to teleport in an end gateway"},{"FQCN":"com.destroystokyo.paper.event.entity.EnderDragonFlameEvent","methods":[{"name":"getEntity","params":[],"desc":"The enderdragon involved in this event","ret":""},{"name":"getAreaEffectCloud","params":[],"desc":"","ret":"The area effect cloud spawned in this collision"}],"desc":"Fired when an EnderDragon spawns an AreaEffectCloud by shooting flames"},{"FQCN":"com.destroystokyo.paper.event.entity.WitchConsumePotionEvent","methods":[{"name":"getPotion","params":[],"desc":"","ret":"the potion the witch will consume and have the effects applied."},{"name":"setPotion","params":[{"name":"potion","type":"ItemStack","desc":"The potion"}],"desc":"Sets the potion to be consumed and applied to the witch.","ret":""},{"name":"isCancelled","params":[],"desc":"","ret":"Event was cancelled or potion was {@code null}"}],"desc":"Fired when a witch consumes the potion in their hand to buff themselves."},{"FQCN":"com.destroystokyo.paper.event.entity.EndermanAttackPlayerEvent","methods":[{"name":"getEntity","params":[],"desc":"The enderman considering attacking","ret":"The enderman considering attacking"},{"name":"getPlayer","params":[],"desc":"The player the Enderman is considering attacking","ret":"The player the Enderman is considering attacking"},{"name":"isCancelled","params":[],"desc":"","ret":"If cancelled, the enderman will not attack"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":""}],"desc":"{@inheritDoc}\n<br>\nCancels if the Enderman will attack this player","ret":""}],"desc":"Fired when an Enderman determines if it should attack a player or not.\n<p>\nStarts off cancelled if the player is wearing a pumpkin head or is not looking\nat the Enderman, according to Vanilla rules."},{"FQCN":"com.destroystokyo.paper.event.entity.ProjectileCollideEvent","methods":[{"name":"getEntity","params":[],"desc":"Get the projectile that collided","ret":"the projectile that collided"},{"name":"getCollidedWith","params":[],"desc":"Get the entity the projectile collided with","ret":"the entity collided with"}],"desc":"Called when a projectile collides with an entity\n<p>\nThis event is called <b>before</b> {@link EntityDamageByEntityEvent}, and cancelling it will allow the projectile to continue flying"},{"FQCN":"com.destroystokyo.paper.event.entity.TurtleLayEggEvent","methods":[{"name":"getEntity","params":[],"desc":"The turtle laying the eggs","ret":"The turtle"},{"name":"getLocation","params":[],"desc":"Get the location where the eggs are being laid","ret":"Location of eggs"},{"name":"getEggCount","params":[],"desc":"Get the number of eggs being laid","ret":"Number of eggs"},{"name":"setEggCount","params":[{"name":"eggCount","type":"int","desc":"Number of eggs"}],"desc":"Set the number of eggs being laid","ret":""}],"desc":"Fired when a Turtle lays eggs"},{"FQCN":"com.destroystokyo.paper.event.entity.PreCreatureSpawnEvent","methods":[{"name":"getSpawnLocation","params":[],"desc":"","ret":"The location this creature is being spawned at"},{"name":"getType","params":[],"desc":"","ret":"The type of creature being spawned"},{"name":"getReason","params":[],"desc":"","ret":"Reason this creature is spawning (ie, NATURAL vs SPAWNER)"},{"name":"shouldAbortSpawn","params":[],"desc":"","ret":"If the spawn process should be aborted vs trying more attempts"},{"name":"setShouldAbortSpawn","params":[{"name":"shouldAbortSpawn","type":"boolean","desc":"Set if the spawn process should be aborted vs trying more attempts"}],"desc":"Set this if you are more blanket blocking all types of these spawns, and wish to abort the spawn process from\ntrying more attempts after this cancellation.","ret":""},{"name":"isCancelled","params":[],"desc":"","ret":"If the spawn of this creature is cancelled or not"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":"{@code true} if you wish to cancel this event, and abort the spawn of this creature"}],"desc":"Cancelling this event is more efficient than cancelling {@link CreatureSpawnEvent}","ret":""}],"desc":"WARNING: This event only fires for a limited number of cases, and not for every case that {@link CreatureSpawnEvent} does.\n<p>\nYou should still listen to {@link CreatureSpawnEvent} as a backup, and only use this event as an \"enhancement\".\nThe intent of this event is to improve server performance, so it fires even if the spawning might fail later, for\nexample when the entity would be unable to spawn due to limited space or lighting.\n<p>\nCurrently: NATURAL and SPAWNER based reasons. <!-- Please submit a Pull Request for future additions. -->\nAlso, Plugins that replace Entity Registrations with their own custom entities might not fire this event."},{"FQCN":"com.destroystokyo.paper.event.entity.ThrownEggHatchEvent","methods":[{"name":"getEgg","params":[],"desc":"Gets the egg involved in this event.","ret":"the egg involved in this event"},{"name":"isHatching","params":[],"desc":"Gets whether the egg is hatching or not. Will be what the server\nwould've done without interaction.","ret":"boolean Whether the egg is going to hatch or not"},{"name":"setHatching","params":[{"name":"hatching","type":"boolean","desc":"{@code true} if you want the egg to hatch, {@code false} if you want it\n    not to"}],"desc":"Sets whether the egg will hatch or not.","ret":""},{"name":"getHatchingType","params":[],"desc":"Get the type of the mob being hatched ({@link EntityType#CHICKEN} by default)","ret":"The type of the mob being hatched by the egg"},{"name":"setHatchingType","params":[{"name":"hatchType","type":"EntityType","desc":"The type of the mob being hatched by the egg"}],"desc":"Change the type of mob being hatched by the egg","ret":""},{"name":"getNumHatches","params":[],"desc":"Get the number of mob hatches from the egg. By default the number will\nbe the number the server would've done\n<ul>\n <li>7/8 chance of being 0\n <li>31/256 ~= 1/8 chance to be 1\n <li>1/256 chance to be 4\n</ul>","ret":"The number of mobs going to be hatched by the egg"},{"name":"setNumHatches","params":[{"name":"numHatches","type":"byte","desc":"The number of mobs coming out of the egg"}],"desc":"Change the number of mobs coming out of the hatched egg\n<p>\nThe boolean hatching will override this number. I.e. If hatching is\n{@code false}, this number will not matter","ret":""}],"desc":"Called when a thrown egg might hatch.\n<p>\nThis event fires for all thrown eggs that may hatch, players, dispensers, etc."},{"FQCN":"com.destroystokyo.paper.event.entity.TurtleGoHomeEvent","methods":[{"name":"getEntity","params":[],"desc":"The turtle going home","ret":"The turtle"}],"desc":"Fired when a Turtle decides to go home"},{"FQCN":"com.destroystokyo.paper.event.entity.EnderDragonFireballHitEvent","methods":[{"name":"getEntity","params":[],"desc":"The fireball involved in this event","ret":""},{"name":"getTargets","params":[],"desc":"The living entities hit by fireball","ret":"the targets"},{"name":"getAreaEffectCloud","params":[],"desc":"","ret":"The area effect cloud spawned in this collision"}],"desc":"Fired when a DragonFireball collides with a block/entity and spawns an AreaEffectCloud"},{"FQCN":"com.destroystokyo.paper.event.entity.SlimeWanderEvent","methods":[],"desc":"Fired when a Slime decides to start wandering.\n<p>\nThis event does not fire for the entity's actual movement. Only when it\nis choosing to start moving."},{"FQCN":"com.destroystokyo.paper.event.entity.EntityKnockbackByEntityEvent","methods":[{"name":"getEntity","params":[],"desc":"","ret":"the entity which was knocked back"},{"name":"getKnockbackStrength","params":[],"desc":"","ret":"the original knockback strength."},{"name":"getHitBy","params":[],"desc":"","ret":"the Entity which hit"}],"desc":"Fired when an Entity is knocked back by the hit of another Entity. The acceleration\nvector can be modified. If this event is cancelled, the entity is not knocked back."},{"FQCN":"com.destroystokyo.paper.event.entity.WitchReadyPotionEvent","methods":[{"name":"getPotion","params":[],"desc":"","ret":"the potion the witch is readying to use"},{"name":"setPotion","params":[{"name":"potion","type":"ItemStack","desc":"The potion"}],"desc":"Sets the potion the which is going to hold and use","ret":""}],"desc":""},{"FQCN":"com.destroystokyo.paper.event.entity.EntityAddToWorldEvent","methods":[{"name":"getWorld","params":[],"desc":"","ret":"The world that the entity is being added to"}],"desc":"Fired any time an entity is being added to the world for any reason (including a chunk loading).\n<p>\nNot to be confused with {@link CreatureSpawnEvent}"},{"FQCN":"com.destroystokyo.paper.event.entity.PlayerNaturallySpawnCreaturesEvent","methods":[{"name":"getSpawnRadius","params":[],"desc":"","ret":"The radius of chunks around this player to be included in natural spawn selection"},{"name":"setSpawnRadius","params":[{"name":"radius","type":"byte","desc":"The radius of chunks around this player to be included in natural spawn selection"}],"desc":"","ret":""},{"name":"isCancelled","params":[],"desc":"","ret":"If this players chunks will be excluded from natural spawns"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":"{@code true} if you wish to cancel this event, and not include this players chunks for natural spawning"}],"desc":"","ret":""}],"desc":"Fired when the server is calculating what chunks to try to spawn monsters in every Monster Spawn Tick event"},{"FQCN":"com.destroystokyo.paper.event.entity.SlimeTargetLivingEntityEvent","methods":[{"name":"getTarget","params":[],"desc":"Get the targeted entity","ret":"Targeted entity"}],"desc":"Fired when a Slime decides to change direction to target a LivingEntity.\n<p>\nThis event does not fire for the entity's actual movement. Only when it\nis choosing to start moving."},{"FQCN":"com.destroystokyo.paper.event.entity.EntityTransformedEvent","methods":[{"name":"getTransformed","params":[],"desc":"The entity after it has transformed","ret":"Transformed entity"},{"name":"getReason","params":[],"desc":"","ret":"The reason for the transformation"}],"desc":"Fired when an entity transforms into another entity\n<p>\nIf the event is cancelled, the entity will not transform"},{"FQCN":"com.destroystokyo.paper.event.entity.PreSpawnerSpawnEvent","methods":[],"desc":"Called before an entity is spawned into a world by a spawner.\n<p>\nThis only includes the spawner's location and not the full BlockState snapshot for performance reasons.\nIf you really need it you have to get the spawner yourself."},{"FQCN":"com.destroystokyo.paper.event.entity.TurtleStartDiggingEvent","methods":[{"name":"getEntity","params":[],"desc":"The turtle digging","ret":"The turtle"},{"name":"getLocation","params":[],"desc":"Get the location where the turtle is digging","ret":"Location where digging"}],"desc":"Fired when a Turtle starts digging to lay eggs"},{"FQCN":"com.destroystokyo.paper.event.entity.PhantomPreSpawnEvent","methods":[{"name":"getSpawningEntity","params":[],"desc":"Get the entity this phantom is spawning for","ret":"the Entity"}],"desc":"Called when a phantom is spawned for an exhausted player"},{"FQCN":"com.destroystokyo.paper.event.entity.EndermanEscapeEvent","methods":[{"name":"getReason","params":[],"desc":"","ret":"The reason the enderman is trying to escape"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":""}],"desc":"Cancels the escape.\n<p>\nIf this escape normally would of resulted in damage avoidance such as indirect,\nthe enderman will now take damage.","ret":""}],"desc":""},{"FQCN":"com.destroystokyo.paper.event.entity.EnderDragonShootFireballEvent","methods":[{"name":"getEntity","params":[],"desc":"The enderdragon shooting the fireball","ret":""},{"name":"getFireball","params":[],"desc":"","ret":"The fireball being shot"}],"desc":"Fired when an EnderDragon shoots a fireball"},{"FQCN":"com.destroystokyo.paper.event.entity.ExperienceOrbMergeEvent","methods":[{"name":"getMergeTarget","params":[],"desc":"","ret":"The orb that will absorb the other experience orb"},{"name":"getMergeSource","params":[],"desc":"","ret":"The orb that is subject to being removed and merged into the target orb"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":"{@code true} if you wish to cancel this event, and prevent the orbs from merging"}],"desc":"","ret":""}],"desc":"Fired anytime the server is about to merge 2 experience orbs into one"},{"FQCN":"com.destroystokyo.paper.event.entity.SlimeChangeDirectionEvent","methods":[{"name":"getNewYaw","params":[],"desc":"Get the new chosen yaw","ret":"Chosen yaw"},{"name":"setNewYaw","params":[{"name":"yaw","type":"float","desc":"Chosen yaw"}],"desc":"Set the new chosen yaw","ret":""}],"desc":"Fired when a Slime decides to change its facing direction.\n<p>\nThis event does not fire for the entity's actual movement. Only when it\nis choosing to change direction."},{"FQCN":"com.destroystokyo.paper.event.entity.EntityRemoveFromWorldEvent","methods":[{"name":"getWorld","params":[],"desc":"","ret":"The world that the entity is being removed from"}],"desc":"Fired any time an entity is being removed from a world for any reason (including a chunk unloading).\nNote: The entity is updated prior to this event being called, as such, the entity's world may not be equal to {@link #getWorld()}."},{"FQCN":"com.destroystokyo.paper.event.entity.EntityJumpEvent","methods":[],"desc":"Called when an entity jumps\n<p>\nCancelling the event will stop the entity from jumping"},{"FQCN":"com.destroystokyo.paper.event.entity.CreeperIgniteEvent","methods":[],"desc":"Called when a Creeper is ignited either by a\nflint and steel, {@link Creeper#ignite()} or\n{@link Creeper#setIgnited(boolean)}."},{"FQCN":"com.destroystokyo.paper.event.entity.SlimeSwimEvent","methods":[],"desc":"Fired when a Slime decides to start jumping while swimming in water/lava.\n<p>\nThis event does not fire for the entity's actual movement. Only when it\nis choosing to start jumping."},{"FQCN":"com.destroystokyo.paper.event.entity.SkeletonHorseTrapEvent","methods":[],"desc":"Event called when a player gets close to a skeleton horse and triggers the lightning trap"},{"FQCN":"com.destroystokyo.paper.event.entity.EntityZapEvent","methods":[{"name":"getBolt","params":[],"desc":"Gets the lightning bolt that is striking the entity.","ret":"The lightning bolt responsible for this event"},{"name":"getReplacementEntity","params":[],"desc":"Gets the entity that will replace the struck entity.","ret":"The entity that will replace the struck entity"}],"desc":"Fired when lightning strikes an entity"},{"FQCN":"com.destroystokyo.paper.event.entity.EntityPathfindEvent","methods":[{"name":"getEntity","params":[],"desc":"The Entity that is pathfinding.","ret":"The Entity that is pathfinding."},{"name":"getTargetEntity","params":[],"desc":"If the Entity is trying to pathfind to an entity, this is the entity in relation.\n<br>\nOtherwise this will return {@code null}.","ret":"The entity target or {@code null}"},{"name":"getLoc","params":[],"desc":"The Location of where the entity is about to move to.\n<br>\nNote that if the target happened to of been an entity","ret":"Location of where the entity is trying to pathfind to."}],"desc":"Fired when an Entity decides to start moving towards a location.\n<p>\nThis event does not fire for the entities actual movement. Only when it\nis choosing to start moving to a location."},{"FQCN":"com.destroystokyo.paper.event.entity.SlimePathfindEvent","methods":[{"name":"getEntity","params":[],"desc":"The Slime that is pathfinding.","ret":"The Slime that is pathfinding."}],"desc":"Fired when a Slime decides to start pathfinding.\n<p>\nThis event does not fire for the entity's actual movement. Only when it\nis choosing to start moving."},{"FQCN":"com.destroystokyo.paper.event.entity.WitchThrowPotionEvent","methods":[{"name":"getTarget","params":[],"desc":"","ret":"The target of the potion"},{"name":"getPotion","params":[],"desc":"","ret":"The potion the witch will throw at a player"},{"name":"setPotion","params":[{"name":"potion","type":"ItemStack","desc":"The potion"}],"desc":"Sets the potion to be thrown at a player","ret":""},{"name":"isCancelled","params":[],"desc":"","ret":"Event was cancelled or potion was {@code null}"}],"desc":"Fired when a witch throws a potion at a player"},{"FQCN":"com.destroystokyo.paper.event.server.AsyncTabCompleteEvent","methods":[{"name":"getSender","params":[],"desc":"Get the sender completing this command.","ret":"the {@link CommandSender} instance"},{"name":"getCompletions","params":[],"desc":"The list of completions which will be offered to the sender, in order.\nThis list is mutable and reflects what will be offered.\n<p>\nIf this collection is not empty after the event is fired, then\nthe standard process of calling {@link Command#tabComplete(CommandSender, String, String[])}\nor current player names will not be called.","ret":"a list of offered completions"},{"name":"setCompletions","params":[{"name":"completions","type":"List<String>","desc":"the new completions"}],"desc":"Set the completions offered, overriding any already set.\nIf this collection is not empty after the event is fired, then\nthe standard process of calling {@link Command#tabComplete(CommandSender, String, String[])}\nor current player names will not be called.\n<p>\nThe passed collection will be cloned to a new {@code List}. You must call {{@link #getCompletions()}} to mutate from here","ret":""},{"name":"completions","params":[],"desc":"The list of {@link Completion completions} which will be offered to the sender, in order.\nThis list is mutable and reflects what will be offered.\n<p>\nIf this collection is not empty after the event is fired, then\nthe standard process of calling {@link Command#tabComplete(CommandSender, String, String[])}\nor current player names will not be called.","ret":"a list of offered completions"},{"name":"completions","params":[{"name":"newCompletions","type":"List<Completion>","desc":"the new completions"}],"desc":"Set the {@link Completion completions} offered, overriding any already set.\nIf this collection is not empty after the event is fired, then\nthe standard process of calling {@link Command#tabComplete(CommandSender, String, String[])}\nor current player names will not be called.\n<p>\nThe passed collection will be cloned to a new {@code List}. You must call {@link #completions()} to mutate from here","ret":""},{"name":"getBuffer","params":[],"desc":"Return the entire buffer which formed the basis of this completion.","ret":"command buffer, as entered"},{"name":"isCommand","params":[],"desc":"","ret":"{@code true} if it is a command being tab completed, {@code false} if it is a chat message."},{"name":"getLocation","params":[],"desc":"","ret":"The position looked at by the sender, or {@code null} if none"},{"name":"isHandled","params":[],"desc":"If {@code true}, the standard process of calling {@link Command#tabComplete(CommandSender, String, String[])}\nor current player names will not be called.","ret":"Is completions considered handled. Always {@code true} if completions is not empty."},{"name":"setHandled","params":[{"name":"handled","type":"boolean","desc":"if this completion should be marked as being handled"}],"desc":"Sets whether to consider the completion request handled.\nIf {@code true}, the standard process of calling {@link Command#tabComplete(CommandSender, String, String[])}\nor current player names will not be called.","ret":""},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":""}],"desc":"{@inheritDoc}\n<br>\nWill provide no completions, and will not fire the synchronous process","ret":""}],"desc":"Allows plugins to compute tab completion results asynchronously.\n<p>\nIf this event provides completions, then the standard synchronous process\nwill not be fired to populate the results.\nHowever, the synchronous TabCompleteEvent will fire with the Async results.\n<p>\nOnly 1 process will be allowed to provide completions, the Async Event, or the standard process."},{"FQCN":"com.destroystokyo.paper.event.server.WhitelistToggleEvent","methods":[{"name":"isEnabled","params":[],"desc":"Gets whether whitelist is going to be enabled or not","ret":"Whether whitelist is going to be enabled or not"}],"desc":"This event is fired when whitelist is toggled"},{"FQCN":"com.destroystokyo.paper.event.server.ServerTickEndEvent","methods":[{"name":"getTickNumber","params":[],"desc":"","ret":"What tick this was since start (first tick = 1)"},{"name":"getTickDuration","params":[],"desc":"","ret":"Time in milliseconds of how long this tick took"},{"name":"getTimeRemaining","params":[],"desc":"Amount of nanoseconds remaining before the next tick should start.\n<p>\nIf this value is negative, then that means the server has exceeded the tick time limit and TPS has been lost.\n<p>\nMethod will continuously return the updated time remaining value. (return value is not static)","ret":"Amount of nanoseconds remaining before the next tick should start"}],"desc":"Called when the server has finished ticking the main loop"},{"FQCN":"com.destroystokyo.paper.event.server.GS4QueryEvent","methods":[{"name":"getQueryType","params":[],"desc":"Get query type","ret":"query type"},{"name":"getQuerierAddress","params":[],"desc":"Get querier address","ret":"querier address"},{"name":"getResponse","params":[],"desc":"Get query response","ret":"query response"},{"name":"setResponse","params":[{"name":"response","type":"QueryResponse","desc":"query response"}],"desc":"Set query response","ret":""}],"desc":"This event is fired if server is getting queried over GS4 Query protocol.\n<br>\nAdapted from Velocity's ProxyQueryEvent"},{"FQCN":"com.destroystokyo.paper.event.server.ServerExceptionEvent","methods":[{"name":"getException","params":[],"desc":"Gets the wrapped exception that was thrown.","ret":"Exception thrown"}],"desc":"Called whenever an exception is thrown in a recoverable section of the server."},{"FQCN":"com.destroystokyo.paper.event.server.ServerTickStartEvent","methods":[{"name":"getTickNumber","params":[],"desc":"","ret":"What tick this is going be since start (first tick = 1)"}],"desc":""},{"FQCN":"com.destroystokyo.paper.event.server.PaperServerListPingEvent","methods":[{"name":"getClient","params":[],"desc":"Returns the {@link StatusClient} pinging the server.","ret":"The client"},{"name":"getNumPlayers","params":[],"desc":"{@inheritDoc}\n\n<p>Returns {@code -1} if players are hidden using\n{@link #shouldHidePlayers()}.</p>","ret":""},{"name":"setNumPlayers","params":[{"name":"numPlayers","type":"int","desc":"The number of online players"}],"desc":"Sets the number of players displayed in the server list.\n<p>\nNote that this won't have any effect if {@link #shouldHidePlayers()}\nis enabled.","ret":""},{"name":"getMaxPlayers","params":[],"desc":"{@inheritDoc}\n<p>\nReturns {@code -1} if players are hidden using\n{@link #shouldHidePlayers()}.","ret":""},{"name":"shouldHidePlayers","params":[],"desc":"Returns whether all player related information is hidden in the server\nlist. This will cause {@link #getNumPlayers()}, {@link #getMaxPlayers()}\nand {@link #getPlayerSample()} to be skipped in the response.\n<p>\nThe Vanilla Minecraft client will display the player count as {@code ???}\nwhen this option is enabled.","ret":"{@code true} if the player count is hidden"},{"name":"setHidePlayers","params":[{"name":"hidePlayers","type":"boolean","desc":"{@code true} if the player count should be hidden"}],"desc":"Sets whether all player related information is hidden in the server\nlist. This will cause {@link #getNumPlayers()}, {@link #getMaxPlayers()}\nand {@link #getPlayerSample()} to be skipped in the response.\n<p>\nThe Vanilla Minecraft client will display the player count as {@code ???}\nwhen this option is enabled.","ret":""},{"name":"getPlayerSample","params":[],"desc":"Returns a mutable list of {@link PlayerProfile} that will be displayed\nas online players on the client.\n<p>\nThe Vanilla Minecraft client will display them when hovering the\nplayer count with the mouse.","ret":"The mutable player sample list"},{"name":"getVersion","params":[],"desc":"Returns the version that will be sent as server version on the client.","ret":"The server version"},{"name":"setVersion","params":[{"name":"version","type":"String","desc":"The server version"}],"desc":"Sets the version that will be sent as server version to the client.","ret":""},{"name":"getProtocolVersion","params":[],"desc":"Returns the protocol version that will be sent as the protocol version\nof the server to the client.","ret":"The protocol version of the server, or {@code -1} if the server\nhas not finished initialization yet"},{"name":"setProtocolVersion","params":[{"name":"protocolVersion","type":"int","desc":"The protocol version of the server"}],"desc":"Sets the protocol version that will be sent as the protocol version\nof the server to the client.","ret":""},{"name":"getServerIcon","params":[],"desc":"Gets the server icon sent to the client.","ret":"The icon to send to the client, or {@code null} for none"},{"name":"setServerIcon","params":[{"name":"icon","type":"CachedServerIcon","desc":"The icon to send to the client, or {@code null} for none"}],"desc":"Sets the server icon sent to the client.","ret":""},{"name":"isCancelled","params":[],"desc":"{@inheritDoc}\n<p>\nCancelling this event will cause the connection to be closed immediately,\nwithout sending a response to the client.","ret":""},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":""}],"desc":"{@inheritDoc}\n<p>\nCancelling this event will cause the connection to be closed immediately,\nwithout sending a response to the client.","ret":""},{"name":"iterator","params":[],"desc":"{@inheritDoc}\n<p>\n<b>Note:</b> For compatibility reasons, this method will return all\nonline players, not just the ones referenced in {@link #getPlayerSample()}.\nRemoving a player will:\n\n<ul>\n    <li>Decrement the online player count (if and only if) the player\n    count wasn't changed by another plugin before.</li>\n    <li>Remove all entries from {@link #getPlayerSample()} that refer to\n    the removed player (based on their {@link UUID}).</li>\n</ul>","ret":""}],"desc":"Extended version of {@link ServerListPingEvent} that allows full control\nof the response sent to the client."},{"FQCN":"com.destroystokyo.paper.event.profile.LookupProfileEvent","methods":[{"name":"getPlayerProfile","params":[],"desc":"","ret":"The profile that was recently looked up. This profile can be mutated"}],"desc":"Allows a plugin to be notified anytime AFTER a Profile has been looked up from the Mojang API\nThis is an opportunity to view the response and potentially cache things.\n<p>\nNo guarantees are made about thread execution context for this event. If you need to know, check\n{@link Event#isAsynchronous()}"},{"FQCN":"com.destroystokyo.paper.event.profile.FillProfileEvent","methods":[{"name":"getPlayerProfile","params":[],"desc":"","ret":"The Profile that had properties filled"},{"name":"getProperties","params":[],"desc":"Same as .getPlayerProfile().getProperties()","ret":"The new properties on the profile."}],"desc":"Fired once a profiles additional properties (such as textures) has been filled"},{"FQCN":"com.destroystokyo.paper.event.profile.ProfileWhitelistVerifyEvent","methods":[{"name":"getKickMessage","params":[],"desc":"","ret":"the currently planned message to send to the user if they are not whitelisted"},{"name":"setKickMessage","params":[{"name":"kickMessage","type":"String","desc":"The message to send to the player on kick if not whitelisted. May set to {@code null} to use the server configured default"}],"desc":"","ret":""},{"name":"kickMessage","params":[],"desc":"","ret":"the currently planned message to send to the user if they are not whitelisted"},{"name":"kickMessage","params":[{"name":"kickMessage","type":"Component","desc":"The message to send to the player on kick if not whitelisted. May set to {@code null} to use the server configured default"}],"desc":"","ret":""},{"name":"getPlayerProfile","params":[],"desc":"","ret":"The profile of the player trying to connect"},{"name":"isWhitelisted","params":[],"desc":"","ret":"Whether the player is whitelisted to play on this server (whitelist may be off is why its true)"},{"name":"setWhitelisted","params":[{"name":"whitelisted","type":"boolean","desc":"The new whitelisted state"}],"desc":"Changes the players whitelisted state. {@code false} will deny the login","ret":""},{"name":"isOp","params":[],"desc":"","ret":"if the player obtained whitelist status by having op"},{"name":"isWhitelistEnabled","params":[],"desc":"","ret":"if the server even has whitelist on"}],"desc":"Fires when the server needs to verify if a player is whitelisted.\n<p>\nPlugins may override/control the servers whitelist with this event,\nand dynamically change the kick message."},{"FQCN":"com.destroystokyo.paper.event.profile.PreLookupProfileEvent","methods":[{"name":"getName","params":[],"desc":"","ret":"Name of the profile"},{"name":"getUUID","params":[],"desc":"If this value is left {@code null} by the completion of the event call, then the server will\ntrigger a call to the Mojang API to look up the UUID (Network Request), and subsequently, fire a\n{@link LookupProfileEvent}","ret":"The UUID of the profile if it has already been provided by a plugin"},{"name":"setUUID","params":[{"name":"uuid","type":"UUID","desc":"the UUID to set for the profile or {@code null} to reset"}],"desc":"Sets the UUID for this player name. This will skip the initial API call to find the players UUID.\n<p>\nHowever, if Profile Properties are needed by the server, you must also set them or else an API call might still be made.","ret":""},{"name":"getProfileProperties","params":[],"desc":"","ret":"The currently pending pre-populated properties.\nAny property in this Set will be automatically prefilled on this Profile"},{"name":"setProfileProperties","params":[{"name":"properties","type":"Set<ProfileProperty>","desc":"The properties to add"}],"desc":"Clears any existing pre-populated properties and uses the supplied properties\nAny property in this Set will be automatically prefilled on this Profile","ret":""},{"name":"addProfileProperties","params":[{"name":"properties","type":"Set<ProfileProperty>","desc":"The properties to add"}],"desc":"Adds any properties currently missing to the pre-populated properties set, replacing any that already were set.\nAny property in this Set will be automatically prefilled on this Profile","ret":""}],"desc":"Allows a plugin to intercept a Profile Lookup for a Profile by name\n<p>\nAt the point of event fire, the UUID and properties are unset.\n<p>\nIf a plugin sets the UUID, and optionally the properties, the API call to look up the profile may be skipped.\n<p>\nNo guarantees are made about thread execution context for this event. If you need to know, check\n{@link Event#isAsynchronous()}"},{"FQCN":"com.destroystokyo.paper.event.profile.PreFillProfileEvent","methods":[{"name":"getPlayerProfile","params":[],"desc":"","ret":"The profile that needs its properties filled"},{"name":"setProperties","params":[{"name":"properties","type":"Collection<ProfileProperty>","desc":"The properties to set/append"}],"desc":"Sets the properties on the profile, avoiding the call to the Mojang API\nSame as .getPlayerProfile().setProperties(properties);","ret":""}],"desc":"Fired when the server is requesting to fill in properties of an incomplete profile, such as textures.\n<p>\nAllows plugins to pre-populate cached properties and avoid a call to the Mojang API"},{"FQCN":"com.destroystokyo.paper.event.inventory.PrepareGrindstoneEvent","methods":[],"desc":"Called when an item is put in a slot for grinding in a Grindstone"},{"FQCN":"com.destroystokyo.paper.event.inventory.PrepareResultEvent","methods":[{"name":"getResult","params":[],"desc":"Get result item, may be {@code null}.","ret":"result item"},{"name":"setResult","params":[{"name":"result","type":"ItemStack","desc":"result item"}],"desc":"Set result item, may be {@code null}.","ret":""}],"desc":"Called when an item is put in an inventory containing a result slot"},{"FQCN":"com.destroystokyo.paper.event.executor.asm.SafeClassDefiner","methods":[],"desc":""},{"FQCN":"com.destroystokyo.paper.event.executor.asm.ASMEventExecutorGenerator","methods":[],"desc":""},{"FQCN":"com.destroystokyo.paper.event.executor.asm.ClassDefiner","methods":[{"name":"isBypassAccessChecks","params":[],"desc":"Returns if the defined classes can bypass access checks","ret":"if classes bypass access checks"},{"name":"defineClass","params":[{"name":"parentLoader","type":"ClassLoader","desc":"the parent classloader"},{"name":"name","type":"String","desc":"the name of the class"},{"name":"data","type":"byte[]","desc":"the class data to load"}],"desc":"Define a class","ret":"the defined class"}],"desc":""},{"FQCN":"com.destroystokyo.paper.event.executor.StaticMethodHandleEventExecutor","methods":[],"desc":""},{"FQCN":"com.destroystokyo.paper.event.executor.MethodHandleEventExecutor","methods":[],"desc":""},{"FQCN":"com.destroystokyo.paper.event.block.BeaconEffectEvent","methods":[{"name":"getEffect","params":[],"desc":"Gets the potion effect being applied.","ret":"Potion effect"},{"name":"setEffect","params":[{"name":"effect","type":"PotionEffect","desc":"Potion effect"}],"desc":"Sets the potion effect that will be applied.","ret":""},{"name":"getPlayer","params":[],"desc":"Gets the player who the potion effect is being applied to.","ret":"Affected player"},{"name":"isPrimary","params":[],"desc":"Gets whether the effect is a primary beacon effect.","ret":"{@code true} if this event represents a primary effect"}],"desc":"Called when a beacon effect is being applied to a player."},{"FQCN":"com.destroystokyo.paper.event.block.AnvilDamagedEvent","methods":[{"name":"getDamageState","params":[],"desc":"Gets the new state of damage on the anvil","ret":"Damage state"},{"name":"setDamageState","params":[{"name":"damageState","type":"DamageState","desc":"Damage state"}],"desc":"Sets the new state of damage on the anvil","ret":""},{"name":"isBreaking","params":[],"desc":"Gets if anvil is breaking on this use","ret":"{@code true} if breaking"},{"name":"setBreaking","params":[{"name":"breaking","type":"boolean","desc":"{@code true} if breaking"}],"desc":"Sets if anvil is breaking on this use","ret":""}],"desc":"Called when an anvil is damaged from being used"},{"FQCN":"com.destroystokyo.paper.event.block.TNTPrimeEvent","methods":[{"name":"getReason","params":[],"desc":"Gets the TNT prime reason","ret":"Prime reason"},{"name":"getPrimerEntity","params":[],"desc":"Gets the TNT primer {@link Entity}.\n<p>\nIt's {@code null} if {@link #getReason()} is {@link PrimeReason#REDSTONE} or {@link PrimeReason#FIRE}.\nIt's not {@code null} if {@link #getReason()} is {@link PrimeReason#ITEM} or {@link PrimeReason#PROJECTILE}\nIt might be {@code null} if {@link #getReason()} is {@link PrimeReason#EXPLOSION}","ret":"The {@link Entity} who primed the TNT"},{"name":"isCancelled","params":[],"desc":"Gets whether spawning {@link TNTPrimed} should be cancelled or not","ret":"Whether spawning {@link TNTPrimed} should be cancelled or not"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":"whether spawning {@link TNTPrimed} should be cancelled or not"}],"desc":"Sets whether to cancel spawning {@link TNTPrimed} or not","ret":""}],"desc":"Called when TNT block is about to turn into {@link TNTPrimed}\n<p>\nCancelling it won't turn TNT into {@link TNTPrimed} and leaves\nthe TNT block as-is"},{"FQCN":"com.destroystokyo.paper.event.block.BlockDestroyEvent","methods":[{"name":"getEffectBlock","params":[],"desc":"Get the effect that will be played when the block is broken.","ret":"block break effect"},{"name":"setEffectBlock","params":[{"name":"effectBlock","type":"BlockData","desc":"block effect"}],"desc":"Sets the effect that will be played when the block is broken.\nNote: {@link BlockDestroyEvent#playEffect()} must be {@code true} in order for this effect to be\nplayed.","ret":""},{"name":"getNewState","params":[],"desc":"","ret":"The new state of this block (Air, or a Fluid type)"},{"name":"willDrop","params":[],"desc":"","ret":"If the server is going to drop the block in question with this destroy event"},{"name":"setWillDrop","params":[{"name":"willDrop","type":"boolean","desc":"If the server is going to drop the block in question with this destroy event"}],"desc":"","ret":""},{"name":"playEffect","params":[],"desc":"","ret":"If the server is going to play the sound effect for this destruction"},{"name":"setPlayEffect","params":[{"name":"playEffect","type":"boolean","desc":"If the server should play the sound effect for this destruction"}],"desc":"","ret":""},{"name":"isCancelled","params":[],"desc":"","ret":"If the event is cancelled, meaning the block will not be destroyed"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":""}],"desc":"If the event is cancelled, the block will remain in its previous state.","ret":""}],"desc":"Fired anytime the server intends to 'destroy' a block through some triggering reason.\nThis does not fire anytime a block is set to air, but only with more direct triggers such\nas physics updates, pistons, Entities changing blocks, commands set to \"Destroy\".\n<p>\nThis event is associated with the game playing a sound effect at the block in question, when\nsomething can be described as \"intend to destroy what is there\",\n<p>\nEvents such as leaves decaying, pistons retracting (where the block is moving), does NOT fire this event."},{"FQCN":"com.destroystokyo.paper.event.player.PlayerRecipeBookClickEvent","methods":[{"name":"getRecipe","params":[],"desc":"Gets the namespaced key of the recipe that was clicked by the player","ret":"The namespaced key of the recipe"},{"name":"setRecipe","params":[{"name":"recipe","type":"NamespacedKey","desc":"The key of the recipe that should be requested"}],"desc":"Changes what recipe is requested. This sets the requested recipe to the recipe with the given key","ret":""},{"name":"isMakeAll","params":[],"desc":"Gets a boolean which indicates whether the player requested to make the maximum amount of results. This is\n{@code true} if shift is pressed while the recipe is clicked in the recipe book","ret":"{@code true} if shift is pressed while the recipe is clicked"},{"name":"setMakeAll","params":[{"name":"makeAll","type":"boolean","desc":"{@code true} if the request should attempt to make the maximum amount of results"}],"desc":"Sets whether the maximum amount of results should be made. If this is {@code true}, the request is handled as if\nthe player had pressed shift while clicking on the recipe","ret":""}],"desc":"Called when a player clicks a recipe in the recipe book"},{"FQCN":"com.destroystokyo.paper.event.player.PlayerElytraBoostEvent","methods":[{"name":"getItemStack","params":[],"desc":"Get the firework itemstack used","ret":"ItemStack of firework"},{"name":"getFirework","params":[],"desc":"Get the firework entity that was spawned","ret":"Firework entity"},{"name":"shouldConsume","params":[],"desc":"Get whether to consume the firework or not","ret":"{@code true} to consume"},{"name":"setShouldConsume","params":[{"name":"consume","type":"boolean","desc":"{@code true} to consume"}],"desc":"Set whether to consume the firework or not","ret":""}],"desc":"Fired when a player boosts elytra flight with a firework"},{"FQCN":"com.destroystokyo.paper.event.player.PlayerPostRespawnEvent","methods":[{"name":"getRespawnedLocation","params":[],"desc":"Returns the location of the respawned player","ret":"location of the respawned player"},{"name":"isBedSpawn","params":[],"desc":"Checks if the player respawned to their bed","ret":"whether the player respawned to their bed"}],"desc":"Fired after a player has respawned"},{"FQCN":"com.destroystokyo.paper.event.player.PlayerTeleportEndGatewayEvent","methods":[{"name":"getGateway","params":[],"desc":"The gateway triggering the teleport","ret":"EndGateway used"}],"desc":"Fired when a teleport is triggered for an End Gateway"},{"FQCN":"com.destroystokyo.paper.event.player.PlayerAttackEntityCooldownResetEvent","methods":[{"name":"getCooledAttackStrength","params":[],"desc":"Get the value of the players cooldown attack strength when they initiated the attack","ret":"returns the original player cooldown value"},{"name":"getAttackedEntity","params":[],"desc":"Returns the entity attacked by the player","ret":"the entity attacked by the player"},{"name":"isCancelled","params":[],"desc":"{@inheritDoc}\n<p>\nIf an attack cooldown event is cancelled, the players attack strength will remain at the same value instead of being reset.","ret":""},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":""}],"desc":"{@inheritDoc}\n<p>\nCancelling this event will prevent the target player from having their cooldown reset from attacking this entity","ret":""}],"desc":"Called when processing a player's attack on an entity when the player's attack strength cooldown is reset"},{"FQCN":"com.destroystokyo.paper.event.player.PlayerInitialSpawnEvent","methods":[],"desc":""},{"FQCN":"com.destroystokyo.paper.event.player.PlayerReadyArrowEvent","methods":[{"name":"getBow","params":[],"desc":"","ret":"the player is using to fire the arrow"},{"name":"getArrow","params":[],"desc":"","ret":"the arrow that is attempting to be used"},{"name":"isCancelled","params":[],"desc":"{@inheritDoc}\n<br>\nWhether use of this arrow is cancelled. On cancel, the server will try the next arrow available and fire another event.","ret":""},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":""}],"desc":"Cancel use of this arrow. On cancel, the server will try the next arrow available and fire another event.","ret":""}],"desc":"Called when a player is firing a bow and the server is choosing an arrow to use."},{"FQCN":"com.destroystokyo.paper.event.player.PlayerConnectionCloseEvent","methods":[{"name":"getPlayerUniqueId","params":[],"desc":"Returns the {@code UUID} of the player disconnecting.","ret":""},{"name":"getPlayerName","params":[],"desc":"Returns the name of the player disconnecting.","ret":""},{"name":"getIpAddress","params":[],"desc":"Returns the player's IP address.","ret":""}],"desc":"<p>\nThis event is invoked when a player has disconnected. It is guaranteed that,\nif the server is in online-mode, that the provided uuid and username have been\nvalidated.\n<p>\nThe event is invoked for players who have not yet logged into the world, whereas\n{@link PlayerQuitEvent} is only invoked on players who have logged into the world.\n<p>\nThe event is invoked for players who have already logged into the world,\nalthough whether or not the player exists in the world at the time of\nfiring is undefined. (That is, whether the plugin can retrieve a Player object\nusing the event parameters is undefined). However, it is guaranteed that this\nevent is invoked AFTER {@link PlayerQuitEvent}, if the player has already logged into the world.\n<p>\nThis event is guaranteed to never fire unless {@link AsyncPlayerPreLoginEvent} has\nbeen fired beforehand, and this event may not be called in parallel with\n{@link AsyncPlayerPreLoginEvent} for the same connection.\n<p>\nCancelling the {@link AsyncPlayerPreLoginEvent} guarantees the corresponding\n{@code PlayerConnectionCloseEvent} is never called.\n<p>\nThe event may be invoked asynchronously or synchronously. Plugins should check\n{@link Event#isAsynchronous()} and handle accordingly."},{"FQCN":"com.destroystokyo.paper.event.player.PlayerStopSpectatingEntityEvent","methods":[{"name":"getSpectatorTarget","params":[],"desc":"Gets the entity that the player is spectating","ret":"The entity the player is currently spectating (before they will stop)."}],"desc":"Triggered when a player stops spectating an entity in spectator mode."},{"FQCN":"com.destroystokyo.paper.event.player.PlayerUseUnknownEntityEvent","methods":[{"name":"getEntityId","params":[],"desc":"Returns the entity id of the unknown entity that was interacted with.","ret":"the entity id of the entity that was interacted with"},{"name":"isAttack","params":[],"desc":"Returns whether the interaction was an attack.","ret":"{@code true} if the player is attacking the entity, {@code false} if the player is interacting with the entity"},{"name":"getHand","params":[],"desc":"Returns the hand used to perform this interaction.","ret":"the hand used to interact"},{"name":"getClickedRelativePosition","params":[],"desc":"Returns the position relative to the entity that was clicked, or {@code null} if not available.\nSee {@link PlayerInteractAtEntityEvent} for more details.","ret":"the position relative to the entity that was clicked, or {@code null} if not available"}],"desc":"Represents an event that is called when a player right-clicks an unknown entity.\nUseful for plugins dealing with virtual entities (entities that don't actually spawned on the server).\n<br>\nThis event may be called multiple times per interaction with different interaction hands\nand with or without the clicked position."},{"FQCN":"com.destroystokyo.paper.event.player.PlayerAdvancementCriterionGrantEvent","methods":[{"name":"getAdvancement","params":[],"desc":"Get the advancement which has been affected.","ret":"affected advancement"},{"name":"getCriterion","params":[],"desc":"Get the criterion which has been granted.","ret":"granted criterion"},{"name":"getAdvancementProgress","params":[],"desc":"Gets the current AdvancementProgress.","ret":"advancement progress"}],"desc":"Called after a player is granted a criteria in an advancement.\nIf cancelled the criteria will be revoked."},{"FQCN":"com.destroystokyo.paper.event.player.PlayerHandshakeEvent","methods":[{"name":"isCancelled","params":[],"desc":"Determines if this event is cancelled.\n<p>\nWhen this event is cancelled, custom handshake logic will not\nbe processed.","ret":"{@code true} if this event is cancelled, {@code false} otherwise"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":"{@code true} if this event is cancelled, {@code false} otherwise"}],"desc":"Sets if this event is cancelled.\n<p>\nWhen this event is cancelled, custom handshake logic will not\nbe processed.","ret":""},{"name":"getOriginalHandshake","params":[],"desc":"Gets the original handshake string.","ret":"the original handshake string"},{"name":"getOriginalSocketAddressHostname","params":[],"desc":"Gets the original socket address hostname.\n\n<p>This does not include the port.</p>\n<p>In cases where this event is manually fired and the plugin wasn't updated yet, the default is {@code \"127.0.0.1\"}.</p>","ret":"the original socket address hostname"},{"name":"getServerHostname","params":[],"desc":"Gets the server hostname string.\n\n<p>This should not include the port.</p>","ret":"the server hostname string"},{"name":"setServerHostname","params":[{"name":"serverHostname","type":"String","desc":"the server hostname string"}],"desc":"Sets the server hostname string.\n\n<p>This should not include the port.</p>","ret":""},{"name":"getSocketAddressHostname","params":[],"desc":"Gets the socket address hostname string.\n\n<p>This should not include the port.</p>","ret":"the socket address hostname string"},{"name":"setSocketAddressHostname","params":[{"name":"socketAddressHostname","type":"String","desc":"the socket address hostname string"}],"desc":"Sets the socket address hostname string.\n\n<p>This should not include the port.</p>","ret":""},{"name":"getUniqueId","params":[],"desc":"Gets the unique id.","ret":"the unique id"},{"name":"setUniqueId","params":[{"name":"uniqueId","type":"UUID","desc":"the unique id"}],"desc":"Sets the unique id.","ret":""},{"name":"getPropertiesJson","params":[],"desc":"Gets the profile properties.\n\n<p>This should be a valid JSON string.</p>","ret":"the profile properties, as JSON"},{"name":"isFailed","params":[],"desc":"Determines if authentication failed.\n<p>\nWhen {@code true}, the client connecting will be disconnected\nwith the {@link #getFailMessage() fail message}.","ret":"{@code true} if authentication failed, {@code false} otherwise"},{"name":"setFailed","params":[{"name":"failed","type":"boolean","desc":"{@code true} if authentication failed, {@code false} otherwise"}],"desc":"Sets if authentication failed and the client should be disconnected.\n<p>\nWhen {@code true}, the client connecting will be disconnected\nwith the {@link #getFailMessage() fail message}.","ret":""},{"name":"setPropertiesJson","params":[{"name":"propertiesJson","type":"String","desc":"the profile properties, as JSON"}],"desc":"Sets the profile properties.\n\n<p>This should be a valid JSON string.</p>","ret":""},{"name":"failMessage","params":[],"desc":"Gets the message to display to the client when authentication fails.","ret":"the message to display to the client"},{"name":"failMessage","params":[{"name":"failMessage","type":"Component","desc":"the message to display to the client"}],"desc":"Sets the message to display to the client when authentication fails.","ret":""},{"name":"getFailMessage","params":[],"desc":"Gets the message to display to the client when authentication fails.","ret":"the message to display to the client"},{"name":"setFailMessage","params":[{"name":"failMessage","type":"String","desc":"the message to display to the client"}],"desc":"Sets the message to display to the client when authentication fails.","ret":""}],"desc":"This event is fired during a player handshake.\n<p>\nIf there are no listeners listening to this event, the logic default\nto your server platform will be run.\n\n<p>WARNING: TAMPERING WITH THIS EVENT CAN BE DANGEROUS</p>"},{"FQCN":"com.destroystokyo.paper.event.player.PlayerStartSpectatingEntityEvent","methods":[{"name":"getCurrentSpectatorTarget","params":[],"desc":"Gets the entity that the player is currently spectating or themselves if they weren't spectating anything","ret":"The entity the player is currently spectating (before they start spectating the new target)."},{"name":"getNewSpectatorTarget","params":[],"desc":"Gets the new entity that the player will now be spectating","ret":"The entity the player is now going to be spectating."}],"desc":"Triggered when a player starts spectating an entity in spectator mode."},{"FQCN":"com.destroystokyo.paper.event.player.PlayerSetSpawnEvent","methods":[{"name":"getCause","params":[],"desc":"Gets the cause of this event.","ret":"the cause"},{"name":"getLocation","params":[],"desc":"Gets the location that the spawn is set to. The yaw\nof this location is the spawn angle. Mutating this location\nwill change the resulting spawn point of the player. Use\n{@link Location#clone()} to get a copy of this location.","ret":"the spawn location, or {@code null} if removing the location"},{"name":"setLocation","params":[{"name":"location","type":"Location","desc":"the spawn location, or {@code null} to remove the spawn location"}],"desc":"Sets the location to be set as the spawn location. The yaw\nof this location is the spawn angle.","ret":""},{"name":"isForced","params":[],"desc":"Gets if this is a force spawn location","ret":"{@code true} if forced"},{"name":"setForced","params":[{"name":"forced","type":"boolean","desc":"{@code true} to force"}],"desc":"Sets if this is a forced spawn location","ret":""},{"name":"willNotifyPlayer","params":[],"desc":"Gets if this action will notify the player their spawn\nhas been set.","ret":"{@code true} to notify"},{"name":"setNotifyPlayer","params":[{"name":"notifyPlayer","type":"boolean","desc":"{@code true} to notify"}],"desc":"Sets if this action will notify the player that their spawn\nhas been set.","ret":""},{"name":"getNotification","params":[],"desc":"Gets the notification message that will be sent to the player\nif {@link #willNotifyPlayer()} returns true.","ret":"{@code null} if no notification"},{"name":"setNotification","params":[{"name":"notification","type":"Component","desc":"{@code null} to send no message"}],"desc":"Sets the notification message that will be sent to the player.","ret":""}],"desc":"Called when a player's spawn is set, either by themselves or otherwise.\n<br>\nCancelling this event will prevent the spawn from being set."},{"FQCN":"com.destroystokyo.paper.event.player.PlayerLocaleChangeEvent","methods":[{"name":"getOldLocale","params":[],"desc":"Gets the locale the player switched from.","ret":"player's old locale"},{"name":"getNewLocale","params":[],"desc":"Gets the locale the player is changed to.","ret":"player's new locale"}],"desc":"Called when the locale of the player is changed."},{"FQCN":"com.destroystokyo.paper.event.player.PlayerPickupExperienceEvent","methods":[{"name":"getExperienceOrb","params":[],"desc":"","ret":"Returns the Orb that the player is picking up"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":""}],"desc":"{@inheritDoc}\n<br>\nIf {@code true}, cancels picking up the experience orb, leaving it in the world","ret":""}],"desc":"Fired when a player is attempting to pick up an experience orb"},{"FQCN":"com.destroystokyo.paper.event.player.PlayerLaunchProjectileEvent","methods":[{"name":"getProjectile","params":[],"desc":"Gets the projectile which will be launched by this event","ret":"the launched projectile"},{"name":"getItemStack","params":[],"desc":"Get the ItemStack used to fire the projectile","ret":"The ItemStack used"},{"name":"shouldConsume","params":[],"desc":"Get whether to consume the ItemStack or not","ret":"{@code true} to consume"},{"name":"setShouldConsume","params":[{"name":"consumeItem","type":"boolean","desc":"{@code true} to consume"}],"desc":"Set whether to consume the ItemStack or not","ret":""}],"desc":"Called when a player shoots a projectile.\n<p>\nNotably this event is not called for arrows as the player does not launch them, rather shoots them with the help\nof a bow or crossbow. A plugin may listen to {@link EntityShootBowEvent}\nfor these actions instead."},{"FQCN":"com.destroystokyo.paper.event.player.IllegalPacketEvent","methods":[],"desc":""},{"FQCN":"com.destroystokyo.paper.event.player.PlayerClientOptionsChangeEvent","methods":[],"desc":"Called when the player changes their client settings"},{"FQCN":"com.destroystokyo.paper.event.player.PlayerJumpEvent","methods":[{"name":"isCancelled","params":[],"desc":"{@inheritDoc}\n<p>\nIf a jump event is cancelled, the player will be moved or\nteleported back to the Location as defined by {@link #getFrom()}. This will not\nfire an event","ret":"{@code true} if this event is cancelled"},{"name":"setCancelled","params":[{"name":"cancel","type":"boolean","desc":"{@code true} if you wish to cancel this event"}],"desc":"{@inheritDoc}\n<p>\nIf a jump event is cancelled, the player will be moved or\nteleported back to the Location as defined by {@link #getFrom()}. This will not\nfire an event","ret":""},{"name":"getFrom","params":[],"desc":"Gets the location this player jumped from","ret":"Location the player jumped from"},{"name":"setFrom","params":[{"name":"from","type":"Location","desc":"New location to mark as the players previous location"}],"desc":"Sets the location to mark as where the player jumped from","ret":""},{"name":"getTo","params":[],"desc":"Gets the location this player jumped to\n<p>\nThis information is based on what the client sends, it typically\nhas little relation to the arc of the jump at any given point.","ret":"Location the player jumped to"}],"desc":"Called when the server detects the player is jumping.\n<p>\nAdded to avoid the overhead and special case logic that many plugins use\nwhen checking for jumps via {@link PlayerMoveEvent}, this event is fired whenever\nthe server detects that the player is jumping."},{"FQCN":"com.destroystokyo.paper.event.player.PlayerArmorChangeEvent","methods":[{"name":"getSlotType","params":[],"desc":"Gets the type of slot being altered.","ret":"type of slot being altered"},{"name":"getOldItem","params":[],"desc":"Gets the existing item that's being replaced","ret":"old item"},{"name":"getNewItem","params":[],"desc":"Gets the new item that's replacing the old","ret":"new item"}],"desc":"Called when the player themselves change their armor items\n<p>\nNot currently called for environmental factors though it <strong>MAY BE IN THE FUTURE</strong>"},{"FQCN":"com.destroystokyo.paper.NamespacedTag","methods":[{"name":"randomKey","params":[],"desc":"Return a new random key in the {@link #BUKKIT} namespace.","ret":"new key"},{"name":"minecraft","params":[{"name":"key","type":"String","desc":"the key to use"}],"desc":"Get a key in the Minecraft namespace.","ret":"new key in the Minecraft namespace"}],"desc":""},{"FQCN":"com.destroystokyo.paper.loottable.LootableEntityInventory","methods":[{"name":"getEntity","params":[],"desc":"Gets the entity that is lootable","ret":"The Entity"}],"desc":"Represents an Inventory that can generate loot, such as Minecarts inside of Mineshafts"},{"FQCN":"com.destroystokyo.paper.loottable.LootableInventoryReplenishEvent","methods":[],"desc":""},{"FQCN":"com.destroystokyo.paper.loottable.LootableInventory","methods":[{"name":"isRefillEnabled","params":[],"desc":"Server owners have to enable whether or not an object in a world should refill","ret":"If the world this inventory is currently in has Replenishable Lootables enabled"},{"name":"hasBeenFilled","params":[],"desc":"Whether or not this object has ever been filled","ret":"Has ever been filled"},{"name":"hasPlayerLooted","params":[{"name":"player","type":"Player","desc":"The player to check"}],"desc":"Has this player ever looted this block","ret":"Whether or not this player has looted this block"},{"name":"canPlayerLoot","params":[{"name":"player","type":"UUID","desc":"the player to check"}],"desc":"Checks if this player can loot this block. Takes into account the \"restrict player reloot\" settings","ret":"Whether this player can loot this block"},{"name":"hasPlayerLooted","params":[{"name":"player","type":"UUID","desc":"The player to check"}],"desc":"Has this player ever looted this block","ret":"Whether or not this player has looted this block"},{"name":"getLastLooted","params":[{"name":"player","type":"Player","desc":"The player to check"}],"desc":"Gets the timestamp, in milliseconds, of when the player last looted this object","ret":"Timestamp last looted, or null if player has not looted this object"},{"name":"getLastLooted","params":[{"name":"player","type":"UUID","desc":"The player to check"}],"desc":"Gets the timestamp, in milliseconds, of when the player last looted this object","ret":"Timestamp last looted, or null if player has not looted this object"},{"name":"setHasPlayerLooted","params":[{"name":"player","type":"Player","desc":"The player to change state for"},{"name":"looted","type":"boolean","desc":"true to add player to looted list, false to remove"}],"desc":"Change the state of whether or not a player has looted this block","ret":"The previous state of whether the player had looted this or not"},{"name":"setHasPlayerLooted","params":[{"name":"player","type":"UUID","desc":"The player to change state for"},{"name":"looted","type":"boolean","desc":"true to add player to looted list, false to remove"}],"desc":"Change the state of whether or not a player has looted this block","ret":"The previous state of whether the player had looted this or not"},{"name":"hasPendingRefill","params":[],"desc":"Returns Whether or not this object has been filled and now has a pending refill","ret":"Has pending refill"},{"name":"getLastFilled","params":[],"desc":"Gets the timestamp in milliseconds that the Lootable object was last refilled","ret":"-1 if it was never refilled, or timestamp in milliseconds"},{"name":"getNextRefill","params":[],"desc":"Gets the timestamp in milliseconds that the Lootable object will refill","ret":"-1 if it is not scheduled for refill, or timestamp in milliseconds"},{"name":"setNextRefill","params":[{"name":"refillAt","type":"long","desc":"timestamp in milliseconds. -1 to clear next refill"}],"desc":"Sets the timestamp in milliseconds of the next refill for this object","ret":"The previous scheduled time to refill, or -1 if was not scheduled"}],"desc":"Represents an Inventory that contains a Loot Table associated to it that will\nautomatically fill on first open.\n\nA new feature and API is provided to support automatically refreshing the contents\nof the inventory based on that Loot Table after a configurable amount of time has passed.\n\nThe behavior of how the Inventory is filled based on the loot table may vary based\non Minecraft versions and the Loot Table feature."},{"FQCN":"com.destroystokyo.paper.loottable.LootableBlockInventory","methods":[{"name":"getBlock","params":[],"desc":"Gets the block that is lootable","ret":"The Block"}],"desc":"Represents an Inventory that can generate loot, such as Chests inside of Fortresses and Mineshafts"},{"FQCN":"com.destroystokyo.paper.block.TargetBlockInfo","methods":[{"name":"getBlock","params":[],"desc":"Get the block that is targeted","ret":"Targeted block"},{"name":"getBlockFace","params":[],"desc":"Get the targeted BlockFace","ret":"Targeted blockface"},{"name":"getRelativeBlock","params":[],"desc":"Get the relative Block to the targeted block on the side it is targeted at","ret":"Block relative to targeted block"}],"desc":"Represents information about a targeted block"},{"FQCN":"com.destroystokyo.paper.block.BlockSoundGroup","methods":[{"name":"getBreakSound","params":[],"desc":"Gets the sound that plays when breaking this block","ret":"The break sound"},{"name":"getStepSound","params":[],"desc":"Gets the sound that plays when stepping on this block","ret":"The step sound"},{"name":"getPlaceSound","params":[],"desc":"Gets the sound that plays when placing this block","ret":"The place sound"},{"name":"getHitSound","params":[],"desc":"Gets the sound that plays when hitting this block","ret":"The hit sound"},{"name":"getFallSound","params":[],"desc":"Gets the sound that plays when this block falls","ret":"The fall sound"}],"desc":"Represents the sounds that a {@link Block} makes in certain situations\n<p>\nThe sound group includes break, step, place, hit, and fall sounds."}]