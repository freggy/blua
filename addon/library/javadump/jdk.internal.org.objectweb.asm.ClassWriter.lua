---@meta

---@class jdk.internal.org.objectweb.asm.ClassWriter: jdk.internal.org.objectweb.asm.ClassVisitor 
local ClassWriter = {}
---@param flags int some option flags. Must be zero or more of {@link #COMPUTE_MAXS} and {@link     #COMPUTE_FRAMES}.
---@return boolean # true if all the given flags, or more, were passed to the constructor.
function ClassWriter.hasFlags(flags) end

---@param version int 
---@param access int 
---@param name java.lang.String 
---@param signature java.lang.String 
---@param superName java.lang.String 
---@param interfaces String[] 
---@return void # 
function ClassWriter.visit(version,access,name,signature,superName,interfaces) end

---@param file java.lang.String 
---@param debug java.lang.String 
---@return void # 
function ClassWriter.visitSource(file,debug) end

---@param name java.lang.String 
---@param access int 
---@param version java.lang.String 
---@return jdk.internal.org.objectweb.asm.ModuleVisitor # 
function ClassWriter.visitModule(name,access,version) end

---@param nestHost java.lang.String 
---@return void # 
function ClassWriter.visitNestHost(nestHost) end

---@param owner java.lang.String 
---@param name java.lang.String 
---@param descriptor java.lang.String 
---@return void # 
function ClassWriter.visitOuterClass(owner,name,descriptor) end

---@param descriptor java.lang.String 
---@param visible boolean 
---@return jdk.internal.org.objectweb.asm.AnnotationVisitor # 
function ClassWriter.visitAnnotation(descriptor,visible) end

---@param typeRef int 
---@param typePath jdk.internal.org.objectweb.asm.TypePath 
---@param descriptor java.lang.String 
---@param visible boolean 
---@return jdk.internal.org.objectweb.asm.AnnotationVisitor # 
function ClassWriter.visitTypeAnnotation(typeRef,typePath,descriptor,visible) end

---@param attribute jdk.internal.org.objectweb.asm.Attribute 
---@return void # 
function ClassWriter.visitAttribute(attribute) end

---@param nestMember java.lang.String 
---@return void # 
function ClassWriter.visitNestMember(nestMember) end

---@param permittedSubclass java.lang.String 
---@return void # 
function ClassWriter.visitPermittedSubclass(permittedSubclass) end

---@param name java.lang.String 
---@param outerName java.lang.String 
---@param innerName java.lang.String 
---@param access int 
---@return void # 
function ClassWriter.visitInnerClass(name,outerName,innerName,access) end

---@param name java.lang.String 
---@param descriptor java.lang.String 
---@param signature java.lang.String 
---@return jdk.internal.org.objectweb.asm.RecordComponentVisitor # 
function ClassWriter.visitRecordComponent(name,descriptor,signature) end

---@param access int 
---@param name java.lang.String 
---@param descriptor java.lang.String 
---@param signature java.lang.String 
---@param value java.lang.Object 
---@return jdk.internal.org.objectweb.asm.FieldVisitor # 
function ClassWriter.visitField(access,name,descriptor,signature,value) end

---@param access int 
---@param name java.lang.String 
---@param descriptor java.lang.String 
---@param signature java.lang.String 
---@param exceptions String[] 
---@return jdk.internal.org.objectweb.asm.MethodVisitor # 
function ClassWriter.visitMethod(access,name,descriptor,signature,exceptions) end

---@return void # 
function ClassWriter.visitEnd() end

---@return byte[] # the binary content of the JVMS ClassFile structure that was built by this ClassWriter.
function ClassWriter.toByteArray() end

---@param classFile byte[] a class file containing ASM specific instructions, generated by this     ClassWriter.
---@param hasFrames boolean whether there is at least one stack map frames in 'classFile'.
---@return byte[] # an equivalent of 'classFile', with the ASM specific instructions replaced with standard     ones.
function ClassWriter.replaceAsmInstructions(classFile,hasFrames) end

---@return Attribute[] # the prototypes of the attributes used by this class, its fields and its methods.
function ClassWriter.getAttributePrototypes() end

---@param value java.lang.Object the value of the constant to be added to the constant pool. This parameter must be     an {@link Integer}, a {@link Float}, a {@link Long}, a {@link Double} or a {@link String}.
---@return int # the index of a new or already existing constant item with the given value.
function ClassWriter.newConst(value) end

---@param value java.lang.String 
---@return int # 
function ClassWriter.newUTF8(value) end

---@param value java.lang.String the internal name of the class.
---@return int # the index of a new or already existing class reference item.
function ClassWriter.newClass(value) end

---@param methodDescriptor java.lang.String method descriptor of the method type.
---@return int # the index of a new or already existing method type reference item.
function ClassWriter.newMethodType(methodDescriptor) end

---@param moduleName java.lang.String name of the module.
---@return int # the index of a new or already existing module reference item.
function ClassWriter.newModule(moduleName) end

---@param packageName java.lang.String name of the package in its internal form.
---@return int # the index of a new or already existing module reference item.
function ClassWriter.newPackage(packageName) end

---@param tag int the kind of this handle. Must be {@link Opcodes#H_GETFIELD}, {@link     Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link     Opcodes#H_INVOKEVIRTUAL}, {@link Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL},     {@link Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.
---@param owner java.lang.String the internal name of the field or method owner class.
---@param name java.lang.String the name of the field or method.
---@param descriptor java.lang.String the descriptor of the field or method.
---@return int # the index of a new or already existing method type reference item.
function ClassWriter.newHandle(tag,owner,name,descriptor) end

---@param tag int the kind of this handle. Must be {@link Opcodes#H_GETFIELD}, {@link     Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link     Opcodes#H_INVOKEVIRTUAL}, {@link Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL},     {@link Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.
---@param owner java.lang.String the internal name of the field or method owner class.
---@param name java.lang.String the name of the field or method.
---@param descriptor java.lang.String the descriptor of the field or method.
---@param isInterface boolean true if the owner is an interface.
---@return int # the index of a new or already existing method type reference item.
function ClassWriter.newHandle(tag,owner,name,descriptor,isInterface) end

---@param name java.lang.String name of the invoked method.
---@param descriptor java.lang.String field descriptor of the constant type.
---@param bootstrapMethodHandle jdk.internal.org.objectweb.asm.Handle the bootstrap method.
---@param bootstrapMethodArguments java.lang.Object the bootstrap method constant arguments.
---@return int # the index of a new or already existing dynamic constant reference item.
function ClassWriter.newConstantDynamic(name,descriptor,bootstrapMethodHandle,bootstrapMethodArguments) end

---@param name java.lang.String name of the invoked method.
---@param descriptor java.lang.String descriptor of the invoke method.
---@param bootstrapMethodHandle jdk.internal.org.objectweb.asm.Handle the bootstrap method.
---@param bootstrapMethodArguments java.lang.Object the bootstrap method constant arguments.
---@return int # the index of a new or already existing invokedynamic reference item.
function ClassWriter.newInvokeDynamic(name,descriptor,bootstrapMethodHandle,bootstrapMethodArguments) end

---@param owner java.lang.String the internal name of the field's owner class.
---@param name java.lang.String the field's name.
---@param descriptor java.lang.String the field's descriptor.
---@return int # the index of a new or already existing field reference item.
function ClassWriter.newField(owner,name,descriptor) end

---@param owner java.lang.String the internal name of the method's owner class.
---@param name java.lang.String the method's name.
---@param descriptor java.lang.String the method's descriptor.
---@param isInterface boolean {@literal true} if {@code owner} is an interface.
---@return int # the index of a new or already existing method reference item.
function ClassWriter.newMethod(owner,name,descriptor,isInterface) end

---@param name java.lang.String a name.
---@param descriptor java.lang.String a type descriptor.
---@return int # the index of a new or already existing name and type item.
function ClassWriter.newNameType(name,descriptor) end

---@param type1 java.lang.String the internal name of a class.
---@param type2 java.lang.String the internal name of another class.
---@return java.lang.String # the internal name of the common super class of the two given classes.
function ClassWriter.getCommonSuperClass(type1,type2) end

---@return java.lang.ClassLoader # ClassLoader
function ClassWriter.getClassLoader() end

